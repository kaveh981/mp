using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using MapiOnline.Models;
using System.Web.Security;
using System.Data.Objects.DataClasses;
using System.Runtime.Remoting.Contexts;
using System.Xml.Linq;
using System.Data.Objects;
using MvcInternationalization.Controllers;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using System.Net.Security;
using System.Data;
using System.Web.UI.WebControls;
using System.IO;
using System.Web.UI;
using System.Globalization;
using System.Web.Profile;

namespace MapiOnline.Controllers
{
    public class ManagementController : Controller
    {
        MapiDBEntities db = new MapiDBEntities();
        //
        // GET: /Management/

        string appName = Membership.ApplicationName;
        public ActionResult Index()
        {
            return View();
        }
        public ActionResult resetApp()
        {
            try
            {
                appName = db.p_Person.Single(p => p.Code == User.Identity.Name && p.AccountId == p.p_Employee.AccountId).ac_Account.aspnet_Applications.ApplicationName;
                // Session["appName"] = new MapiDBEntities().p_Person.Single(p => p.Code == User.Identity.Name && p.PersonId == p.p_Employee.PersonId).aspnet_Applications.ApplicationName;
                return Json("done");
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }
        [HttpPost]
        public ActionResult UserLogin(string userName, string password)
        {


            string lowerUserNamr = userName.ToLower();
            try
            {
                if (DateTime.Now > DateTime.Parse("12/12/2015"))
                {
                    return Json(new { logged = false, errorMessage = "this program is expired please contact 09171111733 !" });
                }
                //UserSignOut();
                //appName = "demo3";
                //Membership.ApplicationName = appName;
                //string pass = Membership.GetUser("demo").GetPassword();
                // appName = "/";
                if (User.Identity.IsAuthenticated)
                {
                    p_Person a = new p_Person();
                    if (db.p_Person.Count(p => p.Code == User.Identity.Name && p.AccountId == p.p_Employee.AccountId) > 0)
                    {
                        a = db.p_Person.Single(p => p.Code == User.Identity.Name && p.AccountId == p.p_Employee.AccountId);
                        //  var a = db.p_Person.Single(p => p.Code == User.Identity.Name && p.PersonId == p.p_Employee.PersonId);
                        // var a = db.p_Person.Where(p => p.Code == User.Identity.Name && p.PersonId == p.p_Employee.PersonId).Select(s => new { code = s.Code, name = s.Name, family = s.Family, logged = true, appName = s.aspnet_Applications.ApplicationName }).FirstOrDefault();
                        appName = a.ac_Account.aspnet_Applications.ApplicationName;

                        if (a == null)
                        {
                            return Json(new { name = "Admin", family = "", logged = true, isAdmin = true });
                        }
                        else
                            return Json(new { code = a.Code, name = a.Name, family = a.Family, logged = true });
                    }
                    else
                    {
                        var d = db.aspnet_Users.Single(u => u.LoweredUserName == User.Identity.Name);
                        appName = d.aspnet_Applications.ApplicationName;
                        return Json(new { name = "Admin", family = "", logged = true, isAdmin = true });
                    }
                }

                else if (string.IsNullOrEmpty(userName) && string.IsNullOrEmpty(password))
                    return Json(new { isSignout = true, logged = false });

                else if (db.p_Person.Count(p => p.Code == userName && p.AccountId == p.p_Employee.AccountId) > 0)
                {
                    p_Person a = new p_Person();
                    //  var d = db.aspnet_Users.Single(u => u.LoweredUserName == lowerUserNamr);
                    a = db.p_Person.Single(p => p.Code == userName && p.AccountId == p.p_Employee.AccountId);
                    //Membership.ApplicationName = a.ac_Account.aspnet_Applications.ApplicationName;
                    appName = Membership.ApplicationName;
                    // var a = db.p_Person.Where(p => p.Code == userName && p.PersonId == p.p_Employee.PersonId).Select(s => new { code = s.Code, name = s.Name, family = s.Family, logged = true, appName = s.aspnet_Applications.ApplicationName }).FirstOrDefault();

                    var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;
                    // 
                    if (DateTime.Now > appDetails.ExpieryDate)
                    {
                        return Json(new { logged = false, errorMessage = "this program is expired please contact 09171111733 !" });
                    }
                    if (Membership.ValidateUser(userName, password))
                    {
                        FormsAuthentication.Authenticate(userName, password);
                        FormsAuthentication.SetAuthCookie(userName, false);

                        if (utility.CheckForInternetConnection())
                        {

                            System.Threading.Thread l = new System.Threading.Thread(utility.GetCountryByIPForManagement);
                            object[] lParameters = new object[] { utility.GetUserIP(), Server.MapPath("~/Data/mLogs.xml"), Request.Browser.Type, userName, appName };
                            l.Start(lParameters);

                            System.Threading.Thread t = new System.Threading.Thread(utility.sendEmail);
                            object[] parameters = new object[] { 
                        "kv_fr@yahoo.com",
                        userName + " rose " + DateTime.Now + " App: " + appName + " IP:" + utility.GetUserIP() + " Browser: " +  Request.Browser.Type,
                        userName + " rose " + DateTime.Now + " App: " + appName + " IP:" + utility.GetUserIP() + " Browser: " + Request.Browser.Type,
                        appDetails.Email,
                        appDetails.EmailPass,
                        appDetails.Port,
                        appDetails.Host
                    };
                            t.Start(parameters);
                        }

                        if (User.IsInRole("Admin"))
                        {
                            //  RoleProvider provider = Roles.Providers["ApplicationMembership"];
                            var currentUser = db.aspnet_Users.Single(u => u.UserName == userName && u.aspnet_Applications.ApplicationName == appName);
                            if (currentUser.aspnet_Roles.Count < 1)
                            {
                                string[] roles = { "Admin", "Employee", "canAddEmployee" };
                                foreach (var item in roles)
                                {
                                    currentUser.aspnet_Roles.Add(db.aspnet_Roles.Single(r => r.RoleName == item));
                                }
                                db.SaveChanges();
                                //RoleProvider mainProvider = Roles.Providers["ApplicationMembership"];
                                //provider.AddUsersToRoles(new string[] { userName.ToLower() }, new string[] { "canChangeRole", "Counter", "Admin", "Shop",
                                //"candDeleteCounter", "Employee", "canDeleteEmployee", "canAddCounterForEmployee","canAddCounter","canAddEmployee",
                                //"canDeleteCounterForEmployee","canDeleteShopForEmployee","canChangePassword","canAddShopForEmployee" });
                            }
                        }
                        //  var a = db.p_Person.Where(p => p.Code == userName && p.aspnet_Applications.ApplicationName == appName).Select(s => new { code = s.Code, name = s.Name, family = s.Family, logged = true }).FirstOrDefault();
                        if (a == null)
                        {
                            return Json(new { name = "Admin", family = "", logged = true, isAdmin = true });
                        }
                        else
                            return Json(new { code = a.Code, name = a.Name, family = a.Family, logged = true });
                    }
                    else
                        return Json(new { logged = false, errorMessage = "WrongUserOrPass" });
                }
                else if (db.aspnet_Users.Count(u => u.LoweredUserName == lowerUserNamr) > 0)
                {
                    //  p_Person a = new p_Person();
                    var d = db.aspnet_Users.Single(u => u.LoweredUserName == lowerUserNamr);
                    //   a = db.p_Person.Single(p => p.Code == userName && p.PersonId == p.p_Employee.PersonId);
                    // var a = db.p_Person.Where(p => p.Code == userName && p.PersonId == p.p_Employee.PersonId).Select(s => new { code = s.Code, name = s.Name, family = s.Family, logged = true, appName = s.aspnet_Applications.ApplicationName }).FirstOrDefault();

                    var appDetails = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationDetail;
                    // 

                    if (Membership.ValidateUser(userName, password))
                    {
                        FormsAuthentication.Authenticate(userName, password);
                        FormsAuthentication.SetAuthCookie(userName, false);

                        if (utility.CheckForInternetConnection())
                        {
                            System.Threading.Thread l = new System.Threading.Thread(utility.GetCountryByIPForManagement);
                            object[] lParameters = new object[] { utility.GetUserIP(), Server.MapPath("~/Data/mLogs.xml"), Request.Browser.Type, userName, appName };
                            l.Start(lParameters);

                            System.Threading.Thread t = new System.Threading.Thread(utility.sendEmail);
                            object[] parameters = new object[] { 
                        "kv_fr@yahoo.com",
                        userName + " rose " + DateTime.Now + " App: " + appName + " IP:" +utility.GetUserIP() + " Browser: " + Request.Browser.Type,
                        userName + " rose " + DateTime.Now + " App: " + appName + " IP:" + utility.GetUserIP() + " Browser: " + Request.Browser.Type,
                        appDetails.Email,
                        appDetails.EmailPass,
                        appDetails.Port,
                        appDetails.Host
                    };
                            t.Start(parameters);
                        }

                        if (User.IsInRole("Admin"))
                        {
                            var currentUser = d;
                            if (currentUser.aspnet_Roles.Count < 1)
                            {
                                string[] roles = { "Admin", "Employee", "canAddEmployee" };
                                foreach (var item in roles)
                                {
                                    currentUser.aspnet_Roles.Add(db.aspnet_Roles.Single(r => r.RoleName == item));
                                }
                                db.SaveChanges();
                            }
                        }
                        return Json(new { name = "Admin", family = "", logged = true, isAdmin = true });

                    }
                    else
                        return Json(new { logged = false, errorMessage = "WrongUserOrPass" });

                }
                else
                    return Json(new { logged = false, errorMessage = "WrongUserName" });
            }
            catch (Exception ex)
            {
                return Json(new { errorMessage = ex.Message + ex.Data.ToString() + ex.HelpLink + ex.Source + ex.StackTrace + ex.TargetSite.ToString() });
            }
        }
        //onlinestore
        #region

        public ActionResult getMenu()
        {
            XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Menu/menu.xml"));

            var res = xmlDoc.Elements("root").Elements("siteMapNodeRoot").Where(rol => (rol.Attribute("notShow") == null) && db.aspnet_Users.Single(u => u.UserName == User.Identity.Name && u.aspnet_Applications.ApplicationName == appName).aspnet_Roles.Select(r => r.RoleName).Contains(rol.Attribute("roles").Value))
                 .Select(s => new
                 {
                     roles = s.Attribute("roles").Value.ToString(),
                     title = s.Attribute("title").Value,
                     id = s.Attribute("id").Value,
                     subMenu = s.Attribute("subMenu").Value,
                     url = s.Attribute("url").Value,
                     active = s.Attribute("active") == null ? "false" : s.Attribute("active").Value,
                     sub = s.Elements("siteMapNode").Where(at => at.Attribute("id").Value != s.Attribute("id").Value && db.aspnet_Users.Single(u => u.UserName == User.Identity.Name && u.aspnet_Applications.ApplicationName == appName).aspnet_Roles.Select(r => r.RoleName).Contains(at.Attribute("roles").Value))
                     .Select(c => new
                     {
                         active = c.Attribute("active") == null ? "false" : c.Attribute("active").Value,
                         url = c.Attribute("url").Value,
                         title = c.Attribute("title").Value,
                         id = c.Attribute("id").Value,
                         size = c.Attribute("size") != null ? c.Attribute("size").Value : "auto"
                     })
                 });
            return Json(res);
        }

        public ActionResult getAllSubMenu()
        {
            XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Menu/menu.xml"));
            var res = xmlDoc.Elements("root").Elements("siteMapNodeRoot").Descendants().Where(m => m.Attribute("isSubTab") != null && m.Attribute("isSubTab").Value == "true")
               .Select(e => new
               {
                   active = e.Attribute("active") == null ? "false" : e.Attribute("active").Value,
                   subMenu = e.Attribute("subMenu") == null ? "tab" : e.Attribute("subMenu").Value,
                   root = e.Attribute("id").Value,//.SingleOrDefault(m => m.Attribute("isSubTab") != null && m.Attribute("isSubTab").Value == "true").Attribute("id"),
                   sub = e.Elements("rightMenu").Where(v => db.aspnet_Users.Single(u => u.UserName == User.Identity.Name && u.aspnet_Applications.ApplicationName == appName).aspnet_Roles.Select(r => r.RoleName).Contains(v.Attribute("roles").Value))
                   .Select(s => new
                   {
                       roles = s.Attribute("roles").Value.ToString(),
                       title = s.Attribute("title").Value,
                       id = s.Attribute("id").Value,
                       url = s.Attribute("url").Value

                   })
               });
            return Json(res);
        }

        public ActionResult AddMenu(string menuName, bool isLink, string menuLocation, string linkTo, bool show, string lang, bool newPage, int? parentId)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditOnlineMenu"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Menu.xml"));
                int sid = 1;
                if (xmlDoc.Element("root").Descendants("Content").Count() > 0)
                    sid = (int.Parse(xmlDoc.Element("root").Descendants("Content").OrderByDescending(o => Convert.ToInt32(o.Attribute("Id").Value)).FirstOrDefault().Attribute("Id").Value) + 1);
                if (parentId == null)
                {
                    xmlDoc.Element("root").Add(new XElement("Content", new XElement("Value"), new XAttribute("Id", sid), new XAttribute("order", sid), new XAttribute("menuName", menuName), new XAttribute("isLink", isLink)
                        , new XAttribute("menuLocation", menuLocation), new XAttribute("newPage", newPage), new XAttribute("linkTo", linkTo), new XAttribute("show", show), new XAttribute("lang", lang)));
                }
                else
                {
                    xmlDoc.Element("root").Descendants("Content").Single(t => t.Attribute("Id").Value == parentId.ToString()).Add(new XElement("Content", new XElement("Value"), new XAttribute("Id", sid), new XAttribute("order", sid), new XAttribute("menuName", menuName), new XAttribute("isLink", isLink)
                                            , new XAttribute("menuLocation", menuLocation), new XAttribute("newPage", newPage), new XAttribute("linkTo", linkTo), new XAttribute("show", show), new XAttribute("lang", lang)));
                }
                xmlDoc.Save(Server.MapPath("~/Data/Menu.xml"));
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }

        }


        public ActionResult DeleteMenu(int menuId)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditOnlineMenu"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Menu.xml"));
                xmlDoc.Element("root").Descendants("Content").Single(t => t.Attribute("Id").Value == menuId.ToString()).Remove();
                xmlDoc.Save(Server.MapPath("~/Data/Menu.xml"));
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }

        }

        public ActionResult AddOrEditMenu()
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditOnlineMenu"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                string menuLocation = !string.IsNullOrEmpty(Request["select_menuLocation"]) ? (Convert.ToInt32(Request["select_menuLocation"]) == 0 ? "side" : "bottom") : "disable";
                string selectedId = string.IsNullOrEmpty(Request["hi_SelectedParentMenuId"]) ? "0" : Request["hi_SelectedParentMenuId"].ToString();
                bool isLink = string.IsNullOrEmpty(Request["chk_islink"]) ? false : true;
                bool show = string.IsNullOrEmpty(Request["chk_Show"]) ? false : true;
                bool newPage = string.IsNullOrEmpty(Request["chk_newPage"]) ? false : true;
                string menuName = Request["txt_Menuname"].ToString();
                string linkTo = Request["txta_linkTo"].ToString();
                string lang = Request["txt_lang"].ToString();
                bool isEdit = string.IsNullOrEmpty(Request["hi_isEdit"]) ? false : Convert.ToBoolean(Request["hi_isEdit"]);
                if (isEdit)
                {
                    XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Menu.xml"));
                    var content = xmlDoc.Element("root").Descendants("Content").Single(t => t.Attribute("Id").Value == selectedId);
                    content.SetAttributeValue("menuName", menuName);
                    content.SetAttributeValue("isLink", isLink);
                    if (menuLocation != "disable")
                    {
                        content.SetAttributeValue("menuLocation", menuLocation);
                        var q = content.Descendants("Content");
                        foreach (var item in q)
                        {
                            item.SetAttributeValue("menuLocation", menuLocation);
                        }
                    }
                    content.SetAttributeValue("linkTo", linkTo);
                    content.SetAttributeValue("show", show);
                    content.SetAttributeValue("newPage", newPage);
                    content.SetAttributeValue("lang", lang);
                    xmlDoc.Save(Server.MapPath("~/Data/Menu.xml"));
                    return Json(new { isDone = true, msg = "oK", isEdit = true, name = menuName, isCheck = show, id = selectedId });
                }
                else
                {
                    XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Menu.xml"));
                    int sid = 1;
                    if (xmlDoc.Element("root").Descendants("Content").Count() > 0)
                        sid = (int.Parse(xmlDoc.Element("root").Descendants("Content").OrderByDescending(o => Convert.ToInt32(o.Attribute("Id").Value)).FirstOrDefault().Attribute("Id").Value) + 1);
                    if (selectedId == "0")
                    {
                        xmlDoc.Element("root").Add(new XElement("Content", new XElement("Value"), new XAttribute("Id", sid), new XAttribute("order", sid), new XAttribute("menuName", menuName), new XAttribute("isLink", isLink)
                            , new XAttribute("menuLocation", menuLocation), new XAttribute("newPage", newPage), new XAttribute("linkTo", linkTo), new XAttribute("show", show), new XAttribute("lang", lang)));
                    }
                    else
                    {
                        xmlDoc.Element("root").Descendants("Content").Single(t => t.Attribute("Id").Value == selectedId).Add(new XElement("Content", new XElement("Value"), new XAttribute("Id", sid), new XAttribute("order", sid), new XAttribute("menuName", menuName), new XAttribute("isLink", isLink)
                                                , new XAttribute("menuLocation", menuLocation), new XAttribute("newPage", newPage), new XAttribute("linkTo", linkTo), new XAttribute("show", show), new XAttribute("lang", lang)));
                    }
                    xmlDoc.Save(Server.MapPath("~/Data/Menu.xml"));
                    return Json(new { isDone = true, msg = "oK", isEdit = false, name = menuName, isCheck = show, id = sid });
                }
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
        }
        public ActionResult getTreeItem(string TableName, int Id, string lang)
        {
            try
            {
                if (TableName == "onlineMenu")
                {
                    XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Menu.xml"));
                    XElement x;

                    x = xmlDoc.Element("root").Descendants("Content").SingleOrDefault(t => t.Attribute("Id").Value == Id.ToString());
                    return Json(new
                    {
                        canEdit = utility.isInRole(db, User.Identity.Name, appName, "canEditOnlineMenu"),
                        isDone = true,
                        isRoot = x.Parent.Name == "root" ? true : false,
                        menuId = x.Attribute("Id").Value,
                        menuName = x.Attribute("menuName").Value,
                        isLink = x.Attribute("isLink").Value,
                        linkTo = x.Attribute("linkTo").Value,
                        newPage = x.Attribute("newPage").Value,
                        menuLocation = x.Attribute("menuLocation").Value,
                        show = x.Attribute("show").Value,
                        order = x.Attribute("order").Value,
                        lang = x.Attribute("lang").Value,
                        id = x.Attribute("Id").Value
                    });
                }
                else
                {
                    if (TableName == "Category")
                    {
                        var category = db.inv_Category.FirstOrDefault(c => c.CategoryId == Id);
                        return Json(new { isDone = true, category.Category, category.CategoryId, category.ShowOnline, category.Description, category.Quantity });

                    }
                    else
                        if (TableName.ToLower() == "property")
                        {
                            var category = db.inv_Property.FirstOrDefault(c => c.PropertyId == Id);
                            return Json(new { isDone = true,category.ShowInFilter, category.Property, category.PropertyId, category.ShowInMenu, category.TranslatedProperty, category.ShowInProperty });

                        }
                        else
                        {
                            if (TableName == "Account")
                            {
                                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;
                                var appId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;
                                var acc = db.ac_Account.Single(a => a.AccountId == Id);
                                return Json(new
                                {
                                    isDone = true,
                                    name = acc.Name,
                                    level = acc.Level,
                                    tableAccount = (acc.ac_TableAccount != null ? acc.ac_TableAccount.Table : ""),
                                    Code = acc.Code,
                                    accNature = acc.AccountNature,
                                    groupType = acc.GroupType,
                                    relatedacc = GetRelatedAcc(acc),
                                    Amount = (acc.Level != 3 ? (db.GetSubAccountBalanceByParent(acc.AccountId, appDetails.CurrentFiscalPeriodId, null).Sum(ss => ss.Value)) : (acc.ac_AccountDetail.Sum(ss => ss.Amount)))
                                });

                            }
                            else
                                return Json(new { isDone = false });

                        }
                }
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    canEdit = utility.isInRole(db, User.Identity.Name,
                        appName, "canEditOnlineMenu"),
                    isDone = false,
                    msg = ex.Message
                });
            }

        }


        public ActionResult AddPriceRange(decimal lowerRange, decimal upperRange)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditOnlinePriceRange"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/PriceRange.xml"));
                int count = xmlDoc.Element("root").Elements("PriceRane").Count();
                xmlDoc.Element("root").Add(new XElement("PriceRane", new XAttribute("Id", count + 1), new XAttribute("LowerRange", lowerRange), new XAttribute("UpperRange", upperRange)));
                xmlDoc.Save(Server.MapPath("~/Data/PriceRange.xml"));
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }

        }


        public ActionResult DeletePriceRange(int id)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditOnlinePriceRange"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/PriceRange.xml"));
                xmlDoc.Element("root").Elements("PriceRange").Single(t => t.Attribute("Id").Value == id.ToString()).Remove();
                xmlDoc.Save(Server.MapPath("~/Data/PriceRange.xml"));
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }

        }

        public ActionResult EditPriceRange(int id, decimal lowerPriceRange, decimal upperPriceRange)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditOnlinePriceRange"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/PriceRange.xml"));
                var content = xmlDoc.Element("root").Elements("PriceRange").Single(t => t.Attribute("Id").Value == id.ToString());
                content.SetAttributeValue("LowerRange", lowerPriceRange);
                content.SetAttributeValue("UpperRange", upperPriceRange);
                xmlDoc.Save(Server.MapPath("~/Data/PriceRange.xml"));
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
        }

        public ActionResult getPriceRangeList(string lang)
        {
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/PriceRange.xml"));
                return Json(new
                {
                    canEdit = utility.isInRole(db, User.Identity.Name, appName, "canEditOnlinePriceRange"),
                    isDone = true,
                    result = xmlDoc.Element("root").Elements("PriceRange").Select(s => new
                    {
                        PriceRangeId = s.Attribute("Id").Value,
                        PriceRangeName = s.Attribute("LowerRange").Value,
                        isLink = s.Attribute("UpperRange").Value
                    })
                });
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    canEdit = utility.isInRole(db, User.Identity.Name,
                        appName, "canEditOnlinePriceRange"),
                    isDone = false,
                    msg = ex.Message
                });
            }

        }



        public ActionResult getMenuPhotos(int menuId)
        {
            try
            {
                List<string> lphotos = new List<string>();
                string[] photos = System.IO.Directory.GetFiles(Server.MapPath("~/Data/" + appName + "MenuPhotos/" + menuId));
                foreach (var item in photos)
                {
                    lphotos.Add(menuId + "\\" + System.IO.Path.GetFileName(item));
                }
                return Json(new { isDone = true, msg = "oK", result = lphotos, appName = appName, hasPhoto = true });
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    canEdit = utility.isInRole(db, User.Identity.Name,
                        appName, "canEditOnlineMenu"),
                    isDone = false,
                    msg = ex.Message
                });
            }
        }

        public ActionResult deleteMenuPhoto(string fileName, int menuId)
        {
            var userRoles = utility.GetUserRoles(db, User.Identity.Name, appName);
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditOnlineMenu"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            System.IO.File.Delete(Server.MapPath("~/Data/" + appName + "MenuPhotos/" + fileName));
            return Json(new { isDone = true, msg = "عکس مورد نظر حذف شد." });
        }


        public ActionResult getOnlineLogo()
        {
            try
            {
                List<string> lphotos = new List<string>();
                string[] photos = System.IO.Directory.GetFiles(Server.MapPath("~/Data/" + appName + "Logo"));
                foreach (var item in photos)
                {
                    lphotos.Add(System.IO.Path.GetFileName(item));
                }
                return Json(new { isDone = true, msg = "oK", result = lphotos, appName = appName, hasPhoto = true });
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    canEdit = utility.isInRole(db, User.Identity.Name,
                        appName, "canEditOnlineMenu"),
                    isDone = false,
                    msg = ex.Message
                });
            }
        }

        public ActionResult deleteOnlineLogo()
        {
            var userRoles = utility.GetUserRoles(db, User.Identity.Name, appName);
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditOnlineMenu"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            System.IO.DirectoryInfo logo = new System.IO.DirectoryInfo(Server.MapPath("~/Data/" + appName + "Logo"));

            foreach (System.IO.FileInfo file in logo.GetFiles())
            {
                file.Delete();
            }
            System.IO.Directory.Delete(Server.MapPath("~/Data/" + appName + "Logo"));
            return Json(new { isDone = true, msg = "عکس مورد نظر حذف شد." });
        }

        public ActionResult getPhotoStamp()
        {
            try
            {
                List<string> lphotos = new List<string>();
                string[] photos = System.IO.Directory.GetFiles(Server.MapPath("~/Data/" + appName + "Stamp"));
                foreach (var item in photos)
                {
                    lphotos.Add(System.IO.Path.GetFileName(item));
                }
                return Json(new { isDone = true, msg = "oK", result = lphotos, appName = appName, hasPhoto = true });
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    canEdit = utility.isInRole(db, User.Identity.Name,
                        appName, "canEditOnlineMenu"),
                    isDone = false,
                    msg = ex.Message
                });
            }
        }

        public ActionResult deletePhotoStamp()
        {
            var userRoles = utility.GetUserRoles(db, User.Identity.Name, appName);
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditOnlineMenu"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            System.IO.DirectoryInfo logo = new System.IO.DirectoryInfo(Server.MapPath("~/Data/" + appName + "Stamp"));

            foreach (System.IO.FileInfo file in logo.GetFiles())
            {
                file.Delete();
            }
            System.IO.Directory.Delete(Server.MapPath("~/Data/" + appName + "Stamp"));
            return Json(new { isDone = true, msg = "عکس مورد نظر حذف شد." });
        }


        //public ActionResult GetOnlineSliderShow()
        //{
        //    try
        //    {
        //        List<string> lphotos = new List<string>();
        //        string[] photos = System.IO.Directory.GetFiles(Server.MapPath("~/Data/" + appName + "SliderShow"));
        //        foreach (var item in photos)
        //        {
        //            if (item.Contains("tiny"))
        //                lphotos.Add(System.IO.Path.GetFileName(item));
        //        }
        //        return Json(new { lphotos = lphotos, appName = appName, hasPhoto = true });
        //    }
        //    catch (Exception ex) { return Json(new { hasPhoto = false, msg = ex.Message }); }
        //    finally { Dispose(); }
        //}

        public ActionResult GetOnlineSliderShow()
        {
            try
            {

                return Json(new
                {
                    results = XDocument.Load(Server.MapPath("~/Data/Slider.xml")).Elements("root").Elements("Slider").OrderBy(o => o.Attribute("Priority").Value).
                        Select(d => new
                        {
                            title =d.Attribute("Title") != null ? d.Attribute("Title").Value.ToString():"",
                            linkTo = d.Attribute("LinkTo") != null ? d.Attribute("LinkTo").Value.ToString() : "",
                            description = d.Attribute("Description") != null ? d.Attribute("Description").Value.ToString() : "",
                            sliderInfo = d.Attribute("SliderInfo") != null ? d.Attribute("SliderInfo").Value.ToString() : "",
                            id = Convert.ToInt32(d.Attribute("Id").Value.ToString()),
                            file = d.Attribute("File").Value.ToString(),
                        }),
                    appName = appName
                });

            }
            catch (Exception ex) { return Json(new { hasPhoto = false, msg = ex.Message }); }
            finally { Dispose(); }
        }
        public ActionResult GetOnlineSliderShowForEdit(int sliderShowId)
        {
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Slider.xml"));
                var slider = xmlDoc.Element("root").Elements("Slider").Single(t => t.Attribute("Id").Value == sliderShowId.ToString());
                return Json(new { isDone = true, title = slider.Attribute("Title") != null ? slider.Attribute("Title").Value.ToString() : "", linkTo = slider.Attribute("LinkTo") != null ? slider.Attribute("LinkTo").Value.ToString() : "", description = slider.Attribute("Description") != null ? slider.Attribute("Description").Value.ToString() : "", sliderInfo = slider.Attribute("SliderInfo") != null ? slider.Attribute("SliderInfo").Value.ToString() : "" });

            }
            catch (Exception ex) { return Json(new { hasPhoto = false, msg = ex.Message }); }
            finally { Dispose(); }
        }

        public ActionResult DeleteOnlineSliderShow(int sliderShowId)
        {
            try
            {

                var userRoles = utility.GetUserRoles(db, User.Identity.Name, appName);
                if (!userRoles.Contains("canAddImage") && !userRoles.Contains("canDeleteImage"))
                {
                    return Json("notInRole");
                }

                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Slider.xml"));
                var slider = xmlDoc.Element("root").Elements("Slider").Single(t => t.Attribute("Id").Value == sliderShowId.ToString());
                System.IO.File.Delete(Server.MapPath("~/Data/" + appName + "SliderShow/" + slider.Attribute("File").Value.ToString().Replace("\tiny", "/tiny")));

                System.IO.File.Delete(Server.MapPath("~/Data/" + appName + "SliderShow/" + slider.Attribute("File").Value.ToString().Replace("\tiny_", "/").Replace("tiny_", "")));
                // return Json("عکس مورد نظر حذف شد.");
                slider.Remove();
                xmlDoc.Save(Server.MapPath("~/Data/Slider.xml"));
                return Json(new { isDone = true });
            }
            catch (Exception ex) { return Json(new { hasPhoto = false, msg = ex.Message }); }
            finally { Dispose(); }
        }
        [ValidateInput(false)]
        public ActionResult EditOnlineSliderShow(SliderShow sliderShow)
        {
            try
            {

                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Slider.xml"));
                var slider = xmlDoc.Element("root").Elements("Slider").Single(t => t.Attribute("Id").Value == Request["id"].ToString());
                slider.SetAttributeValue("Title", sliderShow.title);
                slider.SetAttributeValue("LinkTo", sliderShow.linkTo);
                slider.SetAttributeValue("Description", sliderShow.description);
                slider.SetAttributeValue("SliderInfo", string.IsNullOrEmpty(sliderShow.sliderInfo) ? "" : sliderShow.sliderInfo);
                xmlDoc.Save(Server.MapPath("~/Data/Slider.xml"));

                return Json(new { isDone = true });

            }
            catch (Exception ex) { return Json(new { hasPhoto = false, msg = ex.Message }); }
            finally { Dispose(); }
        }
        public ActionResult SortOnlineSliderShow(List<SortCategory> sortSliderShow)
        {
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Slider.xml"));
                foreach (var item in sortSliderShow)
                {
                    xmlDoc.Element("root").Elements("Slider").Single(t => t.Attribute("Id").Value == item.id.ToString()).SetAttributeValue("Priority", item.Priority);
                    xmlDoc.Save(Server.MapPath("~/Data/Slider.xml"));
                }
                return Json(new { isDone = true, msg = "oK" });

            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
        }

        //public ActionResult SortOnlineSliderShow(string[] photos)
        //{
        //    int i = 1;
        //    foreach (var item in photos)
        //    {
        //        System.IO.File.Move(Server.MapPath("~/Data/" + appName + "SliderShow/" + item), Server.MapPath("~/Data/" + appName + "SliderShow/" + item.Replace("tiny_", "rtiny_")));
        //        //System.IO.File.Move(Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("tiny_", "thumb_")), Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("tiny_", "thumb_").Replace("\\", "\\r")));
        //        System.IO.File.Move(Server.MapPath("~/Data/" + appName + "SliderShow/" + item.Replace("tiny_", "")), Server.MapPath("~/Data/" + appName + "SliderShow/" + "t" + item.Replace("tiny_", "")));
        //    }
        //    foreach (var item in photos)
        //    {
        //        int priority = Convert.ToInt32(item.Split('_')[1].Replace(".jpg", ""));
        //        System.IO.File.Move(Server.MapPath("~/Data/" + appName + "SliderShow/" + item.Replace("tiny_", "rtiny_")), Server.MapPath("~/Data/" + appName + "SliderShow/" + item.Replace("rtiny_", "tiny_").Replace("tiny_" + priority, "tiny_" + i)));
        //        //System.IO.File.Move(Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("\\", "\\r").Replace("tiny_", "thumb_")), Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("\\r", "\\").Replace("tiny_", "thumb_").Replace("thumb_" + priority, "thumb_" + i)));
        //        System.IO.File.Move(Server.MapPath("~/Data/" + appName + "SliderShow/" + "t" + item.Replace("tiny_", "")), Server.MapPath("~/Data/" + appName + "SliderShow/" + ("t" + item.Replace("tiny_", "")).Replace("t" + priority, i.ToString())));
        //        i++;
        //    }
        //    string mappath = Server.MapPath("~/Data/" + appName + "SliderShow");
        //    string[] photoss = System.IO.Directory.GetFiles(mappath);
        //    string images = "";
        //    int l = photoss.Length;
        //    if (l > 0)
        //    {
        //        foreach (string item in photoss)
        //        {
        //            if (!item.Contains("tiny"))
        //                images += System.IO.Path.GetFileName(item).Replace(".jpg", "") + ",";
        //        }
        //        images = images.Remove(images.Length - 1, 1);
        //    }

        //    db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationDetail.SliderQuantity = photoss.Length / 2;
        //    db.SaveChanges();
        //    return GetOnlineSliderShow();
        //}


        //public ActionResult DeleteOnlineSliderShow(string fileName)
        //{
        //    var userRoles = utility.GetUserRoles(db, User.Identity.Name, appName);
        //    if (!userRoles.Contains("canAddImage") && !userRoles.Contains("canDeleteImage"))
        //    {
        //        return Json("notInRole");
        //    }
        //    System.IO.File.Delete(Server.MapPath("~/Data/" + appName + "SliderShow/" + fileName.Replace("\tiny", "/tiny")));
        //    //System.IO.File.Delete(Server.MapPath("~/Data/" + appName + "SliderShow/" + fileName.Replace("\tiny", "/thumb").Replace("tiny_", "thumb_")));
        //    System.IO.File.Delete(Server.MapPath("~/Data/" + appName + "SliderShow/" + fileName.Replace("\tiny_", "/").Replace("tiny_", "")));

        //    return Json("عکس مورد نظر حذف شد.");
        //}

        public ActionResult GetCategories(int? parentId)
        {
            if (parentId == null)
            {
                var categories = db.inv_Category.Where(c => c.ParentCategoryId == null).OrderBy(o => o.Priority).Select(c => new { c.CategoryId, c.Category, c.Description, c.ShowOnline });
                return Json(new { categories = categories });
            }
            else
            {
                var categories = db.inv_Category.Where(c => c.ParentCategoryId == parentId).OrderBy(o => o.Priority).Select(c => new { c.CategoryId, c.Category, c.Description, c.ShowOnline });
                return Json(new { categories = categories });
            }
        }


        public class SortCategory
        {
            public int id { get; set; }
            public int Priority { get; set; }
        }

        public ActionResult SortCategories(List<SortCategory> sortCategories)
        {
            try
            {
                foreach (var item in sortCategories)
                {
                    db.inv_Category.Single(c => c.CategoryId == item.id).Priority = item.Priority;
                }
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });

            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
        }
        #endregion
        //onlineordersection
        #region

        public ActionResult GetColorListForEdit(int barcodeid, int orderDetailid)
        {
            // int shopid = db.ac_OrderDetail.Single(o => o.OrderDetailId == orderDetailid).ac_OrderHeader.ShopId.Value;
            return Json(db.inv_ItemDetail.Where(b => b.BarcodeId == barcodeid && b.inv_Color.Count > 0 && b.inv_ItemLocation.Sum(s => s.Quantity) > 0)
                .Select(a => new
                {
                    id = a.inv_Color.FirstOrDefault().ColorId,
                    name = a.inv_Color.FirstOrDefault().Color,
                }).Distinct());

        }

        public ActionResult GetSizeListByBarcodeIdColorIdForEdit(int barcodeid, int orderDetailid, int? colorid)
        {

            //  int shopid = db.ac_OrderDetail.Single(o => o.OrderDetailId == orderDetailid).ac_OrderHeader.ShopId.Value;
            bool isReturn = !db.ac_OrderDetail.Single(o => o.AccountDetailId == orderDetailid).ac_AccountDetail.ac_OrderHeader.Sell;
            if (colorid == null)
            {
                if (isReturn)
                {
                    return Json(db.inv_ItemDetail.Where(b => b.BarcodeId == barcodeid && b.inv_Size.Count() > 0)
                              .Select(a => new
                              {
                                  id = a.inv_Size.FirstOrDefault().SizeId,
                                  name = a.inv_Size.FirstOrDefault().Size,
                              }).Distinct());
                }
                else
                {
                    return Json(db.inv_ItemDetail.Where(b => b.BarcodeId == barcodeid && b.inv_Size.Count() > 0 && b.inv_ItemLocation.Sum(q => q.Quantity) > 0)
              .Select(a => new
              {
                  id = a.inv_Size.FirstOrDefault().SizeId,
                  name = a.inv_Size.FirstOrDefault().Size,
              }).Distinct());
                }

            }
            else
            {
                if (isReturn)
                {
                    return Json(db.inv_ItemDetail.Where(b => b.BarcodeId == barcodeid && b.inv_Size.Count() > 0 && b.inv_Color.Any(c => c.ColorId == colorid))
                        .Select(a => new
                        {
                            id = a.inv_Size.FirstOrDefault().SizeId,
                            name = a.inv_Size.FirstOrDefault().Size,
                        }).Distinct());
                }
                else
                {
                    return Json(db.inv_ItemDetail.Where(b => b.BarcodeId == barcodeid && b.inv_Color.Any(c => c.ColorId == colorid) && b.inv_Size.Count() > 0 && b.inv_ItemLocation.Sum(q => q.Quantity) > 0)
                 .Select(a => new
                 {
                     id = a.inv_Size.FirstOrDefault().SizeId,
                     name = a.inv_Size.FirstOrDefault().Size,
                 }).Distinct());

                }
            }
        }

        public class ItemDetailQuantity
        {

            public IEnumerable<object> Size { get; set; }
            public IEnumerable<object> Color { get; set; }
            public IEnumerable<object> Quantity { get; set; }
        }
        public ActionResult GetItemDetailsByBarcodeAndShopID(string barcode, int shopId)
        {
            ItemDetailQuantity itemDetailQuantity = new ItemDetailQuantity();
            var collection = db.View_inv_ItemDetailLocation.Where(i => (i.ApplicationName == appName || i.ApplicationName == null) && i.Barcode == barcode && i.ShopId == shopId && i.Quantity > 0).Select(s => new { Size = new { s.Size, s.SizeId }, Color = new { s.Color, s.ColorId }, Quantity = new { s.Quantity, s.ColorId, s.SizeId } });
            itemDetailQuantity.Size = collection.Where(s => s.Size.SizeId != null).Select(size => size.Size).Distinct();
            itemDetailQuantity.Color = collection.Where(c => c.Color.ColorId != null).Select(color => color.Color).Distinct();
            itemDetailQuantity.Quantity = collection.Where(q => q.Quantity.Quantity != null).Select(quantity => quantity.Quantity).Distinct();
            return Json(itemDetailQuantity);
        }





        public ActionResult GetInvoiceDetails(int id)
        {

            string userName = User.Identity.Name;
            // var OrderHeader = db.ac_OrderHeader.FirstOrDefault(o => o.OrderHeaderId == id);
            return Json(new
            {
                invoiceDetails = db.ac_OrderDetail.Where(o => o.ac_AccountDetail.OrderHeaderId == id)
                    .Select(b => new
                    {
                        OrderDetailId = b.AccountDetailId,
                        b.ac_AccountDetail.AccountId,
                        b.ac_AccountDetail.ac_Account.inv_ItemDetail.BarcodeId,
                        b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Barcode,
                        b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Name,
                        b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.ItemCode,
                        b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Size.FirstOrDefault().Size,
                        b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Color.FirstOrDefault().Color,
                        b.Quantity,
                        b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.inv_MeasureUnit.UnitType,
                        Amount = b.ac_AccountDetail1.Amount / b.Quantity,
                        b.ac_AccountDetail.Description,
                        shop = db.p_Employee.FirstOrDefault(e => e.p_Person.Code == userName).inv_Shop.Select(ss => new { ss.ShopId, ss.Name, Quantity = ss.inv_ItemLocation.Where(i => i.ItemDetailId == b.ac_AccountDetail.AccountId).Sum(qq => (decimal?)qq.Quantity) }).Where(q => q.Quantity > 0).AsEnumerable().Select(s => new { s.ShopId, s.Name, Quantity = s.Quantity }).OrderByDescending(o => o.Quantity)
                    }),
                receiverDetails = db.ac_OrderHeader.Where(o => o.OrderHeaderId == id).Select(OrderHeader => new
                {
                    OrderHeader.ac_ReceiverDetails.Address,
                    OrderHeader.ac_ReceiverDetails.AddressID,
                    OrderHeader.ac_ReceiverDetails.CellPhone,
                    OrderHeader.ac_ReceiverDetails.Family,
                    OrderHeader.ac_ReceiverDetails.GiftNote,
                    OrderHeader.ac_ReceiverDetails.IsGift,
                    OrderHeader.ac_ReceiverDetails.Name,
                    OrderHeader.ac_ReceiverDetails.NeedWrap,
                    OrderHeader.ac_ReceiverDetails.PaymentType,
                    OrderHeader.ac_ReceiverDetails.Phone,
                    OrderHeader.ac_ReceiverDetails.PostalCode,
                    OrderHeader.ac_ReceiverDetails.SendDate,
                    OrderHeader.ac_ReceiverDetails.SendTime,
                    OrderHeader.ac_ReceiverDetails.SendType,
                    OrderHeader.ac_ReceiverDetails.DeliveryExpense,
                    OrderHeader.ac_ReceiverDetails.DiscountAmount,
                    OrderHeader.Description,
                    OrderHeader.Date,
                    OrderHeader.Amount,
                    CustomerName = OrderHeader.p_Person.Name,
                    CustomerFamily = OrderHeader.p_Person.Family,
                    OrderHeader.p_Person.AccountId
                })
            });
        }

        public ActionResult getShopNameByUser()
        {
            {
                var result = db.p_Person.Where(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName);
                if (result.Count() > 0)
                {
                    return Json(result.FirstOrDefault().p_Employee.inv_Shop.Where(s => s.ApplicationId == null || s.aspnet_Applications.ApplicationName == appName)
                        .Select(shop => new
                        {
                            id = shop.ShopId,
                            name = shop.Name,
                        }));
                }
                else
                    return null;
            }
        }
        public ActionResult getCounterNameByUser(int? arg)
        {
            return Json(db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).p_Employee.ac_Counter.Where(c => c.ShopId == arg)
                .Select(counter => new
                {
                    id = counter.AccountId,
                    name = counter.Code,
                }));
        }

        public ActionResult getCounterNameForUser()
        {

            return Json(db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).p_Employee.ac_Counter
               .Select(counter => new
               {
                   id = counter.AccountId,
                   name = counter.Code,
               }));
        }


        public ActionResult EditOrderFullAcount(int orderHeaderId, decimal amount)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditSale"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }
            try
            {
                var currentUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName);

                var orderHeader = db.ac_OrderHeader.SingleOrDefault(o => o.OrderHeaderId == orderHeaderId);
                List<int> lst = db.GetParentEmployeeByID(orderHeader.EmployeeId, "").Select(p => p.AccountId).ToList<int>();
                if (lst.Contains(currentUser.AccountId))
                {
                    orderHeader.Amount = amount;
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "oK" });
                }
                else
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }

            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.Message });
            }
        }




        public ActionResult GetItemDetailCountForShop(int orderDetailId, int shopId)
        {
            return Json(db.ac_OrderDetail.Where(i => i.AccountDetailId == orderDetailId).
                                     Sum(l => l.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_ItemLocation
                                         .Where(lq => lq.ShopId == shopId).Sum(lq => (decimal?)lq.Quantity)));
        }
        public class OnlineItems
        {
            public int itemDetailId { get; set; }
            public decimal quantity { get; set; }
            public int shopidFrom { get; set; }
            public string serial { get; set; }
        }
        public ActionResult ConfirmOnlineOrder(List<OnlineItems> itemDetails, int OrderHeaderId, int shopIdTo, int counterId)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canConfirmOnlineOrder"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }
            string result;
            int save = 0;
            ir.shaparak.bpm.PaymentGatewayImplService bpService = new ir.shaparak.bpm.PaymentGatewayImplService();
            try
            {
                ac_OrderHeader oldOrderHeader = db.ac_OrderHeader.Single(s => s.OrderHeaderId == OrderHeaderId);
                var appDetails = db.aspnet_Applications.Single(s => s.ApplicationName == appName).ApplicationDetail;

                if (oldOrderHeader.ac_ReceiverDetails.PaymentType == 1)
                {
                    long saleOrderId = oldOrderHeader.ac_ReceiverDetails.SaleOrderId.Value;
                    long SaleReferenceId = oldOrderHeader.ac_ReceiverDetails.SaleReferenceId.Value;
                    utility.BypassCertificateError();
                    result = bpService.bpInquiryRequest(appDetails.TerminalId.Value,
                    appDetails.PaymentUserName,
                    appDetails.PaymentPassword,
                    saleOrderId,
                    saleOrderId,
                    SaleReferenceId);
                    if (result.Split(',')[0] == "0")
                    {
                        string settle = bpService.bpSettleRequest(
                        appDetails.TerminalId.Value,
                        appDetails.PaymentUserName,
                        appDetails.PaymentPassword,
                        saleOrderId,
                        saleOrderId,
                        SaleReferenceId
                        );

                        if (Int32.Parse(settle) == 0)
                        {
                            int eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                            //transfer
                            foreach (var shopGroup in itemDetails.GroupBy(s => s.shopidFrom))
                            {
                                if (shopGroup.Key != shopIdTo)
                                {
                                    inv_TransferItem TransferHeader = new inv_TransferItem();
                                    TransferHeader.FromShopId = shopGroup.Key;
                                    TransferHeader.ToShopId = shopIdTo;
                                    TransferHeader.Confirmed = true;
                                    TransferHeader.Date = DateTime.Now;
                                    TransferHeader.Description = "forOnlineOrder";
                                    TransferHeader.Date = DateTime.Now;
                                    TransferHeader.ReceiverEmployeeId = eid;
                                    TransferHeader.SenderEmployeeId = eid;
                                    foreach (var item in shopGroup)
                                    {
                                        inv_TransferItemDetail Transferdetail = new inv_TransferItemDetail();
                                        Transferdetail.ItemDetailId = item.itemDetailId;
                                        Transferdetail.Quantity = item.quantity;
                                        TransferHeader.inv_TransferItemDetail.Add(Transferdetail);
                                        db.inv_TransferItem.AddObject(TransferHeader);
                                    }
                                }
                            }
                            db.SaveChanges();
                            //confirm
                            oldOrderHeader.ConfirmerId = eid;
                            oldOrderHeader.ShopId = shopIdTo;
                            oldOrderHeader.CounterId = counterId;
                            //update quantity of item
                            foreach (var item in oldOrderHeader.ac_AccountDetail.ToList())
                            {
                                //baraie accountDetailhaie forosh va gheimate tamam shode inv_ItemDetail=null hast
                                if (item.ac_Account.inv_ItemDetail != null)
                                {
                                    var itemLocation = db.inv_ItemLocation.Single(i => i.ShopId == shopIdTo && i.ItemDetailId == item.ac_Account.inv_ItemDetail.AccountId);
                                    itemLocation.Quantity -= item.ac_OrderDetail.Quantity;
                                }
                            }
                            //Payment
                            ac_OrderHeader acc = new ac_OrderHeader();
                            acc.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                            acc.InvoiceNO = getInvoiceNumber(db, "onlinePayment", false, false);
                            acc.ClientId = oldOrderHeader.ClientId;
                            acc.Description = "onlinePayment";
                            acc.EmployeeId = eid;
                            acc.Date = DateTime.Now;
                            acc.Sell = false;
                            acc.CounterId = counterId;
                            acc.ShopId = shopIdTo;
                            acc.CurrencyRateId = oldOrderHeader.CurrencyRateId;
                            acc.IsMoney = true;
                            acc.ConfirmerId = eid;
                            acc.Amount = oldOrderHeader.Amount;
                            acc.Table = "payment";
                            acc.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;

                            ac_Cash ca = new ac_Cash();
                            ca.CurrencyRateId = oldOrderHeader.CurrencyRateId;
                            ca.Type = "online";

                            //sandogh -> bedehkar
                            ac_AccountDetail accountDetail = new ac_AccountDetail();
                            accountDetail.Amount = oldOrderHeader.Amount;
                            accountDetail.AccountId = counterId;
                            accountDetail.IsDept = true;
                            accountDetail.Table = "Cash";
                            accountDetail.ac_Cash = ca;

                            //moshtari -> bestankar
                            ac_AccountDetail accountDetailCustomer = new ac_AccountDetail();
                            accountDetailCustomer.AccountId = oldOrderHeader.ClientId;
                            accountDetailCustomer.IsDept = false;
                            accountDetailCustomer.Amount = oldOrderHeader.Amount;

                            acc.ac_AccountDetail.Add(accountDetailCustomer);
                            acc.ac_AccountDetail.Add(accountDetail);
                            db.ac_OrderHeader.AddObject(acc);
                            save = db.SaveChanges();
                        }
                        else
                        {
                            result = bpService.bpReversalRequest(appDetails.TerminalId.Value,
                    appDetails.PaymentUserName,
                    appDetails.PaymentPassword,
                            saleOrderId,
                            saleOrderId,
                            SaleReferenceId
                            );
                            return Json(new { isdone = false, msg = "." + "اطلاعات ذخیره نشد" + result });
                        }
                    }
                }
                else
                {
                    int eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                    //transfer
                    foreach (var shopGroup in itemDetails.GroupBy(s => s.shopidFrom))
                    {
                        if (shopGroup.Key != shopIdTo)
                        {
                            inv_TransferItem TransferHeader = new inv_TransferItem();
                            TransferHeader.FromShopId = shopGroup.Key;
                            TransferHeader.ToShopId = shopIdTo;
                            TransferHeader.Confirmed = true;
                            TransferHeader.Date = DateTime.Now;
                            TransferHeader.Description = "forOnlineOrder";
                            TransferHeader.Date = DateTime.Now;
                            TransferHeader.ReceiverEmployeeId = eid;
                            TransferHeader.SenderEmployeeId = eid;
                            foreach (var item in shopGroup)
                            {
                                inv_TransferItemDetail Transferdetail = new inv_TransferItemDetail();
                                Transferdetail.ItemDetailId = item.itemDetailId;
                                Transferdetail.Quantity = item.quantity;
                                TransferHeader.inv_TransferItemDetail.Add(Transferdetail);
                                db.inv_TransferItem.AddObject(TransferHeader);
                            }
                        }
                    }
                    db.SaveChanges();
                    //confirm
                    oldOrderHeader.ConfirmerId = eid;
                    oldOrderHeader.ShopId = shopIdTo;
                    oldOrderHeader.CounterId = counterId;
                    //update quantity of item
                    foreach (var item in oldOrderHeader.ac_AccountDetail.ToList())
                    {
                        //baraie accountDetailhaie forosh va gheimate tamam shode inv_ItemDetail=null hast
                        if (item.ac_Account.inv_ItemDetail != null)
                        {
                            var itemLocation = db.inv_ItemLocation.Single(i => i.ShopId == shopIdTo && i.ItemDetailId == item.ac_Account.inv_ItemDetail.AccountId);
                            itemLocation.Quantity -= item.ac_OrderDetail.Quantity;
                        }
                    }

                    //Payment
                    string paymentMethod = oldOrderHeader.ac_ReceiverDetails.PaymentType == 2 ? "byRemittance" : "onReceive";
                    ac_OrderHeader acc = new ac_OrderHeader();
                    acc.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                    acc.InvoiceNO = getInvoiceNumber(db, paymentMethod, false, false);
                    acc.ClientId = oldOrderHeader.ClientId;
                    acc.Description = paymentMethod;
                    acc.EmployeeId = eid;
                    acc.Date = DateTime.Now;
                    acc.Sell = false;
                    acc.CounterId = counterId;
                    acc.ShopId = shopIdTo;
                    acc.CurrencyRateId = oldOrderHeader.CurrencyRateId;
                    acc.IsMoney = true;
                    acc.ConfirmerId = eid;
                    acc.Amount = oldOrderHeader.Amount;
                    acc.Table = "payment";
                    acc.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;


                    ac_Cash ca = new ac_Cash();
                    ca.Type = paymentMethod;
                    ca.CurrencyRateId = oldOrderHeader.CurrencyRateId;


                    //sandogh -> bedehkar
                    ac_AccountDetail ad = new ac_AccountDetail();
                    ad.Amount = oldOrderHeader.Amount;
                    ad.AccountId = counterId;
                    ad.IsDept = true;
                    ad.Table = "Cash";
                    ad.ac_Cash = ca;

                    //moshtari -> bestankar
                    ac_AccountDetail accountDetailCustomer = new ac_AccountDetail();
                    accountDetailCustomer.AccountId = oldOrderHeader.ClientId;
                    accountDetailCustomer.IsDept = false;
                    accountDetailCustomer.Amount = oldOrderHeader.Amount;

                    acc.ac_AccountDetail.Add(accountDetailCustomer);
                    acc.ac_AccountDetail.Add(ad);
                    db.ac_OrderHeader.AddObject(acc);
                    save = db.SaveChanges();
                }
                if (save > 0)
                    return Json(new { isdone = true, msg = "." + "اطلاعات انتقال با موفقیت ذخیره شد " });
                else
                    return Json(new { isdone = false, msg = "." + "اطلاعات انتقال ذخیره نشد" });
            }
            catch (FormatException)
            {
                return Json(new { isdone = false, msg = "." + "اطلاعات انتقال را درست وارد کنید" });
            }
            catch (IndexOutOfRangeException)
            {
                return Json(new { isdone = false, msg = "." + "اطلاعات انتقال را درست وارد کنید" });
            }


            catch (Exception ex)
            {
                return Json(new { isdone = true, msg = "." + "اطلاعات ذخیره نشد /n" + ex.InnerException.Message });

            }
            finally { ((IDisposable)db).Dispose(); }
        }
        public static string getInvoicDescription(bool isPayment, bool hasCheque, bool hasCash, bool isCustomer, bool isSell, bool isPreOrder)
        {
            if (isPayment)
            {
                if (hasCheque && hasCash)
                {
                    if (isSell)
                        return "payCash&ChequeTo";
                    else
                        return "receivedCashNChequeFrom";
                }
                if (hasCheque && !hasCash)
                {
                    if (isSell)
                        return "payChequeTo";
                    else
                        return "receivedChequeFrom";
                }
                else
                {
                    if (isSell)
                        return "payCashTo";
                    else
                        return "receivedCashFrom";
                }
            }
            if (isCustomer)
            {
                if (isPreOrder && isSell)
                {
                    return "preOrder";
                }
                else
                {
                    if (isSell)
                        return "order";
                    else
                        return "returnOrder";
                }
            }
            else
            {
                if (isPreOrder && !isSell)
                {
                    return "preOrder";
                }
                else
                {
                    if (isSell)
                        return "returnOrder";
                    else
                        return "order";
                }
            }
        }

        public static string getInvoiceNumber(MapiDBEntities db, string invoiceNo, bool isSell, bool isPreOrder)
        {
            return "";
            if (string.IsNullOrEmpty(invoiceNo))
            {
                if (isSell && isPreOrder)
                {
                    var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("ASP-"));
                    return "ASP-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");

                }
                else if (!isSell && isPreOrder)
                {
                    var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("AOP-"));
                    return "AOP-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");

                }
                else if (isSell && !isPreOrder)
                {
                    var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("AS-"));
                    return "AS-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");

                }
                else
                {
                    var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("AO-"));
                    return "AO-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");

                }
            }
            else if (invoiceNo == "onlinePayment")
            {
                var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("DO-"));
                return "DO-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");
            }
            else if (invoiceNo == "byRemittance")
            {
                var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("DOR-"));
                return "DOR-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");
            }
            else if (invoiceNo == "onReceive")
            {
                var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("DOD-"));
                return "DOD-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");
            }
            else if (invoiceNo == "payment")
            {
                if (isSell)
                {
                    var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("W-"));
                    return "W-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");

                }
                else
                {
                    var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("D-"));
                    return "D-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");

                }
            }
            else if (invoiceNo == "salary")
            {

                var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("ES-"));
                return "ES-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");
            }
            else if (invoiceNo == "socialSecurity")
            {

                var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("ESS-"));
                return "ESS-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");
            }
            else if (invoiceNo == "expense")
            {

                var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("E-"));
                return "E-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");

            }
            else if (invoiceNo == "voucher")
            {
                if (isSell)
                {
                    var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("VW-"));
                    return "VW-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");

                }
                else
                {
                    var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("VD-"));
                    return "VD-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");

                }
            }
            else if (invoiceNo == "transfer")
            {
                if (isSell)
                {
                    var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("TW-"));
                    return "TW-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");

                }
                else
                {
                    var r = db.ac_OrderHeader.OrderByDescending(d => d.Date).Where(i => i.InvoiceNO.Contains("TD-"));
                    return "TD-" + (r.Count() > 0 ? (Convert.ToInt32(r.FirstOrDefault().InvoiceNO.Split('-')[1]) + 1).ToString() : "1");

                }
            }
            else
            {
                return invoiceNo;
            }

        }
        public static int getOrderType(MapiDBEntities db, int? personId, bool isSell, bool isPayment, bool isTransfer, bool isExpense, bool isSocialSecurity, bool isSalary, bool isDeposit, bool isCorrection, bool isVoucher)
        {
            //if (isExpense && isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "expensePayment").OrderTypeId;
            //if (isExpense && !isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "expense").OrderTypeId;
            //if (isVoucher && isSell)
            //    return db.ac_OrderType.Single(s => s.OrderType == "voucherBuy").OrderTypeId;
            //if (isVoucher && !isSell)
            //    return db.ac_OrderType.Single(s => s.OrderType == "voucherReturn").OrderTypeId;
            //if (isSocialSecurity && isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "socialSecurityPayment").OrderTypeId;
            //if (isSocialSecurity && !isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "socialSecurity").OrderTypeId;
            //if (isSalary && isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "salaryPayment").OrderTypeId;
            //if (isSalary && !isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "employeeSalary").OrderTypeId;
            //if (isDeposit && isSell)
            //    return db.ac_OrderType.Single(s => s.OrderType == "withdraw").OrderTypeId;
            //if (isDeposit && !isSell)
            //    return db.ac_OrderType.Single(s => s.OrderType == "deposit").OrderTypeId;
            //if (isTransfer && isSell)
            //    return db.ac_OrderType.Single(s => s.OrderType == "transferFrom").OrderTypeId;
            //if (isTransfer && !isSell)
            //    return db.ac_OrderType.Single(s => s.OrderType == "transferTo").OrderTypeId;
            //if (isCorrection && isSell && !isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "correctionReturn").OrderTypeId;
            //if (isCorrection && !isSell && !isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "correction").OrderTypeId;
            //if (isCorrection && isSell && isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "correctionRefund").OrderTypeId;
            //if (isCorrection && !isSell && isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "correctionPayment").OrderTypeId;
            //bool isSupplier = db.p_Supplier.Any(s => s.PersonId == personId);
            //if (isSupplier && isSell && isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "supplierRefund").OrderTypeId;
            //if (!isSupplier && isSell && isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "customerRefund").OrderTypeId;
            //if (isSupplier && !isSell && isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "supplierPay").OrderTypeId;
            //if (isSupplier && isSell && !isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "supplierReturn").OrderTypeId;
            //if (!isSupplier && !isSell && isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "customerPay").OrderTypeId;
            //if (isSupplier && !isSell && !isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "supplierBuy").OrderTypeId;
            //if (!isSupplier && !isSell && !isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "customerReturn").OrderTypeId;
            //if (!isSupplier && isSell && !isPayment)
            //    return db.ac_OrderType.Single(s => s.OrderType == "customerBuy").OrderTypeId;
            //else 
            return 0;
        }
        public ActionResult CancelOrder(int OrderHeaderId)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canCancelOnlineOrder"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }
            string result;
            ir.shaparak.bpm.PaymentGatewayImplService bpService = new ir.shaparak.bpm.PaymentGatewayImplService();

            ac_OrderHeader oldOrderHeader = db.ac_OrderHeader.Single(s => s.OrderHeaderId == OrderHeaderId);
            var appDetails = db.aspnet_Applications.Single(s => s.ApplicationName == appName).ApplicationDetail;
            int? paymetnType = oldOrderHeader.ac_ReceiverDetails.PaymentType;
            if (paymetnType == 1)
            {
                long saleOrderId = oldOrderHeader.ac_ReceiverDetails.SaleOrderId.Value;
                long SaleReferenceId = oldOrderHeader.ac_ReceiverDetails.SaleReferenceId.Value;
                utility.BypassCertificateError();

                result = bpService.bpReversalRequest(appDetails.TerminalId.Value,
                    appDetails.PaymentUserName,
                    appDetails.PaymentPassword,
                saleOrderId,
                saleOrderId,
                SaleReferenceId
                );
                if (result.Split(',')[0] == "0")
                    return Json(new { isdone = true, msg = "done" });
                else
                    return Json(new { isdone = false, msg = result });
            }
            else
                return Json(new { isdone = false, msg = "notOnlinePayment" });

        }
        #endregion
        //inventory
        #region
        public int? findLedgentAccId(int accid)
        {
            var parents = db.GetParentAccountByID(accid, "").ToList();
            if (parents.Count() >= 3)
                return parents.SingleOrDefault(s => s.Level == 2) != null ? (int?)parents.SingleOrDefault(s => s.Level == 2).AccountId : null;
            else
                return null;
        }
        public ActionResult AddBarcode(string barcode, string name, string itemcode, int availibilityid, int measureunitid, int? categoryid, decimal regularprice, decimal? frinendsprice, decimal? wholesaleprice, decimal? onlineprice, decimal? weight, bool setColorSize, string date)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canAddProduct"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                var co = "0";
                if (barcode.Length < 1)
                {
                    if (db.inv_Barcode.Where(a => a.aspnet_Applications.ApplicationName == appName).Count() > 0)
                    {
                        co = db.inv_Barcode.Where(a => a.aspnet_Applications.ApplicationName == appName).OrderByDescending(b => b.BarcodeId).Select(b => b.Barcode).First();
                        barcode = (Int64.Parse(co) + 1).ToString();
                    }
                    else
                        barcode = "1000";
                }
                name = string.IsNullOrEmpty(name) ? barcode : name;
                var appId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;
                //categoryid = db.ac_TableAccount.Single(s => s.Table == "item").AccountId;
                var employee = db.p_Person.Single(s => s.Code == User.Identity.Name);
                inv_Barcode bar = (new inv_Barcode()
                {
                    Barcode = barcode,
                    Name = name,
                    ItemCode = itemcode,
                    AvailabilityId = availibilityid,
                    DefaultMeasureUnitId = measureunitid,
                    Weight = weight,
                    // Description = discription,
                    EnteryDate = utility.GetDateTimeCulture(date),
                    ShowOnline = false,
                    IsNew = false,
                    IsOffer = false,
                    IsSale = false,
                    ApplicationId = appId
                });
                db.inv_Barcode.AddObject(bar);
                bar.AverageBuyPrice = 0;
                bar.AverageSellPrice = 0;
                bar.BuyQuantity = 0;
                bar.SellQuantity = 0;
                bar.TotalAvailableQuantity = 0;
                bar.TotalBrokenQuantity = 0;
                //if (categoryid != null)
                //    bar.inv_Category.Add(db.inv_Category.Single(c => c.CategoryId == categoryid.Value));
                bar.inv_Price.Add(new inv_Price()
                {
                    Regular = regularprice,
                    Freinds = frinendsprice,
                    Wholesale = wholesaleprice,
                    Online = onlineprice == null ? regularprice : onlineprice,
                    Date = DateTime.Now
                });

                if (setColorSize)
                {
                    var parentAccount = (categoryid == null) ? db.ac_TableAccount.Single(a => a.Table == "item" && a.aspnet_Applications.ApplicationName == appName).ac_Account : db.ac_Account.Single(a => a.AccountId == categoryid);
                    categoryid = (categoryid == null) ? parentAccount.AccountId : categoryid;



                    var account = new ac_Account()
                    {
                        AccountNature = parentAccount.AccountNature,
                        Code = utility.FindAccountCodeByParentId(categoryid) + 1,
                        GroupType = parentAccount.GroupType,
                        Level = 3,// Convert.ToByte(parentAccount.Level + 1),
                        Name = name + " " + itemcode + " م.ک",
                        ParentAccountId = categoryid,
                        ApplicationId = appId,
                        RegistererId = employee.AccountId,
                        LedgentId = findLedgentAccId(categoryid.Value)
                    };
                    bar.ac_Account = account;
                    var tableAccount = db.ac_TableAccount.Single(a => a.Table == "itemSale" && a.aspnet_Applications.ApplicationName == appName);
                    int saleAccountId = tableAccount.AccountId;
                    var saleAccount = db.ac_Account.Single(a => a.AccountId == saleAccountId);



                    var accountSale = new ac_Account()
                    {
                        AccountNature = parentAccount != null ? parentAccount.AccountNature : 1,
                        Code = utility.FindAccountCodeByParentId(saleAccountId) + 2,
                        GroupType = saleAccount.GroupType,
                        Level = 3,// Convert.ToByte(saleAccount.Level + 1),
                        Name = name + " " + itemcode + " فروش",
                        ParentAccountId = tableAccount.AccountId,
                        ApplicationId = appId,
                        RegistererId = employee.AccountId,
                        ac_Account3 = account,
                        LedgentId = findLedgentAccId(tableAccount.AccountId)
                    };
                    var tableAccountPrice = db.ac_TableAccount.Single(a => a.Table == "itemPrice" && a.aspnet_Applications.ApplicationName == appName);
                    int priceAccountId = tableAccountPrice.AccountId;
                    var priceAccount = db.ac_Account.Single(a => a.AccountId == priceAccountId);
                    var accountPrice = new ac_Account()
                    {
                        AccountNature = priceAccount.AccountNature,
                        Code = utility.FindAccountCodeByParentId(priceAccountId) + 3,
                        GroupType = priceAccount.GroupType,
                        Level = 3,// Convert.ToByte(priceAccount.Level + 1),
                        Name = name + " " + itemcode + " ق.ت",
                        ParentAccountId = tableAccountPrice.AccountId,
                        ApplicationId = appId,
                        RegistererId = employee.AccountId,
                        ac_Account3 = account,
                        LedgentId = findLedgentAccId(tableAccountPrice.AccountId)
                    };
                    inv_ItemDetail itm = new inv_ItemDetail();
                    itm.BarcodeId = bar.BarcodeId;
                    itm.BuyQuantity = 0;
                    itm.BuyPrice = 0;
                    itm.SellPrice = 0;
                    itm.SoldQuantity = 0;
                    itm.ac_Account = account;
                    bar.inv_ItemDetail.Add(itm);
                    db.SaveChanges();
                }
                else
                    db.SaveChanges();
                return Json(new { isDone = true, msg = "oK", barcode = barcode });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult getAvailablity()
        {
            return Json(db.inv_Availablity.Where(s => s.ApplicationId == null || s.aspnet_Applications.ApplicationName == appName)
                .Select(a => new
                {
                    id = a.AvailablityId,
                    name = a.Status,
                }));
        }

        public ActionResult getMeasureUnit()
        {

            return Json(db.inv_MeasureUnit.Where(s => s.ApplicationId == null || s.aspnet_Applications.ApplicationName == appName)
                .Select(a => new
                {
                    id = a.MeasureUnitId,
                    name = a.UnitType
                }));
        }

        public ActionResult GetItemsList(int skip, int take, int currentPage, bool first, string sort, string barcode, string name,
                              string code, decimal? price, int? categoryid, int? status, decimal? quantityfrom,
                              decimal? quantityto, string regdatefrom, string regdateto, int? shopid, bool? showOnline, string selectData)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }
                List<ObjectParameter> ol = new List<ObjectParameter>();
                //  List<int> lstShop = new List<int>();
                string dynStr = string.Empty;

                dynStr += "(it.ApplicationName = @appname or it.ApplicationId Is NULL)";
                dynStr += "AND (it.ShopId in " + utility.getShopForUser(User.Identity.Name) + " or it.ShopId is NULL)";
                ol.Add(new ObjectParameter("appname", appName));
                if (barcode.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.Barcode = @barcode ";
                    ol.Add(new ObjectParameter("Barcode", barcode));
                }
                if (name.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "( (it.Name ) LIKE '%' + @name + '%' OR (it.ItemCode ) LIKE '%' + @name + '%')";
                    ol.Add(new ObjectParameter("name", name));

                }
                if (code.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += " it.ItemCode = @code";
                    ol.Add(new ObjectParameter("code", code));
                }
                if (showOnline != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += " it.ShowOnline = @showOnline";
                    ol.Add(new ObjectParameter("showOnline", showOnline));
                }
                if (price != null)
                {
                    if (dynStr.Length > 0)

                        dynStr += " AND ";
                    dynStr += "it.Regular = @price";
                    ol.Add(new ObjectParameter("price", price));
                }
                if (shopid != null)
                {
                    //  lstShop.Add(shopid.Value);
                    if (dynStr.Length > 0)

                        dynStr += " AND ";
                    dynStr += "(it.ShopId = @ShopId or it.ShopId is NULL)";
                    ol.Add(new ObjectParameter("ShopId", shopid));
                }
                else
                {
                    // lstShop = (db.p_Employee.Single(g => g.p_Person.Code == User.Identity.Name && g.p_Person.aspnet_Applications.ApplicationName == appName).inv_Shop.Select(d => d.ShopId)).ToList<int>();
                }
                if (categoryid != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.CategoryID in " + utility.getHierarchyDataForGeneralCategory(categoryid);
                }
                if (status > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.AvailablityId   =   @status";
                    ol.Add(new ObjectParameter("status", status));
                }
                if (quantityfrom != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Quantity >=  @quantityfrom";
                    ol.Add(new ObjectParameter("quantityfrom", quantityfrom));
                }
                if (quantityto != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Quantity <=  @quantityto";
                    ol.Add(new ObjectParameter("quantityto", quantityto));
                }
                if (regdatefrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.EnteryDate >= @regdateFrom";
                    ol.Add(new ObjectParameter("regdateFrom", utility.GetDateCulture(regdatefrom)));
                }
                if (regdateto.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.EnteryDate <= @regdateTo";
                    ol.Add(new ObjectParameter("regdateTo", utility.GetDateCulture(regdateto)));
                }

                switch (selectData)
                {
                    case "GetProductList":
                        {
                            var result = db.View_ProductList.Where(dynStr, ol.ToArray());
                            return Json(new
                            {
                                sumQuantity = result.Sum(s => s.Quantity),
                                sumPrice = result.Sum(r => r.Regular * r.Quantity),
                                results = result.OrderBy("it." + sort)
                                .Select(b => new
                                {
                                    b.Barcode,
                                    b.Name,
                                    b.ItemCode,
                                    Regular = (decimal?)b.Regular,
                                    b.Status,
                                    b.Category,
                                    b.UnitType,
                                    b.Quantity
                                })
                            });
                            break;
                        }
                    case "GetItemsList":
                        {
                            if (first)
                            {
                                var result = db.View_ProductList.Where(dynStr, ol.ToArray());
                                return Json(new
                                {
                                    appName = appName,
                                    count = result.Count(),
                                    sumQuantity = result.Sum(s => s.Quantity),
                                    sumPrice = result.Sum(r => r.Regular * r.Quantity),
                                    results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                                    .Select(b => new
                                    {
                                        b.ShowOnline,
                                        b.BarcodeId,
                                        b.Barcode,
                                        b.Name,
                                        b.ItemCode,
                                        Regular = (decimal?)b.Regular,
                                        b.Status,
                                        b.Category,
                                        b.Quantity,
                                        b.UnitType,
                                        b.EnteryDate
                                    })
                                });
                            }
                            else
                            {
                                return Json(new
                                {
                                    appName = appName,
                                    results = db.View_ProductList.Where(dynStr, ol.ToArray())
                                        .OrderBy("it." + sort).Skip(skip).Take(take)
                                        .Select(b => new
                                        {
                                            b.BarcodeId,
                                            b.Barcode,
                                            b.Name,
                                            b.ItemCode,
                                            Regular = (decimal?)b.Regular,
                                            b.Status,
                                            b.Category,
                                            b.Quantity,
                                            b.UnitType,
                                            b.EnteryDate
                                        })
                                });
                            }
                            break;
                        }
                    case "getBarcodeReportList":
                        {
                            DateTime today = DateTime.Now;
                            if (first)
                            {
                                var result = db.View_ProductList.Where(dynStr, ol.ToArray());
                                return Json(new
                                {
                                    count = result.Count(),
                                    sumQuantity = result.Sum(s => s.Quantity),
                                    sumPrice = result.Sum(r => r.Regular * r.Quantity),
                                    results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                                     .Join(db.inv_Barcode, v => v.BarcodeId, b => b.BarcodeId, (v, b) => new { v, b })
                                    .Select(r => new
                                    {
                                        r.v.UnitType,
                                        r.b.AverageBuyPrice,
                                        r.b.AverageSellPrice,
                                        r.b.BuyQuantity,
                                        r.b.SellQuantity,
                                        r.b.TotalAvailableQuantity,
                                        r.b.TotalBrokenQuantity,
                                        r.v.Barcode,
                                        r.v.BarcodeId,
                                        r.v.ItemCode,
                                        r.v.Name,
                                        Regular = (decimal?)r.v.Regular,
                                        r.v.Status,
                                        r.v.Category,
                                        r.v.EnteryDate
                                    }).AsEnumerable().Select(r => new
                                    {
                                        r.UnitType,
                                        r.AverageBuyPrice,
                                        r.AverageSellPrice,
                                        r.Barcode,
                                        r.BarcodeId,
                                        r.BuyQuantity,
                                        r.Category,
                                        r.ItemCode,
                                        r.Name,
                                        r.Regular,
                                        r.SellQuantity,
                                        r.Status,
                                        r.TotalAvailableQuantity,
                                        r.TotalBrokenQuantity,
                                        AveSellPerDay = r.SellQuantity / (((today - r.EnteryDate).Days) == 0 ? 1 : ((today - r.EnteryDate).Days)),
                                        AveProfitPerDay = (r.SellQuantity * r.AverageSellPrice - r.BuyQuantity * r.AverageBuyPrice) / ((today - r.EnteryDate).Days == 0 ? 1 : (today - r.EnteryDate).Days),
                                        ItemFinishDate = r.SellQuantity == 0 ? "" : utility.GetstrDateCultureSimple(today.AddDays(Convert.ToInt32(r.TotalAvailableQuantity / ((r.SellQuantity / ((today - r.EnteryDate).Days == 0 ? 1 : (today - r.EnteryDate).Days)) == 0 ? 1 : (r.SellQuantity / ((today - r.EnteryDate).Days == 0 ? 1 : (today - r.EnteryDate).Days))))))
                                    })
                                });
                            }
                            else
                            {
                                return Json(new
                                {
                                    results = db.View_ProductList.Where(dynStr, ol.ToArray())
                                    .OrderBy("it." + sort).Skip(skip).Take(take)
                                          .Join(db.inv_Barcode, v => v.BarcodeId, b => b.BarcodeId, (v, b) => new { v, b })
                                    .Select(r => new
                                    {
                                        r.v.UnitType,
                                        r.b.AverageBuyPrice,
                                        r.b.AverageSellPrice,
                                        r.b.BuyQuantity,
                                        r.b.SellQuantity,
                                        r.b.TotalAvailableQuantity,
                                        r.b.TotalBrokenQuantity,
                                        r.v.Barcode,
                                        r.v.BarcodeId,
                                        r.v.ItemCode,
                                        r.v.Name,
                                        Regular = (decimal?)r.v.Regular,
                                        r.v.Status,
                                        r.v.Category,
                                        r.v.EnteryDate
                                    }).AsEnumerable().Select(r => new
                                    {
                                        r.UnitType,
                                        r.AverageBuyPrice,
                                        r.AverageSellPrice,
                                        r.Barcode,
                                        r.BarcodeId,
                                        r.BuyQuantity,
                                        r.Category,
                                        r.ItemCode,
                                        r.Name,
                                        r.Regular,
                                        r.SellQuantity,
                                        r.Status,
                                        r.TotalAvailableQuantity,
                                        r.TotalBrokenQuantity,
                                        AveSellPerDay = r.SellQuantity / (((today - r.EnteryDate).Days) == 0 ? 1 : ((today - r.EnteryDate).Days)),
                                        AveProfitPerDay = (r.SellQuantity * r.AverageSellPrice - r.BuyQuantity * r.AverageBuyPrice) / ((today - r.EnteryDate).Days == 0 ? 1 : (today - r.EnteryDate).Days),
                                        ItemFinishDate = r.SellQuantity == 0 ? "" : utility.GetstrDateCultureSimple(today.AddDays(Convert.ToInt32(r.TotalAvailableQuantity / ((r.SellQuantity / ((today - r.EnteryDate).Days == 0 ? 1 : (today - r.EnteryDate).Days)) == 0 ? 1 : (r.SellQuantity / ((today - r.EnteryDate).Days == 0 ? 1 : (today - r.EnteryDate).Days))))))
                                    })
                                });

                            }

                        }
                    default:
                        return Json(new { isDone = false, msg = "" });

                }
            }
            catch (Exception ex)
            {
                return Json(new { msg = ex.InnerException.Message });
            }
        }


        public ActionResult GetCommentList(int skip, int take, int currentPage, bool first, string sort, string barcode, string name,
                             string code, decimal? price, int? categoryid, int? status, decimal? quantityfrom,
                             decimal? quantityto, string regdatefrom, string regdateto, int? shopid, bool? showOnline, string selectData)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }
                List<ObjectParameter> ol = new List<ObjectParameter>();
                //  List<int> lstShop = new List<int>();
                string dynStr = string.Empty;

                dynStr += "(it.inv_Barcode.aspnet_Applications.ApplicationName = @appname or it.inv_Barcode.aspnet_Applications.ApplicationId Is NULL)";
                //   dynStr += "AND (it.inv_Barcode.ShopId in " + utility.getShopForUser(User.Identity.Name) + " or it.ShopId is NULL)";
                ol.Add(new ObjectParameter("appname", appName));
                if (barcode.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.inv_Barcode.Barcode = @barcode ";
                    ol.Add(new ObjectParameter("Barcode", barcode));
                }
                if (name.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "( (it.inv_Barcode.Name ) LIKE '%' + @name + '%' OR (it.inv_Barcode.ItemCode ) LIKE '%' + @name + '%')";
                    ol.Add(new ObjectParameter("name", name));

                }
                if (code.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += " it.inv_Barcode.ItemCode = @code";
                    ol.Add(new ObjectParameter("code", code));
                }
                if (showOnline != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += " it.inv_Barcode.ShowOnline = @showOnline";
                    ol.Add(new ObjectParameter("showOnline", showOnline));
                }
                if (price != null)
                {
                    if (dynStr.Length > 0)

                        dynStr += " AND ";
                    dynStr += "it.inv_Barcode.Regular = @price";
                    ol.Add(new ObjectParameter("price", price));
                }
                //if (shopid != null)
                //{
                //    //  lstShop.Add(shopid.Value);
                //    if (dynStr.Length > 0)

                //        dynStr += " AND ";
                //    dynStr += "(it.inv_Barcode.ShopId = @ShopId or it.inv_Barcode.ShopId is NULL)";
                //    ol.Add(new ObjectParameter("ShopId", shopid));
                //}
                else
                {
                    // lstShop = (db.p_Employee.Single(g => g.p_Person.Code == User.Identity.Name && g.p_Person.aspnet_Applications.ApplicationName == appName).inv_Shop.Select(d => d.ShopId)).ToList<int>();
                }
                if (categoryid != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.inv_Barcode.CategoryID in " + utility.getHierarchyDataForGeneralCategory(categoryid);
                }
                if (status > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.inv_Barcode.AvailablityId   =   @status";
                    ol.Add(new ObjectParameter("status", status));
                }
                if (quantityfrom != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.inv_Barcode.Quantity >=  @quantityfrom";
                    ol.Add(new ObjectParameter("quantityfrom", quantityfrom));
                }
                if (quantityto != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.inv_Barcode.Quantity <=  @quantityto";
                    ol.Add(new ObjectParameter("quantityto", quantityto));
                }
                if (regdatefrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.inv_Barcode.EnteryDate >= @regdateFrom";
                    ol.Add(new ObjectParameter("regdateFrom", utility.GetDateCulture(regdatefrom)));
                }
                if (regdateto.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.inv_Barcode.EnteryDate <= @regdateTo";
                    ol.Add(new ObjectParameter("regdateTo", utility.GetDateCulture(regdateto)));
                }
                if (first)
                {
                    var result = db.p_Comment.Where(dynStr, ol.ToArray());
                    return Json(new
                    {
                        count = result.Count(),
                        results = result.OrderBy("it." + sort).Skip(skip).Take(take)

                        .Select(b => new
                        {
                            b.BarcodeId,
                            b.Comment,
                            b.CommentId,
                            b.CustomerId,
                            b.Date,
                            b.inv_Barcode.Name,
                            b.inv_Barcode.ItemCode,
                            b.inv_Barcode.Barcode,
                            b.IsConfirmed,
                            CustomerName = b.p_Customer.p_Person.Name,
                            b.p_Customer.p_Person.Family,
                            b.p_Customer.p_Person.Code,
                            b.p_Customer.AccountId
                        })
                    });
                }
                else
                {
                    var result = db.p_Comment.Where(dynStr, ol.ToArray());
                    return Json(new
                    {
                        results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                        .Select(b => new
                        {
                            b.BarcodeId,
                            b.Comment,
                            b.CommentId,
                            b.CustomerId,
                            b.Date,
                            b.inv_Barcode.Name,
                            b.inv_Barcode.ItemCode,
                            b.inv_Barcode.Barcode,
                            b.IsConfirmed,
                            CustomerName = b.p_Customer.p_Person.Name,
                            b.p_Customer.p_Person.Family,
                            b.p_Customer.p_Person.Code,
                            b.p_Customer.AccountId
                        })
                    });
                }
                return Json(new { isDone = false, msg = "" });

            }

            catch (Exception ex)
            {
                return Json(new { msg = ex.InnerException.Message });
            }
        }


        public ActionResult EditComment(int CommentId, string Comment)
        {
            try
            {
                db.p_Comment.Single(s => s.CommentId == CommentId).Comment = Comment;
                db.SaveChanges();
                return Json(new { isDone = true });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
        }

        public ActionResult DeleteComment(int CommentId)
        {
            try
            {
                db.p_Comment.DeleteObject(db.p_Comment.Single(s => s.CommentId == CommentId));
                db.SaveChanges();
                return Json(new { isDone = true });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
        }

        public ActionResult ConfirmComment(int CommentId, bool isConfirmed)
        {
            try
            {
                db.p_Comment.Single(s => s.CommentId == CommentId).IsConfirmed = isConfirmed;
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
        }
        public ActionResult GetColorListByBarcodeIdAll(string arg)
        {
            int iarg = Int32.Parse(arg);
            return Json(db.inv_ItemDetail.Where(b => b.BarcodeId == iarg && b.inv_Color.Count > 0)
                .Select(a => new
                {
                    id = a.inv_Color.FirstOrDefault().ColorId,
                    name = a.inv_Color.FirstOrDefault().Color,
                }).Distinct());
        }

        public ActionResult getPhotos(string barcode)
        {
            try
            {
                List<string> lphotos = new List<string>();
                string[] photos = System.IO.Directory.GetFiles(Server.MapPath("~/Data/" + appName + "Photos/" + barcode));
                foreach (var item in photos)
                {
                    if (item.Contains("tiny"))
                        lphotos.Add(barcode + "\\" + System.IO.Path.GetFileName(item));
                }
                return Json(new { lphotos = lphotos, appName = appName, hasPhoto = true });
            }
            catch (Exception ex) { return Json(new { hasPhoto = false, msg = ex.Message }); }
            finally { Dispose(); }
        }

        public ActionResult sortPhotos(string[] photos, string barcode)
        {
            int i = 1;
            foreach (var item in photos)
            {
                System.IO.File.Move(Server.MapPath("~/Data/" + appName + "Photos/" + item), Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("\\", "\\r")));
                System.IO.File.Move(Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("tiny_", "thumb_")), Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("tiny_", "thumb_").Replace("\\", "\\r")));
                System.IO.File.Move(Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("tiny_", "")), Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("tiny_", "").Replace("\\", "\\r")));
            }
            foreach (var item in photos)
            {
                int priority = Convert.ToInt32(item.Split('_')[1].Replace(".jpg", ""));
                System.IO.File.Move(Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("\\", "\\r")), Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("\\r", "\\").Replace("tiny_" + priority, "tiny_" + i)));
                System.IO.File.Move(Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("\\", "\\r").Replace("tiny_", "thumb_")), Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("\\r", "\\").Replace("tiny_", "thumb_").Replace("thumb_" + priority, "thumb_" + i)));
                System.IO.File.Move(Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("\\", "\\r").Replace("tiny_", "")), Server.MapPath("~/Data/" + appName + "Photos/" + item.Replace("\\r", "\\").Replace("tiny_", "").Replace("\\" + priority, "\\" + i)));
                i++;
            }

            string mappath = Server.MapPath("~/Data/" + appName + "Photos/" + barcode);
            string[] photoss = System.IO.Directory.GetFiles(mappath);
            string images = "";
            int l = photoss.Length;
            if (l > 0)
            {
                foreach (string item in photoss)
                {
                    if (!item.Contains("tiny") && !item.Contains("thumb"))
                        images += System.IO.Path.GetFileName(item).Replace(".jpg", "") + ",";
                }
                images = images.Remove(images.Length - 1, 1);
                db.inv_Barcode.Single(ba => ba.Barcode == barcode && ba.aspnet_Applications.ApplicationName == appName).Images = images;
                db.SaveChanges();
            }
            return getPhotos(barcode);
        }

        public ActionResult deletePhoto(string fileName, string barcode)
        {
            var userRoles = utility.GetUserRoles(new MapiDBEntities(), User.Identity.Name, appName);
            if (!userRoles.Contains("canAddImage") && !userRoles.Contains("canDeleteImage"))
            {
                return Json("notInRole");
            }
            System.IO.File.Delete(Server.MapPath("~/Data/" + appName + "Photos/" + fileName.Replace("\tiny", "/tiny")));
            System.IO.File.Delete(Server.MapPath("~/Data/" + appName + "Photos/" + fileName.Replace("\tiny", "/thumb").Replace("tiny_", "thumb_")));
            System.IO.File.Delete(Server.MapPath("~/Data/" + appName + "Photos/" + fileName.Replace("\tiny_", "/").Replace("tiny_", "")));

            return Json("عکس مورد نظر حذف شد.");
        }




        public ActionResult GetItemRestrictionList(int barcodeId)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }

            var barcode = db.inv_Barcode.Single(c => c.BarcodeId == barcodeId);

            return Json(new { isDone = true, restrictionList = barcode.inv_Restriction.Select(r => new { r.Restriction, r.RestrictionId }) });
        }

        public ActionResult AddItemRestriction()
        {
            int barcodeId = Convert.ToInt32(Request["barcodeId"]);
            int restrictionId = Convert.ToInt32(Request["Combo"]);
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }

            var barcode = db.inv_Barcode.Single(c => c.BarcodeId == barcodeId);

            db.inv_Barcode.Single(s => s.BarcodeId == barcodeId).inv_Restriction.Add(db.inv_Restriction.Single(r => r.RestrictionId == restrictionId));
            db.SaveChanges();
            return Json(new { isDone = true, restrictionList = barcode.inv_Restriction.Select(r => new { r.Restriction, r.RestrictionId }) });

        }

        public ActionResult DeleteItemRestriction(int barcodeId, int restrictionId)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }

            var barcode = db.inv_Barcode.Single(c => c.BarcodeId == barcodeId);

            db.inv_Barcode.Single(s => s.BarcodeId == barcodeId).inv_Restriction.Remove(db.inv_Restriction.Single(r => r.RestrictionId == restrictionId));
            db.SaveChanges();
            return Json(new { isDone = true, restrictionList = barcode.inv_Restriction.Select(r => new { r.Restriction, r.RestrictionId }) });

        }


        public ActionResult GetSingleBarcode(int barcodeid)
        {

            return Json(new
            {
                result = db.inv_Barcode.Where(b => b.BarcodeId == barcodeid && (b.ApplicationId == null || b.aspnet_Applications.ApplicationName == appName))
                    .Select(b => new
                    {
                        b.BarcodeId,
                        b.Barcode,
                        b.Name,
                        b.ItemCode,
                        b.inv_Availablity.AvailablityId,
                        b.Weight,
                        b.Description,
                        b.ShowOnline,
                        b.IsNew,
                        b.IsOffer,
                        b.IsSale
                    })
            });

        }


        public ActionResult EditBarcode(int barcodeid, string barcode, string name, string itemcode,
        int availibilityid, string discription, decimal? weight, bool showOnline)
        {
            var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
            if (!roles.Contains("canDeleteProduct") && !roles.Contains("canAddProduct"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                inv_Barcode bar = db.inv_Barcode.Single(b => b.BarcodeId == barcodeid);
                bar.Barcode = barcode;
                bar.Name = String.IsNullOrEmpty(name) ? null : name;
                bar.ItemCode = itemcode;
                bar.AvailabilityId = availibilityid;
                bar.Description = discription;
                bar.Weight = weight;
                bar.ShowOnline = showOnline;
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult GetItemDefinition(int barcodeId)
        {
            return Json(new { canEdit = utility.isInRole(new MapiDBEntities(), User.Identity.Name, appName, "canEditHelp"), isDone = true, result = db.inv_Barcode.Single(b => b.BarcodeId == barcodeId).Definition });
        }


        public ActionResult AddItemDefinition(int barcodeId, string definition)
        {
            if (!utility.isInRole(new MapiDBEntities(), User.Identity.Name, appName, "Inventory"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                db.inv_Barcode.Single(b => b.BarcodeId == barcodeId).Definition = definition;
                db.SaveChanges();
                return Json(new { isdone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
            finally { Dispose(); }

        }

        public ActionResult getMatchingBarcodes(int barcodeId)
        {
            try
            {
                var results = db.inv_MatchingBarcode.Where(m => m.BarcodeId == barcodeId).Select(m => new
                {
                    m.inv_Barcode1.Name,
                    m.inv_Barcode1.ItemCode,
                    m.inv_Barcode1.Barcode,
                    m.MatchingQuantity,
                    m.Quantity,
                    m.DiscountPercentage,
                    m.MatchingBarcodeId,
                    m.MatchingItemId
                });
                return Json(new { isdone = true, results });
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
        }

        public ActionResult addMatchingBarcode(int barcodId, string matchedBarcode, decimal? discountPer, decimal? countBarcode, decimal? countMatched)
        {
            try
            {
                inv_MatchingBarcode bm = new inv_MatchingBarcode();
                bm.BarcodeId = barcodId;
                bm.DiscountPercentage = discountPer != null ? discountPer.Value : 0;
                int matchedBarcodeId = db.inv_Barcode.SingleOrDefault(b => b.Barcode == matchedBarcode).BarcodeId;
                bm.MatchingBarcodeId = matchedBarcodeId;
                bm.MatchingQuantity = countMatched != null ? countMatched.Value : 0;
                bm.Quantity = countBarcode != null ? countBarcode.Value : 0;
                db.inv_MatchingBarcode.AddObject(bm);
                db.SaveChanges();
                return Json(new { isdone = true });
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
        }


        public ActionResult DeleteMatchingBarcode(int matchingItemId)
        {
            //if (!utility.isInRole(db, User.Identity.Name, appName, "canDeleteMatchingBarcode"))
            //{
            //    return Json( new { isDone = false, msg = "notInRole" });
            //}
            try
            {

                db.inv_MatchingBarcode.DeleteObject(db.inv_MatchingBarcode.Single(c => c.MatchingItemId == matchingItemId));
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception e) { return Json(new { isDone = false, msg = e.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult GetColorList()
        {

            return Json(db.inv_Color.Where(s => s.ApplicationId == null || s.aspnet_Applications.ApplicationName == appName)
                .Select(a => new
                {
                    id = a.ColorId,
                    name = a.Color,
                }));
        }
        public ActionResult GetSizeParent()
        {
            return Json(db.inv_Size.Where(s => s.ParentSizeId == null && (s.ApplicationId == null || s.aspnet_Applications.ApplicationName == appName)).Select(s => new { s.SizeId, s.Size }));
        }

        public ActionResult GetSizeChild(int parentid)
        {
            return Json(db.inv_Size.Where(s => s.ParentSizeId == parentid && (s.ApplicationId == null || s.aspnet_Applications.ApplicationName == appName)).Select(s => new { s.SizeId, s.Size }));
        }

        public ActionResult AddSizeColor(int barcodeid, int[] colorlist, int[] sizelist, decimal? price, bool noColorSize)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canAddColorNSize"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                var appId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;
                inv_Barcode bar = db.inv_Barcode.Single(b => b.BarcodeId == barcodeid);
                inv_ItemDetail itm;
                var parentAccount = (bar.AccountId == null) ? db.ac_TableAccount.Single(a => a.Table == "item" && a.aspnet_Applications.ApplicationName == appName).ac_Account : bar.ac_Account.ac_Account2;
                var tableAccount = db.ac_TableAccount.Single(a => a.Table == "itemSale" && a.aspnet_Applications.ApplicationName == appName);
                var tableAccountPrice = db.ac_TableAccount.Single(a => a.Table == "itemPrice" && a.aspnet_Applications.ApplicationName == appName);
                int i = 1;
                if ((colorlist != null && colorlist.Count() > 0) && (sizelist != null && sizelist.Count() > 0))
                {

                    foreach (var coloritem in colorlist)
                    {
                        foreach (var sizeitem in sizelist)
                        {

                            itm = new inv_ItemDetail();
                            itm.BarcodeId = barcodeid;
                            itm.DetailPrice = price;
                            itm.BuyQuantity = 0;
                            itm.BuyPrice = 0;
                            itm.SellPrice = 0;
                            itm.SoldQuantity = 0;
                            var color = db.inv_Color.Single(c => c.ColorId == coloritem);
                            var size = db.inv_Size.Single(s => s.SizeId == sizeitem);
                            itm.inv_Color.Add(color);
                            itm.inv_Size.Add(size);


                            var account = new ac_Account()
                            {
                                AccountNature = parentAccount != null ? parentAccount.AccountNature : 1,
                                Code = utility.FindAccountCodeByParentId(parentAccount.AccountId) + i,
                                GroupType = parentAccount.GroupType,
                                Level = 3,// Convert.ToByte(parentAccount.Level + 1),
                                Name = bar.Name + " " + bar.ItemCode + " " + color.Color + " " + size.Size + " م.ک",
                                ParentAccountId = parentAccount.AccountId,
                                ApplicationId = appId,
                                LedgentId = findLedgentAccId(parentAccount.AccountId)
                            };

                            int saleAccountId = tableAccount.AccountId;
                            var saleAccount = db.ac_Account.Single(a => a.AccountId == saleAccountId);
                            var accountSale = new ac_Account()
                            {
                                AccountNature = parentAccount != null ? parentAccount.AccountNature : 1,
                                Code = utility.FindAccountCodeByParentId(saleAccountId) + i + 1,
                                GroupType = saleAccount.GroupType,
                                Level = 3,// Convert.ToByte(saleAccount.Level + 1),
                                Name = bar.Name + " " + bar.ItemCode + " " + color.Color + " " + size.Size + " فروش",
                                ParentAccountId = tableAccount.AccountId,
                                ApplicationId = appId,
                                ac_Account3 = account,
                                LedgentId = findLedgentAccId(tableAccount.AccountId)
                            };

                            int priceAccountId = tableAccountPrice.AccountId;
                            var priceAccount = db.ac_Account.Single(a => a.AccountId == priceAccountId);
                            var accountPrice = new ac_Account()
                            {
                                AccountNature = priceAccount.AccountNature,
                                Code = utility.FindAccountCodeByParentId(priceAccountId) + i + 2,
                                GroupType = priceAccount.GroupType,
                                Level = 3,// Convert.ToByte(priceAccount.Level + 1),
                                Name = bar.Name + " " + bar.ItemCode + " " + color.Color + " " + size.Size + " ق.ت",
                                ParentAccountId = tableAccountPrice.AccountId,
                                ApplicationId = appId,
                                ac_Account3 = account,
                                LedgentId = findLedgentAccId(tableAccountPrice.AccountId)
                            };
                            itm.ac_Account = account;
                            bar.inv_ItemDetail.Add(itm);
                            i = i + 3;
                        }
                    }
                }

                if ((colorlist != null && colorlist.Count() > 0) && (sizelist == null || sizelist.Count() == 0))
                {
                    foreach (var coloritem in colorlist)
                    {

                        itm = new inv_ItemDetail();
                        itm.BarcodeId = barcodeid;
                        itm.DetailPrice = price;
                        itm.BuyQuantity = 0;
                        itm.BuyPrice = 0;
                        itm.SellPrice = 0;
                        itm.SoldQuantity = 0;
                        var color = db.inv_Color.Single(c => c.ColorId == coloritem);
                        itm.inv_Color.Add(color);
                        var account = new ac_Account()
                        {
                            AccountNature = parentAccount.AccountNature,
                            Code = utility.FindAccountCodeByParentId(parentAccount.AccountId) + i,
                            GroupType = parentAccount.GroupType,
                            Level = 3,// Convert.ToByte(parentAccount.Level + 1),
                            Name = bar.Name + " " + bar.ItemCode + " " + color.Color + " م.ک",
                            ParentAccountId = parentAccount.AccountId,
                            ApplicationId = appId,
                            LedgentId = findLedgentAccId(parentAccount.AccountId)
                        };
                        int saleAccountId = tableAccount.AccountId;
                        var saleAccount = db.ac_Account.Single(a => a.AccountId == saleAccountId);
                        var accountSale = new ac_Account()
                        {
                            AccountNature = parentAccount != null ? parentAccount.AccountNature : 1,
                            Code = utility.FindAccountCodeByParentId(saleAccountId) + i + 1,
                            GroupType = saleAccount.GroupType,
                            Level = 3,//Convert.ToByte(saleAccount.Level + 1),
                            Name = bar.Name + " " + bar.ItemCode + " " + color.Color + " فروش",
                            ParentAccountId = tableAccount.AccountId,
                            ApplicationId = appId,
                            ac_Account3 = account,
                            LedgentId = findLedgentAccId(tableAccount.AccountId)
                        };
                        int priceAccountId = tableAccountPrice.AccountId;
                        var priceAccount = db.ac_Account.Single(a => a.AccountId == priceAccountId);
                        var accountPrice = new ac_Account()
                        {
                            AccountNature = priceAccount.AccountNature,
                            Code = utility.FindAccountCodeByParentId(priceAccountId) + i + 2,
                            GroupType = priceAccount.GroupType,
                            Level = 3,// Convert.ToByte(priceAccount.Level + 1),
                            Name = bar.Name + " " + bar.ItemCode + " " + color.Color + " ق.ت",
                            ParentAccountId = tableAccountPrice.AccountId,
                            ApplicationId = appId,
                            ac_Account3 = account,
                            LedgentId = findLedgentAccId(tableAccountPrice.AccountId)
                        };
                        itm.ac_Account = account;
                        bar.inv_ItemDetail.Add(itm);
                        i = i + 3;
                    }
                }

                if ((colorlist == null || colorlist.Count() == 0) && (sizelist != null && sizelist.Count() > 0))
                {
                    foreach (var sizeitem in sizelist)
                    {

                        itm = new inv_ItemDetail();
                        itm.BarcodeId = barcodeid;
                        itm.DetailPrice = price;
                        itm.BuyQuantity = 0;
                        itm.BuyPrice = 0;
                        itm.SellPrice = 0;
                        itm.SoldQuantity = 0;
                        var size = db.inv_Size.Single(s => s.SizeId == sizeitem);
                        var account = new ac_Account()
                        {
                            AccountNature = parentAccount.AccountNature,
                            Code = utility.FindAccountCodeByParentId(parentAccount.AccountId) + i,
                            GroupType = parentAccount.GroupType,
                            Level = 3,// Convert.ToByte(parentAccount.Level + 1),
                            Name = bar.Name + " " + bar.ItemCode + " " + size.Size + " م.ک",
                            ParentAccountId = parentAccount.AccountId,
                            ApplicationId = appId,
                            LedgentId = findLedgentAccId(parentAccount.AccountId)
                        };
                        int saleAccountId = tableAccount.AccountId;
                        var saleAccount = db.ac_Account.Single(a => a.AccountId == saleAccountId);
                        var accountSale = new ac_Account()
                        {
                            AccountNature = parentAccount != null ? parentAccount.AccountNature : 1,
                            Code = utility.FindAccountCodeByParentId(saleAccountId) + i + 1,
                            GroupType = saleAccount.GroupType,
                            Level = 3,// Convert.ToByte(saleAccount.Level + 1),
                            Name = bar.Name + " " + bar.ItemCode + " " + size.Size + " فروش",
                            ParentAccountId = tableAccount.AccountId,
                            ApplicationId = appId,
                            ac_Account3 = account,
                            LedgentId = findLedgentAccId(tableAccount.AccountId)
                        };
                        int priceAccountId = tableAccountPrice.AccountId;
                        var priceAccount = db.ac_Account.Single(a => a.AccountId == priceAccountId);
                        var accountPrice = new ac_Account()
                        {
                            AccountNature = priceAccount.AccountNature,
                            Code = utility.FindAccountCodeByParentId(priceAccountId) + i + 2,
                            GroupType = priceAccount.GroupType,
                            Level = 3,// Convert.ToByte(priceAccount.Level + 1),
                            Name = bar.Name + " " + bar.ItemCode + " " + size.Size + " ق.ت",
                            ParentAccountId = tableAccountPrice.AccountId,
                            ApplicationId = appId,
                            ac_Account3 = account,
                            LedgentId = findLedgentAccId(tableAccountPrice.AccountId)
                        };
                        itm.ac_Account = account;
                        itm.inv_Size.Add(size);
                        bar.inv_ItemDetail.Add(itm);
                        i = i + 3;
                    }
                }
                if (noColorSize)
                {
                    var account = new ac_Account()
                    {
                        AccountNature = parentAccount.AccountNature,
                        Code = utility.FindAccountCodeByParentId(parentAccount.AccountId) + i,
                        GroupType = parentAccount.GroupType,
                        Level = 3,// Convert.ToByte(parentAccount.Level + 1),
                        Name = bar.Name + " " + bar.ItemCode + " م.ک",
                        ParentAccountId = parentAccount.AccountId,
                        ApplicationId = appId,
                        LedgentId = findLedgentAccId(parentAccount.AccountId)
                    };
                    int saleAccountId = tableAccount.AccountId;
                    var saleAccount = db.ac_Account.Single(a => a.AccountId == saleAccountId);
                    var accountSale = new ac_Account()
                    {
                        AccountNature = parentAccount != null ? parentAccount.AccountNature : 1,
                        Code = utility.FindAccountCodeByParentId(saleAccountId) + i + 1,
                        GroupType = saleAccount.GroupType,
                        Level = 3,// Convert.ToByte(saleAccount.Level + 1),
                        Name = bar.Name + " " + bar.ItemCode + " فروش",
                        ParentAccountId = tableAccount.AccountId,
                        ApplicationId = appId,
                        ac_Account3 = account,
                        LedgentId = findLedgentAccId(tableAccount.AccountId)
                    };
                    int priceAccountId = tableAccountPrice.AccountId;
                    var priceAccount = db.ac_Account.Single(a => a.AccountId == priceAccountId);
                    var accountPrice = new ac_Account()
                    {
                        AccountNature = priceAccount.AccountNature,
                        Code = utility.FindAccountCodeByParentId(priceAccountId) + i + 2,
                        GroupType = priceAccount.GroupType,
                        Level = 3,// Convert.ToByte(priceAccount.Level + 1),
                        Name = bar.Name + " " + bar.ItemCode + " ق.ت",
                        ParentAccountId = tableAccountPrice.AccountId,
                        ApplicationId = appId,
                        ac_Account3 = account,
                        LedgentId = findLedgentAccId(tableAccountPrice.AccountId)
                    };
                    itm = new inv_ItemDetail();
                    itm.BarcodeId = barcodeid;
                    itm.DetailPrice = price;
                    itm.BuyQuantity = 0;
                    itm.BuyPrice = 0;
                    itm.SellPrice = 0;
                    itm.SoldQuantity = 0;
                    itm.ac_Account = account;
                    bar.inv_ItemDetail.Add(itm);
                }

                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.InnerException.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult GetColor_Size(int barcodeid)
        {
            return Json(db.inv_ItemDetail.Where(b => b.BarcodeId == barcodeid)
                .Select(b => new
                {
                    ItemDetailId = b.AccountId,
                    SizeId = b.inv_Size.Count > 0 ? b.inv_Size.FirstOrDefault().SizeId : 0,
                    Size = b.inv_Size.FirstOrDefault().inv_Size2.Size + ">" + b.inv_Size.FirstOrDefault().Size,
                    ColorId = b.inv_Color.Count > 0 ? b.inv_Color.FirstOrDefault().ColorId : 0,
                    b.DetailPrice,
                    Color = b.inv_Color.FirstOrDefault().Color,
                    b.BuyPrice,
                    Quantity = (decimal?)b.inv_ItemLocation.Sum(s => s.Quantity)
                }));
        }

        public ActionResult EditColor_Size(int itemid, int? sizeid, int? colorid, decimal? price)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditItemDetail"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                inv_ItemDetail itm = db.inv_ItemDetail.Single(b => b.AccountId == itemid);
                itm.DetailPrice = price;
                if (itm.inv_Color.Count > 0)
                    itm.inv_Color.Remove(itm.inv_Color.FirstOrDefault());
                if (colorid != null)
                    itm.inv_Color.Add(db.inv_Color.Single(c => c.ColorId == colorid));
                if (itm.inv_Size.Count > 0)
                    itm.inv_Size.Remove(itm.inv_Size.FirstOrDefault());
                if (sizeid != null)
                    itm.inv_Size.Add(db.inv_Size.Single(c => c.SizeId == sizeid));
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult DeleteBarcode(int barcodeid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canDeleteColorNSize"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                var barcode = db.inv_Barcode.Single(c => c.BarcodeId == barcodeid);
                if (barcode.AccountId != null)
                    db.ac_Account.DeleteObject(barcode.ac_Account);
                db.inv_Barcode.DeleteObject(barcode);

                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception e)
            {
                return Json(new { isDone = false, msg = e.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult DeleteItem(int itemid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canDeleteColorNSize"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                var itemDetail = db.inv_ItemDetail.Single(c => c.AccountId == itemid);
                foreach (var item in db.ac_Account.Where(a => a.RelatedAccountId == itemid).ToList())
                {
                    db.ac_Account.DeleteObject(item);
                }
                db.inv_ItemDetail.DeleteObject(db.inv_ItemDetail.Single(c => c.AccountId == itemid));
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception e) { return Json(new { isDone = true, msg = e.InnerException.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }
        public ActionResult GetPrice(int barcodeid)
        {
            return Json(db.inv_Price.Where(b => b.BarcodeId == barcodeid)
                .Select(b => new { b.PriceId, b.Regular, b.Wholesale, b.Freinds, b.Online, b.Date }).AsEnumerable()
                .Select(p => new { p.PriceId, p.Regular, p.Freinds, p.Wholesale, p.Online, Date = utility.GetstrDateCulture(p.Date.Value) }));
        }

        public ActionResult AddPrice(int barcodeid, string date, decimal regular, decimal? Frinends, decimal? wholesale, decimal? online)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canAddPrice"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            inv_Barcode bar = db.inv_Barcode.Single(b => b.BarcodeId == barcodeid);
            inv_Price itm = new inv_Price();
            try
            {

                itm.Date = utility.GetDateCulture(date);
                itm.Regular = regular;
                itm.Freinds = Frinends;
                itm.Wholesale = wholesale;
                if (online == null)
                    itm.Online = regular;
                else
                    itm.Online = online;
                bar.inv_Price.Add(itm);
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }
        public ActionResult EditPrice(int priceid, string date, decimal regular, decimal? Frinends, decimal? wholesale, decimal? online)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canDeletePrice"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                inv_Price itm = db.inv_Price.Single(p => p.PriceId == priceid);
                itm.Date = utility.GetDateCulture(date);
                itm.Regular = regular;
                itm.Freinds = Frinends;
                itm.Wholesale = wholesale;
                itm.Online = online == null ? regular : online;
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult DeletePrice(int priceid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canDeletePrice"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {

                db.inv_Price.DeleteObject(db.inv_Price.Single(c => c.PriceId == priceid));
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception e) { return Json(new { isDone = false, msg = e.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult GetCategoryList(int barcodeid)
        {
            return Json(db.inv_Barcode.Single(b => b.BarcodeId == barcodeid).inv_Category.Select(c => new { c.CategoryId, c.Category }).AsEnumerable()
                .Select(b => new { b.CategoryId, Category = utility.getStrCategory(db.GetParentCategoryById(b.CategoryId, "0")) }));
        }

        public ActionResult AddCategory(int barcodeid, int categoryid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canAddProductCategory"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }

            try
            {
                inv_Barcode bar = db.inv_Barcode.Single(b => b.BarcodeId == barcodeid);
                bar.inv_Category.Add(db.inv_Category.Single(c => c.CategoryId == categoryid));
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult DeleteCategory(int barcodeid, int categoryid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canDeleteProductCategory"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            inv_Barcode bar = db.inv_Barcode.Single(b => b.BarcodeId == barcodeid);
            try
            {
                bar.inv_Category.Remove(db.inv_Category.Single(c => c.CategoryId == categoryid));
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult AddUnit(int barcodeid, int MeasureUnitId, decimal quantity, decimal? discount)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditMeasureUnit"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                db.inv_BarcodeMeasureUnit.AddObject(new inv_BarcodeMeasureUnit()
                {
                    BarcodeId = barcodeid,
                    MeasureUnitId = MeasureUnitId,
                    Quantity = quantity,
                    DiscountPercentage = discount
                });
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult GetUnitList(int barcodeid)
        {
            try
            {
                return Json(db.inv_Barcode.Single(b => b.BarcodeId == barcodeid).inv_BarcodeMeasureUnit.Select(c => new
                {
                    c.MeasureUnitId,
                    c.inv_MeasureUnit.UnitType,
                    c.Quantity,
                    c.DiscountPercentage
                }));
            }
            catch (Exception ex)
            {
                return Json(new { msg = ex.Message, isDone = false });
            }
        }
        public ActionResult EditUnit(int barcodeid, int oldMeasureUnitId, int newMeasureUnitId, decimal quantity,
                                decimal discount)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditMeasureUnit"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                var q = db.inv_BarcodeMeasureUnit.SingleOrDefault(b => b.BarcodeId == barcodeid &&
                                                                       b.MeasureUnitId == oldMeasureUnitId);
                db.inv_BarcodeMeasureUnit.DeleteObject(q);
                db.inv_BarcodeMeasureUnit.AddObject(new inv_BarcodeMeasureUnit()
                {
                    BarcodeId = barcodeid,
                    Quantity = quantity,
                    DiscountPercentage = discount,
                    MeasureUnitId = newMeasureUnitId
                });
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult DeleteUnit(int barcodeid, int MeasureUnitId)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditMeasureUnit"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                var q = db.inv_BarcodeMeasureUnit.SingleOrDefault(b => b.BarcodeId == barcodeid && b.MeasureUnitId == MeasureUnitId);
                if (q != null)
                {
                    db.inv_BarcodeMeasureUnit.DeleteObject(q);
                    db.SaveChanges();
                }
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult GetMeasureUnitListByBarcodeId(int arg)
        {
            return Json(db.inv_BarcodeMeasureUnit.Where(m => m.BarcodeId == arg)
                .Select(a => new
                {
                    id = a.MeasureUnitId,
                    name = a.inv_MeasureUnit.UnitType + "_" + a.Quantity + "_" + a.DiscountPercentage,
                }));
        }
        #endregion
        //Inventory end
        //onlineOrders
        #region
        public DataTable GetUserOrders()
        {
            try
            {
                var ordh1 = db.ac_OrderHeader.Where(oh => oh.ac_ReceiverDetails != null && oh.ConfirmerId == null).OrderByDescending(oh => oh.OrderHeaderId);
                var ordh = db.ac_OrderHeader.Where(oh => oh.ac_ReceiverDetails != null && oh.ConfirmerId == null).OrderByDescending(oh => oh.OrderHeaderId).Select(oh => new
                {
                    oh.Amount,
                    oh.ac_ReceiverDetails.DiscountAmount,
                    oh.InvoiceNO,
                    oh.ConfirmerId,
                    oh.ac_ReceiverDetails.IsGift,
                    oh.OrderHeaderId,
                    oh.Date,
                    oh.ac_ReceiverDetails.Name,
                    oh.ac_ReceiverDetails.Family,
                    oh.ac_ReceiverDetails.Phone,
                    oh.ac_ReceiverDetails.CellPhone,
                    oh.ac_ReceiverDetails.Address,
                    oh.ac_ReceiverDetails.PostalCode,
                    sname = oh.p_Person.Name,
                    sfamily = oh.p_Person.Family,
                    sphone = oh.p_Person.p_Phone.FirstOrDefault(p => p.Cell == false),
                    smobile = oh.p_Person.p_Phone.FirstOrDefault(p => p.Cell == true),
                    oh.ac_ReceiverDetails.SendDate,
                    oh.ac_ReceiverDetails.SendTime,
                    oh.Description,
                    oh.ac_AccountDetail,
                    oh.ac_ReceiverDetails.PaymentType,
                    oh.ac_ReceiverDetails.SaleReferenceId,
                    oh.ac_ReceiverDetails.GiftNote,
                    oh.ac_ReceiverDetails.NeedWrap,
                    OrderDetail = oh.ac_AccountDetail.AsEnumerable().Select(od => new
                    {
                        desc = !string.IsNullOrEmpty(od.Description) ? od.Description : "",
                        od.ac_OrderDetail.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Name,
                        od.ac_OrderDetail.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.ItemCode,
                        Quantity = (decimal?)od.ac_OrderDetail.Quantity,
                        Amount = (decimal?)od.Amount,
                        Size = od.ac_OrderDetail.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Size.FirstOrDefault() != null ? od.ac_OrderDetail.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Size.FirstOrDefault().Size : ""
                    })
                }).AsEnumerable().Select(oh => new
                {
                    sender = oh.sname + " " + oh.sfamily + " تلفن: " + oh.sphone.Number + " موبایل: " + oh.smobile.Number,
                    receiver = oh.Name + " " + oh.Family + " آدرس: " + oh.Address + (oh.PostalCode != null ? (!string.IsNullOrEmpty(oh.PostalCode.Trim()) ? (" کد پستی " + oh.PostalCode.Trim()) : "") : "") + " تلفن: " + oh.Phone + " موبایل: " + oh.CellPhone,
                    sendDate = (oh.SendDate != null ? utility.GetstrDateCultureSimple(oh.SendDate.Value) : "") + " " + oh.SendTime,
                    oh.Description,
                    Amount = (decimal?)oh.Amount,
                    Discount = (oh.DiscountAmount != null ? oh.DiscountAmount : 0),
                    oh.InvoiceNO,
                    IsDelivered = oh.ConfirmerId != null ? "ارسال شده" : "ارسال نشده",
                    IsGift = oh.IsGift == true ? ("هدیه است. متن روی کارت: " + oh.GiftNote) : "هدیه نیست.",
                    oh.OrderHeaderId,
                    date = utility.GetstrDateCulture(oh.Date),
                    oh.PaymentType,
                    oh.OrderDetail,
                    oh.SaleReferenceId,
                    NeedWrap = oh.NeedWrap == true ? "کادو شود." : ""
                });
                DataTable dt = new DataTable();
                dt.Columns.Add("ردیف");
                dt.Columns.Add("مبلغ");
                dt.Columns.Add("تخفیف");
                dt.Columns.Add("شماره فاکتور");
                dt.Columns.Add("وضعیت ارسال");
                dt.Columns.Add("نوع ارسال");
                dt.Columns.Add("تاریخ ثبت");
                dt.Columns.Add("دریافت کننده");
                dt.Columns.Add("ارسال کننده");
                dt.Columns.Add("تاریخ ارسال");
                dt.Columns.Add("روش پرداخت");
                dt.Columns.Add("شماره پرداخت اینترنتی");
                dt.Columns.Add("توضیحات");
                dt.Columns.Add("کالاهای فاکتور");
                int rowno = 1;
                foreach (var oh in ordh)
                {
                    string ordDetails = "";
                    int count = 1;
                    foreach (var od in oh.OrderDetail)
                    {
                        string code = (!string.IsNullOrEmpty(od.ItemCode) ? (" کد" + od.ItemCode) : "");
                        ordDetails = ordDetails + " (((" + count + "." + od.desc + " " + od.Name + " " + od.Size + "، تعداد" + od.Quantity + "عدد، " + code + "، قیمت واحد" + od.Amount + "تومان))) ";
                        count++;
                    }
                    string payType = "";
                    switch (oh.PaymentType)
                    {
                        case 1:
                            payType = "پرداخت آنلاین";
                            break;
                        case 2:
                            payType = "پرداخت به شماره کارت اعتباری";
                            break;
                        case 3:
                            payType = "پرداخت به پیک همزمان با تحویل کالا";
                            break;
                    }
                    dt.Rows.Add(rowno,
                            oh.Amount,
                            oh.Discount,
                            oh.InvoiceNO,
                            oh.IsDelivered,
                            oh.IsGift + oh.NeedWrap,
                            oh.date,
                            oh.receiver,
                            oh.sender,
                            oh.sendDate,
                            payType,
                            oh.SaleReferenceId,
                            oh.Description,
                            ordDetails
                            );
                    rowno++;
                }
                return dt;
            }
            catch (Exception ex) { throw; }
        }

        public void ExportToExcel()
        {
            DataTable dt = GetUserOrders();
            //Get the data from database into datatable

            //Create a dummy GridView
            GridView GridView1 = new GridView();
            GridView1.AllowPaging = false;
            GridView1.DataSource = dt;
            GridView1.DataBind();
            //Change the Header Row back to white color
            GridView1.HeaderRow.Style.Add("background-color", "#FFFFFF");
            GridView1.HeaderRow.Style.Add("color", "#FFFFFF");
            GridView1.HeaderRow.Style.Add("font-family", "tahoma");
            GridView1.HeaderRow.Style.Add("font-size", "10");
            GridView1.HeaderRow.Style.Add("text-align", "center");
            GridView1.HeaderRow.Style.Add("height", "50px");

            //Applying stlye to gridview header cells
            for (int i = 0; i < GridView1.HeaderRow.Cells.Count; i++)
            {
                GridView1.HeaderRow.Cells[i].Style.Add("background-color", "#507CD1");
            }
            int j = 1;
            //This loop is used to apply stlye to cells based on particular row
            foreach (GridViewRow gvrow in GridView1.Rows)
            {
                gvrow.Style.Add("text-align", "right");
                gvrow.Style.Add("font-family", "tahoma");
                gvrow.Style.Add("font-size", "12");
                gvrow.Style.Add("direction", "rtl");
                gvrow.BackColor = System.Drawing.Color.White;
                if (j <= GridView1.Rows.Count)
                {
                    if (j % 2 != 0)
                    {
                        for (int k = 0; k < gvrow.Cells.Count; k++)
                        {
                            gvrow.Cells[k].Style.Add("background-color", "#EFF3FB");
                        }
                    }
                }
                j++;
            }
            Response.Clear();
            Response.Buffer = true;
            Response.AddHeader("content-disposition",
             "attachment;filename=shirazroseOrders.xls");
            Response.Charset = "";
            Response.ContentType = "application/vnd.ms-excel";
            StringWriter sw = new StringWriter();
            HtmlTextWriter hw = new HtmlTextWriter(sw);

            for (int i = 0; i < GridView1.Rows.Count; i++)
            {
                //Apply text style to each Row
                GridView1.Rows[i].Attributes.Add("class", "textmode");
            }
            GridView1.RenderControl(hw);

            //style to format numbers to string
            string style = @"<style> .textmode { mso-number-format:\@; } </style>";
            Response.Write(style);
            Response.Output.Write(sw.ToString());
            Response.Flush();
            Response.End();
        }
        #endregion
        // statistic
        #region

        public ActionResult GetVisitorStatisticForManagement(int skip, int take, int currentPage, bool first)
        {
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/mLogs.xml"));
                if (first)
                {

                    var result = xmlDoc.Element("root").Elements("Log");
                    return Json(new
                    {
                        count = result.Count(),
                        results = result.OrderByDescending(o => Convert.ToInt32(o.Attribute("Id").Value)).Skip(skip).Take(take)
                           .Select(s => new
                           {
                               ip = s.Attribute("IP").Value,
                               countryName = s.Attribute("countryName").Value,
                               cityName = s.Attribute("cityName").Value,
                               browser = s.Attribute("Browser").Value,
                               appName = s.Attribute("AppName").Value,
                               dateTime = s.Attribute("DateTime").Value,
                               timeZone = s.Attribute("timeZone").Value,
                               user = s.Attribute("Username") != null ? s.Attribute("Username").Value : "",
                           })
                    });

                }
                else
                {
                    var result = xmlDoc.Element("root").Elements("Log");
                    return Json(new
                    {
                        results = result.OrderByDescending(o => Convert.ToInt32(o.Attribute("Id").Value)).Skip(skip).Take(take)
                           .Select(s => new
                           {
                               ip = s.Attribute("IP").Value,
                               countryName = s.Attribute("countryName").Value,
                               cityName = s.Attribute("cityName").Value,
                               browser = s.Attribute("Browser").Value,
                               appName = s.Attribute("AppName").Value,
                               dateTime = s.Attribute("DateTime").Value,
                               timeZone = s.Attribute("timeZone").Value,
                               user = s.Attribute("Username") != null ? s.Attribute("Username").Value : "",
                           })
                    });
                }
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    canEdit = utility.isInRole(db, User.Identity.Name,
                        appName, "canEditOnlineMenu"),
                    isDone = false,
                    msg = ex.Message
                });
            }

        }

        public ActionResult GetVisitorStatistic(int skip, int take, int currentPage, bool first)
        {
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Logs.xml"));
                if (first)
                {

                    var result = xmlDoc.Element("root").Elements("Log");
                    return Json(new
                    {
                        count = result.Count(),
                        results = result.OrderByDescending(o => Convert.ToInt32(o.Attribute("Id").Value)).Skip(skip).Take(take)
                           .Select(s => new
                           {
                               ip = s.Attribute("IP").Value,
                               countryName = s.Attribute("countryName").Value,
                               cityName = s.Attribute("cityName").Value,
                               browser = s.Attribute("Browser").Value,
                               appName = s.Attribute("AppName").Value,
                               dateTime = s.Attribute("DateTime").Value,
                               timeZone = s.Attribute("timeZone").Value,
                               user = "",
                           })
                    });

                }
                else
                {
                    var result = xmlDoc.Element("root").Elements("Log");
                    return Json(new
                    {
                        results = result.OrderByDescending(o => Convert.ToInt32(o.Attribute("Id").Value)).Skip(skip).Take(take)
                           .Select(s => new
                           {
                               ip = s.Attribute("IP").Value,
                               countryName = s.Attribute("countryName").Value,
                               cityName = s.Attribute("cityName").Value,
                               browser = s.Attribute("Browser").Value,
                               appName = s.Attribute("AppName").Value,
                               dateTime = s.Attribute("DateTime").Value,
                               timeZone = s.Attribute("timeZone").Value,
                               user = "",
                           })
                    });
                }
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    canEdit = utility.isInRole(db, User.Identity.Name,
                        appName, "canEditOnlineMenu"),
                    isDone = false,
                    msg = ex.Message
                });
            }

        }

        #endregion

        //AutoComplete
        #region
        public ActionResult GetCompletionListByItemName(string q, int limit, int? Status)
        {
            return Json(db.inv_Barcode.Where(b => (b.ApplicationId == null || b.aspnet_Applications.ApplicationName == appName) && ((b.Name).Contains(q) || b.ItemCode.Contains(q)) && b.ShowOnline == true).OrderBy(b => b.Name).Take(limit)
       .Select(b => new { label = b.Name, value = b.Name, Barcode = b.Barcode }));
        }


        public ActionResult AddProperty(int barcodeid, int propertyId, string value)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditItemProperty"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                if (db.inv_Property.Count(p => p.PropertyId == propertyId && p.ParentId != null) < 1)
                {
                    return Json(new { isDone = false, msg = "noParent" });
                }
                else
                {
                    db.inv_Barcode.SingleOrDefault(b => b.BarcodeId == barcodeid).inv_Property.Add(new inv_Property()
                    {
                        PropertyId = propertyId,
                        Property = value
                    });
                    db.SaveChanges();
                    return Json(new { isDone = true, msg = "oK" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult deleteProperty(int propertyId, int barcodeId)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditItemProperty"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                var property = db.inv_Barcode.Single(b => b.BarcodeId == barcodeId).inv_Property.SingleOrDefault(s => s.PropertyId == propertyId);
                if (property != null)
                    db.inv_Property.DeleteObject(property);
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult getProperty(int barcodeid)
        {
            try
            {
                return Json(db.inv_Barcode.SingleOrDefault(b => b.BarcodeId == barcodeid).inv_Property.
                    GroupBy(g => new { g.inv_Property2.PropertyId, g.inv_Property2.Property }).
                    Select(s => new
                    {
                        s.Key.Property,
                        s.Key.PropertyId,
                        properties = s.Select(p => new { Value = p.Property, p.inv_Property2.Property, p.PropertyId })
                    }));
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
        }

        public ActionResult getAllPropertys(int barcodeid, int propertyId)
        {
            try
            {
                return Json(new
                {
                    properties = db.inv_Property.Single(p => p.PropertyId == propertyId).inv_Property1.Select(r => new
                        {
                            r.PropertyId,
                            r.TranslatedProperty,
                            r.Property,
                            properties = r.inv_Property1.Select(cp => new
                            {
                                cp.Property,
                                cp.TranslatedProperty,
                                cp.PropertyId,
                                Value = "",
                                properties = cp.inv_Property1.Select(sp => new
                                {
                                    sp.Property,
                                    sp.TranslatedProperty,
                                    sp.PropertyId,
                                    Value = ""
                                })
                                // cp.inv_Property1.Where(b => b. == barcodeid).Count() > 0 ? cp.invbr_PropertyBarcode.FirstOrDefault(b => b.BarcodeId == barcodeid).Value : ""
                            })
                        }),
                    propertyIds = db.inv_Barcode.SingleOrDefault(b => b.BarcodeId == barcodeid).inv_Property.Select(p => p.PropertyId)
                });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
        }

        public ActionResult UpdateProperties(int barcodeid, List<PropList> propList)
        {
            try
            {
                var appId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;
                var currentPropertyIds = db.inv_Barcode.SingleOrDefault(b => b.BarcodeId == barcodeid).inv_Property.Select(p => p.PropertyId).ToList();
                foreach (var item in propList)
                {
                    int id = item.id;
                    if (!string.IsNullOrEmpty(item.value))
                    {
                        inv_Property property = new inv_Property() { ApplicationId = appId, ParentId = item.id, Property = item.value, TranslatedProperty = item.main };
                        //db.inv_Property.AddObject(property);
                        db.inv_Barcode.SingleOrDefault(b => b.BarcodeId == barcodeid).inv_Property.Add(property);

                    }
                    else
                    {
                        foreach (var propertyId in item.propertyId)
                        {


                            if (!db.inv_Barcode.SingleOrDefault(b => b.BarcodeId == barcodeid).inv_Property.Any(p => p.PropertyId == propertyId))
                            {
                                var property = db.inv_Property.Single(p => p.PropertyId == propertyId);
                                db.inv_Barcode.SingleOrDefault(b => b.BarcodeId == barcodeid).inv_Property.Add(property);
                            }
                        }
                    }
                }

                foreach (var item in currentPropertyIds)
                {
                    foreach (var prop in propList)
                    {


                        if (!prop.propertyId.Contains(item))
                        {
                            db.inv_Barcode.SingleOrDefault(b => b.BarcodeId == barcodeid).inv_Property.Remove(db.inv_Property.Single(p => p.PropertyId == item));
                        }
                    }
                }
                db.SaveChanges();
                return Json(new { isDone = true, msg = "done" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
        }
        public class PropList
        {
            public List<int> propertyId { get; set; }
            public string value { get; set; }
            public string main { get; set; }
            public int id { get; set; }
        }

        public ActionResult GetCompletionListByProperty(string q, int limit, int propertyId)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }
            return Json(db.inv_Property.Where(b => (b.ApplicationId == null || b.aspnet_Applications.ApplicationName == appName) && b.PropertyId == propertyId && ((b.Property).Contains(q))).OrderBy(b => b.Property)
     .Select(b => new { label = b.Property, value = b.Property }).Distinct().Take(10));
        }


        #endregion


        //help
        #region

        public ActionResult getHelp(string mainTab, string subTab, string lang)
        {
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/help.xml"));
                return Json(new { canEdit = utility.isInRole(db, User.Identity.Name, appName, "canEditHelp"), isDone = true, result = xmlDoc.Element("root").Elements("Help").Single(t => t.Attribute("MainTab").Value == mainTab && t.Attribute("SubTab").Value == subTab).Element(lang).Value });
            }
            catch (Exception ex) { return Json(new { canEdit = utility.isInRole(db, User.Identity.Name, appName, "canEditHelp"), isDone = false, msg = ex.Message }); }
        }

        public ActionResult AddHelp(string mainTab, string subTab, string help, string lang)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditHelp"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/help.xml"));
                var r = xmlDoc.Element("root").Elements("Help").Any(t => t.Attribute("MainTab").Value == mainTab && t.Attribute("SubTab").Value == subTab && t.Elements(lang).Any());
                if (r)
                    xmlDoc.Element("root").Elements("Help").Where(t => t.Attribute("MainTab").Value == mainTab && t.Attribute("SubTab").Value == subTab).Descendants(lang).FirstOrDefault().ReplaceNodes(new XCData(help));
                else
                    if (xmlDoc.Element("root").Elements("Help").Any(t => t.Attribute("MainTab").Value == mainTab && t.Attribute("SubTab").Value == subTab))

                        xmlDoc.Element("root").Elements("Help").Single(t => t.Attribute("MainTab").Value == mainTab && t.Attribute("SubTab").Value == subTab).Add(new XElement(lang, new XCData(help)));
                    else
                        xmlDoc.Element("root").Add(new XElement("Help", new XAttribute("MainTab", mainTab), new XAttribute("SubTab", subTab), new XElement(lang, new XCData(help))));
                xmlDoc.Save(Server.MapPath("~/Data/help.xml"));
                return Json(new { isdone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.Message });
            }

        }



        public ActionResult AddFaq(string question, string faq, string lang)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditHelp"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Help.xml"));

                int sid = 1;
                if (xmlDoc.Element("root").Element("faq").Descendants("question").Count() > 0)
                {
                    sid = (int.Parse(xmlDoc.Element("root").Element("faq").Descendants("question").OrderByDescending(o => Convert.ToInt32(o.Attribute("id").Value)).FirstOrDefault().Attribute("id").Value) + 1);
                    var r = xmlDoc.Element("root").Element("faq").Descendants("question").SingleOrDefault(t => t.Attribute("qs").Value == question && t.Attribute("lang").Value == lang);
                    if (r != null)
                    {
                        r.ReplaceNodes(new XCData(faq));
                    }
                    else
                    {
                        xmlDoc.Element("root").Element("faq").Add(new XElement("question", new XAttribute("qs", question), new XAttribute("order", sid), new XAttribute("id", sid), new XAttribute("lang", lang), new XCData(faq)));
                    }
                }
                else
                {
                    xmlDoc.Element("root").Element("faq").Add(new XElement("question", new XAttribute("qs", question), new XAttribute("order", sid), new XAttribute("id", sid), new XAttribute("lang", lang), new XCData(faq)));
                }

                xmlDoc.Save(Server.MapPath("~/Data/Help.xml"));
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }

        }

        public ActionResult getFaqQuestions(string lang)
        {
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Help.xml"));
                return Json(xmlDoc.Element("root").Element("faq").Descendants("question").Select(s => new
                {
                    id = s.Attribute("id").Value,
                    question = s.Attribute("qs").Value,
                    order = s.Attribute("order").Value,
                    lang = s.Attribute("lang").Value
                }));
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    canEdit = utility.isInRole(db, User.Identity.Name,
                        appName, "canEditOnlineMenu"),
                    isDone = false,
                    msg = ex.Message
                });
            }
        }


        public ActionResult sortFaqQuestions(List<SortCategory> sortFaq)
        {
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Help.xml"));
                foreach (var item in sortFaq)
                {
                    xmlDoc.Element("root").Element("faq").Descendants("question").Single(t => t.Attribute("id").Value == item.id.ToString()).SetAttributeValue("order", item.Priority);
                }
                xmlDoc.Save(Server.MapPath("~/Data/Help.xml"));
                return Json(new { isDone = true, msg = "oK" });

            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
        }


        public ActionResult getFaqForEdit(int id)
        {
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Help.xml"));

                var r = xmlDoc.Element("root").Element("faq").Descendants("question").Single(t => t.Attribute("id").Value == id.ToString());
                var result = new { question = r.Attribute("qs").Value, answer = r.Value };
                return Json(new { isDone = true, result });

            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.Message });
            }
        }

        public ActionResult deleteFaq(int id)
        {
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Help.xml"));
                xmlDoc.Element("root").Element("faq").Descendants("question").Single(t => t.Attribute("id").Value == id.ToString()).Remove();
                xmlDoc.Save(Server.MapPath("~/Data/Help.xml"));
                return Json(new { isDone = true });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
        }


        #endregion
        //chart
        #region
        public ActionResult GetSaleChart(string Datetype, int? supplierid, bool IsClient, string SupplierName,
                        string code, string EmployeeId, string EmployeeName, string Shop, string InvoiceId, string ProductId,
                        string ProductName, string Barcode, string InvoiceDateStart, string InvoiceDateEnd, string InvoiceYearStart,
                        string InvoiceYearEnd, decimal? PriceFrom, decimal? PriceTo, bool? Order, bool? PreOrder, bool? Broken,
                        int? CategoryId, int? shopid)
        {


            try
            {
                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
                if (!roles.Contains("canSeeSellChart"))
                {
                    return null;
                }
                List<ObjectParameter> ol = new List<ObjectParameter>();
                //List<ArrayChart> ac = new List<ArrayChart>();
                string dynStr = string.Empty;
                dynStr += "it.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName and EXISTS(select g From it.ac_AccountDetail as g where(g.ac_OrderDetail.ac_AccountDetail.OrderHeaderId =it.OrderHeaderId))";
                ol.Add(new ObjectParameter("appName", appName));
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ShopId in " + utility.getShopForUser(User.Identity.Name);
                if (supplierid != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.ClientId = @supplierId ";
                    ol.Add(new ObjectParameter("supplierId", supplierid));
                }
                if (IsClient)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.ClientId = it.p_person.p_Customer.accountId ";
                }
                if (!IsClient)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.ClientId = it.p_person.p_Supplier.accountId ";
                }
                if (shopid != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.ShopId = @ShopId ";
                    ol.Add(new ObjectParameter("ShopId", shopid));
                }

                if (SupplierName.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "(it.p_person.Name LIKE '%' + @SupplierName + '%' or  it.p_person1.Family LIKE '%' + @SupplierName + '%')";
                    ol.Add(new ObjectParameter("SupplierName", SupplierName));

                }
                if (code.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += " it.p_person.Code = @code";
                    ol.Add(new ObjectParameter("code", code));
                }
                if (EmployeeId.Length > 0)
                {

                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += " it.p_Employee.p_person.Code = @EmployeeId";
                    ol.Add(new ObjectParameter("EmployeeId", EmployeeId));
                }
                if (EmployeeName.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "(it.p_Employee.p_person.Family LIKE '%' + @EmployeeName + '%' or it.p_Employee.p_person.Name LIKE '%' + @EmployeeName + '%')";
                    ol.Add(new ObjectParameter("EmployeeName", EmployeeName));
                }

                if (Shop.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.inv_Shop.Name Like '%'+ @Shop +'%'";
                    ol.Add(new ObjectParameter("Shop", Shop));
                }
                if (InvoiceId.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";

                    dynStr += "it.InvoiceNO = @InvoiceId";
                    ol.Add(new ObjectParameter("InvoiceId", InvoiceId));
                }
                if (ProductId.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";

                    dynStr += "EXISTS(select g From it.ac_AccountDetail as g where(g.ac_Account.inv_ItemDetail.inv_Barcode.ItemCode like '%'+@ProductId+'%'))";
                    ol.Add(new ObjectParameter("ProductId", ProductId));
                }
                if (ProductName.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";

                    dynStr += "EXISTS(select g From it.ac_AccountDetail as g where(g.ac_Account.inv_ItemDetail.inv_Barcode.Name like '%'+@ProductName+'%'))";
                    ol.Add(new ObjectParameter("ProductName", ProductName));
                }
                if (Barcode.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";

                    dynStr += "EXISTS(select g From it.ac_AccountDetail as g where(g.ac_Account.inv_ItemDetail.inv_Barcode.Barcode =@Barcode))";
                    ol.Add(new ObjectParameter("Barcode", Barcode));
                }
                List<string> days = new List<string>();
                DateTime dateStart = DateTime.Now;
                DateTime dateEnd = DateTime.Now;
                if (Datetype == "DayDashboard")
                {

                    //PersianCalendar pc = new PersianCalendar();
                    DateTime ds = DateTime.Now.AddDays(-Convert.ToInt32(InvoiceDateStart));
                    dateStart = ds.Date;
                    dateEnd = DateTime.Now.AddDays(1).Date;
                    string pd = utility.GetstrDateCultureSimple(ds);
                    InvoiceDateStart = pd.Remove(0, 5);// ds.Month + "/" + ds.Day;
                    InvoiceYearStart = pd.Substring(0, 4);// ds.Year.ToString();
                    while (ds <= DateTime.Now)
                    {
                        days.Add(ds.ToString());
                        ds = ds.AddDays(1);
                    }
                }
                else if (InvoiceDateStart.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Date   >=   @InvoiceDateStart";
                    if (InvoiceYearStart.Length > 0)
                        ol.Add(new ObjectParameter("InvoiceDateStart", utility.GetDateCultureStartByYear(InvoiceYearStart + "/" + InvoiceDateStart)));
                    else
                        ol.Add(new ObjectParameter("InvoiceDateStart", utility.GetDateCultureStartByYear("1385/" + InvoiceDateStart)));
                }

                else if (InvoiceDateStart.Length < 1 && InvoiceYearStart.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Date   >=   @InvoiceDateStart";
                    if (InvoiceYearStart.Length > 0)
                        ol.Add(new ObjectParameter("InvoiceDateStart", utility.GetDateCultureStartByYear(InvoiceYearStart + "/1/1")));
                    else
                        ol.Add(new ObjectParameter("InvoiceDateStart", utility.GetDateCultureStartByYear("1385/1/1")));
                }

                if (InvoiceDateEnd.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Date   <=   @InvoiceDateEnd";
                    if (InvoiceYearEnd.Length > 0)
                        ol.Add(new ObjectParameter("InvoiceDateEnd", utility.GetDateCultureStartByYear(InvoiceYearEnd + "/" + InvoiceDateEnd)));
                    else
                        ol.Add(new ObjectParameter("InvoiceDateEnd", DateTime.Now));
                }
                else if (InvoiceDateEnd.Length < 1 && InvoiceYearEnd.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Date   <=   @InvoiceDateEnd";
                    if (InvoiceYearEnd.Length > 0)
                        ol.Add(new ObjectParameter("InvoiceDateEnd", utility.GetDateCultureStartByYear(InvoiceYearEnd + "/1/1")));
                    else
                        ol.Add(new ObjectParameter("InvoiceDateEnd", DateTime.Now));
                }
                else if (InvoiceDateEnd.Length < 1 && InvoiceYearEnd.Length < 1)
                {
                    DateTime ds = DateTime.Now.AddDays(1);
                    string pd = utility.GetstrDateCultureSimple(ds);
                    InvoiceDateEnd = pd.Remove(0, 5);
                    InvoiceYearEnd = pd.Substring(0, 4);
                }


                if (PriceFrom != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Amount <= @PriceFrom";
                    ol.Add(new ObjectParameter("PriceFrom", PriceFrom.Value));
                }
                if (PriceTo != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Amount <= @PriceTo";
                    ol.Add(new ObjectParameter("PriceTo", PriceTo.Value));
                }
                if (IsClient)
                {
                    if (Order != null)
                    {
                        if (dynStr.Length > 0)
                            dynStr += " And ";
                        dynStr += " it.Sell   =   @Order";
                        ol.Add(new ObjectParameter("Order", Order.Value));
                    }
                }
                if (!IsClient)
                {
                    if (Order != null)
                    {
                        if (dynStr.Length > 0)
                            dynStr += " And ";
                        dynStr += " it.Sell   =   @Order";
                        ol.Add(new ObjectParameter("Order", !Order.Value));
                    }
                }

                if (PreOrder != null)
                {
                    if (PreOrder.Value)
                    {
                        if (dynStr.Length > 0)
                            dynStr += " And ";
                        dynStr += "it.isConfirmed is not null";
                    }
                }
                if (Broken != null)
                {
                    if (Broken.Value)
                    {
                        if (dynStr.Length > 0)
                            dynStr += " And ";
                        dynStr += "EXISTS(select g From it.ac_AccountDetail as g where(g.ac_OrderDetail as o where o.Broken = true))";
                    }
                }

                if (CategoryId != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(select o From it.ac_AccountDetail as o where (EXISTS(select g from o.ac_Account.inv_ItemDetail.inv_Barcode.inv_Category as g where( g.CategoryID in  " + utility.getHierarchyDataForGeneralCategory(CategoryId) + "))))";
                    ol.Add(new ObjectParameter("CategoryId", CategoryId));
                }


                PersianCalendar pc = new PersianCalendar();
                List<object> list = new List<object>();
                if (Datetype == "Day")
                {
                    //return db.ac_OrderHeader.Where(dynStr, ol.ToArray()).Select(s => new { s.Date, s.Amount, s.ac_CurrencyRate.Sell, Issell = s.Sell }).AsEnumerable().Where(d => pc.GetYear(d.Date) >= Convert.ToInt32(InvoiceYearStart) && pc.GetYear(d.Date) <= Convert.ToInt32(InvoiceYearEnd)).OrderBy(p => p.Date).GroupBy(c => pc.GetYear(c.Date)).Select(b => new ArrayChart { data = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = (pc.GetDayOfYear(o.Date) == 0 ? 1 : pc.GetDayOfYear(o.Date)) }).OrderBy(g => g.Key.month).Select(c => new string[,] { { c.Key.month.ToString(), c.Sum(bb => (bb.Issell ? bb.Amount : -bb.Amount) * bb.Sell).ToString() } }).ToList(), label = pc.GetYear(b.FirstOrDefault().Date) }).ToList();

                    return Json(new
                    {
                        name = "Day",
                        data = db.ac_OrderHeader.Where(dynStr, ol.ToArray())
                            .Select(s => new { s.Date, s.Amount, s.ac_CurrencyRate.Sell, Issell = s.Sell, Quantity = s.ac_AccountDetail.Sum(ss => ss.ac_OrderDetail.Quantity) }).AsEnumerable()
                            .Where(d => pc.GetYear(d.Date) >= Convert.ToInt32(InvoiceYearStart) && pc.GetYear(d.Date) <= Convert.ToInt32(InvoiceYearEnd))
                            .OrderBy(p => p.Date).GroupBy(c => pc.GetYear(c.Date)).
                            Select(b => new
                            {
                                name = b.Key,
                                amount = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd))
                                .GroupBy(o => new { month = (pc.GetDayOfYear(o.Date) == 0 ? 1 : pc.GetDayOfYear(o.Date)), date = o.Date }).OrderBy(g => g.Key.month).
                                Select(c => c.Sum(bb => (bb.Issell ? bb.Amount : -bb.Amount) * (IsClient ? 1 : -1) * bb.Sell)),
                                //label = pc.GetYear(b.FirstOrDefault().Date).ToString()+"مبلغ",yAxis=1,
                                //xAxis=Datetype,days=days,date=b.FirstOrDefault().Date.ToString()},
                                quantity = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd))
                                .GroupBy(o => new { month = (pc.GetDayOfYear(o.Date) == 0 ? 1 : pc.GetDayOfYear(o.Date)) }).OrderBy(g => g.Key.month).
                                Select(c => c.Sum(bb => (bb.Issell ? bb.Quantity : -bb.Quantity) * (IsClient ? 1 : -1) * bb.Sell)),
                                //label = pc.GetYear(b.FirstOrDefault().Date).ToString()+"تعداد ",yAxis=2,xAxis=Datetype
                            })
                    });
                }
                else if (Datetype == "DayDashboard")
                {
                    //return db.ac_OrderHeader.Where(dynStr, ol.ToArray()).Select(s => new { s.Date, s.Amount, s.ac_CurrencyRate.Sell, Issell = s.Sell }).AsEnumerable().Where(d => pc.GetYear(d.Date) >= Convert.ToInt32(InvoiceYearStart) && pc.GetYear(d.Date) <= Convert.ToInt32(InvoiceYearEnd)).OrderBy(p => p.Date).GroupBy(c => pc.GetYear(c.Date)).Select(b => new ArrayChart { data = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = (pc.GetDayOfYear(o.Date) == 0 ? 1 : pc.GetDayOfYear(o.Date)) }).OrderBy(g => g.Key.month).Select(c => new string[,] { { c.Key.month.ToString(), c.Sum(bb => (bb.Issell ? bb.Amount : -bb.Amount) * bb.Sell).ToString() } }).ToList(), label = pc.GetYear(b.FirstOrDefault().Date) }).ToList();

                    return Json(db.ac_OrderHeader.Where(dynStr, ol.ToArray()).Where(d => d.Date >= dateStart && d.Date <= dateEnd)
                        .Select(s => new
                        {
                            s.Date,
                            s.Amount,
                            s.ac_CurrencyRate.Sell,
                            Issell = s.Sell,
                            Quantity = s.ac_AccountDetail.Sum(ss => ss.ac_OrderDetail.Quantity)
                        }).AsEnumerable().OrderBy(p => p.Date).GroupBy(c => c.Date.Date).
                        Select(s => new
                        {
                            date = s.Key.Date,
                            amount = s.Sum(bb => (bb.Issell ? bb.Amount : -bb.Amount) * bb.Sell),
                            quantity = s.Sum(bb => (bb.Issell ? bb.Quantity : -bb.Quantity) * 1 * bb.Sell)
                        }));

                }
                else if (Datetype == "Week")
                {
                    //  return db.ac_OrderHeader.Where(dynStr, ol.ToArray()).Select(s => new { s.Date, s.Amount, s.ac_CurrencyRate.Sell, Issell = s.Sell }).AsEnumerable().Where(d => pc.GetYear(d.Date) >= Convert.ToInt32(InvoiceYearStart) && pc.GetYear(d.Date) <= Convert.ToInt32(InvoiceYearEnd)).OrderBy(p => p.Date).GroupBy(c => pc.GetYear(c.Date)).Select(b => new ArrayChart { data = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = (pc.GetDayOfYear(o.Date) / 7 == 0 ? 1 : pc.GetDayOfYear(o.Date) / 7) }).OrderBy(g => g.Key.month).Select(c => new string[,] { { c.Key.month.ToString(), c.Sum(bb => (bb.Issell ? bb.Amount : -bb.Amount) * bb.Sell).ToString() } }).ToList(), label = pc.GetYear(b.FirstOrDefault().Date) }).ToList();

                    return Json(new
                    {
                        name = "Week",
                        data = db.ac_OrderHeader.Where(dynStr, ol.ToArray()).Select(s => new
                        {
                            s.Date,
                            s.Amount,
                            s.ac_CurrencyRate.Sell,
                            Issell = s.Sell,
                            Quantity = s.ac_AccountDetail.Sum(ss => ss.ac_OrderDetail.Quantity)
                        }).AsEnumerable().Where(d => pc.GetYear(d.Date) >= Convert.ToInt32(InvoiceYearStart) && pc.GetYear(d.Date) <= Convert.ToInt32(InvoiceYearEnd)).OrderBy(p => p.Date).GroupBy(c => pc.GetYear(c.Date)).
                            Select(b => new
                            {
                                name = b.Key,
                                amount = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = (pc.GetDayOfYear(o.Date) / 7 == 0 ? 1 : pc.GetDayOfYear(o.Date) / 7) }).OrderBy(g => g.Key.month).
                                    Select(c => c.Sum(bb => (bb.Issell ? bb.Amount : -bb.Amount) * (IsClient ? 1 : -1) * bb.Sell)),
                                //label = pc.GetYear(b.FirstOrDefault().Date).ToString()+"مبلغ",yAxis=1,xAxis=Datetype,

                                quantity = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = (pc.GetDayOfYear(o.Date) / 7 == 0 ? 1 : pc.GetDayOfYear(o.Date) / 7) }).OrderBy(g => g.Key.month).
                                   Select(c => c.Sum(bb => (bb.Issell ? bb.Quantity : -bb.Quantity) * (IsClient ? 1 : -1) * bb.Sell)),
                                //label = pc.GetYear(b.FirstOrDefault().Date).ToString()+"تعداد ",yAxis=2,xAxis=Datetype
                            }

                                                       )
                    });
                }
                else
                    if (Datetype == "Month")
                    {

                        return Json(new
                        {
                            name = "Month",
                            data = db.ac_OrderHeader.Where(dynStr, ol.ToArray()).
                            Select(s => new
                            {
                                s.Date,
                                s.Amount,
                                s.ac_CurrencyRate.Sell,
                                Issell = s.Sell,
                                Quantity = s.ac_AccountDetail.Sum(ss => ss.ac_OrderDetail.Quantity)
                            }).AsEnumerable().Where(d => pc.GetYear(d.Date) >= Convert.ToInt32(InvoiceYearStart) && pc.GetYear(d.Date) <= Convert.ToInt32(InvoiceYearEnd)).OrderBy(p => p.Date).GroupBy(c => pc.GetYear(c.Date)).
                        Select(b => new
                        {
                            name = b.Key,
                            amount = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = (pc.GetMonth(o.Date) == 0 ? 1 : pc.GetMonth(o.Date)) }).OrderBy(g => g.Key.month).
                           Select(c =>
                                c.Sum(bb => (bb.Issell ? bb.Amount : -bb.Amount) * (IsClient ? 1 : -1) * bb.Sell)
                           ),
                            //label = pc.GetYear(b.FirstOrDefault().Date).ToString()+"مبلغ",
                            //yAxis=1,
                            //xAxis=Datetype

                            quantity = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = (pc.GetMonth(o.Date) == 0 ? 1 : pc.GetMonth(o.Date)) }).OrderBy(g => g.Key.month).
                            Select(c =>
                                 c.Sum(bb => (bb.Issell ? bb.Quantity : -bb.Quantity) * (IsClient ? 1 : -1) * bb.Sell)
                            ),
                            //label = pc.GetYear(b.FirstOrDefault().Date).ToString()+"تعداد ",
                            //yAxis=2,
                            //xAxis=Datetype

                        })
                        });
                    }
                    else if (Datetype == "Season")
                    {
                        // return db.ac_OrderHeader.Where(dynStr, ol.ToArray()).Select(s => new { s.Date, s.Amount, s.ac_CurrencyRate.Sell, Issell = s.Sell }).AsEnumerable().Where(d => pc.GetYear(d.Date) >= Convert.ToInt32(InvoiceYearStart) && pc.GetYear(d.Date) <= Convert.ToInt32(InvoiceYearEnd)).OrderBy(p => p.Date).GroupBy(c => pc.GetYear(c.Date)).Select(b => new ArrayChart { data = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = (pc.GetMonth(o.Date) / 3 == 0 ? 1 : pc.GetMonth(o.Date) / 3) }).OrderBy(g => g.Key.month).Select(c => new string[,] { { c.Key.month.ToString(), c.Sum(bb => (bb.Issell ? bb.Amount : -bb.Amount) * bb.Sell).ToString() } }).ToList(), label = pc.GetYear(b.FirstOrDefault().Date) }).ToList();

                        return Json(new
                        {
                            name = "Season",
                            data = db.ac_OrderHeader.Where(dynStr, ol.ToArray()).Select(s => new
                            {
                                s.Date,
                                s.Amount,
                                s.ac_CurrencyRate.Sell,
                                Issell = s.Sell,
                                Quantity = s.ac_AccountDetail.Sum(ss => ss.ac_OrderDetail.Quantity)
                            }).AsEnumerable().Where(d => pc.GetYear(d.Date) >= Convert.ToInt32(InvoiceYearStart) && pc.GetYear(d.Date) <= Convert.ToInt32(InvoiceYearEnd)).OrderBy(p => p.Date).GroupBy(c => pc.GetYear(c.Date)).
                                Select(b => new
                                {
                                    name = b.Key,
                                    amount = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = (pc.GetMonth(o.Date) / 3 == 0 ? 1 : pc.GetMonth(o.Date) / 3) }).OrderBy(g => g.Key.month).
                                        Select(c =>
                                        c.Sum(bb => (bb.Issell ? bb.Amount : -bb.Amount) * (IsClient ? 1 : -1) * bb.Sell)),
                                    //label = pc.GetYear(b.FirstOrDefault().Date).ToString()+"مبلغ",
                                    //yAxis=1,xAxis=Datetype

                                    quantity = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = (pc.GetMonth(o.Date) / 3 == 0 ? 1 : pc.GetMonth(o.Date) / 3) }).OrderBy(g => g.Key.month).
                                    Select(c =>
                                    c.Sum(bb => (bb.Issell ? bb.Quantity : -bb.Quantity) * (IsClient ? 1 : -1) * bb.Sell))
                                }
                                //label = pc.GetYear(b.FirstOrDefault().Date).ToString()+"تعداد ",
                                //yAxis=2,xAxis=Datetype}

                                                       )
                        });
                    }
                    else if (Datetype == "Year")
                    {
                        //return db.ac_OrderHeader.Where(dynStr, ol.ToArray()).Select(s => new { s.Date, s.Amount, s.ac_CurrencyRate.Sell, Issell = s.Sell }).AsEnumerable().Where(d => pc.GetYear(d.Date) >= Convert.ToInt32(InvoiceYearStart) && pc.GetYear(d.Date) <= Convert.ToInt32(InvoiceYearEnd)).OrderBy(p => p.Date).GroupBy(c => pc.GetYear(c.Date)).Select(b => new ArrayChart { data = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = pc.GetYear(o.Date) }).OrderBy(g => g.Key.month).Select(c => new string[,] { { c.Key.month.ToString(), c.Sum(bb => (bb.Issell ? bb.Amount : -bb.Amount) * bb.Sell).ToString() } }).ToList(), label = pc.GetYear(b.FirstOrDefault().Date) }).ToList();

                        //return Json( new
                        //{
                        //    name = "Year",
                        //    data = db.ac_OrderHeader.Where(dynStr, ol.ToArray()).
                        //    Select(s => new
                        //    {
                        //        s.Date,
                        //        s.Amount,
                        //        s.ac_CurrencyRate.Sell,
                        //        Issell = s.Sell,
                        //        Quantity = s.ac_OrderDetail.Sum(ss => ss.Quantity)
                        //    }).AsEnumerable().Where(d => pc.GetYear(d.Date) >= Convert.ToInt32(InvoiceYearStart) && pc.GetYear(d.Date) <= Convert.ToInt32(InvoiceYearEnd)).OrderBy(p => p.Date).GroupBy(c => pc.GetYear(c.Date)).
                        //    Select(b => new
                        //    {
                        //        name = b.Key,
                        //        amount = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = pc.GetYear(o.Date) }).OrderBy(g => g.Key.month).
                        //             Select(c => c.Sum(bb => (bb.Issell ? bb.Amount : -bb.Amount) * (IsClient ? 1 : -1) * bb.Sell)),
                        //        // label = pc.GetYear(b.FirstOrDefault().Date).ToString()+"مبلغ",

                        //        //  xAxis=Datetype
                        //        quantity = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = pc.GetYear(o.Date) }).OrderBy(g => g.Key.month).
                        //            Select(c => c.Sum(bb => (bb.Issell ? bb.Quantity : -bb.Quantity) * (IsClient ? 1 : -1) * bb.Sell)),
                        //        // label = pc.GetYear(b.FirstOrDefault().Date).ToString()+"تعداد ",
                        //        // yAxis=2,
                        //        // xAxis=Datetyp
                        //    }
                        //    )
                        //});

                        //return db.ac_OrderHeader.Where(dynStr, ol.ToArray()).Select(s => new { s.Date, s.Amount, s.ac_CurrencyRate.Sell, Issell = s.Sell }).AsEnumerable().Where(d => pc.GetYear(d.Date) >= Convert.ToInt32(InvoiceYearStart) && pc.GetYear(d.Date) <= Convert.ToInt32(InvoiceYearEnd)).OrderBy(p => p.Date).GroupBy(c => pc.GetYear(c.Date)).Select(b => new ArrayChart { data = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = pc.GetYear(o.Date) }).OrderBy(g => g.Key.month).Select(c => new string[,] { { c.Key.month.ToString(), c.Sum(bb => (bb.Issell ? bb.Amount : -bb.Amount) * bb.Sell).ToString() } }).ToList(), label = pc.GetYear(b.FirstOrDefault().Date) }).ToList();


                        var data = db.ac_OrderHeader.Where(dynStr, ol.ToArray()).
                        Select(s => new
                        {
                            s.Date,
                            s.Amount,
                            s.ac_CurrencyRate.Sell,
                            Issell = s.Sell,
                            Quantity = s.ac_AccountDetail.Sum(ss => ss.ac_OrderDetail.Quantity)
                        }).AsEnumerable().Where(d => pc.GetYear(d.Date) >= Convert.ToInt32(InvoiceYearStart) && pc.GetYear(d.Date) <= Convert.ToInt32(InvoiceYearEnd)).OrderBy(p => p.Date).GroupBy(c => pc.GetYear(c.Date)).
                        Select(b => new
                        {
                            name = b.Key,
                            amount = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = pc.GetYear(o.Date) }).OrderBy(g => g.Key.month).
                                 Select(c => c.Sum(bb => (bb.Issell ? bb.Amount : -bb.Amount) * (IsClient ? 1 : -1) * bb.Sell)),
                            // label = pc.GetYear(b.FirstOrDefault().Date).ToString()+"مبلغ",
                            //  xAxis=Datetype
                            quantity = b.Where(f => f.Date >= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateStart) && f.Date <= utility.GetDateCultureStartByYear(pc.GetYear(f.Date).ToString() + "/" + InvoiceDateEnd)).GroupBy(o => new { month = pc.GetYear(o.Date) }).OrderBy(g => g.Key.month).
                                Select(c => c.Sum(bb => (bb.Issell ? bb.Quantity : -bb.Quantity) * (IsClient ? 1 : -1) * bb.Sell)),
                            // label = pc.GetYear(b.FirstOrDefault().Date).ToString()+"تعداد ",
                            // yAxis=2,
                            // xAxis=Datetyp
                        });
                        List<object> dl = new List<object>();
                        dl.Add(new { name = data.Select(s => s.name), amount = data.Select(s => s.amount), quantity = data.Select(s => s.quantity) });
                        return Json(new { name = "Year", data = dl });
                    }
                    else
                    {

                        return null;
                    }
            }
            catch (Exception e)
            {
                return null;
            }
            // finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult GetTopProductChart(string Datetype, string InvoiceDateStart, int? shopid)
        {

            try
            {
                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
                if (!roles.Contains("canSeeSellChart"))
                {
                    return null;
                }
                List<ObjectParameter> ol = new List<ObjectParameter>();
                //List<ArrayChart> ac = new List<ArrayChart>();
                string dynStr = string.Empty;
                dynStr += "it.ac_OrderHeader.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName ";
                ol.Add(new ObjectParameter("appName", appName));
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ac_OrderHeader.ShopId in " + utility.getShopForUser(User.Identity.Name);
                if (shopid != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += " it.ac_OrderHeader.ShopId = @ShopId  ";
                    ol.Add(new ObjectParameter("ShopId", shopid));
                }


                List<string> days = new List<string>();
                DateTime dateStart = DateTime.Now;
                DateTime dateEnd = DateTime.Now;
                if (Datetype == "DayTopProduct")
                {

                    PersianCalendar pc = new PersianCalendar();
                    DateTime ds = DateTime.Now.AddDays(-Convert.ToInt32(InvoiceDateStart));
                    dateStart = ds.Date;
                    dateEnd = DateTime.Now.AddDays(1).Date;

                }




                if (Datetype == "DayTopProduct")
                {
                    return Json(db.ac_AccountDetail.Where(dynStr, ol.ToArray())
                        .Where(d => d.ac_OrderHeader.Date >= dateStart && d.ac_OrderHeader.Date <= dateEnd)
                        .Select(o => new
                        {
                            o.ac_OrderDetail.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Barcode,
                            o.ac_OrderDetail.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Name,
                            o.ac_OrderDetail.Quantity,
                            o.ac_OrderHeader.Sell
                        }).GroupBy(g => new { g.Barcode, g.Name }).Select(f => new
                        {
                            f.Key.Barcode,
                            f.Key.Name,
                            quantity = (decimal?)f.Sum(q => q.Quantity * (q.Sell ? 1 : -1))
                        }).OrderByDescending(o => o.quantity).Take(10));
                }
                else
                {
                    return null;
                }
            }
            catch (Exception e)
            {
                return null;
            }

        }
        #endregion


        //application
        #region
        public ActionResult AddTableAccount(int accountId, string table)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditAddress"))
                {
                    return Json(new { isDone = false, msg = "notAllowed" });
                }

                db.ac_TableAccount.AddObject(new ac_TableAccount() { AccountId = accountId, Table = table, ApplicationId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId });
                db.SaveChanges();
                return Json(new { alert = "ok", count = db.SaveChanges() });
            }
            catch (Exception ex) { return Json(new { alert = ex.InnerException.Message, count = 0 }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        #endregion

        //employee begin
        #region
        public ActionResult AddEmployee(string username, string pass, string email, string name, string famil, string male,
           string bdate, string rdate, string tell, string mobile, string meli, string acc, string maneg, int? addressId)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }

            var userRoles = utility.GetUserRoles(db, User.Identity.Name, appName);
            if (!userRoles.Contains("canAddEmployee"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }
            int employeCount = db.p_Employee.Where(e => e.aspnet_Membership.aspnet_Applications.ApplicationName == appName).Count();
            if (employeCount > 0 && db.ApplicationDetails.Single(a => a.AppName == appName).EmployeeLimit <= db.p_Employee.Count(s => s.p_Person.ac_Account.aspnet_Applications.ApplicationName == appName))
            {
                return Json(new { isdone = false, msg = "maxEmployeeExceed" });
            }
            int i = 0;
            MembershipUser user = null;
            MembershipCreateStatus status = MembershipCreateStatus.Success;
            try
            {
                user = Membership.CreateUser(username, pass, email, null, null, true, Guid.NewGuid(), out status);
                if (user != null)
                {

                    p_Employee emp = new p_Employee();
                    emp.HierDate = DateTime.Now;//utility.GetDateCulture(hdate);
                    emp.UserId = (Guid)user.ProviderUserKey;
                    emp.IdCart = meli;
                    if (!string.IsNullOrEmpty(acc))
                        emp.AccountNumber = acc;
                    var applicationId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;
                    var tableAccount = db.ac_TableAccount.Single(a => a.Table == "employee" && a.aspnet_Applications.ApplicationName == appName);
                    var parentAccount = db.ac_Account.Single(a => a.AccountId == tableAccount.AccountId);
                    var account = new ac_Account()
                    {
                        AccountNature = parentAccount.AccountNature,
                        Code = utility.FindAccountCodeByParentId(tableAccount.AccountId) + 1,
                        GroupType = parentAccount.GroupType,
                        Level = Convert.ToByte(parentAccount.Level + 1),
                        Name = famil + " " + name + " " + username,
                        ParentAccountId = tableAccount.AccountId,
                        ApplicationId = applicationId,
                        LedgentId = findLedgentAccId(tableAccount.AccountId)
                    };

                    p_Person per = new p_Person();
                    per.Name = name;
                    per.Family = famil;
                    if (!string.IsNullOrEmpty(bdate))
                        per.DateOfBirth = utility.GetDateCulture(bdate);
                    per.Gender = (male == "true") ? true : false;
                    per.Code = username;
                    //per.ApplicationId = applicationId;
                    per.RegDate = utility.GetDateTimeCulture(rdate);
                    per.p_Employee = emp;
                    per.AddressId = addressId;
                    per.ac_Account = account;
                    if (!string.IsNullOrEmpty(tell))
                        per.p_Phone.Add(new p_Phone() { Number = tell, Cell = false });
                    if (!string.IsNullOrEmpty(mobile))
                        per.p_Phone.Add(new p_Phone() { Number = mobile, Cell = true });

                    if (!userRoles.Contains("Admin"))
                    {

                        var currUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.AccountId == p.p_Employee.AccountId && p.ac_Account.aspnet_Applications.ApplicationName == appName);
                        var r = db.GetSubEmployeeAndSelfByParent(currUser.AccountId);
                        int manegId = !string.IsNullOrEmpty(maneg) ? db.p_Person.Single(p => p.Code == maneg && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId : currUser.AccountId;
                        if (r.Select(s => s.AccountId).Contains(manegId))
                            emp.ManagerId = (string.IsNullOrEmpty(maneg)) ? currUser.AccountId : (int?)manegId;
                        else
                        {
                            Membership.DeleteUser(username);
                            return Json(new { isdone = false, msg = "notInRole" });
                        }
                    }

                    db.p_Person.AddObject(per);
                    i = db.SaveChanges();
                }
                else
                    return Json(new { isdone = false, msg = "usernameExist" });
                if (i > 0)
                {
                    Guid appId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;
                    if (userRoles.Contains("Admin") && employeCount == 0)
                    {
                        db.ApplicationDetails.AddObject(new ApplicationDetail()
                        {
                            AccountLimit = 1000,
                            ApplicationId = appId,
                            AppName = appName,
                            EmployeeLimit = 1000,
                            ExpieryDate = DateTime.Now.AddYears(1),
                            IsActive = true,
                            ShopLimit = 1000,
                            SmsCredit = 1000,
                            SmsNumber = 1234567891011,
                            StartingDate = DateTime.Now
                        });
                        foreach (var item in db.aspnet_Roles.Select(r => r.RoleName))
                        {
                            db.aspnet_Roles.Single(r => r.RoleName == item).aspnet_Users.Add(db.aspnet_Users.Single(u => u.UserName == username && u.aspnet_Applications.ApplicationName == appName));
                        }
                        string admin = User.Identity.Name;
                        FormsAuthentication.SignOut();
                        // Session.RemoveAll();
                        FormsAuthentication.Authenticate(username, pass);
                        FormsAuthentication.SetAuthCookie(username, false);
                        Membership.DeleteUser(admin);
                        db.SaveChanges();
                        return Json(new { isdone = true, isAdmin = true });
                    }
                    else if (userRoles.Contains("Admin"))
                    {

                        ProfileManager.ApplicationName = appName;
                        //ProfileCommon pc = (ProfileCommon)ProfileBase.Create(User.Identity.Name);
                        //Profile.ApplicationInfo appPro = (Profile.ApplicationInfo)pc.GetPropertyValue("ApplicationProfile");
                        //db.ApplicationDetails.AddObject(new ApplicationDetail()
                        //{
                        //    AccountLimit = appPro.CounterLimit,
                        //    ApplicationId = appId,
                        //    AppName = appName,
                        //    EmployeeLimit = appPro.EmployeeLimit,
                        //    ExpieryDate = appPro.ExpieryDate,
                        //    IsActive = true,
                        //    ShopLimit = appPro.BranchLimit,
                        //    SmsCredit = appPro.SmsCredit,
                        //    SmsNumber = appPro.SmsNumber,
                        //    StartingDate = appPro.StartingDate
                        //});
                        //foreach (var item in appPro.Roles)
                        //{
                        //    db.aspnet_Roles.Single(r => r.RoleName == item).aspnet_Users.Add(db.aspnet_Users.Single(u => u.UserName == username && u.aspnet_Applications.ApplicationName == appName));
                        //}
                        string admin = User.Identity.Name;
                        FormsAuthentication.SignOut();
                        // Session.RemoveAll();
                        FormsAuthentication.Authenticate(username, pass);
                        FormsAuthentication.SetAuthCookie(username, false);
                        Membership.DeleteUser(admin);
                        db.SaveChanges();
                        return Json(new { isdone = true, isAdmin = true });
                    }
                    else
                        return Json(new { isdone = true, msg = "oK" });
                }
                else
                    return Json(new { isdone = false, msg = "error" });
            }
            catch (Exception ex)
            {
                Membership.DeleteUser(username);
                return Json(new { isdone = false, msg = ex.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult EmployeeList()
        {
            var person = db.p_Person.SingleOrDefault(c => c.Code == User.Identity.Name && c.p_Employee.AccountId == c.AccountId && c.ac_Account.aspnet_Applications.ApplicationName == appName);
            if (person != null)
            {
                int pid = person.AccountId;
                List<int> childid = db.GetSubEmployeeAndSelfByParent(pid).Select(p => p.AccountId).ToList();
                //childid.Add(pid);
                return Json(new
                {
                    results = db.p_Employee.Select(pp => new
                    {
                        pp.AccountId,
                        pp.p_Person.Name,
                        fam = pp.p_Person.Family,
                        pp.p_Person.RegDate,
                        pp.p_Person.p_Phone.FirstOrDefault().Number,
                        manname = pp.p_Employee2.p_Person.Name,
                        pp.p_Employee2.p_Person.Family,
                        mancode = pp.p_Employee2.p_Person.Code,
                        pp.p_Person.Code
                    }).Where(v => childid.Contains(v.AccountId)).AsEnumerable()
                        .Select(p => new
                        {
                            id = p.AccountId,
                            name = p.Name + " " + p.fam,
                            regdate = p.RegDate,
                            tell = (string.IsNullOrEmpty(p.Number)) ? "-" : p.Number,
                            manager = (string.IsNullOrEmpty(p.mancode)) ? "-" : p.manname + " " + p.Family + "  کد : " + p.mancode,
                            code = p.Code
                        })
                });
            }
            else
                return Json(new { isdone = false });
        }

        public ActionResult Deleteemployee(int id)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canDeleteEmployee"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                var res = db.GetSubEmployeeByParent(db.p_Person.Single(c => c.Code == User.Identity.Name && c.AccountId == c.p_Employee.AccountId && c.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId);
                if (res.Contains(id))
                {
                    var per = db.p_Person.Single(p => p.AccountId == id && p.ac_Account.aspnet_Applications.ApplicationName == appName);
                    db.p_Person.DeleteObject(per);
                    db.SaveChanges();
                    Membership.DeleteUser(per.Code);
                    return Json(new { isDone = true, msg = "oK" });
                }
                // }
                //else
                //{
                //    var pe = db.p_Person.Single(p => p.PersonId == id && p.aspnet_Applications.ApplicationName == appName);
                //    db.p_Person.DeleteObject(pe);
                //    db.SaveChanges();
                //    Membership.DeleteUser(pe.Code);
                //    return "OK";
                //}
                return Json(new { isDone = false, msg = "notInRole" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult getEmployee(int id)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }
            return Json(db.p_Person.Where(pp => pp.AccountId == id).
                Select(pp => new
                {
                    pp.AccountId,
                    pp.Name,
                    pp.Family,
                    pp.Gender,
                    pp.DateOfBirth,
                    pp.RegDate,
                    pp.p_Employee.HierDate,
                    pp.p_Employee.IdCart,
                    pp.p_Employee.AccountNumber,
                    pp.p_Employee.p_Employee2.p_Person.Code,
                    pp.p_Address.Address,
                    pp.AddressId
                }));
        }

        public ActionResult EditEmployee(int id, string name, string famil, string gender, string bdate, string regdate,
                              string hdate, string meli, string acc, string manage, int addressId)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canDeleteEmployee"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }
            try
            {
                var currUser = db.p_Person.Single(pr => pr.Code == User.Identity.Name && pr.AccountId == pr.p_Employee.AccountId && pr.ac_Account.aspnet_Applications.ApplicationName == appName);
                var subEmployees = db.GetSubEmployeeAndSelfByParent(currUser.AccountId).Select(p => p.AccountId).ToList();
                if (subEmployees.Contains(id))
                {
                    p_Person p = db.p_Person.Single(pp => pp.AccountId == id);
                    p.Name = name;
                    p.Family = famil;
                    if (!string.IsNullOrEmpty(bdate))
                        p.DateOfBirth = utility.GetDateCulture(bdate);
                    p.Gender = (gender == "true") ? true : false;
                    if (!string.IsNullOrEmpty(regdate))
                        p.RegDate = utility.GetDateCulture(regdate);
                    p.p_Employee.AccountNumber = acc;
                    if (!string.IsNullOrEmpty(hdate))
                        p.p_Employee.HierDate = utility.GetDateCulture(hdate);
                    p.p_Employee.IdCart = meli;
                    p.AddressId = addressId;
                    //   if (!User.IsInRole("Admin"))
                    // {
                    var r = db.GetSubEmployeeAndSelfByParent(currUser.AccountId);
                    int manegId = !string.IsNullOrEmpty(manage) ? db.p_Person.Single(pr => pr.Code == manage && pr.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId : currUser.AccountId;
                    if (r.Select(s => s.AccountId).Contains(manegId))
                        p.p_Employee.ManagerId = p.p_Employee.ManagerId == null ? null : (string.IsNullOrEmpty(manage)) ? currUser.AccountId : (int?)manegId;
                    else
                    {
                        return Json(new { isdone = false, msg = "notInRole" });
                    }
                    //  }
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "oK" });
                }
                else
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult AddEmployeeCounter(int counterid, int personid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditCounter"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }
            try
            {
                if ((db.GetSubEmployeeByParent(db.p_Person.Single(c => c.Code == User.Identity.Name && c.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId).Contains(personid))
                    && db.p_Employee.Single(e => e.p_Person.Code == User.Identity.Name && e.p_Person.ac_Account.aspnet_Applications.ApplicationName == appName).ac_Counter.Select(c => c.AccountId).Contains(counterid))
                {
                    var emp = db.p_Person.Single(p => p.AccountId == personid);
                    emp.p_Employee.ac_Counter.Add(db.ac_Counter.Single(c => c.AccountId == counterid));
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "oK" });
                }
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult getEmployeeCounterList(int personid)
        {
            return Json(new MapiDBEntities().p_Person.Single(p => p.AccountId == personid).p_Employee.ac_Counter.Select(c => new { c.AccountId, c.Code }));
        }
        public ActionResult DeleteEmployeeCounter(int personid, int counterid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditCounter"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                if (db.GetSubEmployeeByParent(db.p_Person.Single(c => c.Code == User.Identity.Name && c.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId).Contains(personid))
                {
                    var emp = db.p_Person.Single(p => p.AccountId == personid);
                    emp.p_Employee.ac_Counter.Remove(db.ac_Counter.Single(c => c.AccountId == counterid));
                    if (db.SaveChanges() > 0)
                        return Json(new { isDone = true, msg = "oK" });
                    return Json(new { isDone = false, msg = "خطا در حذف اطلاعات" });
                }
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult SetUserStatus(int id, bool status)
        {
            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditEmployee"))
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }
                var emp = db.p_Person.Single(p => p.AccountId == id);
                MembershipUser u = Membership.GetUser(emp.Code);
                {
                    var currUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.AccountId == p.p_Employee.AccountId && p.ac_Account.aspnet_Applications.ApplicationName == appName);
                    var currChilds = db.GetSubEmployeeByParent(currUser.AccountId);
                    if (currChilds.Contains(emp.AccountId))
                    {
                        u.IsApproved = status;
                        if (status)
                            u.UnlockUser();

                        Membership.UpdateUser(u);
                    }
                    else
                        return Json(new { isdone = false, msg = "notInRole" });
                }
                return Json(new { isdone = true, msg = u.IsApproved });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = true, msg = ex.Message });
            }
        }
        public ActionResult GetEmployeeEmail(int id)
        {
            try
            {
                var emp = db.p_Person.Single(p => p.AccountId == id);
                MembershipUser u = Membership.GetUser(emp.Code);
                return Json(new { isdone = true, msg = u.Email, status = u.IsApproved });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex });
            }
        }

        public ActionResult ChangeEmail(string email, int id)
        {
            try
            {
                if (string.IsNullOrEmpty(email))
                    return Json(new { isdone = false, msg = "ایمیل را وارد کنید." });
                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditEmployee"))
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }
                var emp = db.p_Person.Single(p => p.AccountId == id);
                MembershipUser u = Membership.GetUser(emp.Code);
                //if (User.IsInRole("Admin"))
                //{
                //    u.Email = email;
                //    Membership.UpdateUser(u);
                //}
                //else
                {
                    var currUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.AccountId == p.p_Employee.AccountId && p.ac_Account.aspnet_Applications.ApplicationName == appName);
                    var currChilds = db.GetSubEmployeeAndSelfByParent(currUser.AccountId);
                    if (currChilds.Select(c => c.AccountId).Contains(emp.AccountId))
                    {
                        u.Email = email;
                        Membership.UpdateUser(u);
                    }
                    else
                        return Json(new { isdone = false, msg = "notInRole" });
                }
                return Json(new { isdone = true });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex });
            }
        }

        public ActionResult ChangePassword(string oldPassword, string newPassword, string passwordConfirm, int id)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditEmployee") || !db.GetSubEmployeeAndSelfByParent(db.p_Person.Single(c => c.Code == User.Identity.Name && c.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId).Select(i => i.AccountId).Contains(id))
            {
                return Json("notInRole");
            }
            if (newPassword == passwordConfirm)
            {
                try
                {
                    var user = Membership.GetUser(db.p_Person.Single(p => p.AccountId == id).Code);
                    if (user.ChangePassword(oldPassword, newPassword))
                        return Json("ok");
                    else
                        return Json("error");
                }
                catch (Exception ex)
                {
                    return Json(ex.Message);
                }
            }
            else
                return Json("differentPass");
        }

        public ActionResult ChangeUserName(string password, string newUser, string userConfirm, int id)
        {
            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditEmployee") || !db.GetSubEmployeeAndSelfByParent(db.p_Person.Single(c => c.Code == User.Identity.Name && c.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId).Select(i => i.AccountId).Contains(id))
                {
                    return Json("notInRole");
                }
                if (newUser == userConfirm)
                {
                    MembershipUser Current = Membership.GetUser(db.p_Person.Single(p => p.AccountId == id).Code);
                    if (password == Current.GetPassword())
                    {
                        if (Membership.GetUser(newUser.ToLower()) == null)
                        {
                            var _user = db.aspnet_Users.Single(s => s.UserName == User.Identity.Name);
                            _user.UserName = newUser;
                            _user.LoweredUserName = newUser.ToLower();
                            db.SaveChanges();
                            FormsAuthentication.SetAuthCookie(newUser, false);
                            return Json(newUser);
                        }
                        else
                        {
                            return Json("exist");
                        }
                    }
                    else
                    {
                        return Json("wrongPassword");
                    }
                }
                else
                {
                    return Json("different");
                }
            }
            catch (Exception ex)
            {
                return Json("error");
            }
        }

        public class resultRole
        {
            public Guid id { get; set; }
            public int empId { get; set; }
            public string name { get; set; }
            public string description { get; set; }
            public bool isChecked { get; set; }
            public bool isParent { get; set; }
            public bool isadd { get; set; }
            public bool isdel { get; set; }
        }
        public ActionResult getRoleParent(int id, Guid? appId)
        {
            //id hamon AccountId hast va niaz be peida kardanesh nist ????
            //if (appId != null)
            //id = db.p_Employee.Where(s => s.p_Person.ApplicationId == appId && s.p_Employee == null).FirstOrDefault().AccountId;

            var emp = db.p_Person.Single(p => p.AccountId == id);
            List<resultRole> result = new List<resultRole>();
            IEnumerable<resultRole> roleofcurrentuser = null;
            var currUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.AccountId == p.p_Employee.AccountId);
            var currChilds = db.GetSubEmployeeAndSelfByParent(currUser.AccountId);
            if (!currChilds.Select(c => c.AccountId).Contains(id) && appId == null)
                return Json(result);
            //if (User.IsInRole("Admin"))
            //{
            //    roleofcurrentuser = db.aspnet_Roles.OrderBy(c => c.Priority).Where(c => c.ParentId == null).Select(r => new resultRole { roleid = r.RoleId, rolename = r.RoleName, description = r.Description }).AsEnumerable();
            //}
            //else
            {
                roleofcurrentuser = db.aspnet_Users.Single(u => u.UserName == User.Identity.Name && u.aspnet_Applications.ApplicationName == appName).aspnet_Roles.Where(r => r.Priority != "customer").OrderBy(c => c.Priority).Where(c => c.ParentId == null).Select(r => new resultRole { id = r.RoleId, name = r.RoleName, description = r.Description }).AsEnumerable();
            }
            var strroleofuser = db.aspnet_Users.Single(u => u.UserName == emp.Code).aspnet_Roles.Select(r => r.RoleName);
            foreach (var item in roleofcurrentuser)
            {
                if (strroleofuser.Contains(item.name))
                {

                    //ProfileCommon pc = (ProfileCommon)ProfileBase.Create(emp.Code);

                    // result.Add(new resultRole { rolename = item, isinrole = true, isadd = pc.ProfileEmployee.listprfemp.Single(prf => prf.roleName == item).canadd, isdel = pc.ProfileEmployee.listprfemp.Single(prf => prf.roleName == item).candelete });
                    result.Add(new resultRole { id = item.id, name = item.name, description = item.description, isChecked = true, isParent = true });
                }
                else result.Add(new resultRole { id = item.id, name = item.name, description = item.description, isChecked = false, isParent = true });
            }
            return Json(result);
        }

        public ActionResult getRoleList(Guid? id, string name, int? empId)
        {
            //id hamon accountId hast va digar niaz be peida kardane an nist ???
            //if (appId != null)
            //    id = db.p_Employee.Where(s => s.p_Person.ApplicationId == appId && s.p_Employee2 == null).FirstOrDefault().AccountId;
            Guid? parentid = id == null ? null : id;
            string username = db.p_Person.Single(p => p.AccountId == empId).Code;
            List<resultRole> result = new List<resultRole>();
            //string[] strroleofuser = null;
            IEnumerable<resultRole> roleofcurrentuser = null;
            if (parentid != null)
            {
                roleofcurrentuser = db.aspnet_Users.Single(u => u.UserName == User.Identity.Name && u.aspnet_Applications.ApplicationName == appName).aspnet_Roles.Where(d => d.ParentId == parentid).OrderBy(c => c.Priority).Select(r => new resultRole { name = r.RoleName, description = r.Description }).AsEnumerable();


                var strRoles = db.aspnet_Users.Single(u => u.UserName == username).aspnet_Roles.Select(r => r.RoleName);
                //strroleofuser = Roles.GetRolesForUser(username);
                foreach (var item in roleofcurrentuser)
                {
                    if (strRoles.Contains(item.name))
                    {
                        //ProfileCommon pc = (ProfileCommon)ProfileBase.Create(username);
                        // result.Add(new resultRole { rolename = item, isinrole = true, isadd = pc.ProfileEmployee.listprfemp.Single(prf => prf.roleName == item).canadd, isdel = pc.ProfileEmployee.listprfemp.Single(prf => prf.roleName == item).candelete });
                        result.Add(new resultRole { id = item.id, empId = empId.Value, name = item.name, description = item.description, isChecked = true, isParent = false });
                    }
                    else result.Add(new resultRole { id = item.id, empId = empId.Value, name = item.name, description = item.description, isChecked = false, isParent = false });
                }
                return Json(result);
            }
            else
            {
                roleofcurrentuser = db.aspnet_Users.Single(u => u.UserName == User.Identity.Name && u.aspnet_Applications.ApplicationName == appName).aspnet_Roles.Where(r => r.Priority != "customer").OrderBy(c => c.Priority).Where(c => c.ParentId == null).Select(r => new resultRole { id = r.RoleId, name = r.RoleName, description = r.Description }).AsEnumerable();
                var strroleofuser = db.aspnet_Users.Single(u => u.UserName == username).aspnet_Roles.Where(r => r.RoleId != r.ParentId).Select(r => r.RoleName);
                foreach (var item in roleofcurrentuser)
                {
                    if (strroleofuser.Contains(item.name))
                    {

                        //ProfileCommon pc = (ProfileCommon)ProfileBase.Create(emp.Code);

                        // result.Add(new resultRole { rolename = item, isinrole = true, isadd = pc.ProfileEmployee.listprfemp.Single(prf => prf.roleName == item).canadd, isdel = pc.ProfileEmployee.listprfemp.Single(prf => prf.roleName == item).candelete });
                        result.Add(new resultRole { id = item.id, empId = empId.Value, name = item.name, description = item.description, isChecked = true, isParent = true });
                    }
                    else result.Add(new resultRole { id = item.id, empId = empId.Value, name = item.name, description = item.description, isChecked = false, isParent = true });
                }
                return Json(result);
            }



        }

        public ActionResult AddroleforUser(int id, string role, bool ischecked)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canChangeRole"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }

            //id hamon accountId hast va digar niaz be peida kardane an nist ???
            //if (appId != null)
            //    id = db.p_Employee.Where(s => s.p_Person.ApplicationId == appId && s.p_Employee2 == null).FirstOrDefault().AccountId;

            string username = db.p_Person.Single(p => p.AccountId == id).Code;
            var currUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.AccountId == p.p_Employee.AccountId && p.ac_Account.aspnet_Applications.ApplicationName == appName);
            var currChilds = db.GetSubEmployeeByParent(currUser.AccountId);
            if (!currChilds.Contains(id))
                return Json(new { isdone = false, msg = "notInRole" });
            if (ischecked)
            {
                var roleInfo = db.aspnet_Roles.Where(r => r.RoleName == role).FirstOrDefault();
                if (roleInfo.ParentId != null && !db.aspnet_Users.Single(u => u.UserName == username).aspnet_Roles.Contains(roleInfo.aspnet_Roles2))
                    db.aspnet_Users.Single(u => u.UserName == username).aspnet_Roles.Add(roleInfo.aspnet_Roles2);

                //add child
                var roleChild = db.aspnet_Roles.Where(r => r.ParentId == roleInfo.RoleId);
                foreach (var item in roleChild)
                {
                    db.aspnet_Users.Single(u => u.UserName == username).aspnet_Roles.Add(item);

                }
                //add parent
                db.aspnet_Users.Single(u => u.UserName == username).aspnet_Roles.Add(db.aspnet_Roles.Single(r => r.RoleName == role));
                db.SaveChanges();
                return Json(new { isdone = true, msg = "oK" });
            }
            else
            {
                var selectedRole = db.aspnet_Roles.Where(r => r.RoleName == role).FirstOrDefault();
                //remove child
                var roleChild = db.aspnet_Users.Single(u => u.UserName == username).aspnet_Roles.Where(f => f.ParentId == selectedRole.RoleId).ToList();
                foreach (var item in roleChild)
                {
                    db.aspnet_Users.Single(u => u.UserName == username).aspnet_Roles.Remove(item);

                }
                //remove parent
                var parent = db.aspnet_Users.Single(u => u.UserName == username).aspnet_Roles;
                parent.Remove(db.aspnet_Roles.Single(r => r.RoleName == role));
                //agar child entekhab nashode bashad khode role parent ham unselect mishavad
                if (parent.Where(f => f.ParentId == selectedRole.RoleId).Count() == 0 && selectedRole.aspnet_Roles2 != null)
                    parent.Remove(selectedRole.aspnet_Roles2);

                db.SaveChanges();
                return Json(new { isdone = true, msg = "oK" });
            }
        }

        public ActionResult getEmployeeShopList(int personid)
        {
            return Json(new MapiDBEntities().p_Person.Single(p => p.AccountId == personid).p_Employee.inv_Shop.Select(s => new { s.ShopId, s.Code, s.Name }));
        }

        public ActionResult getFiscalPeriod()
        {
            return Json(new MapiDBEntities().ac_FiscalPeriod.Select(f => new { name = f.Name, id = f.FiscalPeriodId }));
        }
        public ActionResult DeleteEmployeeShop(int personid, int shopid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditShop"))
            {
                return Json("notInRole");
            }
            try
            {
                if (db.GetSubEmployeeByParent(db.p_Person.Single(c => c.Code == User.Identity.Name && c.ac_Account.aspnet_Applications.ApplicationName == appName && c.AccountId == c.p_Employee.AccountId).AccountId).Contains(personid))
                {
                    var emp = db.p_Person.Single(p => p.AccountId == personid && p.ac_Account.aspnet_Applications.ApplicationName == appName && p.AccountId == p.p_Employee.AccountId);
                    emp.p_Employee.inv_Shop.Remove(db.inv_Shop.Single(s => s.ShopId == shopid));
                    db.SaveChanges();
                    return Json("ok");
                }
                else
                {
                    return Json("notInRole");
                }
            }
            catch (Exception ex) { return Json(ex.Message); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult AddEmployeeShop(int shopid, int personid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditShop"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }
            try
            {
                if ((db.GetSubEmployeeByParent(db.p_Person.Single(c => c.Code == User.Identity.Name && c.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId).Contains(personid))
                    && db.p_Employee.Single(e => e.p_Person.Code == User.Identity.Name && e.p_Person.ac_Account.aspnet_Applications.ApplicationName == appName).inv_Shop.Select(c => c.ShopId).Contains(shopid))
                {
                    var emp = db.p_Person.Single(p => p.AccountId == personid);
                    emp.p_Employee.inv_Shop.Add(db.inv_Shop.Single(s => s.ShopId == shopid));
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "oK" });
                }
                else
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult AddShop(int code, string fax, int address, string startdate, string email, string name, int? parent)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditShop"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }

            int ss = db.ApplicationDetails.Single(a => a.aspnet_Applications.ApplicationName == appName).ShopLimit;
            int gg = db.inv_Shop.Count(s => s.aspnet_Applications.ApplicationName == appName);
            if (ss <= gg)
            {
                return Json(new { isdone = false, msg = "maxShopExceed" });
            }
            try
            {
                if (code != null && address != null && startdate != null && name != null)
                {

                    var current = db.p_Employee.Single(e => e.p_Person.Code == User.Identity.Name && e.p_Person.ac_Account.aspnet_Applications.ApplicationName == appName);
                    inv_Shop shop = new inv_Shop()
                    {
                        Code = code,
                        Fax = (string.IsNullOrEmpty(fax)) ? null : fax,
                        AddressId = address,
                        StartingDate = utility.GetDateCulture(startdate),
                        Email = (string.IsNullOrEmpty(email)) ? null : email,
                        Name = name,
                        ApplicationId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId,
                        ParentShopId = parent,
                        RegistererId = current.AccountId
                    };
                    current.inv_Shop.Add(shop);
                    db.inv_Shop.AddObject(shop);
                    db.SaveChanges();
                    return Json(new { isdone = true, shopId = shop.ShopId, shopName = shop.Name, msg = "oK" });
                }
                else
                    return Json(new { isdone = false, msg = "error" });
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult EditShop(int id, int code, string fax, int address, string startdate, string email, string name, int? parent)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditShop"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }
            try
            {
                if (code != null && address != null && startdate != null && name != null)
                {
                    inv_Shop shop = db.inv_Shop.Single(con => con.ShopId == id);
                    shop.Code = code;
                    shop.Fax = (string.IsNullOrEmpty(fax)) ? null : fax;
                    shop.AddressId = address;
                    shop.StartingDate = utility.GetDateCulture(startdate);
                    shop.Email = (string.IsNullOrEmpty(email)) ? null : email;
                    shop.Name = name;
                    shop.ParentShopId = (parent == 0) ? null : parent;
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "oK" });
                }
                else
                    return Json(new { isdone = false, msg = "dontSave" });
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult DeleteShop(int id)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditShop"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                db.inv_Shop.DeleteObject(db.inv_Shop.Single(con => con.ShopId == id));
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult GetListShop()
        {

            {
                var person = db.p_Person.SingleOrDefault(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName);
                if (person != null)
                {
                    return Json(new
                    {
                        results = person.p_Employee.inv_Shop.Where(s => s.ApplicationId == null || s.aspnet_Applications.ApplicationName == appName)
                            .Select(shop => new
                            {
                                shop.ShopId,
                                shop.Code,
                                shop.Fax,
                                shop.p_Address.Address,
                                shop.StartingDate,
                                shop.Email,
                                shop.Name,
                                parent = (shop.inv_Shop2 != null) ? shop.inv_Shop2.Name : ""
                            })
                    });
                }
                else
                    return Json(new { isdone = false });
            }
        }
        public ActionResult getShopName()
        {
            return Json(db.inv_Shop.Where(s => s.ApplicationId == null || s.aspnet_Applications.ApplicationName == appName)
                .Select(shop => new
                {
                    id = shop.ShopId,
                    name = shop.Name,
                }));
        }

        public ActionResult getShop(int id)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }
            return Json(db.inv_Shop.Where(s => s.ShopId == id && (s.ApplicationId == null || s.aspnet_Applications.ApplicationName == appName))
                .Select(shop => new
                {
                    shop.ShopId,
                    shop.Code,
                    shop.Fax,
                    shop.p_Address.Address,
                    shop.AddressId,
                    shop.StartingDate,
                    shop.Email,
                    shop.Name,
                    parent = shop.inv_Shop2.Name,
                    shop.ParentShopId

                }).AsEnumerable().Select(ret => new
                {
                    ret.ShopId,
                    ret.Code,
                    ret.Fax,
                    ret.Address,
                    ret.AddressId,
                    startdate = utility.GetstrDateCultureSimple(ret.StartingDate),
                    ret.Email,
                    ret.Name,
                    ret.parent,
                    ret.ParentShopId
                }));
        }

        public ActionResult getEmployees()
        {
            return Json(db.GetSubEmployeeAndSelfByParent(db.p_Person.Single(c => c.Code == User.Identity.Name && c.p_Employee.AccountId == c.AccountId && c.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId)
                .Select(a => new
                {
                    id = a.AccountId,
                    name = a.p_Person.Name + " " + a.p_Person.Family,
                }));
        }
        #endregion
        // employee end

        //Counter
        #region
        public ActionResult AddCounter(int code, int shopid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canAddCounter"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }
            try
            {
                var applicationId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;
                var tableAccount = db.ac_TableAccount.Single(a => a.Table == "counter" && a.aspnet_Applications.ApplicationName == appName);
                var parentAccount = db.ac_Account.Single(a => a.AccountId == tableAccount.AccountId);
                var current = db.p_Employee.Single(e => e.p_Person.Code == User.Identity.Name && e.p_Person.ac_Account.aspnet_Applications.ApplicationName == appName);

                var account = new ac_Account()
                {
                    AccountNature = parentAccount.AccountNature,
                    Code = utility.FindAccountCodeByParentId(tableAccount.AccountId) + 1,
                    GroupType = parentAccount.GroupType,
                    Level = Convert.ToByte(parentAccount.Level + 1),
                    Name = code + " صندوق",
                    ParentAccountId = tableAccount.AccountId,
                    ApplicationId = applicationId,
                    RegistererId = current.AccountId,
                    LedgentId = findLedgentAccId(tableAccount.AccountId)

                };
                ac_Counter counter = new ac_Counter() { ac_Account = account, Code = code, ShopId = shopid };
                db.ac_Counter.AddObject(counter);
                current.ac_Counter.Add(counter);
                db.SaveChanges();
                return Json(new { isdone = true, counterId = counter.AccountId, counterName = counter.Code, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = "error" }); }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult DeleteCounter(int Cid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canDeleteCounter"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                db.ac_Counter.DeleteObject(db.ac_Counter.Single(c => c.AccountId == Cid));
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception e) { return Json(new { isDone = false, msg = e.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult GetCounterlist()
        {
            {
                var person = db.p_Person.SingleOrDefault(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName);
                if (person != null)
                    return Json(new
                    {
                        results = person.p_Employee.ac_Counter.Select(cr => new
                        {
                            cr.AccountId,
                            cr.Code,
                            cr.ShopId,
                            cr.inv_Shop.Name,
                            ShopCode = cr.inv_Shop.Code
                        })
                    });
                else
                    return Json(new { isdone = false });
            }

        }

        public ActionResult EditCounter(int id, int code, int shopid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditCounter"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }
            try
            {
                var counter = db.ac_Counter.Single(c => c.AccountId == id);
                counter.Code = code;
                counter.ShopId = shopid;
                db.SaveChanges();
                return Json(new { isdone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        #endregion
        //Counter End

        //Hierarchy begin
        #region
        public ActionResult GetCompletionListBySupplierName(string q, int limit)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }
            return Json(getReturnSupplier(new MapiDBEntities(), q, limit, appName));
        }
        public static Func<MapiDBEntities, string, int, string, object>
getReturnSupplier = CompiledQuery.Compile((MapiDBEntities db, string q, int limit, string appName)
=> db.p_Supplier.Where(b => (b.p_Person.ac_Account.aspnet_Applications.ApplicationName == appName) && ((b.p_Person.Name).Contains(q) || b.p_Person.Family.Contains(q) || b.p_Person.Code.Contains(q))).OrderBy(b => b.p_Person.Family).Take(limit)
.Select(cc => new
{
    label = (cc.p_Person.Gender == true ? "آقای " : "خانم ") +
        (cc.p_Person.Name == null ? "" : cc.p_Person.Name + " ") +
        cc.p_Person.Family + " " +
        cc.p_Person.Code + " " +
        (cc.p_Person.p_Address.Address),
    value = cc.p_Person.Code,
    id = cc.AccountId
}
      ));

        public ActionResult GetCompletionListByCustomerName(string q, int limit)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }
            return Json(getReturnCustomer(new MapiDBEntities(), q, limit, appName));
        }
        public static Func<MapiDBEntities, string, int, string, object>
    getReturnCustomer = CompiledQuery.Compile((MapiDBEntities db, string q, int limit, string appName)
        => db.p_Customer.Where(b => (b.p_Person.ac_Account.aspnet_Applications.ApplicationName == appName) && ((b.p_Person.Name).Contains(q) || b.p_Person.Family.Contains(q) || b.p_Person.Code.Contains(q))).OrderBy(b => b.p_Person.Family).Take(limit)
     .Select(cc => new
     {
         label = (cc.p_Person.Gender == true ? "آقای " : "خانم ") +
             (cc.p_Person.Name == null ? "" : cc.p_Person.Name + " ") +
             cc.p_Person.Family + " " +
             cc.p_Person.Code +
             (cc.p_Person.Name == null ? "" : " معرف: " + cc.p_Person.Name + " " + cc.p_Person.Family),
         value = cc.p_Person.Code,
         id = cc.AccountId
     }
                  ));


        public ActionResult GetCompletionListByEmployeeName(string q, int limit)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }
            var employee = db.p_Person.SingleOrDefault(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName && p.AccountId == p.p_Employee.AccountId);
            if (employee != null)
                return Json(db.GetSubEmployeeAndSelfByParent(employee.AccountId).Where(b => ((b.p_Person.Name).Contains(q) || b.p_Person.Family.Contains(q) || b.p_Person.Code.Contains(q))).OrderBy(b => b.p_Person.Family).Take(limit)
        .Select(cc => new
        {
            label = (cc.p_Person.Gender == true ? "آقای " : "خانم ") +
                (cc.p_Person.Name == null ? "" : cc.p_Person.Name + " ") +
                cc.p_Person.Family + " " +
                cc.p_Person.Code + " " +
                (cc.p_Person.p_Address.Address),
            value = cc.p_Person.Code,
            id = cc.AccountId
        }));
            else
                return Json(new { isdone = false, msg = "error" });

        }

        #endregion
        //Hierarchy end

        //supplier begin
        #region
        public ActionResult AddSupplier(string name, string family, int? age, string gender, string fax, string mobile, string phone, int? addressid, string email, string date)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }

            if (!utility.isInRole(db, User.Identity.Name, appName, "canAddSupplier"))
            {
                return Json(new { isDone = false, alert = "notInRole" });
            }
            try
            {
                EntityCollection<p_Phone> phones = new EntityCollection<p_Phone>();
                phones.Add(new p_Phone() { Number = mobile, Cell = true });
                phones.Add(new p_Phone() { Number = phone, Cell = false });
                var pcode = db.p_Person.Where(r => r.AccountId == r.p_Supplier.AccountId);
                var co = pcode.Count() > 0 ? pcode.OrderByDescending(c => c.AccountId).Select(c => c.Code).First() : "998";
                co = co.Replace("c", "");
                co = co.Replace("s", "");
                var applicationId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;
                var tableAccount = db.ac_TableAccount.Single(a => a.Table == "supplier" && a.aspnet_Applications.ApplicationName == appName);
                var parentAccount = db.ac_Account.Single(a => a.AccountId == tableAccount.AccountId);
                var account = new ac_Account()
                {
                    AccountNature = parentAccount.AccountNature,
                    Code = utility.FindAccountCodeByParentId(tableAccount.AccountId) + 1,
                    GroupType = parentAccount.GroupType,
                    Level = 3,// Convert.ToByte(parentAccount.Level + 1),
                    Name = family + " " + name + " " + co,
                    ParentAccountId = tableAccount.AccountId,
                    ApplicationId = applicationId,
                    RegistererId = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId,
                    LedgentId = findLedgentAccId(tableAccount.AccountId)
                };
                db.p_Person.AddObject(new p_Person()
                {
                    Code = "s" + (int.Parse(co) + 2).ToString(),
                    Name = name,
                    Family = family,
                    RegDate = utility.GetDateTimeCulture(date),
                    DateOfBirth = (age != null ? DateTime.Parse((DateTime.Now.Year - age).ToString() + "-1-1") : DateTime.Now),
                    Gender = bool.Parse(gender),
                    AddressId = addressid,
                    //ApplicationId = applicationId,
                    ac_Account = account,
                    p_Supplier = new p_Supplier()
                    {
                        fax = fax,
                        Email = email
                    },
                    p_Phone = phones
                });
                return Json(new { alert = "ok", count = db.SaveChanges() });
            }
            catch (Exception ex) { return Json(new { alert = ex.Message, count = 0 }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult EditSupplier(int personid, string code, string name, string family, int? age, string gender, string fax, string email)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditSupplier"))
            {
                return Json(new { isDone = false, alert = "notInRole" });
            }
            try
            {
                p_Supplier c = db.p_Supplier.Single(cus => cus.AccountId == personid);
                c.p_Person.Code = code;
                c.p_Person.Name = String.IsNullOrEmpty(name) ? null : name;
                c.p_Person.Family = family;
                if (age != null)
                    c.p_Person.DateOfBirth = DateTime.Parse((DateTime.Now.Year - age.Value).ToString() + "-1-1");
                else
                    c.p_Person.DateOfBirth = null;
                c.p_Person.Gender = bool.Parse(gender);
                c.fax = String.IsNullOrEmpty(fax) ? null : fax;
                c.Email = String.IsNullOrEmpty(email) ? null : email;
                return Json(new { alert = "ok", count = db.SaveChanges() });
            }
            catch (Exception ex) { return Json(new { alert = ex.Message, count = 0 }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult DeleteSupplier(int personid)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditSupplier"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                db.p_Person.DeleteObject(db.p_Person.Single(c => c.AccountId == personid));
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception e) { return Json(new { isDone = false, msg = e.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult GetSupplierList(int skip, int take, int currentPage, bool first, string sort, string code, string namefamily, string registerername, string agefrom, string ageto, string regdatefrom, string regdateto)
        {

            List<ObjectParameter> ol = new List<ObjectParameter>();
            string dynStr = string.Empty;
            dynStr += "(it.p_Person.ac_Account.aspnet_Applications.ApplicationName = @appname or it.p_Person.ac_Account.ApplicationId Is NULL)";
            ol.Add(new ObjectParameter("appname", appName));
            if (utility.isInRole(db, User.Identity.Name, appName, "canSeeAllSuppliers"))
            {

            }
            else
            {
                dynStr += " AND ";
                dynStr += "it.p_Person1.accountId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name).AccountId);
            }
            if (code.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.p_Person.Code = @code ";
                ol.Add(new ObjectParameter("code", code));
            }
            if (namefamily.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += " (it.p_Person.Name +it.p_Person.Family) LIKE '%' + @name + '%'";
                ol.Add(new ObjectParameter("name", namefamily.Replace(" ", string.Empty)));

            }
            if (registerername.Length > 0)
            {
                if (dynStr.Length > 0)

                    dynStr += " AND ";
                dynStr += " (it.p_Person1.Name +it.p_Person1.Family) LIKE '%' + @name + '%'";
                ol.Add(new ObjectParameter("name", registerername.Replace(" ", string.Empty)));


            }
            if (agefrom.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.p_Person.DateOfBirth   <=   @dateFrom";
                ol.Add(new ObjectParameter("dateFrom", DateTime.Parse((DateTime.Now.Year - int.Parse(agefrom)).ToString() + "-1-1")));
            }
            if (ageto.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.p_Person.DateOfBirth   >=   @dateTo";
                ol.Add(new ObjectParameter("dateTo", DateTime.Parse((DateTime.Now.Year - int.Parse(ageto)).ToString() + "-1-1")));
            }
            //if (introducer.Length > 0)
            //{
            //    if (dynStr.Length > 0)
            //        dynStr += " AND ";
            //    dynStr += " it.p_Person.Code = @code";
            //    ol.Add(new ObjectParameter("code", introducer));
            //}
            if (regdatefrom.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.p_Person.RegDate   >=   @dateFrom";
                ol.Add(new ObjectParameter("dateFrom", utility.GetDateCulture(regdatefrom)));
            }
            if (regdateto.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.p_Person.RegDate   <=   @dateTo";
                ol.Add(new ObjectParameter("dateTo", utility.GetDateCulture(regdateto)));
            }

            try
            {
                if (first)
                {
                    if (dynStr.Length > 0)
                    {
                        var result = db.p_Supplier.Where(dynStr, ol.ToArray());
                        return Json(new SearchResult()
                        {
                            count = result.Count(),
                            results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                                .Select(cc => new
                                {
                                    cc.AccountId,
                                    cc.p_Person.Name,
                                    cc.p_Person.Family,
                                    cc.p_Person.Code,
                                    cc.p_Person.RegDate,
                                    cc.p_Person.Gender,
                                    cc.p_Person.DateOfBirth,
                                    regName = cc.p_Person.Name,
                                    regFamily = cc.p_Person.Family
                                }).AsEnumerable()
                                .Select(c => new
                                {
                                    c.AccountId,
                                    c.Name,
                                    c.Family,
                                    c.Code,
                                    regdate = c.RegDate,
                                    c.Gender,
                                    age = (c.DateOfBirth == null ? 0 : (DateTime.Now.Year - c.DateOfBirth.Value.Year)),
                                    c.regName,
                                    c.regFamily
                                })
                                .ToArray()
                        });
                    }
                    else
                    {
                        var result = db.p_Supplier;
                        return Json(new SearchResult()
                        {
                            count = result.Count(),
                            results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                                .Select(cc => new
                                {
                                    cc.AccountId,
                                    cc.p_Person.Name,
                                    cc.p_Person.Family,
                                    cc.p_Person.Code,
                                    cc.p_Person.RegDate,
                                    cc.p_Person.Gender,
                                    cc.p_Person.DateOfBirth,
                                    regName = cc.p_Person.Name,
                                    regFamily = cc.p_Person.Family
                                }).AsEnumerable()
                                .Select(c => new
                                {
                                    c.AccountId,
                                    c.Name,
                                    c.Family,
                                    c.Code,
                                    regdate = c.RegDate,
                                    c.Gender,
                                    age = (c.DateOfBirth == null ? 0 : (DateTime.Now.Year - c.DateOfBirth.Value.Year)),
                                    c.regName,
                                    c.regFamily
                                })
                                  .ToArray()
                        });

                    }
                }
                else
                {
                    if (dynStr.Length > 0)
                    {
                        return Json(new SearchResult()
                        {
                            results = db.p_Supplier.Where(dynStr, ol.ToArray())
                                .OrderBy("it." + sort).Skip(skip).Take(take)
                                 .Select(cc => new
                                 {
                                     cc.AccountId,
                                     cc.p_Person.Name,
                                     cc.p_Person.Family,
                                     cc.p_Person.Code,
                                     cc.p_Person.RegDate,
                                     cc.p_Person.Gender,
                                     cc.p_Person.DateOfBirth,
                                     regName = cc.p_Person.Name,
                                     regFamily = cc.p_Person.Family
                                 }).AsEnumerable()
                                .Select(c => new
                                {
                                    c.AccountId,
                                    c.Name,
                                    c.Family,
                                    c.Code,
                                    regdate = c.RegDate,
                                    c.Gender,
                                    age = (c.DateOfBirth == null ? 0 : (DateTime.Now.Year - c.DateOfBirth.Value.Year)),
                                    c.regName,
                                    c.regFamily
                                })
                                .ToArray()
                        });
                    }
                    else
                    {
                        return Json(new SearchResult()
                        {
                            results = db.p_Supplier.OrderBy("it." + sort).Skip(skip).Take(take)
                                 .Select(cc => new
                                 {
                                     cc.AccountId,
                                     cc.p_Person.Name,
                                     cc.p_Person.Family,
                                     cc.p_Person.Code,
                                     cc.p_Person.RegDate,
                                     cc.p_Person.Gender,
                                     cc.p_Person.DateOfBirth,
                                     regName = cc.p_Person.Name,
                                     regFamily = cc.p_Person.Family
                                 }).AsEnumerable()
                                .Select(c => new
                                {
                                    c.AccountId,
                                    c.Name,
                                    c.Family,
                                    c.Code,
                                    regdate = c.RegDate,
                                    c.Gender,
                                    age = (c.DateOfBirth == null ? 0 : (DateTime.Now.Year - c.DateOfBirth.Value.Year)),
                                    c.regName,
                                    c.regFamily
                                })
                                .ToArray()
                        });

                    }
                }
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult GetSupplierById(int Supplierid)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }

            return Json(db.p_Supplier.Where(c => c.AccountId == Supplierid)
                                .Select(cc => new { cc.p_Person.Name, cc.p_Person.Family, cc.p_Person.Code, cc.p_Person.Gender, cc.p_Person.DateOfBirth, cc.Email, cc.fax, cc.p_Person.AddressId }).AsEnumerable()
                                .Select(c => new { c.Name, c.Family, c.Code, c.Gender, Age = (c.DateOfBirth == null ? 0 : (DateTime.Now.Year - c.DateOfBirth.Value.Year)), c.Email, c.fax, c.AddressId }));


        }

        public ActionResult AddSupplierPhone(int personid, string number, bool cell)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditSupplier"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                db.p_Phone.AddObject(new p_Phone() { PersonId = personid, Number = number, Cell = cell });
                db.SaveChanges();
                return Json("ok");
            }
            catch (Exception ex) { return Json(ex.Message); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult EditSupplierPhone(int phoneid, string number, bool cell)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditSupplier"))
            {
                return Json(new { isDone = false, msg = "notAllowed" });
            }
            try
            {
                p_Phone c = db.p_Phone.Single(p => p.PhoneId == phoneid);
                c.Number = number;
                c.Cell = cell;
                db.SaveChanges();
                return Json("ok");
            }
            catch (Exception ex) { return Json(ex.Message); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult DeleteSupplierPhone(int phoneid)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditSupplier"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                db.p_Phone.DeleteObject(db.p_Phone.Single(c => c.PhoneId == phoneid));
                db.SaveChanges();
                return Json("ok");
            }
            catch (Exception e) { return Json(e.Message); }
            finally { ((IDisposable)db).Dispose(); }
        }
        #endregion
        //supplier end

        //payment begin
        #region

        public class Cash
        {
            public int CurrencyId { get; set; }
            public decimal Amount { get; set; }
            public string Type { get; set; }
        }
        public class Cheque
        {
            public string Bank { get; set; }
            public string Serial { get; set; }
            public string DueDate { get; set; }
            public decimal Amount { get; set; }
            public int CurrencyId { get; set; }

        }
        public ActionResult AddPayment(List<Cash> cash, List<Cheque> cheque, List<int> voucher, int? supplierid, int counterid,
                                 bool pay, string payerCode, int? tocounterid, string description, string date)
        {

            var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
            if (tocounterid != null && !(roles.Contains("canEditPayment") || roles.Contains("canTransferMoney")))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            else if (tocounterid != null && !roles.Contains("canTransferMoney"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;

            try
            {
                int eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                //ac_OrderHeader acc2 = new ac_OrderHeader();
                //baraie peida kardan accountId cash va cheque
                int? cashAccId = db.ac_Counter.Single(c => c.AccountId == counterid).AccountId;
                int chequeAccId = db.ac_TableAccount.Single(a => a.Table == "generalReceive" && a.aspnet_Applications.ApplicationName == appName).ac_Account.AccountId;

                if (supplierid == null && !string.IsNullOrEmpty(payerCode))
                    supplierid = db.p_Person.Single(p => p.Code == payerCode && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;

                ac_OrderHeader acc = new ac_OrderHeader();
                acc.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;

                acc.ClientId = supplierid;
                acc.InvoiceNO = getInvoiceNumber(db, "payment", pay, false);
                acc.Description = getInvoicDescription(true, (cheque != null ? true : false), (cash != null ? true : false), false, pay, false) + " " + description;
                acc.EmployeeId = eid;
                acc.Date = utility.GetDateTimeCulture(date);
                acc.Sell = pay;
                acc.CounterId = counterid;
                acc.ShopId = db.ac_Counter.Single(c => c.AccountId == counterid).ShopId;
                acc.CurrencyRateId = db.ac_CurrencyRate.Where(c => c.Buy == 1).FirstOrDefault().CurrencyRateId;
                acc.IsMoney = true;
                acc.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;

                decimal sumCash = 0;
                decimal sumCheque = 0;
                ac_AccountDetail accDetail_Person = new ac_AccountDetail();

                if (cash != null)
                {

                    if (pay)
                    {
                        // cash -> bestankar
                        foreach (var dItem in cash)
                        {

                            var currency = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == dItem.CurrencyId);
                            ac_Cash ca = new ac_Cash();
                            ac_AccountDetail accountDetail = new ac_AccountDetail();
                            ca.CurrencyRateId = currency.CurrencyRateId;
                            accountDetail.Amount = dItem.Amount * currency.Buy;
                            ca.Type = dItem.Type;
                            accountDetail.IsDept = false;
                            accountDetail.AccountId = cashAccId;
                            //ca.ac_AccountDetail = accountDetail;
                            accountDetail.ac_Cash = ca;
                            acc.ac_AccountDetail.Add(accountDetail);
                            sumCash = sumCash + dItem.Amount * currency.Buy;
                        }
                    }
                    else
                    {
                        if (pay == false)
                        {
                            // cash -> bedehkar
                            foreach (var dItem in cash)
                            {
                                var currency = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == dItem.CurrencyId);
                                ac_Cash ca = new ac_Cash();
                                ac_AccountDetail accountDetail = new ac_AccountDetail();
                                ca.CurrencyRateId = currency.CurrencyRateId;
                                accountDetail.Amount = dItem.Amount * currency.Buy;
                                ca.Type = dItem.Type;
                                accountDetail.IsDept = true;
                                accountDetail.AccountId = cashAccId;
                                //ca.ac_AccountDetail = accountDetail;
                                accountDetail.ac_Cash = ca;
                                acc.ac_AccountDetail.Add(accountDetail);
                                sumCash = sumCash + dItem.Amount * currency.Buy;
                            }
                        }

                    }
                }



                if (cheque != null)
                {

                    if (pay)
                    {
                        // asnad bank ->bestankar
                        foreach (var dItem in cheque)
                        {
                            if (!roles.Contains("canReceiveByCheque"))
                            {
                                return Json(new { isDone = false, msg = "notAllowedByCheque" });
                            }
                            ac_Cheque ch = new ac_Cheque();
                            ch.Status = 6;
                            ac_AccountDetail accountDetail = new ac_AccountDetail();
                            var currency = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == dItem.CurrencyId);
                            ch.CurrencyRateId = currency.CurrencyRateId;
                            ch.Bank = dItem.Bank;

                            if (!string.IsNullOrEmpty(dItem.Serial))
                                ch.Serial = dItem.Serial;
                            ch.Passed = false;
                            ch.DueDate = utility.GetDateCulture(dItem.DueDate);
                            ch.IssuerId = Convert.ToInt32(dItem.Bank);
                            accountDetail.Amount = dItem.Amount * currency.Buy;
                            accountDetail.AccountId = Convert.ToInt32(dItem.Bank);
                            accountDetail.IsDept = false;
                            accountDetail.ac_Cheque.Add(ch);
                            acc.ac_AccountDetail.Add(accountDetail);
                            sumCheque = sumCheque + dItem.Amount * currency.Buy;
                        }


                    }
                    else
                    {
                        if (pay == false)
                        {
                            // asnad bank -> bedehkar
                            foreach (var dItem in cheque)
                            {
                                if (!roles.Contains("canReceiveByCheque"))
                                {
                                    return Json(new { isDone = false, msg = "notAllowedByCheque" });
                                }
                                ac_Cheque ch = new ac_Cheque();
                                ch.Status = 1;
                                ac_AccountDetail accountDetail = new ac_AccountDetail();
                                var currency = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == dItem.CurrencyId);
                                ch.CurrencyRateId = currency.CurrencyRateId;
                                ch.Bank = dItem.Bank;
                                if (!string.IsNullOrEmpty(dItem.Serial))
                                    ch.Serial = dItem.Serial;
                                ch.Passed = false;
                                ch.DueDate = utility.GetDateCulture(dItem.DueDate);
                                ch.IssuerId = supplierid;
                                accountDetail.Amount = dItem.Amount * currency.Buy;
                                accountDetail.AccountId = chequeAccId;
                                accountDetail.IsDept = true;
                                accountDetail.ac_Cheque.Add(ch);
                                acc.ac_AccountDetail.Add(accountDetail);
                                sumCheque = sumCheque + dItem.Amount * currency.Buy;


                            }

                        }

                    }
                }

                int? accid = db.p_Person.Single(p => p.AccountId == supplierid).AccountId;
                accDetail_Person.AccountId = accid;
                accDetail_Person.IsDept = pay;
                acc.Table = "payment";
                acc.ClientId = accid;
                db.ac_OrderHeader.AddObject(acc);
                accDetail_Person.Amount = sumCash + sumCheque;
                acc.ac_AccountDetail.Add(accDetail_Person);
                db.ac_OrderHeader.AddObject(acc);
                acc.Amount = sumCash + sumCheque;
                acc.ConfirmerId = eid;
                int save = db.SaveChanges();
                if (save > 0)
                    return Json(new { isDone = true, msg = "oK", OrderHeaderId = acc.OrderHeaderId });
                else
                    return Json(new { isDone = false, msg = "error" });
            }
            catch (FormatException)
            {
                return Json(new { isDone = false, msg = "اطلاعات پرداخت را درست وارد کنید." });
            }
            catch (IndexOutOfRangeException)
            {
                return Json(new { isDone = false, msg = "اطلاعات پرداخت را درست وارد کنید." });
            }
            catch (UpdateException e2)
            {
                return Json(new { isDone = false, msg = e2.InnerException.Message });
            }

            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = "اطلاعات ذخیره نشد /n" + ex.InnerException.Message + "." });
            }
            finally { ((IDisposable)db).Dispose(); }
        }
        public ActionResult GetPaymentList(int skip, int take, int currentPage, bool first, string sort, int? supplierid, bool IsClient, string SupplierName, string code, string EmployeeId, string EmployeeName, int? Counter, string BankName, string Serial, string InvoiceDateStart, string InvoiceDateEnd, string PaymentDateStart, string PaymentDateEnd, decimal? PriceFrom, decimal? PriceTo, bool? pay, bool? receive, bool? cash, bool? cheque, bool? voucher, bool? passed, bool? notpass, int? shopid, int? counterid)
        {

            List<ObjectParameter> ol = new List<ObjectParameter>();
            string dynStr = string.Empty;

            dynStr += "it.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName ";
            dynStr += "and (EXISTS(select g From it.ac_Cash as g where(g.CashId is not null)) or EXISTS(select g From it.ac_Cheque as g where(g.ChequeId is not null)) ) ";
            ol.Add(new ObjectParameter("appName", appName));
            if (supplierid != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ClientId = @supplierId ";
                ol.Add(new ObjectParameter("supplierId", supplierid));
            }
            if (IsClient)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ClientId = it.p_person1.p_Customer.accountId ";
            }
            if (!IsClient)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ClientId = it.p_person1.p_Supplier.accountId ";
            }

            if (shopid == null && counterid == null)
            {

                if (!utility.isInRole(db, User.Identity.Name, appName, "canSeeAllPaymentes") && shopid == null)
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
                else
                {
                    string cid = "{";
                    foreach (var item in db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).p_Employee.ac_Counter.Select(c => c.AccountId))
                    {
                        cid += item.ToString() + ",";
                    }

                    cid = cid.Remove(cid.Length - 1, 1);
                    cid += "}";
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.accountId in " + cid;
                }
            }
            else if (shopid != null && counterid == null)
            {
                string cid = "{";
                foreach (var item in db.ac_Counter.Where(c => c.ShopId == shopid).Select(s => s.AccountId))
                {
                    cid += item.ToString() + ",";
                }

                cid = cid.Remove(cid.Length - 1, 1);
                cid += "}";


                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.accountId in " + cid;
            }
            else if (shopid != null && counterid != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.accountId = @CounterId";
                ol.Add(new ObjectParameter("CounterId", counterid));
            }


            if (SupplierName.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "(it.p_person1.Name LIKE '%' + @SupplierName + '%' or  it.p_person1.Family LIKE '%' + @SupplierName + '%')";
                ol.Add(new ObjectParameter("SupplierName", SupplierName));

            }
            if (code.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += " it.p_person1.Code = @code";
                ol.Add(new ObjectParameter("code", code));
            }
            if (EmployeeId.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += " it.p_person.Code = @EmployeeId";
                ol.Add(new ObjectParameter("EmployeeId", EmployeeId));
            }
            if (EmployeeName.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "(it.p_person.Family LIKE '%' + @EmployeeName + '%' or it.p_person.Name LIKE '%' + @EmployeeName + '%')";
                ol.Add(new ObjectParameter("EmployeeName", EmployeeName));
            }
            if (Counter != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ac_Counter.Code = @Counter";
                ol.Add(new ObjectParameter("Counter", Counter));
            }
            if (!string.IsNullOrEmpty(BankName))
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";

                dynStr += "EXISTS(select g From it.ac_Cheque as g where g.Bank like '%' + @BankName + '%')";
                ol.Add(new ObjectParameter("BankName", BankName));
            }
            if (Serial.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";

                dynStr += "EXISTS(select g From it.ac_Cheque as g where g.Serial = @Serial)";
                ol.Add(new ObjectParameter("Serial", Serial));
            }
            if (InvoiceDateStart.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.Date   >=   @InvoiceDateStart";
                ol.Add(new ObjectParameter("InvoiceDateStart", utility.GetDateCulture(InvoiceDateStart)));
            }

            if (InvoiceDateEnd.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.Date   <=   @InvoiceDateEnd";
                ol.Add(new ObjectParameter("InvoiceDateEnd", utility.GetDateCulture(InvoiceDateEnd)));
            }

            if (PaymentDateStart.Length > 0 || PaymentDateEnd.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                if (PaymentDateStart.Length > 0 && PaymentDateEnd.Length > 0)
                {
                    dynStr += "EXISTS(select g From it.ac_Cheque as g where g.DueDate >= @PaymentDateStart and g.DueDate <= @PaymentDateEnd)";
                    ol.Add(new ObjectParameter("PaymentDateStart", utility.GetDateCulture(PaymentDateStart)));
                    ol.Add(new ObjectParameter("PaymentDateEnd", utility.GetDateCulture(PaymentDateEnd)));
                }
                else if (PaymentDateStart.Length > 0)
                {
                    dynStr += "EXISTS(select g From it.ac_Cheque as g where g.DueDate >= @PaymentDateStart)";
                    ol.Add(new ObjectParameter("PaymentDateStart", utility.GetDateCulture(PaymentDateStart)));
                }
                else if (PaymentDateEnd.Length > 0)
                {
                    dynStr += "EXISTS(select g From it.ac_Cheque as g where g.DueDate <= @PaymentDateEnd)";
                    ol.Add(new ObjectParameter("PaymentDateEnd", utility.GetDateCulture(PaymentDateEnd)));
                }
            }

            if (PriceFrom != null || PriceTo != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                if (PriceFrom != null && PriceTo != null)
                {
                    dynStr += "(EXISTS(select g From it.ac_Cheque as g where g.Amount >= @PriceFrom  and g.Amount <= @PriceTo)  or EXISTS(select c From it.ac_Cash as c where c.Amount >= @PriceFrom and c.Amount <= @PriceTo ))";
                    ol.Add(new ObjectParameter("PriceFrom", PriceFrom));
                    ol.Add(new ObjectParameter("PriceTo", PriceTo));
                }
                else if (PriceFrom != null)
                {
                    dynStr += "(EXISTS(select g From it.ac_Cheque as g where g.Amount >= @PriceFrom)  or EXISTS(select c From it.ac_Cash as c where c.Amount >= @PriceFrom ))";
                    ol.Add(new ObjectParameter("PriceFrom", PriceFrom));
                }
                else if (PriceTo != null)
                {
                    dynStr += "(EXISTS(select g From it.ac_Cheque as g where g.Amount <= @PriceTo )  or EXISTS( select c From it.ac_Cash as c where c.Amount <= @PriceTo ))";
                    ol.Add(new ObjectParameter("PriceTo", PriceTo));
                }
            }
            if (pay != null)
            {
                if (pay.Value && !receive.Value)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.sell   =   @pay";
                    ol.Add(new ObjectParameter("pay", pay));
                }
            }
            if (receive != null)
            {
                if (receive.Value && !pay.Value)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.sell   =   @receive";
                    ol.Add(new ObjectParameter("receive", !receive));
                }
            }
            if (cash != null)
            {
                if (cash.Value)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(select g From it.ac_Cash as g where it.OrderHeaderId = g.accountId)";
                }
            }
            if (cheque != null)
            {
                if (cheque.Value)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(select g From it.ac_Cheque as g where it.OrderHeaderId = g.accountId)";
                }
            }
            if (voucher != null)
            {
                if (voucher.Value)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(select g From it.ac_Voucher as g where it.OrderHeaderId = g.accountId)";
                }
            }
            if (passed != null)
            {
                if (passed.Value && !notpass.Value)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(select g From it.ac_Cheque as g where it.OrderHeaderId = g.accountId and g.passed = true)";
                }
            }
            if (notpass != null)
            {
                if (notpass.Value && !passed.Value)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(select g From it.ac_Cheque as g where it.OrderHeaderId = g.accountId and g.passed = false)";
                }
            }

            try
            {
                if (first)
                {
                    if (dynStr.Length > 0)
                    {
                        var result = db.ac_OrderHeader.Where(dynStr, ol.ToArray());
                        return Json(new
                        {
                            count = result.Count(),
                            results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                            .Select(b =>
                                new
                                {
                                    b.OrderHeaderId,
                                    b.p_Person.Name,
                                    b.p_Person.Family,
                                    ClientId = b.p_Person.AccountId,
                                    ClientName = b.p_Person.Name,
                                    ClientFamily = b.p_Person.Family,
                                    b.Date,
                                    b.Sell,
                                    b.ac_Counter.Code,
                                    Price = ((decimal?)b.ac_AccountDetail.Sum(c => c.Amount * c.ac_Cash.ac_CurrencyRate.Buy) + (decimal?)b.ac_AccountDetail.Sum(ca => ca.Amount * ca.ac_Cheque.FirstOrDefault().ac_CurrencyRate.Buy))
                                }).AsEnumerable()
                            .Select(a =>
                                new
                                {
                                    a.OrderHeaderId,
                                    a.Name,
                                    a.Family,
                                    a.ClientId,
                                    a.ClientName,
                                    a.ClientFamily,
                                    Date = utility.GetstrDateCulture(a.Date),
                                    a.Sell,
                                    a.Code,
                                    a.Price
                                })
                            .ToArray()
                        });
                    }
                    else
                    {
                        var result = db.ac_OrderHeader;
                        return Json(new
                        {
                            count = result.Count(),
                            results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                            .Select(b =>
                                new
                                {
                                    b.OrderHeaderId,
                                    b.p_Person.Name,
                                    b.p_Person.Family,
                                    ClientId = b.p_Person.AccountId,
                                    ClientName = b.p_Person.Name,
                                    ClientFamily = b.p_Person.Family,
                                    b.Date,
                                    b.Sell,
                                    b.ac_Counter.Code,
                                    Price = ((decimal?)b.ac_AccountDetail.Sum(c => c.Amount * c.ac_Cash.ac_CurrencyRate.Buy) + (decimal?)b.ac_AccountDetail.Sum(ca => ca.Amount * ca.ac_Cheque.FirstOrDefault().ac_CurrencyRate.Buy))
                                }).AsEnumerable()
                            .Select(a =>
                                new
                                {
                                    a.OrderHeaderId,
                                    a.Name,
                                    a.Family,
                                    a.ClientId,
                                    a.ClientName,
                                    a.ClientFamily,
                                    Date = utility.GetstrDateCulture(a.Date),
                                    a.Sell,
                                    a.Code,
                                    a.Price
                                })
                            .ToArray()
                        });

                    }
                }
                else
                {
                    if (dynStr.Length > 0)
                    {
                        return Json(new
                        {
                            results = db.ac_OrderHeader.Where(dynStr, ol.ToArray())
                               .OrderBy("it." + sort).Skip(skip).Take(take)
                                 .Select(b =>
                                     new
                                     {
                                         b.OrderHeaderId,
                                         b.p_Person.Name,
                                         b.p_Person.Family,
                                         ClientId = b.p_Person.AccountId,
                                         ClientName = b.p_Person.Name,
                                         ClientFamily = b.p_Person.Family,
                                         b.Date,
                                         b.Sell,
                                         b.ac_Counter.Code,
                                         Price = ((decimal?)b.ac_AccountDetail.Sum(c => c.Amount * c.ac_Cash.ac_CurrencyRate.Buy) + (decimal?)b.ac_AccountDetail.Sum(ca => ca.Amount * ca.ac_Cheque.FirstOrDefault().ac_CurrencyRate.Buy))
                                     }).AsEnumerable()
                            .Select(a =>
                                new
                                {
                                    a.OrderHeaderId,
                                    a.Name,
                                    a.Family,
                                    a.ClientId,
                                    a.ClientName,
                                    a.ClientFamily,
                                    Date = utility.GetstrDateCulture(a.Date),
                                    a.Sell,
                                    a.Code,
                                    a.Price
                                })
                            .ToArray()
                        });
                    }
                    else
                    {
                        return Json(new
                        {
                            results = db.ac_OrderHeader.OrderBy("it." + sort).Skip(skip).Take(take)
                              .Select(b =>
                                  new
                                  {
                                      b.OrderHeaderId,
                                      b.p_Person.Name,
                                      b.p_Person.Family,
                                      ClientId = b.p_Person.AccountId,
                                      ClientName = b.p_Person.Name,
                                      ClientFamily = b.p_Person.Family,
                                      b.Date,
                                      b.Sell,
                                      b.ac_Counter.Code,
                                      Price = ((decimal?)b.ac_AccountDetail.Sum(c => c.Amount * c.ac_Cash.ac_CurrencyRate.Buy) + (decimal?)b.ac_AccountDetail.Sum(ca => ca.Amount * ca.ac_Cheque.FirstOrDefault().ac_CurrencyRate.Buy))
                                  }).AsEnumerable()
                            .Select(a =>
                                new
                                {
                                    a.OrderHeaderId,
                                    a.Name,
                                    a.Family,
                                    a.ClientId,
                                    a.ClientName,
                                    a.ClientFamily,
                                    Date = utility.GetstrDateCulture(a.Date),
                                    a.Sell,
                                    a.Code,
                                    a.Price
                                })
                            .ToArray()
                        });

                    }
                }
            }
            catch (Exception e)
            {
                return Json(new SearchResult());
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public class DetailPayment
        {
            public IEnumerable<object> cash { get; set; }
            public IEnumerable<object> cheque { get; set; }
            //public IEnumerable<object> voucher { get; set; }

        }

        public ActionResult GetDetailPaymentList(int OrderHeaderId)
        {
            try
            {
                DetailPayment dp = new DetailPayment();
                int value = 0;
                var orderHeader = db.ac_OrderHeader.Single(o => o.OrderHeaderId == OrderHeaderId);
                var accdetail = db.ac_AccountDetail.Where(c => c.ac_Cheque.FirstOrDefault().ac_AccountDetail.OrderHeaderId == OrderHeaderId);
                dp.cash = db.ac_AccountDetail.Where(a => a.ac_Cash.ac_AccountDetail.OrderHeaderId == OrderHeaderId)
                .Select(b =>
                    new
                    {
                        b.ac_Cash.AccountDetailId,
                        b.Amount,
                        b.ac_Cash.Type,
                        b.ac_Cash.ac_CurrencyRate.ac_Currency.Currency
                    });
                dp.cheque = accdetail
                .Select(c =>
                    new
                    {
                        c.ac_Cheque.FirstOrDefault().AccountDetailId,
                        c.Amount,
                        c.ac_Cheque.FirstOrDefault().Bank,
                        c.AccountId,
                        c.ac_Cheque.FirstOrDefault().Serial,
                        c.ac_Cheque.FirstOrDefault().DueDate,
                        c.ac_Cheque.FirstOrDefault().Passed,
                        c.ac_Cheque.FirstOrDefault().ac_CurrencyRate.ac_Currency.Currency,
                        c.ac_OrderHeader.Sell
                    }).AsEnumerable()
                .Select(c =>
                    new
                    {
                        c.AccountDetailId,
                        c.Amount,
                        Bank = c.Sell ? (db.ac_Account.Single(a => a.AccountId == c.AccountId).ac_Account3.Name) : (int.TryParse(c.Bank, out value) ? GetTitleValueById(Convert.ToInt32(c.Bank), "Counter/BankTitle") : c.Bank),
                        c.Serial,
                        Date = c.DueDate,
                        Passed = c.Passed ? "پاس شده" : "پاس نشده",
                        c.Currency
                    }).ToArray();
                return Json(new
                {
                    pay = orderHeader.Sell,
                    recieveFrorm = orderHeader.p_Person.Name + " " + orderHeader.p_Person.Family,
                    description = orderHeader.Description,
                    Date = orderHeader.Date,
                    orderHeader.InvoiceNO,
                    dp,
                    isdone = true
                });
            }
            catch (Exception ex)
            {
                return Json(new { msg = ex.Message, isdone = false });
            }
        }

        public ActionResult DeleteCheque(int accDetailId, bool isRecieved)
        {

            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditPayment"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }

                var accDetail = db.ac_AccountDetail.Single(a => a.AccountDetailId == accDetailId);
                int employeeId = accDetail.ac_Cheque.FirstOrDefault().ac_AccountDetail.ac_OrderHeader.EmployeeId;
                List<int> listid = db.GetParentEmployeeByID(employeeId, "").Select(pr => pr.AccountId).ToList();
                listid.Add(employeeId);
                if (!listid.Contains(db.p_Person.Single(cus => cus.Code == User.Identity.Name && cus.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId))
                    return Json(new { isDone = false, msg = "notInRole" });

                if (isRecieved)
                {
                    if (accDetail.ac_Cheque.FirstOrDefault().Status == 1)
                    {
                        db.ac_Cheque.DeleteObject(accDetail.ac_Cheque.FirstOrDefault());

                        //foreach (var item in accDetail.ac_OrderHeader.ac_AccountDetail.ToList())
                        //{
                        //    if (item.AccountDetailId != accDetail.AccountDetailId)
                        //        db.ac_AccountDetail.DeleteObject(item);
                        //}
                        db.ac_AccountDetail.DeleteObject(accDetail);
                        db.SaveChanges();
                        return Json(new { isdone = true, msg = "oK" });
                    }
                    else
                        return Json(new { isdone = false, msg = "not allow" });
                }
                else
                {
                    if (accDetail.ac_Cheque.FirstOrDefault().Status == 6 && !accDetail.ac_Cheque.FirstOrDefault().Passed)
                    {
                        db.ac_Cheque.DeleteObject(accDetail.ac_Cheque.FirstOrDefault());

                        //foreach (var item in accDetail.ac_OrderHeader.ac_AccountDetail.ToList())
                        //{
                        //    if (item.AccountDetailId != accDetail.AccountDetailId)
                        //        db.ac_AccountDetail.DeleteObject(item);
                        //}
                        db.ac_AccountDetail.DeleteObject(accDetail);
                        db.SaveChanges();
                        return Json(new { isdone = true, msg = "oK" });
                    }
                    else
                        return Json(new { isdone = false, msg = "not allow" });
                }


            }
            catch (Exception e) { return Json(new { isDone = false, msg = e.InnerException.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }




        public ActionResult EditCheque(int id, string date, string serial)
        {

            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditPayment"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
                var detail = db.ac_Cheque.Single(o => o.AccountDetailId == id);
                //if (detail.Passed )
                //    return Json( new { isDone = false, msg = "پاس شده است، امکان ویرایش وجود ندارد" + "." });
                int employeeId = detail.ac_AccountDetail.ac_OrderHeader.EmployeeId;
                List<int> listid = db.GetParentEmployeeByID(employeeId, "").Select(pr => pr.AccountId).ToList();
                listid.Add(employeeId);
                if (!listid.Contains(db.p_Person.Single(cus => cus.Code == User.Identity.Name && cus.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId))
                    return Json(new { isDone = false, msg = "notInRole" });
                detail.Serial = serial;
                detail.DueDate = utility.GetDateTimeCulture(date);
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception e) { return Json(new { isDone = false, msg = e.InnerException.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult DeleteCash(int id)
        {

            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditPayment"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
                var detail = db.ac_Cash.Single(o => o.AccountDetailId == id);
                var accDetail = detail.ac_AccountDetail;
                //var orderHeader = db.ac_AccountDetail.First(a => a.AccountDetailId == id).ac_OrderHeader;
                //var accDetailCuSupp = db.ac_AccountDetail.Single(a => a.AccountId == orderHeader.ClientId && a.OrderHeaderId == orderHeader.OrderHeaderId);
                //if (detail.ac_OrderHeader.ConfirmerId != null)
                //    return Json( new { isDone = false, msg = "تایید شده است، امکان حذف وجود ندارد" + "." });
                int employeeId = detail.ac_AccountDetail.ac_OrderHeader.EmployeeId;
                List<int> listid = db.GetParentEmployeeByID(employeeId, "").Select(pr => pr.AccountId).ToList();
                listid.Add(employeeId);
                if (!listid.Contains(db.p_Person.Single(cus => cus.Code == User.Identity.Name && cus.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId))
                    return Json(new { isDone = false, msg = "notInRole" });

                //delete cash
                db.ac_Cash.DeleteObject(detail);
                db.ac_AccountDetail.DeleteObject(accDetail);
                //foreach (var item in accDetail)
                //{
                //    db.ac_AccountDetail.DeleteObject(item);
                //}

                //delete moshtari/foroshande 
                //db.ac_AccountDetail.DeleteObject(accDetailCuSupp);

                //int accdetails = db.ac_AccountDetail.Where(a => a.OrderHeaderId == orderHeader.OrderHeaderId).Count();
                //if (accdetails == 0)
                //    db.ac_OrderHeader.DeleteObject(orderHeader);

                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception e) { return Json(new { isDone = false, msg = e.InnerException.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult ChequePassed(int id, int counterId)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditPayment"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }
            try
            {
                //if (!User.IsInRole("canPassCheque"))
                //{
                //    return Json( new { isdone = false, msg = "شما مجاز به انجام این کار نیستید" });
                //}
                var detail = db.ac_Cheque.Single(o => o.AccountDetailId == id);
                int employeeId = detail.ac_AccountDetail.ac_OrderHeader.EmployeeId;
                List<int> listid = db.GetParentEmployeeByID(employeeId, "").Select(pr => pr.AccountId).ToList();
                listid.Add(employeeId);
                if (!listid.Contains(db.p_Person.Single(cus => cus.Code == User.Identity.Name && cus.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId))
                    return Json(new { isdone = false, msg = "notInRole" });

                if (detail.Status == 4)
                    return Json(new { isDone = false, msg = "not allow" });
                ac_OrderHeader acc = new ac_OrderHeader();
                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;
                acc.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                acc.InvoiceNO = getInvoiceNumber(db, "transfer", false, false);
                acc.Description = detail.ac_AccountDetail.ac_OrderHeader.Description;
                acc.EmployeeId = employeeId;
                acc.Date = DateTime.Now;
                acc.ShopId = detail.ac_AccountDetail.ac_OrderHeader.ShopId;
                acc.CurrencyRateId = db.ac_CurrencyRate.Where(c => c.Buy == 1).FirstOrDefault().CurrencyRateId;
                acc.IsMoney = true;
                acc.ConfirmerId = employeeId;
                acc.Table = "payment";
                acc.Amount = detail.ac_AccountDetail.Amount.Value;

                ac_Cheque ch = new ac_Cheque();
                ch.CurrencyRateId = detail.CurrencyRateId;
                ch.Bank = detail.Bank;
                ch.Serial = detail.Serial;
                ch.DueDate = detail.DueDate;
                ch.IssuerId = detail.IssuerId;


                ac_AccountDetail accDetailRecieved = new ac_AccountDetail();
                accDetailRecieved.Amount = detail.ac_AccountDetail.Amount;
                accDetailRecieved.AccountId = detail.ac_AccountDetail.AccountId;
                accDetailRecieved.IsDept = false;
                accDetailRecieved.Description = detail.ac_AccountDetail.Description;
                ac_AccountDetail accDetailBank = new ac_AccountDetail();
                accDetailBank.Amount = detail.ac_AccountDetail.Amount;
                accDetailBank.AccountId = counterId;
                accDetailBank.IsDept = true;
                accDetailBank.Description = detail.ac_AccountDetail.Description;
                accDetailBank.ac_Cheque.Add(ch);
                acc.ac_AccountDetail.Add(accDetailBank);
                acc.ac_AccountDetail.Add(accDetailRecieved);

                //taghier status be status "vosoli"
                accDetailBank.ac_Cheque.FirstOrDefault().Status = 3;
                ch.Passed = true;
                detail.ac_AccountDetail.ac_Cheque = null;
                db.ac_OrderHeader.AddObject(acc);
                db.SaveChanges();
                return Json(new { isdone = true });
            }
            catch (Exception e) { return Json(new { isdone = false, msg = e.InnerException.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult EditPaymentFullAcount(int orderHeaderId, string date)
        {


            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }


                if (!utility.isInRole(db, User.Identity.Name, appName, "canConfirmSalary"))
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }
                var currentUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName);

                var orderHeader = db.ac_OrderHeader.SingleOrDefault(o => o.OrderHeaderId == orderHeaderId);
                List<int> lst = db.GetParentEmployeeByID(orderHeader.EmployeeId, "").Select(p => p.AccountId).ToList<int>();
                if (lst.Contains(currentUser.AccountId))
                {
                    //orderHeader.Amount = amount;
                    orderHeader.Date = utility.GetDateTimeCulture(date);
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "oK" });
                }
                else
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }

            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.Message });
            }
        }

        #endregion
        //payment end

        //Order begin
        #region

        public class AccountDetail
        {
            public decimal? BuyQuantity { get; set; }
            public decimal? SellQuantity { get; set; }
            public decimal? BuyAmount { get; set; }
            public decimal? SellAmount { get; set; }
            public decimal? PaidCash { get; set; }
            public decimal? ReceivedCash { get; set; }
            public decimal? PaidCheque { get; set; }
            public decimal? ReceivedCheque { get; set; }
            public decimal? paidVoucher { get; set; }
            public decimal? ReceivedVoucher { get; set; }
            public decimal? VoucherPower { get; set; }
            public decimal? ReceivedChequePassed { get; set; }
            public decimal? PaidChequePassed { get; set; }
            public decimal? OffSale { get; set; }
            public decimal? OffBuy { get; set; }
            public decimal? profit { get; set; }
        }
        public ActionResult GetAccountDetailsShop(int? shopid, string Scoup, int? clientid, string employeeid, string dateFrom, string dateTo, bool? isSale, string clientCode)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                AccountDetail ad = new AccountDetail();

                List<ObjectParameter> ol = new List<ObjectParameter>();
                string dynStr = string.Empty;
                string dynStrAccount = string.Empty;
                string dynStrDetail = string.Empty;
                dynStr += "it.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName1  ";
                ol.Add(new ObjectParameter("appName1", appName));
                dynStrAccount += "it.ac_OrderHeader.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName2  ";
                ol.Add(new ObjectParameter("appName2", appName));
                dynStrDetail += "it.ac_OrderHeader.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName3  ";
                ol.Add(new ObjectParameter("appName3", appName));
                if (isSale != null)
                {
                    if (dynStr.Length > 0)
                    {
                        dynStr += " AND ";
                        dynStrAccount += " AND ";
                        dynStrDetail += " AND ";
                    }
                    if (isSale.Value)
                    {
                        dynStr += "it.ClientId = it.p_Person1.p_Customer.accountId ";
                        dynStrAccount += "it.ac_OrderHeader.ClientId = it.ac_OrderHeader.p_Person1.p_Customer.accountId ";
                        dynStrDetail += "it.ac_OrderHeader.ClientId = it.ac_OrderHeader.p_Person1.p_Customer.accountId ";
                    }
                    else if (!isSale.Value)
                    {
                        dynStr += "it.ClientId = it.p_person1.p_Supplier.accountId ";
                        dynStrAccount += "it.ac_OrderHeader.ClientId = it.ac_OrderHeader.p_person1.p_Supplier.accountId ";
                        dynStrDetail += "it.ac_OrderHeader.ClientId = it.ac_OrderHeader.p_person1.p_Supplier.accountId ";
                    }
                }


                if (Scoup.Length > 0)
                {
                    DateTime dt = DateTime.Now;
                    if (dynStr.Length > 0)
                        if (dynStr.Length > 0)
                        {
                            dynStr += " AND ";
                            dynStrAccount += " AND ";
                            dynStrDetail += " AND ";
                        }
                    dynStr += " it.Date   >=   @dateFrom and it.Date<=@dateTo";
                    dynStrAccount += "it.ac_OrderHeader.Date >= @dateFrom and it.ac_OrderHeader.Date <= @dateTo";
                    dynStrDetail += "it.ac_OrderHeader.Date >= @dateFrom and it.ac_OrderHeader.Date <= @dateTo";

                    if (Scoup == "day")
                        dt = DateTime.Now.Date;
                    else if (Scoup == "week")
                        dt = dt.AddDays(-7);
                    else if (Scoup == "month")
                        dt = dt.AddMonths(-1);
                    else if (Scoup == "year")
                        dt = DateTime.Now.Date.AddYears(-1);

                    ol.Add(new ObjectParameter("dateFrom", dt));
                    ol.Add(new ObjectParameter("dateTo", DateTime.Now));
                }



                if (dateFrom.Length > 0)
                {

                    if (dynStr.Length > 0)
                        if (dynStr.Length > 0)
                        {
                            dynStr += " AND ";
                            dynStrAccount += " AND ";
                            dynStrDetail += " AND ";
                        }
                    dynStr += " it.Date   >=   @dateFrom";
                    dynStrAccount += "it.ac_OrderHeader.Date >= @dateFrom";
                    dynStrDetail += "it.ac_OrderHeader.Date >= @dateFrom";
                    ol.Add(new ObjectParameter("dateFrom", utility.GetDateCulture(dateFrom)));
                }

                if (dateTo.Length > 0)
                {
                    if (dynStr.Length > 0)
                        if (dynStr.Length > 0)
                        {
                            dynStr += " AND ";
                            dynStrAccount += " AND ";
                            dynStrDetail += " AND ";
                        }
                    dynStr += " it.Date   <=   @dateTo";
                    dynStrAccount += "it.ac_OrderHeader.Date <= @dateTo";
                    dynStrDetail += "it.ac_OrderHeader.Date <= @dateTo";
                    ol.Add(new ObjectParameter("dateTo", utility.GetDateCulture(dateTo)));
                }

                if (dateTo.Length < 1 && dateFrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        if (dynStr.Length > 0)
                        {
                            dynStr += " AND ";
                            dynStrAccount += " AND ";
                            dynStrDetail += " AND ";
                        }
                    dynStr += " it.Date   <=   @dateTo";
                    dynStrAccount += "it.ac_OrderHeader.Date <= @dateTo";
                    dynStrDetail += "it.ac_OrderHeader.Date <= @dateTo";
                    ol.Add(new ObjectParameter("dateTo", DateTime.Now));
                }

                if (clientid != null)
                {
                    if (dynStr.Length > 0)
                    {
                        dynStr += " AND ";
                        dynStrAccount += " AND ";
                        dynStrDetail += " AND ";
                    }
                    dynStr += "it.ClientId = @clientid ";
                    dynStrAccount += "it.ac_OrderHeader.ClientId = @clientid";
                    dynStrDetail += "it.ac_OrderHeader.ClientId = @clientid";
                    ol.Add(new ObjectParameter("clientid", clientid));
                }
                if (clientCode.Length > 0)
                {
                    if (dynStr.Length > 0)
                    {
                        dynStr += " AND ";
                        dynStrAccount += " AND ";
                        dynStrDetail += " AND ";
                    }
                    dynStr += "it.p_Person1.Code = @clientCode ";
                    dynStrAccount += "it.ac_OrderHeader.p_Person1.Code = @clientCode";
                    dynStrDetail += "it.ac_OrderHeader.p_Person1.Code = @clientCode";
                    ol.Add(new ObjectParameter("clientCode", clientCode));
                }
                if (employeeid.Length > 0)
                {
                    if (dynStr.Length > 0)
                    {
                        dynStr += " AND ";
                        dynStrAccount += " AND ";
                        dynStrDetail += " AND ";
                    }
                    dynStr += "it.p_Person.Code = @employeeid ";
                    dynStrAccount += "it.ac_OrderHeader.p_Person.Code = @employeeid";
                    dynStrDetail += "it.ac_OrderHeader.p_Person.Code = @employeeid";
                    ol.Add(new ObjectParameter("employeeid", employeeid));
                }
                if (shopid != null)
                {
                    if (dynStr.Length > 0)
                    {
                        dynStr += " AND ";
                        dynStrAccount += " AND ";
                        dynStrDetail += " AND ";
                    }
                    string counterid = "{";
                    foreach (var item in db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).p_Employee.ac_Counter.Where(c => c.ShopId == shopid).Select(s => s.AccountId))
                    {
                        counterid += item.ToString() + ",";
                    }
                    counterid = counterid.Remove(counterid.Length - 1, 1);
                    counterid += "}";
                    dynStr += "it.ShopId = @ShopId ";
                    dynStrAccount += "it.ac_OrderHeader.CounterID in " + counterid;
                    dynStrDetail += "it.ac_OrderHeader.ShopId = @ShopId";
                    ol.Add(new ObjectParameter("ShopId", shopid));
                }
                else
                {
                    if (utility.isInRole(db, User.Identity.Name, appName, "canSeeAllAccount") && shopid == null)
                    {

                    }
                    else
                    {
                        if (dynStr.Length > 0)
                        {
                            dynStr += " AND ";
                            dynStrAccount += " AND ";
                            dynStrDetail += " AND ";
                        }
                        string cid = "{";
                        foreach (var item in db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).p_Employee.ac_Counter.Select(s => s.AccountId))
                        {
                            cid += item.ToString() + ",";
                        }
                        cid = cid.Remove(cid.Length - 1, 1);
                        cid += "}";

                        string sid = "{";
                        foreach (var item in db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).p_Employee.inv_Shop.Select(s => s.ShopId))
                        {
                            sid += item.ToString() + ",";
                        }
                        sid = sid.Remove(sid.Length - 1, 1);
                        sid += "}";

                        dynStr += "it.ShopId in " + sid;
                        dynStrAccount += "it.ac_OrderHeader.CounterID in " + cid;
                        dynStrDetail += "it.ac_OrderHeader.ShopId in " + sid;
                    }
                }
                var count1 = 0;
                //db.ac_OrderHeader.Select(h=>h.ShopId);
                var orderHeaders = db.ac_OrderHeader.Where(dynStr, ol.ToArray());
                count1 = orderHeaders.Count();
                var orderHeaderSell = orderHeaders.Where(s => s.ac_AccountDetail.Any(od => od.OrderHeaderId == s.OrderHeaderId));
                ad.BuyQuantity = orderHeaders.Where(h => h.Sell).Sum(c => (decimal?)(c.ac_AccountDetail.Where(w => w.ac_OrderDetail.Broken != true).Sum(d => d.ac_OrderDetail.Quantity)));
                if (ad.BuyQuantity == null) ad.BuyQuantity = 0;
                ad.SellQuantity = orderHeaders.Where(h => !h.Sell).Sum(c => (decimal?)(c.ac_AccountDetail.Where(w => w.ac_OrderDetail.Broken != true).Sum(d => d.ac_OrderDetail.Quantity)));
                if (ad.SellQuantity == null) ad.SellQuantity = 0;
                int count = orderHeaders.Where(h => h.Sell).Count();
                ad.BuyAmount = orderHeaderSell.Where(h => h.Sell).Sum(c => (decimal?)c.Amount * c.ac_CurrencyRate.Sell);
                if (ad.BuyAmount == null) ad.BuyAmount = 0;
                ad.SellAmount = orderHeaderSell.Where(h => !h.Sell).Sum(c => (decimal?)c.Amount * c.ac_CurrencyRate.Sell);
                if (ad.SellAmount == null) ad.SellAmount = 0;
                ad.PaidCash = db.ac_Cash.Where(dynStrAccount, ol.ToArray()).Where(c => c.ac_AccountDetail.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.ac_AccountDetail.Amount * c.ac_CurrencyRate.Sell));
                if (ad.PaidCash == null) ad.PaidCash = 0;
                ad.ReceivedCash = db.ac_Cash.Where(dynStrAccount, ol.ToArray()).Where(c => !c.ac_AccountDetail.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.ac_AccountDetail.Amount * c.ac_CurrencyRate.Sell));
                if (ad.ReceivedCash == null) ad.ReceivedCash = 0;
                ad.PaidCheque = db.ac_Cheque.Where(dynStrAccount, ol.ToArray()).Where(c => c.ac_AccountDetail.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.ac_AccountDetail.Amount * c.ac_CurrencyRate.Sell));
                if (ad.PaidCheque == null) ad.PaidCheque = 0;
                ad.ReceivedCheque = db.ac_Cheque.Where(dynStrAccount, ol.ToArray()).Where(c => !c.ac_AccountDetail.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.ac_AccountDetail.Amount * c.ac_CurrencyRate.Sell));
                if (ad.ReceivedCheque == null) ad.ReceivedCheque = 0;
                //ad.paidVoucher = db.ac_Voucher.Where(dynStrAccount, ol.ToArray()).Where(c => c.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.ac_AccountDetail.Amount * c.ac_CurrencyRate.Sell));
                if (ad.paidVoucher == null) ad.paidVoucher = 0;
                //ad.ReceivedVoucher = db.ac_Voucher.Where(dynStrAccount, ol.ToArray()).Where(c => !c.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.ac_AccountDetail.Amount * c.ac_CurrencyRate.Sell));
                if (ad.ReceivedVoucher == null) ad.ReceivedVoucher = 0;
                //ad.VoucherPower = db.ac_Voucher.Where(dynStrAccount, ol.ToArray()).Where(c => c.ExpieryDate < DateTime.Now).Sum(c => (decimal?)(c.ac_AccountDetail.Amount * c.ac_CurrencyRate.Sell));
                if (ad.VoucherPower == null) ad.VoucherPower = 0;
                ad.ReceivedChequePassed = db.ac_Cheque.Where(dynStrAccount, ol.ToArray()).Where(c => c.Passed && !c.ac_AccountDetail.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.ac_AccountDetail.Amount * c.ac_CurrencyRate.Sell));
                if (ad.ReceivedChequePassed == null) ad.ReceivedChequePassed = 0;
                ad.PaidChequePassed = db.ac_Cheque.Where(dynStrAccount, ol.ToArray()).Where(c => c.Passed && c.ac_AccountDetail.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.ac_AccountDetail.Amount * c.ac_CurrencyRate.Sell));
                if (ad.PaidChequePassed == null) ad.PaidChequePassed = 0;
                ad.OffSale = db.ac_OrderDetail.Where(dynStrDetail, ol.ToArray()).Where(o => o.ac_AccountDetail.ac_OrderHeader.Sell).Sum(c => (decimal?)c.ac_AccountDetail.Amount * c.ac_AccountDetail.ac_OrderHeader.ac_CurrencyRate.Sell);
                if (ad.OffSale == null) ad.OffSale = 0;
                ad.OffBuy = db.ac_OrderDetail.Where(dynStrDetail, ol.ToArray()).Where(o => !o.ac_AccountDetail.ac_OrderHeader.Sell).Sum(c => (decimal?)c.ac_AccountDetail.Amount * c.ac_AccountDetail.ac_OrderHeader.ac_CurrencyRate.Sell);
                if (ad.OffBuy == null) ad.OffBuy = 0;

                return Json(ad);
            }
            catch (Exception e)
            {
                return null;
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public class OrderWholeSaleDetail
        {
            public int barcodeid { get; set; }
            public decimal quantity { get; set; }
            public decimal price { get; set; }
            public string description { get; set; }
            public string serial { get; set; }
            public bool broken { get; set; }
            public List<ItemDetail> itemDetails { get; set; }
        }

        public class OrderDetail
        {
            public int barcodeid { get; set; }
            public int? colorid { get; set; }
            public int? sizeid { get; set; }
            public decimal quantity { get; set; }
            public decimal price { get; set; }
            public string description { get; set; }
            public string serial { get; set; }
            public bool broken { get; set; }
            public int status { get; set; }
        }
        public class OrderHeader
        {
            public int shopid { get; set; }
            public int currenyid { get; set; }
            public decimal totalamount { get; set; }
            public string description { get; set; }
            public string invoicenumber { get; set; }
            public int customerid { get; set; }
            public decimal? PaymentAmount { get; set; }
            public bool issell { get; set; }
            public bool ispreorder { get; set; }
            public bool setPayment { get; set; }
            public string clientCode { get; set; }
            public string date { get; set; }
        }
        public class ItemDetail
        {
            public int? colorid { get; set; }
            public int? sizeid { get; set; }
            public decimal quantity { get; set; }
        }

        public class ReturnItem
        {
            public int orderDetailId { get; set; }
            public bool isBroken { get; set; }
            public decimal quantity { get; set; }
        }


        public ActionResult ReturnOrder(List<ReturnItem> returnItems, int? shopId, int? counterId, string date)
        {
            try
            {
                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);

                if (!roles.Contains("canMakeReturn"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
                int employeeId;
                int orderdetailid = returnItems.FirstOrDefault().orderDetailId;
                ac_OrderHeader oldORderHeader = db.ac_OrderHeader.SingleOrDefault(s => s.OrderHeaderId == db.ac_OrderDetail.FirstOrDefault(o => o.AccountDetailId == orderdetailid).ac_AccountDetail.OrderHeaderId);
                var currentUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName);
                var lst = db.GetParentEmployeeByID(oldORderHeader.EmployeeId, "").Select(p => p.AccountId);
                var CuAcc = db.p_Customer.SingleOrDefault(c => c.AccountId == oldORderHeader.p_Person.AccountId);
                var SupAcc = db.p_Supplier.SingleOrDefault(c => c.AccountId == oldORderHeader.p_Person.AccountId);
                if (!lst.Contains(currentUser.AccountId))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
                ac_OrderHeader orderHeader = new ac_OrderHeader();
                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;
                orderHeader.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                orderHeader.CurrencyRateId = oldORderHeader.CurrencyRateId;
                orderHeader.ClientId = oldORderHeader.ClientId;

                orderHeader.Date = utility.GetDateTimeCulture(date);
                employeeId = currentUser.AccountId;
                orderHeader.EmployeeId = employeeId;
                orderHeader.InvoiceNO = getInvoiceNumber(db, "", !oldORderHeader.Sell, false);
                orderHeader.ShopId = shopId;
                orderHeader.CounterId = counterId;
                orderHeader.ConfirmerId = employeeId;
                orderHeader.Sell = !oldORderHeader.Sell;
                orderHeader.Table = "order";
                orderHeader.ConfirmerId = currentUser.AccountId;
                orderHeader.IsMoney = false;
                orderHeader.Description = getInvoicDescription(false, false, false, (CuAcc != null ? true : false), !oldORderHeader.Sell, false);

                decimal? sum = 0;

                //db.ac_OrderHeader.AddObject(orderHeader);
                //db.SaveChanges();


                // agar moshtari bashad va factor forosh
                if (SupAcc != null)
                {
                    decimal amount = 0;
                    //mojodi kala -> bedehkar
                    foreach (var item in returnItems)
                    {
                        var ItemDetail = db.ac_OrderDetail.Single(o => o.AccountDetailId == item.orderDetailId).ac_AccountDetail.ac_Account.inv_ItemDetail;

                        ac_OrderDetail orderDetail = new ac_OrderDetail();
                        ac_AccountDetail accountDetail = new ac_AccountDetail();
                        ac_OrderDetail oldOrderDetail = db.ac_OrderDetail.Single(o => o.AccountDetailId == item.orderDetailId);
                        orderDetail.Broken = item.isBroken;
                        accountDetail.Description = oldOrderDetail.ac_AccountDetail.Description;
                        //orderDetail.ac_AccountDetail.AccountId = oldOrderDetail.ac_AccountDetail.AccountId;
                        accountDetail.AccountId = ItemDetail.ac_Account.AccountId;
                        accountDetail.Amount = ((oldOrderDetail.ac_AccountDetail.Amount.Value / oldOrderDetail.Quantity) * item.quantity);
                        orderDetail.Quantity = item.quantity;
                        orderDetail.Serial = oldOrderDetail.Serial;
                        accountDetail.ac_OrderDetail = orderDetail;
                        accountDetail.Description = "returnOrder";
                        accountDetail.IsDept = oldORderHeader.Sell ? true : false;
                        accountDetail.AccountId = ItemDetail.AccountId;
                        amount = amount + ((oldOrderDetail.ac_AccountDetail.Amount.Value / oldOrderDetail.Quantity) * item.quantity);
                        orderHeader.ac_AccountDetail.Add(accountDetail);

                    }


                    // agar tafavot Amount az orderHeader ke ghablan baraie forosh sabt shodeh ast az majome hazine koli kalaha kochektar bashad 
                    // takhfid dashte ast
                    //decimal totalAmoun = CalculateAmountWithOtherAcc(oldORderHeader);

                    //decimal saleReturnDiscountIncome = Math.Abs((totalAmoun - oldORderHeader.Amount));
                    //decimal AmountRejectDrug = 0;
                    //if (saleReturnDiscountIncome > 0)
                    //{
                    //    AmountRejectDrug = (amount / totalAmoun) * saleReturnDiscountIncome;
                    //    AddOtherAccount("ReturnedShopping", ref orderHeader, 0, 0, 0, Math.Abs(AmountRejectDrug), 0, 0, 0, 0, 0);
                    //}


                    //moshtari -> bestankar
                    orderHeader.ConfirmerId = currentUser.AccountId;
                    ac_AccountDetail accountDetailCu = new ac_AccountDetail();
                    accountDetailCu.AccountId = SupAcc.p_Person.AccountId;

                    accountDetailCu.IsDept = oldORderHeader.Sell ? false : true;
                    accountDetailCu.Description = "returnOrder";



                    orderHeader.ac_AccountDetail.Add(accountDetailCu);
                    db.ac_OrderHeader.AddObject(orderHeader);
                    orderHeader.Table = "order";

                    decimal AmountRejectDrug = CalculateAmountWithOtherAcc(oldORderHeader, orderHeader, amount, CuAcc == null ? false : true);
                    orderHeader.Amount = amount + AmountRejectDrug;
                    accountDetailCu.Amount = amount + AmountRejectDrug;

                    // vase karbarayi hast ke nesiye nemitoonan befrooshan , dar natije vaghti yechiro marjoo mikonan poolesham bayad hamoon moghe pas bedan
                    //masalan agar 100000 toman to ye factore kharid mikoni va poolesham dadi , age 20000 tomaneshoo marjoo mikoni
                    //ye factore sefareshe marjooyi zade mishe va ye factore pardakht be moshtariyeh 20000 tomani
                    if (!roles.Contains("canGiveCredit"))
                    {
                        //baraie pardakht be moshtari dar sorati ke natavanim nasie bedahim
                        ac_OrderHeader ac = new ac_OrderHeader();
                        ac.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                        ac.Description = getInvoicDescription(true, false, true, false, oldORderHeader.Sell, false);
                        ac.ClientId = oldORderHeader.ClientId.Value;
                        ac.EmployeeId = employeeId;
                        ac.Sell = oldORderHeader.Sell;
                        ac.CounterId = counterId;
                        ac.ShopId = shopId;
                        ac.IsMoney = true;
                        ac.Date = DateTime.Now;
                        ac.ConfirmerId = currentUser.AccountId;
                        ac_Cash cash = new ac_Cash();
                        ac_AccountDetail accountDetailc = new ac_AccountDetail();
                        accountDetailc.Amount = amount - AmountRejectDrug;
                        accountDetailc.IsDept = oldORderHeader.Sell ? true : false;
                        cash.CurrencyRateId = oldORderHeader.CurrencyRateId;
                        accountDetailc.ac_Cash = cash;
                        accountDetailc.AccountId = SupAcc.p_Person.AccountId;
                        accountDetailc.Description = "returnOrder";
                        ac.ac_AccountDetail.Add(accountDetailc);
                        ac.Table = "payment";
                        db.ac_OrderHeader.AddObject(ac);
                    }
                    db.SaveChanges();
                    return Json(new { isDone = true, msg = "oK" });
                }
                else
                {
                    //agar foroshande bashad va factor kharid
                    if (CuAcc != null)
                    {
                        decimal amount = 0;

                        foreach (var item in returnItems)
                        {
                            var ItemDetail = db.ac_OrderDetail.Single(o => o.AccountDetailId == item.orderDetailId).ac_AccountDetail.ac_Account.inv_ItemDetail;

                            // mojodi kala -> bestankar
                            ac_OrderDetail orderDetail = new ac_OrderDetail();
                            ac_AccountDetail accountDetail = new ac_AccountDetail();
                            ac_OrderDetail oldOrderDetail = db.ac_OrderDetail.Single(o => o.AccountDetailId == item.orderDetailId);
                            orderDetail.Broken = item.isBroken;
                            accountDetail.Description = oldOrderDetail.ac_AccountDetail.Description;
                            //orderDetail.ac_AccountDetail.AccountId = oldOrderDetail.ac_AccountDetail.AccountId;
                            accountDetail.Amount = ((ItemDetail.BuyPrice / oldOrderDetail.Quantity) * item.quantity);
                            orderDetail.Quantity = item.quantity;
                            accountDetail.AccountId = ItemDetail.ac_Account.AccountId;
                            orderDetail.Serial = oldOrderDetail.Serial;
                            orderDetail.ac_AccountDetail = accountDetail;
                            accountDetail.IsDept = !oldORderHeader.Sell ? false : true;
                            accountDetail.Description = "returnOrder";
                            amount = amount + ((oldOrderDetail.ac_AccountDetail1.Amount.Value / oldOrderDetail.Quantity) * item.quantity);
                            orderHeader.ac_AccountDetail.Add(accountDetail);

                            sum += item.quantity;

                            if (ItemDetail.AccountId != null)
                            {
                                var accSell_TotalAmount = db.ac_Account.Where(a => a.RelatedAccountId == ItemDetail.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemSale");
                                //forosh -> bestankar
                                ac_AccountDetail accDetailS = new ac_AccountDetail();
                                accDetailS.Amount = ((oldOrderDetail.ac_AccountDetail1.Amount.Value / oldOrderDetail.Quantity) * item.quantity); ;
                                //avalin record marbot be forosh ast
                                accDetailS.AccountId = accSell_TotalAmount.First().AccountId;
                                accDetailS.IsDept = !oldORderHeader.Sell ? false : true;
                                accDetailS.Description = "returnOrder";
                                orderDetail.ac_AccountDetail1 = accDetailS;
                                orderHeader.ac_AccountDetail.Add(accDetailS);

                                //gheimate tamam shode kala ->bedehkar
                                var accPrice_TotalAmount = db.ac_Account.Where(a => a.RelatedAccountId == ItemDetail.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemPrice");
                                ac_AccountDetail accDetailTA = new ac_AccountDetail();
                                accDetailTA.Amount = ((ItemDetail.BuyPrice / oldOrderDetail.Quantity) * item.quantity); ;

                                //dowomin record marbot be gheimate tamam shode ast
                                accDetailTA.AccountId = accPrice_TotalAmount.First().AccountId;
                                accDetailTA.IsDept = !oldORderHeader.Sell ? true : false;
                                accDetailTA.Description = "returnOrder";
                                orderDetail.ac_AccountDetail2 = accDetailTA;
                                orderHeader.ac_AccountDetail.Add(accDetailTA);
                            }

                        }



                        // agar tafavot Amount az orderHeader ke ghablan baraie kharid sabt shodeh ast az majome hazine koli kalaha kochektar bashad 
                        // takhfid dashte ast

                        //decimal totalAmoun = CalculateAmountWithOtherAcc(oldORderHeader);
                        //decimal discountExpense = (totalAmoun - oldORderHeader.Amount);
                        //decimal AmountRejectDrug = 0;
                        //if (discountExpense != 0)
                        //{
                        //    AmountRejectDrug = (amount / totalAmoun) * discountExpense;
                        //    AddOtherAccount("ReturnedSelling", ref orderHeader, 0, Math.Abs(AmountRejectDrug), 0, 0, 0, 0, 0, 0, 0);
                        //}


                        //foroshande -> bedehkar
                        orderHeader.ConfirmerId = currentUser.AccountId;
                        ac_AccountDetail accountDetailS = new ac_AccountDetail();

                        accountDetailS.IsDept = !oldORderHeader.Sell ? true : false;
                        accountDetailS.AccountId = CuAcc.p_Person.AccountId;
                        accountDetailS.Description = "returnOrder";
                        orderHeader.ac_AccountDetail.Add(accountDetailS);
                        db.ac_OrderHeader.AddObject(orderHeader);
                        orderHeader.Table = "order";
                        decimal AmountRejectDrug = CalculateAmountWithOtherAcc(oldORderHeader, orderHeader, amount, CuAcc == null ? false : true);
                        orderHeader.Amount = Math.Abs(amount) + AmountRejectDrug;
                        accountDetailS.Amount = Math.Abs(amount) + AmountRejectDrug;
                        if (!roles.Contains("canGiveCredit"))
                        {
                            //baraie pardakht be moshtari dar sorati ke natavanim nasie bedahim
                            ac_OrderHeader ac = new ac_OrderHeader();
                            ac.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                            ac.ClientId = oldORderHeader.ClientId.Value;
                            ac.EmployeeId = employeeId;
                            ac.Sell = oldORderHeader.Sell;
                            ac.CounterId = counterId;
                            ac.ShopId = shopId;
                            ac.IsMoney = true;
                            ac.Date = DateTime.Now;
                            ac.ConfirmerId = currentUser.AccountId;
                            ac.Description = getInvoicDescription(true, false, true, false, oldORderHeader.Sell, false);
                            ac_Cash cash = new ac_Cash();
                            ac_AccountDetail accountDetail = new ac_AccountDetail();
                            accountDetail.Amount = amount - AmountRejectDrug;
                            accountDetail.AccountId = CuAcc.p_Person.AccountId;
                            cash.CurrencyRateId = oldORderHeader.CurrencyRateId;
                            accountDetail.ac_Cash = cash;
                            accountDetail.IsDept = !oldORderHeader.Sell ? false : true;
                            accountDetail.Description = "returnOrder";
                            ac.ac_AccountDetail.Add(accountDetail);
                            ac.Table = "payment";
                            db.ac_OrderHeader.AddObject(ac);
                            db.SaveChanges();
                        }

                        db.SaveChanges();
                        return Json(new { isDone = true, msg = "oK" });
                    }
                    else
                        return Json(new { isDone = false, msg = "oK" });
                }
            }
            catch (Exception e) { return Json(new { isDone = false, msg = e.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult GetProductForOrderByBarcode(int? barcode, int? shopId, bool isReturn)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }
                if (isReturn)
                {
                    return Json(getReturnProduct(new MapiDBEntities(), barcode, shopId, isReturn, appName));
                }
                else
                {
                    return Json(getOrderProduct(new MapiDBEntities(), barcode, shopId, isReturn, appName));
                }
            }
            catch (Exception ex) { return Json(null); };
        }
        public static Func<MapiDBEntities, int?, int?, bool, string, IQueryable<object>>
    getReturnProduct = CompiledQuery.Compile((MapiDBEntities db, int? barcode, int? shopId, bool isReturn, string appName)
        => db.inv_Barcode.Where(c => c.BarcodeId == barcode && (c.ApplicationId == null || c.aspnet_Applications.ApplicationName == appName))
     .Select(b => new
     {
         barcodeid = b.BarcodeId,
         name = b.Name,
         code = b.ItemCode,
         barcode = b.Barcode,
         status = b.AvailabilityId,
         price = b.inv_Price.OrderByDescending(p => p.Date).Select(s => new { basePrice = s.Regular, wholesalePrice = s.Wholesale, friendPrice = s.Freinds, onlinePrice = s.Online }).FirstOrDefault(),
         colors = b.inv_ItemDetail.Where(d => d.inv_Color.Count > 0)
       .Select(a => new
       {

           id = a.inv_Color.FirstOrDefault().ColorId,
           name = a.inv_Color.FirstOrDefault().Color,
       }).Distinct(),
         b.inv_MeasureUnit.UnitType,
         measureUnits = b.inv_BarcodeMeasureUnit.Select(m => new { id = m.Quantity, discount = m.DiscountPercentage, name = m.inv_MeasureUnit.UnitType })
     }));
        public static Func<MapiDBEntities, int?, int?, bool, string, object>
          getOrderProduct = CompiledQuery.Compile((MapiDBEntities db, int? barcode, int? shopId, bool isReturn, string appName)
              => db.inv_Barcode.Where(c => c.BarcodeId == barcode
                  &&
                  (c.ApplicationId == null || c.aspnet_Applications.ApplicationName == appName)
                  )
           .Select(b => new
           {
               barcodeid = b.BarcodeId,
               name = b.Name,
               code = b.ItemCode,
               barcode = b.Barcode,
               status = b.AvailabilityId,
               price = b.inv_Price.OrderByDescending(p => p.Date).Select(s => new { basePrice = s.Regular, wholesalePrice = s.Wholesale, friendPrice = s.Freinds, onlinePrice = s.Online }).FirstOrDefault(),
               colors = b.inv_ItemDetail.Where(d => d.inv_Color.Count > 0 && d.inv_ItemLocation.Where(q => q.ShopId == shopId).Sum(s => s.Quantity) > 0)
           .Select(a => new
           {
               id = a.inv_Color.FirstOrDefault().ColorId,
               name = a.inv_Color.FirstOrDefault().Color,
           }).Distinct(),
               b.inv_MeasureUnit.UnitType,
               measureUnits = b.inv_BarcodeMeasureUnit.Select(m => new { id = m.Quantity, discount = m.DiscountPercentage, name = m.inv_MeasureUnit.UnitType })
           }));
        public ActionResult GetProduct(string barcode)
        {

            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }
                List<ObjectParameter> ol = new List<ObjectParameter>();
                string dynStr = string.Empty;
                if (barcode.Length > 0)
                {
                    dynStr += "it.Barcode = @barcode ";
                    ol.Add(new ObjectParameter("Barcode", barcode));
                }
                int barcodeId = Convert.ToInt32(barcode);

                return Json(db.inv_Barcode.Where(p => p.BarcodeId == barcodeId && (p.aspnet_Applications.ApplicationName == appName || p.aspnet_Applications.ApplicationName == null))
                    .Select(b => new
                    {
                        barcodeid = b.BarcodeId,
                        name = b.Name,
                        code = b.ItemCode,
                        barcode = b.Barcode,
                        status = b.AvailabilityId,
                        price = b.inv_Price.OrderByDescending(p => p.Date).FirstOrDefault().Regular,
                        colors = b.inv_ItemDetail.Where(d => d.inv_Color.Count > 0)
                      .Select(a => new
                      {
                          id = a.inv_Color.FirstOrDefault().ColorId,
                          name = a.inv_Color.FirstOrDefault().Color,
                      }).Distinct(),
                        b.inv_MeasureUnit.UnitType,
                        measureUnits = b.inv_BarcodeMeasureUnit.Select(m => new { id = m.Quantity, discount = m.DiscountPercentage, name = m.inv_MeasureUnit.UnitType })
                    }));
            }
            catch (Exception ex)
            { return null; }
        }

        //public ActionResult ChangeQuantity(OrderHeader header, List<OrderDetail> itemDetails, int counterId)
        //{

        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }

        //        var roles = utility.GetUserRoles(db, User.Identity.Name, appName);

        //        if (!roles.Contains("canEditQuantity"))
        //        {
        //            return Json(new { isDone = false, msg = "notInRole" });
        //        }
        //        decimal? sum = 0;

        //        decimal sumOrder = 0;
        //        decimal sumReturn = 0;
        //        int eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName).PersonId;
        //        int curid = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == header.currenyid).CurrencyRateId;

        //        ac_OrderHeader orderheader = new ac_OrderHeader();
        //        orderheader.ShopId = header.shopid;
        //        orderheader.CurrencyRateId = curid;

        //        //if (!string.IsNullOrEmpty(header.description))
        //        orderheader.Description = "quantityCorrection " + header.description;
        //        //  if (!string.IsNullOrEmpty(header.invoicenumber))
        //        orderheader.InvoiceNO = getInvoiceNumber(db, header.invoicenumber, false, header.ispreorder);
        //        if (!header.ispreorder)
        //            orderheader.ConfirmerId = eid;
        //        orderheader.CounterId = counterId;
        //        orderheader.EmployeeId = eid;
        //        if (!string.IsNullOrEmpty(header.clientCode))
        //            header.customerid = db.p_Person.Single(p => p.Code == header.clientCode && p.aspnet_Applications.ApplicationName == appName).PersonId;
        //        orderheader.ClientId = header.customerid;
        //        orderheader.Date = utility.GetDateTimeCulture(header.date);
        //        orderheader.Sell = false;
        //        orderheader.IsMoney = false;
        //        orderheader.OrderTypeId = getOrderType(db, header.customerid, header.issell, false, false, false, false, false, false, true, false);
        //        ac_OrderHeader orderheaderReturn = new ac_OrderHeader();
        //        orderheaderReturn.ShopId = header.shopid;
        //        orderheaderReturn.CurrencyRateId = curid;
        //        // orderheaderReturn.Amount = header.totalamount;
        //        //if (!string.IsNullOrEmpty(header.description))
        //        orderheaderReturn.Description = "quantityCorrection " + header.description;
        //        //  if (!string.IsNullOrEmpty(header.invoicenumber))
        //        orderheaderReturn.InvoiceNO = getInvoiceNumber(db, header.invoicenumber, true, header.ispreorder);
        //        if (!header.ispreorder)
        //            orderheaderReturn.ConfirmerId = eid;
        //        orderheaderReturn.CounterId = counterId;
        //        orderheaderReturn.EmployeeId = eid;
        //        if (!string.IsNullOrEmpty(header.clientCode))
        //            header.customerid = db.p_Person.Single(p => p.Code == header.clientCode && p.aspnet_Applications.ApplicationName == appName).PersonId;
        //        orderheaderReturn.ClientId = header.customerid;
        //        orderheaderReturn.Date = utility.GetDateTimeCulture(header.date);
        //        orderheaderReturn.Sell = true;
        //        orderheaderReturn.IsMoney = false;
        //        orderheaderReturn.OrderTypeId = getOrderType(db, header.customerid, header.issell, false, false, false, false, false, false, true, false);
        //        foreach (var dItem in itemDetails)
        //        {
        //            ac_OrderDetail orderdetail = new ac_OrderDetail();
        //            int itemDetailId = 0;
        //            if (dItem.colorid != null && dItem.sizeid != null)
        //                itemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == dItem.sizeid).ItemDetailId;
        //            if (dItem.colorid == null && dItem.sizeid == null)
        //                itemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == null && i.SizeId == null).ItemDetailId;
        //            if (dItem.colorid != null && dItem.sizeid == null)
        //                itemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == null).ItemDetailId;
        //            if (dItem.colorid == null && dItem.sizeid != null)
        //                itemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == null && i.SizeId == dItem.sizeid).ItemDetailId;
        //            orderdetail.ItemDetailId = itemDetailId;
        //            //  orderheader.ConfirmerId = eid;
        //            var itemLocation = db.inv_ItemLocation.SingleOrDefault(l => l.ItemDetailId == itemDetailId && l.ShopId == header.shopid);
        //            decimal q = dItem.quantity;
        //            if (itemLocation != null)
        //                q = dItem.quantity - itemLocation.Quantity;
        //            orderdetail.Quantity = Math.Abs(q);
        //            orderdetail.ac_AccountDetail.Amount = dItem.price;
        //            if (!string.IsNullOrEmpty(dItem.description))
        //                orderdetail.Description = dItem.description;
        //            if (!string.IsNullOrEmpty(dItem.serial))
        //                orderdetail.Serial = dItem.serial;
        //            orderdetail.Broken = false;
        //            sum += q * dItem.price;
        //            if (q > 0)
        //            {
        //                orderheader.ac_OrderDetail.Add(orderdetail);
        //                sumOrder += q * dItem.price;
        //            }
        //            else
        //            {
        //                orderheaderReturn.ac_OrderDetail.Add(orderdetail);
        //                sumReturn += q * dItem.price;
        //            }
        //            db.inv_Barcode.Single(b => b.BarcodeId == dItem.barcodeid).AvailabilityId = dItem.status;
        //        }

        //        orderheader.Amount = Math.Abs(sumOrder);
        //        orderheaderReturn.Amount = Math.Abs(sumReturn);
        //        if (orderheader.ac_OrderDetail.Count() > 0)
        //            db.AddToac_OrderHeader(orderheader);
        //        if (orderheaderReturn.ac_OrderDetail.Count() > 0)
        //            db.AddToac_OrderHeader(orderheaderReturn);
        //        if (header.setPayment)
        //        {
        //            ac_OrderHeader ac = new ac_OrderHeader();
        //            ac.ClientId = header.customerid;
        //            ac.EmployeeId = eid;
        //            ac.Sell = sum.Value > 0 ? true : false;// !header.issell;
        //            ac.CounterId = counterId;
        //            ac.Date = utility.GetDateTimeCulture(header.date);
        //            ac.CurrencyRateId = curid;
        //            ac.InvoiceNO = getInvoiceNumber(db, "payment", sum.Value > 0 ? true : false, false);
        //            ac.OrderTypeId = getOrderType(db, header.customerid, (sum.Value > 0 ? true : false), true, false, false, false, false, false, true, false);
        //            ac.Amount = Math.Abs(sum.Value);
        //            ac.ShopId = header.shopid;
        //            ac.IsMoney = true;
        //            ac.ConfirmerId = eid;
        //            ac.Description = "quantityCorrection " + header.description;
        //            ac_Cash cash = new ac_Cash();
        //            cash.CurrencyRateId = curid;
        //            cash.Amount = Math.Abs(sum.Value);
        //            cash.Type = "نقدی";
        //            ac.ac_Cash.Add(cash);
        //            db.ac_OrderHeader.AddObject(ac);
        //        }
        //        int save = 0;

        //        if (!roles.Contains("canGiveDiscount") && sum != header.totalamount)
        //        {
        //            return Json(new { isDone = false, msg = "notInRole" });
        //        }
        //        if (!roles.Contains("canGiveCredit") && sum != header.PaymentAmount.Value)
        //        {
        //            return Json(new { isDone = false, msg = "notInRole" });
        //        }
        //        else
        //        {
        //            string alert = "";
        //            if (orderheader.ac_OrderDetail.Count > 0 || orderheaderReturn.ac_OrderDetail.Count > 0)
        //                save = db.SaveChanges();
        //            if (save > 0)
        //                if (save > 0 && header.setPayment)
        //                    alert = "." + "اطلاعات فاکتور و پرداخت با موفقیت ذخیره شد ";
        //                else if (save > 0 && !header.setPayment)
        //                    alert = "." + "اطلاعات فاکتور با موفقیت ذخیره شد";
        //            if (orderheader.ac_OrderDetail.Count() > 0)
        //            {
        //                return Json(new
        //                {
        //                    alert = alert,
        //                    orderheader.InvoiceNO,
        //                    orderheader.Sell,
        //                    PreOrder = orderheader.ConfirmerId != null ? false : true,
        //                    ShopName = orderheader.inv_Shop.Name,
        //                    orderheader.p_Person.Gender,
        //                    orderheader.p_Person.Family,
        //                    ClientGender = orderheader.p_Person1.Gender,
        //                    ClientFamily = orderheader.p_Person1.Family,
        //                    Date = utility.GetstrDateCulture(orderheader.Date),
        //                    Time = orderheader.Date.ToString("HH:mm"),
        //                    orderheader.Amount,
        //                    orderheader.ac_CurrencyRate.ac_Currency.Currency,
        //                    detail = orderheader.ac_OrderDetail.GroupBy(d => new { d.inv_ItemDetail.BarcodeId, d.inv_ItemDetail.inv_Barcode.Name }).Select(o => new { o.Key.Name, Price = o.Sum(s => s.Price), Quantity = o.Sum(s => s.Quantity) })
        //                });
        //            }
        //            else
        //            {
        //                return Json(new
        //                {
        //                    alert = alert,
        //                    orderheaderReturn.InvoiceNO,
        //                    orderheaderReturn.Sell,
        //                    PreOrder = orderheaderReturn.ConfirmerId != null ? false : true,
        //                    ShopName = orderheaderReturn.inv_Shop.Name,
        //                    orderheaderReturn.p_Person.Gender,
        //                    orderheaderReturn.p_Person.Family,
        //                    ClientGender = orderheaderReturn.p_Person1.Gender,
        //                    ClientFamily = orderheaderReturn.p_Person1.Family,
        //                    Date = utility.GetstrDateCulture(orderheaderReturn.Date),
        //                    Time = orderheaderReturn.Date.ToString("HH:mm"),
        //                    orderheaderReturn.Amount,
        //                    orderheaderReturn.ac_CurrencyRate.ac_Currency.Currency,
        //                    detail = orderheaderReturn.ac_OrderDetail.GroupBy(d => new { d.inv_ItemDetail.BarcodeId, d.inv_ItemDetail.inv_Barcode.Name }).Select(o => new { o.Key.Name, Price = o.Sum(s => s.Price), Quantity = o.Sum(s => s.Quantity) })
        //                });
        //            }
        //        }
        //    }
        //    catch (InvalidOperationException)
        //    {
        //        return Json(new { isDone = false, msg = "." + "اطلاعات رنگ و جزئیات کالا را درست انتخاب کنید" });
        //    }
        //    catch (UpdateException e2)
        //    {
        //        return Json(new { isDone = false, msg = e2.InnerException.Message });
        //    }

        //    catch (Exception ex)
        //    {
        //        return Json(new { isDone = false, msg = "." + "اطلاعات ذخیره نشد /n" + ex.InnerException.Message });

        //    }
        //}

        public ActionResult preOrderChange(int orderHeaderId)
        {

            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canConfirmOrder"))
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }

                ac_OrderHeader oldOrderHeader = db.ac_OrderHeader.Single(s => s.OrderHeaderId == orderHeaderId);
                var currentUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName);
                var lst = db.GetParentEmployeeByID(oldOrderHeader.EmployeeId, "").Select(p => p.AccountId);
                if (!lst.Contains(currentUser.AccountId))
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }

                //confirm
                oldOrderHeader.ConfirmerId = db.p_Person.Single(s => s.Code == User.Identity.Name && s.aspnet_Applications.ApplicationName == appName).AccountId;
                //update quantity of item
                foreach (var item in oldOrderHeader.ac_AccountDetail.ToList())
                {
                    //baraie accountDetailhaie forosh va gheimate tamam shode inv_ItemDetail=null hast
                    if (item.ac_Account.inv_ItemDetail != null)
                    {
                        var itemLocation = item.ac_Account.inv_ItemDetail.inv_ItemLocation.Single(i => i.ItemDetailId == item.ac_Account.inv_ItemDetail.AccountId);
                        itemLocation.Quantity -= item.ac_OrderDetail.Quantity;
                    }
                }

                db.SaveChanges();
                return Json(new
                {
                    isdone = true,
                    msg = "",
                    name = currentUser.Name,
                    family = currentUser.Family
                });
            }
            catch (Exception e) { return Json(new { isdone = false, msg = e.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }



        //not used

        //        public ActionResult GetEmployeeSalaryList(int skip, int take, int currentPage, bool first, string sort,
        //            int? employeeId, string employee, string confirmer, string registerer, int? counterId, decimal? fixSalaryFrom,
        //            decimal? fixSalaryTo, string dateFrom, string dateTo, bool? isConfirmed, string description)
        //        {

        //            try
        //            {
        //                if (!User.Identity.IsAuthenticated)
        //                {
        //                    return Json(new { isExpired = true });
        //                }

        //                // db.ac_OrderHeader.Where(o=>o.p_Person.aspnet_Applications.ApplicationName)
        //                List<ObjectParameter> ol = new List<ObjectParameter>();
        //                string dynStr = string.Empty;
        //                dynStr += "it.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName";
        //                dynStr += " AND ";
        //                dynStr += "it.OrderHeaderId = it.ac_EmployeeSalary.OrderHeaderId ";
        //                dynStr += " AND ";
        //                dynStr += "it.ClientId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name && p.p_Employee.PersonId == p.PersonId && p.aspnet_Applications.ApplicationName == appName).PersonId);
        //                ol.Add(new ObjectParameter("appName", appName));
        //                if (employee.Length > 0)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += @" ((it.p_Person1.Name) LIKE '%' + @employee + '%' OR (it.p_Person1.Family) LIKE '%' + @employee + '%' 
        //                             OR (it.p_Person1.Code) = @employee )";
        //                    ol.Add(new ObjectParameter("employee", employee));
        //                }
        //                if (description.Length > 0)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += @" ((it.Description) LIKE '%' + @description + '%' )";
        //                    ol.Add(new ObjectParameter("description", description));
        //                }
        //                if (employeeId > 0)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += @"it.p_Person1.PersonId = @employeeId";
        //                    ol.Add(new ObjectParameter("employeeId", employeeId));
        //                }
        //                if (isConfirmed == true)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += @"it.ac_EmployeeSalary.ConfirmerId is not null";
        //                }
        //                else if (isConfirmed == false)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += @"it.ac_EmployeeSalary.ConfirmerId is null";
        //                }
        //                if (counterId != null)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += "it.CounterId = @CounterId ";
        //                    ol.Add(new ObjectParameter("CounterId", counterId));
        //                }
        //                else if (!utility.isInRole(db, User.Identity.Name, appName, "canSeeAllSales") && counterId == null)
        //                {
        //                    string sid = "{";
        //                    foreach (var item in db.GetSubEmployeeAndSelfByParent(db.p_Person.Single(c => c.Code == User.Identity.Name && c.aspnet_Applications.ApplicationName == appName).PersonId).Select(s => s.PersonId))
        //                    {
        //                        sid += item.ToString() + ",";
        //                    }

        //                    sid = sid.Remove(sid.Length - 1, 1);
        //                    sid += "}";

        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += "it.ac_EmployeeSalary.EmployeeId in " + sid;


        //                }

        //                if (registerer.Length > 0)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += @" ((it.p_Person.Name) LIKE '%' + @registerer + '%' OR (it.p_Person1.Family) LIKE '%' + @registerer + '%' 
        //                             OR (it.p_Person1.Code) = @registerer )";
        //                    ol.Add(new ObjectParameter("registerer", registerer));
        //                }
        //                if (confirmer.Length > 0)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " And ";
        //                    dynStr += @" ((it.ac_EmployeeSalary.p_Person.Name) LIKE '%' + @confirmer + '%' OR (it.ac_EmployeeSalary.p_Person.Family) LIKE '%' + @confirmer + '%' 
        //                             OR (it.ac_EmployeeSalary.p_Person.Code) = @confirmer )";
        //                    ol.Add(new ObjectParameter("confirmer", confirmer));
        //                }

        //                if (dateFrom.Length > 0)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " And ";
        //                    dynStr += " it.Date   >=   @dateFrom";
        //                    ol.Add(new ObjectParameter("dateFrom", utility.GetDateCulture(dateFrom)));
        //                }

        //                if (dateTo.Length > 0)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " And ";
        //                    dynStr += " it.Date   <=   @dateTo";
        //                    ol.Add(new ObjectParameter("dateTo", utility.GetDateCulture(dateTo)));
        //                }

        //                if (fixSalaryFrom != null)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " And ";
        //                    dynStr += "it.ac_EmployeeSalary.FixSalary >= @fixSalaryFrom";
        //                    ol.Add(new ObjectParameter("fixSalaryFrom", fixSalaryFrom.Value));
        //                }
        //                if (fixSalaryTo != null)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " And ";
        //                    dynStr += "it.ac_EmployeeSalary.FixSalary <= @fixSalaryTo";
        //                    ol.Add(new ObjectParameter("fixSalaryTo", fixSalaryTo.Value));
        //                }
        //                if (first)
        //                {
        //                    var result = db.ac_OrderHeader.Where(dynStr, ol.ToArray());
        //                    return Json(new
        //                    {
        //                        count = result.Count(),
        //                        sumSalary = result.Sum(q => q.ac_EmployeeSalary.FixSalary),
        //                        sumComission = result.Sum(q => q.ac_EmployeeSalary.Commission),
        //                        results = result.OrderBy("it." + sort).Skip(skip).Take(take)
        //                        .Select(b => new
        //                        {
        //                            b.OrderHeaderId,
        //                            b.Date,
        //                            RegistererName = b.p_Person.Name,
        //                            RegistererFamily = b.p_Person.Family,
        //                            EmployeeName = b.p_Person1.Name,
        //                            EmployeeFamily = b.p_Person1.Family,
        //                            ConfirmerName = b.p_Employee.p_Person.Name,
        //                            ConfirmerFamily = b.p_Employee.p_Person.Family,
        //                            b.ac_EmployeeSalary.FixSalary,
        //                            b.ac_EmployeeSalary.Commission,
        //                            b.ac_EmployeeSalary.FromDate,
        //                            b.ac_EmployeeSalary.ToDate,
        //                            b.Amount,
        //                            b.ac_CurrencyRate.ac_Currency.Currency,
        //                            shop = b.inv_Shop.Name,
        //                            counter = b.ac_Counter.Code,
        //                            b.Description,
        //                            b.ClientId
        //                        }).AsEnumerable().Select(b => new
        //                        {
        //                            b.OrderHeaderId,
        //                            Date = utility.GetstrDateCultureSimple(b.Date),
        //                            RegistererName = (b.RegistererName != null ? b.RegistererName : "") + " " +
        //                                             (b.RegistererFamily != null ? b.RegistererFamily : ""),
        //                            EmployeeName = (b.EmployeeName != null ? b.EmployeeName : "") + " " +
        //                                           (b.EmployeeFamily != null ? b.EmployeeFamily : ""),
        //                            ConfirmerName = (b.ConfirmerFamily != null ? b.ConfirmerName + " " + b.ConfirmerFamily : null),
        //                            FixSalary = b.FixSalary != null ? b.FixSalary : 0,
        //                            Commission = b.Commission != null ? b.Commission : 0,
        //                            FromDate = utility.GetstrDateCultureSimple(b.FromDate),
        //                            ToDate = utility.GetstrDateCultureSimple(b.ToDate),
        //                            b.Amount,
        //                            b.Currency,
        //                            b.shop,
        //                            b.counter,
        //                            Description = b.Description != null ? b.Description : "",
        //                            ClientId = b.ClientId != null ? b.ClientId : 0
        //                        })
        //                    });
        //                    //}
        //                    //else
        //                    //{
        //                    //    var result = db.ac_OrderHeader;
        //                    //    return Json( new
        //                    //    {
        //                    //        count = result.Count(),
        //                    //        sumSalary = result.Sum(q => q.ac_EmployeeSalary.FixSalary),
        //                    //        sumComission = result.Sum(q => q.ac_EmployeeSalary.Commission),
        //                    //        results = result.OrderBy("it." + sort).Skip(skip).Take(take)
        //                    //   .Select(b => new
        //                    //   {
        //                    //       b.OrderHeaderId,
        //                    //       b.Date,
        //                    //       RegistererName = b.p_Person.Name,
        //                    //       RegistererFamily = b.p_Person.Family,
        //                    //       EmployeeName = b.p_Person1.Name,
        //                    //       EmployeeFamily = b.p_Person1.Family,
        //                    //       ConfirmerName = b.ac_EmployeeSalary.p_Person.Name,
        //                    //       ConfirmerFamily = b.ac_EmployeeSalary.p_Person.Family,
        //                    //       b.ac_EmployeeSalary.FixSalary,
        //                    //       b.ac_EmployeeSalary.Commission,
        //                    //       b.ac_EmployeeSalary.FromDate,
        //                    //       b.ac_EmployeeSalary.ToDate,
        //                    //       b.Amount,
        //                    //       b.ac_CurrencyRate.ac_Currency.Currency,
        //                    //       b.ac_EmployeeSalary.ac_Counter.Code,
        //                    //       shop = b.inv_Shop.Name,
        //                    //       counter = b.ac_EmployeeSalary.ac_Counter.Code,
        //                    //       b.Description,
        //                    //       b.ClientId
        //                    //   }).AsEnumerable().Select(b => new
        //                    //   {
        //                    //       b.OrderHeaderId,
        //                    //       Date = utility.GetstrDateCultureSimple(b.Date),
        //                    //       RegistererName = (b.RegistererName != null ? b.RegistererName : "") + " " +
        //                    //                        (b.RegistererFamily != null ? b.RegistererFamily : ""),
        //                    //       EmployeeName = (b.EmployeeName != null ? b.EmployeeName : "") + " " +
        //                    //                      (b.EmployeeFamily != null ? b.EmployeeFamily : ""),
        //                    //       ConfirmerName = (b.ConfirmerName != null ? b.ConfirmerName : "") + " " +
        //                    //                       (b.ConfirmerFamily != null ? b.ConfirmerFamily : ""),
        //                    //       FixSalary = b.FixSalary != null ? b.FixSalary : 0,
        //                    //       Commission = b.Commission != null ? b.Commission : 0,
        //                    //       FromDate = utility.GetstrDateCultureSimple(b.FromDate),
        //                    //       ToDate = utility.GetstrDateCultureSimple(b.ToDate),
        //                    //       b.Amount,
        //                    //       b.Currency,
        //                    //       b.Code,
        //                    //       b.shop,
        //                    //       b.counter,
        //                    //       Description = b.Description != null ? b.Description : "",
        //                    //       ClientId = b.ClientId != null ? b.ClientId : 0
        //                    //   })
        //                    //    });
        //                    //}
        //                }
        //                else
        //                {
        //                    //if (dynStr.Length > 0)
        //                    //{
        //                    return Json(new
        //                    {
        //                        results = db.ac_OrderHeader.Where(dynStr, ol.ToArray())
        //                           .OrderBy("it." + sort).Skip(skip).Take(take)
        //                     .Select(b => new
        //                     {
        //                         b.OrderHeaderId,
        //                         b.Date,
        //                         RegistererName = b.p_Person.Name + " " + b.p_Person.Family,
        //                         EmployeeName = b.p_Person1.Name + " " + b.p_Person1.Family,
        //                         ConfirmerName = b.p_Employee.p_Person.Name + " " + b.p_Employee.p_Person.Family,
        //                         b.ac_EmployeeSalary.FixSalary,
        //                         b.ac_EmployeeSalary.Commission,
        //                         b.ac_EmployeeSalary.FromDate,
        //                         b.ac_EmployeeSalary.ToDate,
        //                         b.Amount,
        //                         b.ac_CurrencyRate.ac_Currency.Currency,
        //                         shop = b.inv_Shop.Name,
        //                         counter = b.ac_Counter.Code,
        //                         b.Description,
        //                         b.ClientId
        //                     }).AsEnumerable().Select(b => new
        //                     {
        //                         b.OrderHeaderId,
        //                         Date = utility.GetstrDateCultureSimple(b.Date),
        //                         b.RegistererName,
        //                         b.EmployeeName,
        //                         b.ConfirmerName,
        //                         b.FixSalary,
        //                         b.Commission,
        //                         FromDate = utility.GetstrDateCultureSimple(b.FromDate),
        //                         ToDate = utility.GetstrDateCultureSimple(b.ToDate),
        //                         b.Amount,
        //                         b.Currency,
        //                         b.shop,
        //                         b.counter,
        //                         b.Description,
        //                         b.ClientId
        //                     })
        //                    });
        //                    //}
        //                    //else
        //                    //{
        //                    //    return Json( new
        //                    //    {
        //                    //        results = db.ac_OrderHeader.OrderBy("it." + sort).Skip(skip).Take(take)
        //                    //    .Select(b => new
        //                    //    {
        //                    //        b.OrderHeaderId,
        //                    //        b.Date,
        //                    //        RegistererName = b.p_Person.Name + " " + b.p_Person.Family,
        //                    //        EmployeeName = b.p_Person1.Name + " " + b.p_Person1.Family,
        //                    //        ConfirmerName = b.ac_EmployeeSalary.p_Person.Name + " " + b.ac_EmployeeSalary.p_Person.Family,
        //                    //        b.ac_EmployeeSalary.FixSalary,
        //                    //        b.ac_EmployeeSalary.Commission,
        //                    //        b.ac_EmployeeSalary.FromDate,
        //                    //        b.ac_EmployeeSalary.ToDate,
        //                    //        b.Amount,
        //                    //        b.ac_CurrencyRate.ac_Currency.Currency,
        //                    //        b.ac_EmployeeSalary.ac_Counter.Code,
        //                    //        shop = b.inv_Shop.Name,
        //                    //        counter = b.ac_EmployeeSalary.ac_Counter.Code,
        //                    //        b.Description,
        //                    //        b.ClientId
        //                    //    }).AsEnumerable().Select(b => new
        //                    //    {
        //                    //        b.OrderHeaderId,
        //                    //        Date = utility.GetstrDateCultureSimple(b.Date),
        //                    //        b.RegistererName,
        //                    //        b.EmployeeName,
        //                    //        b.ConfirmerName,
        //                    //        b.FixSalary,
        //                    //        b.Commission,
        //                    //        FromDate = utility.GetstrDateCultureSimple(b.FromDate),
        //                    //        ToDate = utility.GetstrDateCultureSimple(b.ToDate),
        //                    //        b.Amount,
        //                    //        b.Currency,
        //                    //        b.Code,
        //                    //        b.shop,
        //                    //        b.counter,
        //                    //        b.Description,
        //                    //        b.ClientId
        //                    //    })
        //                    //    });
        //                    //}
        //                }
        //            }
        //            catch (Exception ex)
        //            {
        //                return null;
        //            }

        //        }

        //public ActionResult ConfirmSalary(int orderHeaderId)
        //{
        //    bool result = false;

        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }

        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canConfirmSalary"))
        //        {
        //            return Json(new { isdone = false, msg = "notInRole" });
        //        }

        //        var currentUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName);
        //        var empSalary = db.ac_EmployeeSalary.Single(e => e.OrderHeaderID == orderHeaderId);
        //        List<int> lst = db.GetParentEmployeeByID(empSalary.ac_OrderHeader.EmployeeId, "").
        //                                                                        Select(p => p.PersonId).ToList<int>();
        //        lst.Remove(empSalary.ac_OrderHeader.EmployeeId);
        //        ac_OrderHeader acc = new ac_OrderHeader();
        //        if (lst.Contains(currentUser.PersonId))
        //        {
        //            //acc.ClientId = empSalary.ac_OrderHeader.ClientId.Value;
        //            //acc.CounterId = empSalary.ac_OrderHeader.CounterId;
        //            //acc.ShopId = empSalary.ac_OrderHeader.ShopId;
        //            //acc.InvoiceNO = getInvoiceNumber(db, "payment", true, false);
        //            //acc.CurrencyRateId = empSalary.ac_OrderHeader.CurrencyRateId;
        //            //acc.Date = DateTime.Now;
        //            //acc.EmployeeId = empSalary.ac_OrderHeader.EmployeeId;
        //            //acc.Sell = true;
        //            //acc.ConfirmerId = currentUser.PersonId;
        //            //acc.ac_Cash.Add(new ac_Cash
        //            //{
        //            //    Amount = empSalary.ac_OrderHeader.Amount,
        //            //    CurrencyRateId = empSalary.ac_OrderHeader.CurrencyRateId,
        //            //});
        //            //acc.Amount = empSalary.ac_OrderHeader.Amount;
        //            empSalary.ac_OrderHeader.ConfirmerId = currentUser.PersonId;
        //            //ac_OrderHeader.AddObject(acc);
        //            db.SaveChanges();
        //            result = true;
        //            return Json(new
        //            {
        //                isdone = true,
        //                msg = "",
        //                name = currentUser.Name,
        //                family = currentUser.Family
        //            });
        //        }
        //        else
        //        {
        //            return Json(new { isdone = false, msg = "notInRole" });
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isdone = result, msg = ex.Message });
        //    }
        //    finally { ((IDisposable)db).Dispose(); }
        //}

        public ActionResult DeleteSalary(int orderHeaderId)
        {
            bool result = false;

            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }


                int userID = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                var employee = db.ac_OrderHeader.SingleOrDefault(o => o.OrderHeaderId == orderHeaderId);
                if (employee != null)
                {
                    List<int> lst = db.GetParentEmployeeByID(employee.ClientId, "").Select(p => p.AccountId).ToList<int>();
                    if (lst.Contains(userID))
                    {
                        if (employee.ConfirmerId == null)
                        {
                            db.ac_OrderHeader.DeleteObject(db.ac_OrderHeader.Single(o => o.OrderHeaderId == orderHeaderId));
                            db.SaveChanges();
                            result = true;
                        }
                        else
                        {
                            lst.Remove(userID);
                            if (!utility.isInRole(db, User.Identity.Name, appName, "canDeleteConfirmedSalary") && lst.Contains(userID))
                            {
                                db.ac_OrderHeader.DeleteObject(db.ac_OrderHeader.Single(o => o.OrderHeaderId == orderHeaderId));
                                db.SaveChanges();
                                result = true;
                            }
                        }
                    }
                }
                if (result)
                    return Json(new { isDone = result, msg = "oK" });
                else
                    return Json(new { isDone = result, msg = "notInRole" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = result, msg = ex.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        //public ActionResult EditSalary(int orderHeaderId, int employeeId, string fromDate, string toDate, decimal fixSalary,
        //                         decimal? commission, int counterId, int currencyId, string description, int shopId)
        //{

        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }


        //        int userID = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName).PersonId;
        //        var orderHeader = db.ac_OrderHeader.SingleOrDefault(o => o.OrderHeaderId == orderHeaderId);
        //        if (orderHeader != null)
        //        {
        //            List<int> lst = db.GetParentEmployeeByID(orderHeader.ClientId, "").Select(p => p.PersonId).ToList<int>();
        //            if (lst.Contains(userID))
        //            {
        //                if (orderHeader.ConfirmerId == null)
        //                {
        //                    var orderH = db.ac_OrderHeader.Single(o => o.OrderHeaderId == orderHeaderId);
        //                    orderH.Description = description;
        //                    orderH.ClientId = employeeId;
        //                    orderH.ShopId = shopId;
        //                    orderH.CurrencyRateId = db.ac_CurrencyRate.Where(c => c.CurrencyId == currencyId).OrderByDescending(c => c.Date)
        //                                                     .First().CurrencyRateId;
        //                    orderH.EmployeeId = userID;
        //                    //orderH.Date = DateTime.Now;
        //                    if (commission != null)
        //                    {
        //                        orderH.Amount = fixSalary + commission.Value;
        //                        orderH.ac_EmployeeSalary.Commission = commission;
        //                    }
        //                    else
        //                        orderH.Amount = fixSalary;
        //                    orderH.ac_EmployeeSalary.FromDate = utility.GetDateCulture(fromDate);
        //                    orderH.ac_EmployeeSalary.ToDate = utility.GetDateCulture(toDate);
        //                    orderH.ac_EmployeeSalary.FixSalary = fixSalary;

        //                    orderH.CounterId = counterId;
        //                    db.SaveChanges();
        //                }
        //                else
        //                {
        //                    if (utility.isInRole(db, User.Identity.Name, appName, "canDeleteConfirmedSalary"))
        //                    {
        //                        var orderH = db.ac_OrderHeader.Single(o => o.OrderHeaderId == orderHeaderId);
        //                        orderH.Description = description;
        //                        orderH.ClientId = employeeId;
        //                        orderH.ShopId = shopId;
        //                        orderH.CurrencyRateId = db.ac_CurrencyRate.Where(c => c.CurrencyId == currencyId).OrderByDescending(c => c.Date)
        //                                                         .First().CurrencyRateId;
        //                        orderH.EmployeeId = userID;
        //                        //orderH.Date = DateTime.Now;
        //                        if (commission != null)
        //                        {
        //                            orderH.Amount = fixSalary + commission.Value;
        //                            orderH.ac_EmployeeSalary.Commission = commission;
        //                        }
        //                        else
        //                            orderH.Amount = fixSalary;
        //                        orderH.ac_EmployeeSalary.FromDate = utility.GetDateCulture(fromDate);
        //                        orderH.ac_EmployeeSalary.ToDate = utility.GetDateCulture(toDate);
        //                        orderH.ac_EmployeeSalary.FixSalary = fixSalary;
        //                        orderH.CounterId = counterId;
        //                        db.SaveChanges();
        //                    }
        //                    else
        //                    { return Json(new { isDone = false, msg = "notInRole" }); }
        //                }
        //            }
        //        }
        //        return Json(new { isDone = true, msg = "oK" });
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isDone = false, msg = ex.Message });
        //    }
        //    finally { ((IDisposable)db).Dispose(); }
        //}

        //not Used

        //        public ActionResult GetSocialSecurityList(int skip, int take, int currentPage, bool first, string sort,
        //                                            int? employeeId, string employee, string confirmer, string registerer,
        //                                             int? counterId, decimal? amountFrom, decimal? amountTo,
        //                                             string dateFrom, string dateTo, bool? isConfirmed, string description,
        //                                             int? month)
        //        {
        //            try
        //            {
        //                if (!User.Identity.IsAuthenticated)
        //                {
        //                    return Json(new { isExpired = true });
        //                }

        //                // db.ac_OrderHeader.Where(o=>o.p_Person.aspnet_Applications.ApplicationName)
        //                List<ObjectParameter> ol = new List<ObjectParameter>();
        //                string dynStr = string.Empty;
        //                dynStr += "it.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName";
        //                dynStr += " AND ";
        //                dynStr += "it.OrderHeaderId = it.ac_SocialSecurity.OrderHeaderId ";
        //                dynStr += " AND ";
        //                dynStr += "it.ClientId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName).PersonId);
        //                ol.Add(new ObjectParameter("appName", appName));
        //                if (employee.Length > 0)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += @" ((it.p_Person1.Name) LIKE '%' + @employee + '%' OR (it.p_Person1.Family) LIKE '%' + @employee + '%' 
        //                             OR (it.p_Person1.Code) = @employee )";
        //                    ol.Add(new ObjectParameter("employee", employee));
        //                }
        //                if (description.Length > 0)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += @" ((it.Description) LIKE '%' + @description + '%' )";
        //                    ol.Add(new ObjectParameter("description", description));
        //                }
        //                if (employeeId != null)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += @"it.p_Person1.PersonId = @employeeId";
        //                    ol.Add(new ObjectParameter("employeeId", employeeId));
        //                }
        //                if (isConfirmed == true)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += @"it.ac_SocialSecurity.ConfirmerId is not null";
        //                }
        //                else if (isConfirmed == false)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += @"it.ac_SocialSecurity.ConfirmerId is null";
        //                }
        //                if (counterId != null)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += "it.CounterId = @CounterId ";
        //                    ol.Add(new ObjectParameter("CounterId", counterId));
        //                }
        //                if (registerer.Length > 0)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += @" ((it.p_Person.Name) LIKE '%' + @registerer + '%' OR (it.p_Person.Family) LIKE '%' + @registerer + '%' 
        //                             OR (it.p_Person.Code) = @registerer )";
        //                    ol.Add(new ObjectParameter("registerer", registerer));
        //                }
        //                if (confirmer.Length > 0)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " And ";
        //                    dynStr += @" ((it.ac_SocialSecurity.p_Person.Name) LIKE '%' + @confirmer + '%' OR (it.ac_SocialSecurity.p_Person.Family) LIKE '%' + @confirmer + '%' 
        //                             OR (it.ac_SocialSecurity.p_Person.Code) = @confirmer )";
        //                    ol.Add(new ObjectParameter("confirmer", confirmer));
        //                }

        //                if (dateFrom.Length > 0)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " And ";
        //                    dynStr += " it.Date   >=   @dateFrom";
        //                    ol.Add(new ObjectParameter("dateFrom", utility.GetDateCulture(dateFrom)));
        //                }

        //                if (dateTo.Length > 0)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " And ";
        //                    dynStr += " it.Date   <=   @dateTo";
        //                    ol.Add(new ObjectParameter("dateTo", utility.GetDateCulture(dateTo)));
        //                }

        //                if (amountFrom != null)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " And ";
        //                    dynStr += "it.Amount >= @amountFrom";
        //                    ol.Add(new ObjectParameter("amountFrom", amountFrom.Value));
        //                }
        //                if (amountTo != null)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " And ";
        //                    dynStr += "it.Amount <= @amountTo";
        //                    ol.Add(new ObjectParameter("amountTo", amountTo.Value));
        //                }
        //                if (month != null)
        //                {
        //                    if (dynStr.Length > 0)
        //                        dynStr += " AND ";
        //                    dynStr += @"it.ac_SocialSecurity.Month = @month";
        //                    ol.Add(new ObjectParameter("month", month));
        //                }
        //                if (first)
        //                {
        //                    if (dynStr.Length > 0)
        //                    {
        //                        var result = db.ac_OrderHeader.Where(dynStr, ol.ToArray());
        //                        return Json(new
        //                        {
        //                            count = result.Count(),
        //                            sumAmount = result.Sum(q => (decimal?)q.Amount),
        //                            results = result.OrderBy("it." + sort).Skip(skip).Take(take)
        //                            .Select(b => new
        //                            {
        //                                b.OrderHeaderId,
        //                                b.Date,
        //                                RegistererName = b.p_Person.Name + " " + b.p_Person.Family,
        //                                EmployeeName = b.p_Person1.Name + " " + b.p_Person1.Family,
        //                                ConfirmerName = b.p_Employee.p_Person.Name + " " + b.p_Employee.p_Person.Family,
        //                                b.Amount,
        //                                b.ac_CurrencyRate.ac_Currency.Currency,
        //                                b.ac_Counter.Code,
        //                                shop = b.inv_Shop.Name,
        //                                counter = b.ac_Counter.Code,
        //                                b.Description,
        //                                b.ClientId,
        //                                b.ac_SocialSecurity.Month
        //                            }).AsEnumerable().Select(b => new
        //                            {
        //                                b.OrderHeaderId,
        //                                Date = utility.GetstrDateCultureSimple(b.Date),
        //                                b.RegistererName,
        //                                b.EmployeeName,
        //                                b.ConfirmerName,
        //                                b.Amount,
        //                                b.Currency,
        //                                b.Code,
        //                                b.shop,
        //                                b.counter,
        //                                b.Description,
        //                                b.ClientId,
        //                                Month = GetTitleValueById(b.Month, "Counter/MonthTitle"),
        //                                MonthId = b.Month
        //                            })
        //                        });
        //                    }
        //                    else
        //                    {
        //                        var result = db.ac_OrderHeader;
        //                        return Json(new
        //                        {
        //                            count = result.Count(),
        //                            sumAmount = result.Sum(q => q.Amount),
        //                            results = result.OrderBy("it." + sort).Skip(skip).Take(take)
        //                        .Select(b => new
        //                        {
        //                            b.OrderHeaderId,
        //                            b.Date,
        //                            RegistererName = b.p_Person.Name + " " + b.p_Person.Family,
        //                            EmployeeName = b.p_Person1.Name + " " + b.p_Person1.Family,
        //                            ConfirmerName = b.p_Employee.p_Person.Name + " " + b.p_Employee.p_Person.Family,
        //                            b.Amount,
        //                            b.ac_CurrencyRate.ac_Currency.Currency,
        //                            b.ac_Counter.Code,
        //                            shop = b.inv_Shop.Name,
        //                            counter = b.ac_Counter.Code,
        //                            b.Description,
        //                            b.ClientId,
        //                            b.ac_SocialSecurity.Month
        //                        }).AsEnumerable().Select(b => new
        //                        {
        //                            b.OrderHeaderId,
        //                            Date = utility.GetstrDateCultureSimple(b.Date),
        //                            b.RegistererName,
        //                            b.EmployeeName,
        //                            b.ConfirmerName,
        //                            b.Amount,
        //                            b.Currency,
        //                            b.Code,
        //                            b.shop,
        //                            b.counter,
        //                            b.Description,
        //                            b.ClientId,
        //                            Month = GetTitleValueById(b.Month, "Counter/MonthTitle"),
        //                            MonthId = b.Month
        //                        })
        //                        });
        //                    }
        //                }
        //                else
        //                {
        //                    if (dynStr.Length > 0)
        //                    {
        //                        return Json(new
        //                        {
        //                            results = db.ac_OrderHeader.Where(dynStr, ol.ToArray())
        //                               .OrderBy("it." + sort).Skip(skip).Take(take)
        //                        .Select(b => new
        //                        {
        //                            b.OrderHeaderId,
        //                            b.Date,
        //                            RegistererName = b.p_Person.Name + " " + b.p_Person.Family,
        //                            EmployeeName = b.p_Person1.Name + " " + b.p_Person1.Family,
        //                            ConfirmerName = b.p_Employee.p_Person.Name + " " + b.p_Employee.p_Person.Family,
        //                            b.Amount,
        //                            b.ac_CurrencyRate.ac_Currency.Currency,
        //                            b.ac_Counter.Code,
        //                            shop = b.inv_Shop.Name,
        //                            counter = b.ac_Counter.Code,
        //                            b.Description,
        //                            b.ClientId,
        //                            b.ac_SocialSecurity.Month
        //                        }).AsEnumerable().Select(b => new
        //                        {
        //                            b.OrderHeaderId,
        //                            Date = utility.GetstrDateCultureSimple(b.Date),
        //                            b.RegistererName,
        //                            b.EmployeeName,
        //                            b.ConfirmerName,
        //                            b.Amount,
        //                            b.Currency,
        //                            b.Code,
        //                            b.shop,
        //                            b.counter,
        //                            b.Description,
        //                            b.ClientId,
        //                            Month = GetTitleValueById(b.Month, "Counter/MonthTitle"),
        //                            MonthId = b.Month
        //                        })
        //                        });
        //                    }
        //                    else
        //                    {
        //                        return Json(new
        //                        {
        //                            results = db.ac_OrderHeader.OrderBy("it." + sort).Skip(skip).Take(take)
        //                        .Select(b => new
        //                        {
        //                            b.OrderHeaderId,
        //                            b.Date,
        //                            RegistererName = b.p_Person.Name + " " + b.p_Person.Family,
        //                            EmployeeName = b.p_Person1.Name + " " + b.p_Person1.Family,
        //                            ConfirmerName = b.p_Employee.p_Person.Name + " " + b.p_Employee.p_Person.Family,
        //                            b.Amount,
        //                            b.ac_CurrencyRate.ac_Currency.Currency,
        //                            b.ac_Counter.Code,
        //                            shop = b.inv_Shop.Name,
        //                            counter = b.ac_Counter.Code,
        //                            b.Description,
        //                            b.ClientId,
        //                            b.ac_SocialSecurity.Month
        //                        }).AsEnumerable().Select(b => new
        //                        {
        //                            b.OrderHeaderId,
        //                            Date = utility.GetstrDateCultureSimple(b.Date),
        //                            b.RegistererName,
        //                            b.EmployeeName,
        //                            b.ConfirmerName,
        //                            b.Amount,
        //                            b.Currency,
        //                            b.Code,
        //                            b.shop,
        //                            b.counter,
        //                            b.Description,
        //                            b.ClientId,
        //                            Month = GetTitleValueById(b.Month, "Counter/MonthTitle"),
        //                            MonthId = b.Month
        //                        })
        //                        });
        //                    }
        //                }
        //            }
        //            catch (Exception ex)
        //            {
        //                return null;
        //            }
        //        }

        //public ActionResult ConfirmSocialSecurity(int orderHeaderId)
        //{
        //    bool result = false;

        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }

        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canConfirmSocialSecurity"))
        //        {
        //            return Json(new { isdone = false, msg = "notInRole" });
        //        }

        //        var currentUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName);
        //        var socialSec = db.ac_SocialSecurity.Single(e => e.OrderHeaderId == orderHeaderId);
        //        List<int> lst = db.GetParentEmployeeByID(socialSec.ac_OrderHeader.EmployeeId, "").
        //                                                                        Select(p => p.PersonId).ToList<int>();
        //        lst.Remove(socialSec.ac_OrderHeader.EmployeeId);
        //        ac_OrderHeader acc = new ac_OrderHeader();
        //        if (lst.Contains(currentUser.PersonId))
        //        {
        //            acc.ClientId = socialSec.ac_OrderHeader.ClientId.Value;
        //            acc.CounterId = socialSec.ac_OrderHeader.CounterId;
        //            acc.ShopId = socialSec.ac_OrderHeader.ShopId;
        //            acc.InvoiceNO = getInvoiceNumber(db, "payment", true, false);
        //            acc.OrderTypeId = getOrderType(db, 0, true, true, false, false, true, false, false, false, false);
        //            acc.CurrencyRateId = socialSec.ac_OrderHeader.CurrencyRateId;
        //            acc.Date = DateTime.Now;
        //            acc.Description = "paidForSocialSecurity";
        //            acc.EmployeeId = socialSec.ac_OrderHeader.EmployeeId;
        //            acc.Sell = true;
        //            acc.IsMoney = true;
        //            acc.ConfirmerId = currentUser.PersonId;
        //            acc.ac_Cash.Add(new ac_Cash
        //            {
        //                Amount = socialSec.ac_OrderHeader.Amount,
        //                CurrencyRateId = socialSec.ac_OrderHeader.CurrencyRateId,
        //            });
        //            acc.Amount = socialSec.ac_OrderHeader.Amount;
        //            db.ac_OrderHeader.AddObject(acc);
        //            socialSec.ac_OrderHeader.ConfirmerId = currentUser.PersonId;
        //            db.SaveChanges();
        //            result = true;
        //        }
        //        return Json(new
        //        {
        //            isdone = result,
        //            msg = "",
        //            name = currentUser.Name,
        //            family = currentUser.Family,
        //            code = currentUser.Code
        //        });
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isdone = result, msg = ex.Message });
        //    }
        //    finally { ((IDisposable)db).Dispose(); }
        //}

        public ActionResult DeleteSocial(int orderHeaderId)
        {
            bool result = false;

            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }


                int userID = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                var employee = db.ac_OrderHeader.SingleOrDefault(o => o.OrderHeaderId == orderHeaderId);
                if (employee != null)
                {
                    List<int> lst = db.GetParentEmployeeByID(employee.ClientId, "").Select(p => p.AccountId).ToList<int>();
                    if (lst.Contains(userID))
                    {
                        if (employee.ConfirmerId != null)
                        {
                            db.ac_OrderHeader.DeleteObject(db.ac_OrderHeader.Single(o => o.OrderHeaderId == orderHeaderId));
                            db.SaveChanges();
                            result = true;
                        }
                        else
                        {
                            if (utility.isInRole(db, User.Identity.Name, appName, "canDeleteConfirmedSocialSecurity"))
                            {
                                db.ac_OrderHeader.DeleteObject(db.ac_OrderHeader.Single(o => o.OrderHeaderId == orderHeaderId));
                                db.SaveChanges();
                                result = true;
                            }
                        }
                    }
                }
                if (result)
                    return Json(new { isDone = result, msg = "oK" });
                else
                    return Json(new { isDone = result, msg = "notInRole" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = result, msg = ex.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        //public ActionResult EditSocialSecurity(int orderHeaderId, int employeeId, int month, decimal amount,
        //                                 int counterId, int currencyId, string description, int shopId)
        //{


        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }
        //        int userID = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName).PersonId;
        //        var orderHeader = db.ac_OrderHeader.SingleOrDefault(o => o.OrderHeaderId == orderHeaderId);
        //        if (orderHeader != null)
        //        {
        //            List<int> lst = db.GetParentEmployeeByID(orderHeader.ClientId, "").Select(p => p.PersonId).ToList<int>();
        //            if (lst.Contains(userID))
        //            {
        //                if (orderHeader.ConfirmerId != null)
        //                {
        //                    var orderH = db.ac_OrderHeader.Single(o => o.OrderHeaderId == orderHeaderId);
        //                    orderH.Description = description;
        //                    orderH.ClientId = employeeId;
        //                    orderH.ShopId = shopId;
        //                    orderH.CurrencyRateId = db.ac_CurrencyRate.Where(c => c.CurrencyId == currencyId).OrderByDescending(c => c.Date)
        //                                                     .First().CurrencyRateId;
        //                    orderH.EmployeeId = userID;
        //                    //orderH.Date = DateTime.Now;
        //                    orderH.Amount = amount;
        //                    orderH.ac_SocialSecurity.Month = month;
        //                    orderH.CounterId = counterId;
        //                    db.SaveChanges();
        //                }
        //                else
        //                {
        //                    if (utility.isInRole(db, User.Identity.Name, appName, "canDeleteConfirmedSocialSecurity"))
        //                    {
        //                        var orderH = db.ac_OrderHeader.Single(o => o.OrderHeaderId == orderHeaderId);
        //                        orderH.Description = description;
        //                        orderH.ClientId = employeeId;
        //                        orderH.ShopId = shopId;
        //                        orderH.CurrencyRateId = db.ac_CurrencyRate.Where(c => c.CurrencyId == currencyId).OrderByDescending(c => c.Date)
        //                                                         .First().CurrencyRateId;
        //                        orderH.EmployeeId = userID;
        //                        //orderH.Date = DateTime.Now;
        //                        orderH.Amount = amount;
        //                        orderH.ac_SocialSecurity.Month = month;
        //                        orderH.CounterId = counterId;
        //                        db.SaveChanges();
        //                    }
        //                    else
        //                        return Json(new { isdone = false, msg = "notInRole" });
        //                }
        //            }
        //        }
        //        return Json(new { isDone = true, msg = "" });
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isDone = false, msg = ex.Message });
        //    }
        //    finally { ((IDisposable)db).Dispose(); }
        //}

        //not Used

        public ActionResult GetExpenseList(int skip, int take, int currentPage, bool first, string sort,
                                     int? expenseCategory, string confirmer, string registerer,
                                             int? counterId, decimal? amountFrom, decimal? amountTo,
                                             string dateFrom, string dateTo, bool? isConfirmed, string description)
        {

            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                // db.ac_OrderHeader.Where(o=>o.p_Person.aspnet_Applications.ApplicationName)
                List<ObjectParameter> ol = new List<ObjectParameter>();
                string dynStr = string.Empty;
                dynStr += "it.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName";
                dynStr += " AND ";
                dynStr += "it.ac_ExpenseCategory.ExpenseCategoryId is not null ";
                dynStr += " AND ";
                dynStr += "it.EmployeeId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId);
                ol.Add(new ObjectParameter("appName", appName));
                if (description.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += @" ((it.Description) LIKE '%' + @description + '%' )";
                    ol.Add(new ObjectParameter("description", description));
                }
                if (isConfirmed == true)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += @"it.ConfirmerId is not null";
                }
                else if (isConfirmed == false)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += @"it.ConfirmerId is null";
                }
                if (counterId != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.accountId = @CounterId ";
                    ol.Add(new ObjectParameter("CounterId", counterId));
                }
                if (registerer.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += @" ((it.p_Person.Name) LIKE '%' + @registerer + '%' OR (it.p_Person.Family) LIKE '%' + @registerer + '%' 
                             OR (it.p_Person.Code) = @registerer )";
                    ol.Add(new ObjectParameter("registerer", registerer));
                }
                if (confirmer.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += @" ((it.p_Employee.p_Person.Name) LIKE '%' + @confirmer + '%' OR (it.p_Employee.p_Person.Family) LIKE '%' + @confirmer + '%' 
                             OR (it.p_Employee.p_Person.Code) = @confirmer )";
                    ol.Add(new ObjectParameter("confirmer", confirmer));
                }

                if (dateFrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Date   >=   @dateFrom";
                    ol.Add(new ObjectParameter("dateFrom", utility.GetDateCulture(dateFrom)));
                }

                if (dateTo.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Date   <=   @dateTo";
                    ol.Add(new ObjectParameter("dateTo", utility.GetDateCulture(dateTo)));
                }

                if (amountFrom != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Amount >= @amountFrom";
                    ol.Add(new ObjectParameter("amountFrom", amountFrom.Value));
                }
                if (amountTo != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Amount <= @amountTo";
                    ol.Add(new ObjectParameter("amountTo", amountTo.Value));
                }
                if (expenseCategory != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.ac_ExpenseCategory.ExpenseCategoryId in " + utility.getHierarchyDataForExpenseCategory(expenseCategory);
                    ol.Add(new ObjectParameter("expenseCategory", expenseCategory.Value));
                }
                if (first)
                {
                    if (dynStr.Length > 0)
                    {
                        var result = db.ac_OrderHeader.Where(dynStr, ol.ToArray());
                        return Json(new
                        {
                            count = result.Count(),
                            sumAmount = result.Sum(q => (decimal?)q.Amount),
                            results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                            .Select(b => new
                            {
                                b.OrderHeaderId,
                                b.Date,
                                RegistererName = b.p_Person.Name + " " + b.p_Person.Family,
                                RegistererId = b.p_Person.AccountId,
                                ConfirmerName = b.p_Employee.p_Person.Name + " " + b.p_Employee.p_Person.Family,
                                b.Amount,
                                b.ac_CurrencyRate.ac_Currency.Currency,
                                b.ac_Counter.Code,
                                shop = b.inv_Shop.Name,
                                counter = b.ac_Counter.Code,
                                b.Description,
                                //ExpenseCategory = b.ac_ExpenseCategory.Expense,
                                //ExpenseCategoryId = b.ac_ExpenseCategory.ExpenseCategoryId
                            }).AsEnumerable().Select(b => new
                            {
                                b.OrderHeaderId,
                                Date = utility.GetstrDateCultureSimple(b.Date),
                                b.RegistererName,
                                b.RegistererId,
                                b.ConfirmerName,
                                b.Amount,
                                b.Currency,
                                b.Code,
                                b.shop,
                                b.counter,
                                b.Description,
                                //b.ExpenseCategory,
                                //b.ExpenseCategoryId
                            })
                        });
                    }
                    else
                    {
                        var result = db.ac_OrderHeader;
                        return Json(new
                        {
                            count = result.Count(),
                            sumAmount = result.Sum(q => q.Amount),
                            results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                       .Select(b => new
                       {
                           b.OrderHeaderId,
                           b.Date,
                           RegistererName = b.p_Person.Name + " " + b.p_Person.Family,
                           RegistererId = b.p_Person.AccountId,
                           ConfirmerName = b.p_Employee.p_Person.Name + " " + b.p_Employee.p_Person.Family,
                           b.Amount,
                           b.ac_CurrencyRate.ac_Currency.Currency,
                           b.ac_Counter.Code,
                           shop = b.inv_Shop.Name,
                           counter = b.ac_Counter.Code,
                           b.Description,
                           //ExpenseCategory = b.ac_ExpenseCategory.Expense,
                           //ExpenseCategoryId = b.ac_ExpenseCategory.ExpenseCategoryId
                       }).AsEnumerable().Select(b => new
                       {
                           b.OrderHeaderId,
                           Date = utility.GetstrDateCultureSimple(b.Date),
                           b.RegistererName,
                           b.RegistererId,
                           b.ConfirmerName,
                           b.Amount,
                           b.Currency,
                           b.Code,
                           b.shop,
                           b.counter,
                           b.Description,
                           //b.ExpenseCategory,
                           //b.ExpenseCategoryId
                       })
                        });
                    }
                }
                else
                {
                    if (dynStr.Length > 0)
                    {
                        return Json(new
                        {
                            results = db.ac_OrderHeader.Where(dynStr, ol.ToArray())
                               .OrderBy("it." + sort).Skip(skip).Take(take)
                     .Select(b => new
                     {
                         b.OrderHeaderId,
                         b.Date,
                         RegistererName = b.p_Person.Name + " " + b.p_Person.Family,
                         RegistererId = b.p_Person.AccountId,
                         ConfirmerName = b.p_Employee.p_Person.Name + " " + b.p_Employee.p_Person.Family,
                         b.Amount,
                         b.ac_CurrencyRate.ac_Currency.Currency,
                         b.ac_Counter.Code,
                         shop = b.inv_Shop.Name,
                         counter = b.ac_Counter.Code,
                         b.Description,
                         //ExpenseCategory = b.ac_ExpenseCategory.Expense,
                         //ExpenseCategoryId = b.ac_ExpenseCategory.ExpenseCategoryId
                     }).AsEnumerable().Select(b => new
                     {
                         b.OrderHeaderId,
                         Date = utility.GetstrDateCultureSimple(b.Date),
                         b.RegistererName,
                         b.RegistererId,
                         b.ConfirmerName,
                         b.Amount,
                         b.Currency,
                         b.Code,
                         b.shop,
                         b.counter,
                         b.Description,
                         //b.ExpenseCategory,
                         //b.ExpenseCategoryId
                     })
                        });
                    }
                    else
                    {
                        return Json(new
                        {
                            results = db.ac_OrderHeader.OrderBy("it." + sort).Skip(skip).Take(take)
                       .Select(b => new
                       {
                           b.OrderHeaderId,
                           b.Date,
                           RegistererName = b.p_Person.Name + " " + b.p_Person.Family,
                           RegistererId = b.p_Person.AccountId,
                           ConfirmerName = b.p_Employee.p_Person.Name + " " + b.p_Employee.p_Person.Family,
                           b.Amount,
                           b.ac_CurrencyRate.ac_Currency.Currency,
                           b.ac_Counter.Code,
                           shop = b.inv_Shop.Name,
                           counter = b.ac_Counter.Code,
                           b.Description,
                           //ExpenseCategory = b.ac_ExpenseCategory.Expense,
                           //ExpenseCategoryId = b.ac_ExpenseCategory.ExpenseCategoryId
                       }).AsEnumerable().Select(b => new
                       {
                           b.OrderHeaderId,
                           Date = utility.GetstrDateCultureSimple(b.Date),
                           b.RegistererName,
                           b.RegistererId,
                           b.ConfirmerName,
                           b.Amount,
                           b.Currency,
                           b.Code,
                           b.shop,
                           b.counter,
                           b.Description,
                           //b.ExpenseCategory,
                           //b.ExpenseCategoryId
                       })
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //public ActionResult ConfirmExpense(int orderHeaderId)
        //{

        //    bool result = false;
        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }

        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canConfirmExpense"))
        //        {
        //            return Json(new { isdone = false, msg = "notInRole" });
        //        }
        //        var currentUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName);
        //        var expense = db.ac_OrderHeader.Single(e => e.OrderHeaderId == orderHeaderId);
        //        List<int> lst = db.GetParentEmployeeByID(expense.p_Person.PersonId, "").
        //                                                                        Select(p => p.PersonId).ToList<int>();
        //        lst.Remove(expense.p_Person.PersonId);
        //        ac_OrderHeader acc = new ac_OrderHeader();
        //        if (lst.Contains(currentUser.PersonId))
        //        {
        //            acc.CounterId = expense.CounterId;
        //            acc.ShopId = expense.ShopId;
        //            acc.Date = DateTime.Now;
        //            acc.ConfirmerId = currentUser.PersonId;
        //            acc.EmployeeId = expense.p_Person.PersonId;
        //            acc.InvoiceNO = getInvoiceNumber(db, "payment", true, false);
        //            acc.OrderTypeId = getOrderType(db, 0, true, true, false, true, false, false, false, false, false);
        //            acc.CurrencyRateId = expense.CurrencyRateId;
        //            //acc.ClientId = null;
        //            acc.Sell = true;
        //            acc.Description = "paidForExpense";
        //            acc.IsMoney = true;
        //            acc.ac_Cash.Add(new ac_Cash
        //            {
        //                Amount = expense.Amount,
        //                CurrencyRateId = expense.CurrencyRateId
        //            });
        //            acc.Amount = expense.Amount;
        //            db.ac_OrderHeader.AddObject(acc);
        //            expense.ConfirmerId = currentUser.PersonId;
        //            db.SaveChanges();
        //            result = true;
        //        }
        //        return Json(new
        //        {
        //            isdone = result,
        //            msg = "",
        //            name = currentUser.Name,
        //            family = currentUser.Family,
        //            code = currentUser.Code
        //        });
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isdone = result, msg = ex.Message });
        //    }
        //    finally { ((IDisposable)db).Dispose(); }
        //}

        public ActionResult DeleteExpense(int orderHeaderId)
        {

            bool result = false;

            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }
                int userID = db.p_Person.Single(p => p.Code == User.Identity.Name).AccountId;
                var employee = db.ac_OrderHeader.SingleOrDefault(o => o.OrderHeaderId == orderHeaderId);
                if (employee != null)
                {
                    List<int> lst = db.GetParentEmployeeByID(employee.EmployeeId, "").Select(p => p.AccountId).ToList<int>();
                    if (lst.Contains(userID))
                    {
                        if (employee.ConfirmerId == null)
                        {
                            db.ac_OrderHeader.DeleteObject(db.ac_OrderHeader.Single(o => o.OrderHeaderId == orderHeaderId));
                            db.SaveChanges();
                            result = true;
                        }
                        else
                        {
                            if (!utility.isInRole(db, User.Identity.Name, appName, "canDeleteConfirmedExpense"))
                            {
                                db.ac_OrderHeader.DeleteObject(db.ac_OrderHeader.Single(o => o.OrderHeaderId == orderHeaderId));
                                db.SaveChanges();
                                result = true;
                            }
                        }

                    }

                }
                if (result)
                    return Json(new { isDone = result, msg = "oK" });
                else
                    return Json(new { isDone = result, msg = "notInRole" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = result, msg = ex.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult EditOrderFullAcount(int orderHeaderId, decimal amount, string date)
        {


            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }


                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditSale"))
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }
                var currentUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName);

                var orderHeader = db.ac_OrderHeader.SingleOrDefault(o => o.OrderHeaderId == orderHeaderId);
                List<int> lst = db.GetParentEmployeeByID(orderHeader.EmployeeId, "").Select(p => p.AccountId).ToList<int>();
                if (lst.Contains(currentUser.AccountId))
                {
                    orderHeader.Amount = amount;
                    if (utility.isInRole(db, User.Identity.Name, appName, "canConfirmSalary"))
                    {
                        orderHeader.Date = utility.GetDateTimeCulture(date);
                    }
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "oK" });
                }
                else
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }

            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.Message });
            }
        }

        //public ActionResult EditVoucherFullAccount(int voucherNumber, decimal amount, string expieryDate)
        //{


        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }


        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canEditVoucher"))
        //        {
        //            return Json(new { isdone = false, msg = "notInRole" });
        //        }
        //        var voucher = db.ac_Voucher.SingleOrDefault(o => o.Number == voucherNumber);
        //        if (voucher.AccountId != null)
        //            return Json(new { isdone = false, msg = "کارت هدیه خرج شده است، امکان ویرایش وجود ندارد." });
        //        voucher.Amount = amount;
        //        voucher.ExpieryDate = utility.GetDateCulture(expieryDate);
        //        db.SaveChanges();
        //        return Json(new { isdone = true });

        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isdone = false, msg = ex.Message });
        //    }
        //}

        public ActionResult EditExpense(int orderHeaderId, decimal amount, int expenseCategory,
                                         int counterId, int currencyId, string description, int shopId)
        {

            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }


                if (!utility.isInRole(db, User.Identity.Name, appName, "canAddExpense"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }

                int userID = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                var orderHeader = db.ac_OrderHeader.SingleOrDefault(o => o.OrderHeaderId == orderHeaderId);
                if (orderHeader != null)
                {
                    List<int> lst = db.GetParentEmployeeByID(orderHeader.EmployeeId, "").Select(p => p.AccountId).ToList<int>();
                    if (lst.Contains(userID))
                    {
                        if (orderHeader.ConfirmerId == null)
                        {
                            var orderH = db.ac_OrderHeader.Single(o => o.OrderHeaderId == orderHeaderId);
                            orderH.Description = description;
                            orderH.ShopId = shopId;
                            orderH.CurrencyRateId = db.ac_CurrencyRate.Where(c => c.CurrencyId == currencyId).OrderByDescending(c => c.Date)
                                                             .First().CurrencyRateId;
                            orderH.EmployeeId = userID;
                            //orderH.Date = DateTime.Now;
                            orderH.Amount = amount;
                            //orderH.ac_ExpenseCategory = db.ac_ExpenseCategory.Single(c => c.ExpenseCategoryId == expenseCategory);
                            orderH.CounterId = counterId;
                            db.SaveChanges();
                        }
                        else
                        {
                            if (utility.isInRole(db, User.Identity.Name, appName, "canEditConfirmedExpense"))
                            {
                                var orderH = db.ac_OrderHeader.Single(o => o.OrderHeaderId == orderHeaderId);
                                orderH.Description = description;
                                orderH.ShopId = shopId;
                                orderH.CurrencyRateId = db.ac_CurrencyRate.Where(c => c.CurrencyId == currencyId).OrderByDescending(c => c.Date)
                                                                 .First().CurrencyRateId;
                                orderH.EmployeeId = userID;
                                //orderH.Date = DateTime.Now;
                                orderH.Amount = amount;
                                //orderH.ac_ExpenseCategory = db.ac_ExpenseCategory.Single(c => c.ExpenseCategoryId == expenseCategory);
                                orderH.CounterId = counterId;
                                db.SaveChanges();
                            }
                            else
                                return Json(new { isdone = false, msg = "notInRole" });
                        }
                    }
                }
                return Json(new { isDone = true, msg = "" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        //public ActionResult GetVoucherList(int skip, int take, int currentPage, bool first, string sort, int? customerId, string registerer,
        //                    string customer, int? number, string payer, string FromValidationDate,
        //                    string ToValidationDate, bool? voucherStatus, decimal? amountFrom, decimal? amountTo,
        //                    decimal? buyAmountFrom, decimal? buyAmountTo, string regDateFrom, string regDateTo,
        //                    string payDateFrom, string payDateTo)
        //{
        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }

        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canReceiveByVoucher"))
        //        {
        //            return Json(new { isDone = false, msg = "notInRole" });
        //        }
        //        // db.ac_OrderHeader.Where(o=>o.p_Person.aspnet_Applications.ApplicationName)
        //        List<ObjectParameter> ol = new List<ObjectParameter>();
        //        string dynStr = string.Empty;
        //        dynStr += "it.ac_OrderHeader1.p_Person.aspnet_Applications.ApplicationName=@appName";
        //        //dynStr += " AND ";
        //        //dynStr += "it.OrderHeaderId = it.ac_Voucher1.OrderHeaderId ";
        //        dynStr += " AND ";
        //        dynStr += "it.ac_OrderHeader1.EmployeeId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName).PersonId);
        //        ol.Add(new ObjectParameter("appName", appName));
        //        if (customerId != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += @" it.ac_OrderHeader1.p_person1.PersonId = @customerId ";
        //            ol.Add(new ObjectParameter("customerId", customerId));
        //        }
        //        if (registerer.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += @" ((it.ac_OrderHeader1.p_person.Family) LIKE '%' + @registerer + '%' )";
        //            ol.Add(new ObjectParameter("registerer", registerer));
        //        }
        //        if (customer.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += @" ((it.ac_OrderHeader1.p_person1.Family) LIKE '%' + @customer + '%' )";
        //            ol.Add(new ObjectParameter("customer", customer));
        //        }
        //        if (number != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += @" it.Number = @number ";
        //            ol.Add(new ObjectParameter("number", number));
        //        }
        //        //if (payer.Length > 0)
        //        //{
        //        //    if (dynStr.Length > 0)
        //        //        dynStr += " AND ";
        //        //    dynStr += @" ((it.p_person1.Family) LIKE '%' + @payer + '%' )";
        //        //    ol.Add(new ObjectParameter("payer", payer));
        //        //}
        //        if (FromValidationDate.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += @" it.ExpieryDate >= @FromValidationDate ";
        //            ol.Add(new ObjectParameter("FromValidationDate", utility.GetDateCulture(FromValidationDate)));
        //        }
        //        if (ToValidationDate.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += @" it.ExpieryDate <= @ToValidationDate ";
        //            ol.Add(new ObjectParameter("ToValidationDate", utility.GetDateCulture(ToValidationDate)));
        //        }
        //        if (voucherStatus != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += @" it.IsValid = @voucherStatus ";
        //            ol.Add(new ObjectParameter("voucherStatus", voucherStatus));
        //        }
        //        if (amountFrom != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += @" it.Amount >= @amountFrom ";
        //            ol.Add(new ObjectParameter("amountFrom", amountFrom));
        //        }
        //        if (amountTo != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += @" it.Amount <= @amountTo ";
        //            ol.Add(new ObjectParameter("amountTo", amountTo));
        //        }
        //        if (buyAmountFrom != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += @" it.ac_OrderHeader1.Amount >= @buyAmountFrom ";
        //            ol.Add(new ObjectParameter("buyAmountFrom", buyAmountFrom));
        //        }
        //        if (buyAmountTo != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += @" it.ac_OrderHeader1.Amount <= @buyAmountTo ";
        //            ol.Add(new ObjectParameter("buyAmountTo", buyAmountTo));
        //        }
        //        if (regDateFrom.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += @" it.ac_OrderHeader1.Date >= @regDateFrom ";
        //            ol.Add(new ObjectParameter("regDateFrom", utility.GetDateCulture(regDateFrom)));
        //        }
        //        if (regDateTo.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += @" it.ac_OrderHeader1.Date <= @regDateTo ";
        //            ol.Add(new ObjectParameter("regDateTo", utility.GetDateCulture(regDateTo)));
        //        }
        //        //if (payDateFrom.Length > 0)
        //        //{
        //        //    if (dynStr.Length > 0)
        //        //        dynStr += " AND ";
        //        //    dynStr += @" it.ac_Voucher.ExpieryDate >= @FromValidationDate ";
        //        //    ol.Add(new ObjectParameter("FromValidationDate", FromValidationDate));
        //        //}
        //        //if (payDateTo.Length > 0)
        //        //{
        //        //    if (dynStr.Length > 0)
        //        //        dynStr += " AND ";
        //        //    dynStr += @" it.ac_Voucher. <= @payDateTo ";
        //        //    ol.Add(new ObjectParameter("payDateTo", payDateTo));
        //        //}
        //        if (first)
        //        {
        //            var result = db.ac_Voucher.Where(dynStr, ol.ToArray());
        //            return Json(new
        //            {
        //                count = result.Count(),
        //                results = result.OrderBy("it." + sort).Skip(skip).Take(take)
        //                .Select(b => new
        //                {
        //                    b.OrderHeaderId,
        //                    registererName = b.ac_OrderHeader1.p_Person.Name,
        //                    registererFamily = b.ac_OrderHeader1.p_Person.Family,
        //                    customerName = b.ac_OrderHeader1.p_Person1.Name,
        //                    customerFamily = b.ac_OrderHeader1.p_Person1.Family,
        //                    b.ac_OrderHeader1.Date,
        //                    b.Amount,
        //                    buyAmount = b.ac_OrderHeader1 != null ? b.ac_OrderHeader1.Amount : 0,
        //                    b.Number,
        //                    b.ExpieryDate,
        //                    shop = b.ac_OrderHeader1.inv_Shop.Name,
        //                    b.IsValid
        //                }).AsEnumerable().Select(b => new
        //                {
        //                    b.OrderHeaderId,
        //                    registerer = b.registererName + " " + b.registererFamily,
        //                    customer = b.customerName + " " + b.customerFamily,
        //                    Date = b.Date,
        //                    b.Amount,
        //                    b.buyAmount,
        //                    b.Number,
        //                    ExpieryDate = b.ExpieryDate,
        //                    b.shop,
        //                    b.IsValid
        //                })
        //            });
        //        }
        //        else
        //        {
        //            return Json(new
        //            {
        //                results = db.ac_Voucher.Where(dynStr, ol.ToArray())
        //                   .OrderBy("it." + sort).Skip(skip).Take(take)
        //         .Select(b => new
        //         {
        //             b.OrderHeaderId,
        //             registererName = b.ac_OrderHeader1.p_Person.Name,
        //             registererFamily = b.ac_OrderHeader1.p_Person.Family,
        //             customerName = b.ac_OrderHeader1.p_Person1.Name,
        //             customerFamily = b.ac_OrderHeader1.p_Person1.Family,
        //             b.ac_OrderHeader1.Date,
        //             b.Amount,
        //             buyAmount = b.ac_OrderHeader1 != null ? b.ac_OrderHeader1.Amount : 0,
        //             b.Number,
        //             b.ExpieryDate,
        //             shop = b.ac_OrderHeader1.inv_Shop.Name,
        //             b.IsValid
        //         }).AsEnumerable().Select(b => new
        //         {
        //             b.OrderHeaderId,
        //             registerer = b.registererName + " " + b.registererFamily,
        //             customer = b.customerName + " " + b.customerFamily,
        //             Date = b.Date,
        //             b.Amount,
        //             b.buyAmount,
        //             b.Number,
        //             ExpieryDate = b.ExpieryDate,
        //             b.shop,
        //             b.IsValid
        //         })
        //            });
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }

        //}

        //public ActionResult getCustomerVoucherList(int skip, int take, int currentPage, bool first, string sort, int? customerId, string customerCode)
        //{
        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }

        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canReceiveByVoucher"))
        //        {
        //            return Json(new { isDone = false, msg = "notInRole" });
        //        }
        //        List<ObjectParameter> ol = new List<ObjectParameter>();
        //        string dynStr = string.Empty;
        //        dynStr += "it.ac_OrderHeader1.p_Person.aspnet_Applications.ApplicationName=@appName";
        //        dynStr += " AND ";
        //        dynStr += "it.ac_OrderHeader1.EmployeeId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName).PersonId);
        //        ol.Add(new ObjectParameter("appName", appName));
        //        if (customerId == null && !string.IsNullOrEmpty(customerCode))
        //            customerId = db.p_Person.Single(p => p.Code == customerCode && p.aspnet_Applications.ApplicationName == appName).PersonId;
        //        dynStr += " AND ";
        //        dynStr += " it.ac_OrderHeader1.p_person1.PersonId = @customerId ";
        //        ol.Add(new ObjectParameter("customerId", customerId));
        //        dynStr += " AND ";
        //        dynStr += " it.IsValid = true ";
        //        dynStr += " AND ";
        //        dynStr += " it.ExpieryDate >= @date";
        //        //dynStr += " AND ";
        //        //dynStr += " it.IsValid == true";
        //        dynStr += " AND ";
        //        dynStr += " it.AccountId is null";
        //        ol.Add(new ObjectParameter("date", DateTime.Now));
        //        if (first)
        //        {
        //            var result = db.ac_Voucher.Where(dynStr, ol.ToArray());
        //            return Json(new
        //            {
        //                count = result.Count(),
        //                results = result.OrderBy("it." + sort).Skip(skip).Take(take)
        //                .Select(b => new
        //                {
        //                    b.OrderHeaderId,
        //                    registererName = b.ac_OrderHeader1.p_Person.Name,
        //                    registererFamily = b.ac_OrderHeader1.p_Person.Family,
        //                    customerName = b.ac_OrderHeader1.p_Person1.Name,
        //                    customerFamily = b.ac_OrderHeader1.p_Person1.Family,
        //                    b.ac_OrderHeader1.Date,
        //                    b.Amount,
        //                    buyAmount = b.Amount,
        //                    b.Number,
        //                    b.ExpieryDate,
        //                    shop = b.ac_OrderHeader1.inv_Shop.Name,
        //                    b.IsValid
        //                }).AsEnumerable().Select(b => new
        //                {
        //                    b.OrderHeaderId,
        //                    registerer = b.registererName + " " + b.registererFamily,
        //                    customer = b.customerName + " " + b.customerFamily,
        //                    Date = utility.GetstrDateCultureSimple(b.Date),
        //                    b.Amount,
        //                    b.buyAmount,
        //                    b.Number,
        //                    ExpieryDate = utility.GetstrDateCultureSimple(b.ExpieryDate),
        //                    b.shop,
        //                    b.IsValid
        //                })
        //            });
        //        }
        //        else
        //        {
        //            return Json(new
        //            {
        //                results = db.ac_Voucher.Where(dynStr, ol.ToArray())
        //                   .OrderBy("it." + sort).Skip(skip).Take(take)
        //         .Select(b => new
        //         {
        //             b.OrderHeaderId,
        //             registererName = b.ac_OrderHeader1.p_Person.Name,
        //             registererFamily = b.ac_OrderHeader1.p_Person.Family,
        //             customerName = b.ac_OrderHeader1.p_Person1.Name,
        //             customerFamily = b.ac_OrderHeader1.p_Person1.Family,
        //             b.ac_OrderHeader1.Date,
        //             b.Amount,
        //             buyAmount = b.Amount,
        //             b.Number,
        //             b.ExpieryDate,
        //             shop = b.ac_OrderHeader1.inv_Shop.Name,
        //             b.IsValid
        //         }).AsEnumerable().Select(b => new
        //         {
        //             b.OrderHeaderId,
        //             registerer = b.registererName + " " + b.registererFamily,
        //             customer = b.customerName + " " + b.customerFamily,
        //             Date = utility.GetstrDateCultureSimple(b.Date),
        //             b.Amount,
        //             b.buyAmount,
        //             b.Number,
        //             ExpieryDate = utility.GetstrDateCultureSimple(b.ExpieryDate),
        //             b.shop,
        //             b.IsValid
        //         })
        //            });
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}

        //public ActionResult GetVoucherItem(int voucherNumber)
        //{
        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }

        //        var voucher = db.ac_Voucher.SingleOrDefault(v => v.ac_OrderHeader1.p_Person.aspnet_Applications.ApplicationName == appName &&
        //                                           v.Number == voucherNumber && v.IsValid == true && v.AccountId == null);
        //        if (voucher != null)
        //        {
        //            return Json(new
        //            {
        //                voucher.OrderHeaderId,
        //                registerer = voucher.ac_OrderHeader1.p_Person.Name + " " + voucher.ac_OrderHeader1.p_Person.Family,
        //                customer = voucher.ac_OrderHeader1.p_Person1.Name + " " + voucher.ac_OrderHeader1.p_Person1.Family,
        //                Date = utility.GetstrDateCultureSimple(voucher.ac_OrderHeader1.Date),
        //                voucher.Amount,
        //                buyAmount = voucher.Amount,
        //                voucher.Number,
        //                ExpieryDate = utility.GetstrDateCultureSimple(voucher.ExpieryDate),
        //                shop = voucher.ac_OrderHeader1.inv_Shop.Name
        //            });
        //        }
        //        else
        //            return Json(new { msg = "voucherEmpty" });
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isDone = false, msg = "error" });
        //    }
        //}

        //public ActionResult GetVoucherDetails(int voucherNumber)
        //{
        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }

        //        var voucher = db.ac_Voucher.SingleOrDefault(v => v.ac_OrderHeader1.p_Person.aspnet_Applications.ApplicationName == appName &&
        //                                  v.Number == voucherNumber && v.AccountId != null);
        //        if (voucher != null)
        //        {
        //            return Json(new
        //            {
        //                voucher.OrderHeaderId,
        //                employer = voucher.ac_OrderHeader.p_Person.Name + " " + voucher.ac_OrderHeader.p_Person.Family,
        //                payer = voucher.ac_OrderHeader.p_Person1.Name + " " + voucher.ac_OrderHeader.p_Person1.Family,
        //                Date = utility.GetstrDateCultureSimple(voucher.ac_OrderHeader.Date),
        //                shop = voucher.ac_OrderHeader.inv_Shop.Name,
        //                counter = voucher.ac_OrderHeader.ac_Counter.Code
        //            });
        //        }
        //        else
        //            return Json(new { msg = "voucherEmpty" });
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isDone = false, msg = "error" });
        //    }
        //}

        //public ActionResult GetVoucherDetailsFullAccount(int orderHeaderId)
        //{
        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }

        //        return Json(db.ac_Voucher.Where(v => v.OrderHeaderId == orderHeaderId || v.AccountId == orderHeaderId).Select(v => new
        //        {
        //            v.OrderHeaderId,
        //            v.Number,
        //            v.IsValid,
        //            v.ExpieryDate,
        //            v.Amount
        //        }).AsEnumerable().Select(v => new
        //        {
        //            v.OrderHeaderId,
        //            v.Number,
        //            IsValid = v.IsValid.Value ? "معتبر" : "نامعتبر",
        //            ExpieryDate = utility.GetstrDateCultureSimple(v.ExpieryDate),
        //            v.Amount
        //        }));
        //    }

        //    catch (Exception ex)
        //    {
        //        return Json(new { isDone = false, msg = "error" });
        //    }
        //}

        //public ActionResult ChangeVoucherStatus(int voucherNumber)
        //{
        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }

        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canEditVoucher"))
        //        {
        //            return Json(new { isdone = false, msg = "notInRole" });
        //        }
        //        var voucher = db.ac_Voucher.Single(v => v.ac_OrderHeader1.p_Person.aspnet_Applications.ApplicationName == appName &&
        //                              v.Number == voucherNumber);
        //        if (voucher.AccountId != null)
        //            return Json(new { isdone = false, msg = "کارت هدیه خرج شده است، امکان تغییر وضعیت وجود ندارد." });
        //        if (voucher.ExpieryDate < DateTime.Now)
        //            return Json(new { isdone = false, msg = "مدت اعتبار کارت هدیه تمام شده است، امکان تغییر وضعیت وجود ندارد." });
        //        voucher.IsValid = !voucher.IsValid;
        //        db.SaveChanges();
        //        return Json(new { isdone = true, status = voucher.IsValid });
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isdone = false, msg = ex.Message });
        //    }
        //}

        //public ActionResult DeleteVoucher(int voucherNumber)
        //{
        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }

        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canEditVoucher"))
        //        {
        //            return Json(new { isdone = false, msg = "notInRole" });
        //        }
        //        var voucher = db.ac_Voucher.Single(v => v.ac_OrderHeader1.p_Person.aspnet_Applications.ApplicationName == appName &&
        //                              v.Number == voucherNumber);
        //        if (voucher.AccountId != null)
        //            return Json(new { isdone = false, msg = "کارت هدیه خرج شده است، امکان حذف وجود ندارد." });
        //        db.ac_Voucher.DeleteObject(voucher);
        //        db.SaveChanges();
        //        return Json(new { isdone = true });
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isdone = false, msg = ex.Message });
        //    }
        //}

        decimal? balance = 0;
        public decimal? getBalance(decimal? amount)
        {
            decimal? firstBalance = balance;
            balance = balance + amount;
            return firstBalance;
        }
        public ActionResult GetFullOrderStatement(int skip, int take, int currentPage, bool first, string sort, int? supplierid,
   bool? IsClient, string SupplierName, string code, string customerName, string EmployeeId, string EmployeeName, string Shop,
   string InvoiceId, string InvoiceDateStart, string InvoiceDateEnd, decimal? PriceFrom, decimal? PriceTo, bool? Order,
   int? shopid, int? counterId, bool? sell, bool? buy, bool? voucher, bool? payment, bool? transfer, bool? notTransfer, bool? expense, bool? passed,
    bool? notPassed, bool? confirmed, bool? notConfirmed, string selectData,
   bool? isDebtor, int? categoryId, string barcode, int? accountType)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }


                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
                List<ObjectParameter> ol = new List<ObjectParameter>();
                string dynStr = string.Empty;
                dynStr += "it.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName";
                ol.Add(new ObjectParameter("appName", appName));

                if (!string.IsNullOrEmpty(InvoiceDateStart))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Date   >=   @InvoiceDateStart";
                    ol.Add(new ObjectParameter("InvoiceDateStart", utility.GetDateCulture(InvoiceDateStart)));
                }
                if (!string.IsNullOrEmpty(InvoiceDateEnd))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Date   <=   @InvoiceDateEnd";
                    ol.Add(new ObjectParameter("InvoiceDateEnd", utility.GetDateCulture(InvoiceDateEnd)));
                }
                if (roles.Contains("canSeeAllSales"))
                {
                }
                else
                {
                    dynStr += " AND ";
                    dynStr += "it.EmployeeId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name).AccountId);
                }
                if (supplierid != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.ClientId = @supplierId ";
                    ol.Add(new ObjectParameter("supplierId", supplierid));
                }
                buy = false;
                sell = true;
                if (IsClient != null && !IsClient.Value)
                {
                    buy = true;
                    sell = false;
                }
                if (sell != null && sell.Value && supplierid == null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.ClientId = it.p_person.p_Customer.accountId ";

                }
                if (buy != null && buy.Value && supplierid == null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.ClientId = it.p_person.p_Supplier.accountId ";

                }

                if (shopid == null && counterId == null)
                {
                    if (roles.Contains("canSeeAllPaymentes") && shopid == null)
                    {

                    }
                    else
                    {
                        if (dynStr.Length > 0)
                            dynStr += " AND ";
                        dynStr += "(it.CounterId in " + utility.getCounterForUser(User.Identity.Name) + " or it.CounterId is null)";
                    }
                }
                else if (shopid != null && counterId == null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "(it.CounterId in " + utility.getCounterForUser(User.Identity.Name) + "or it.CounterId is null )";
                    dynStr += " AND ";
                    dynStr += "it.ShopId =@ShopId";
                    ol.Add(new ObjectParameter("ShopId", shopid));
                }

                else if ((shopid != null && counterId != null) || (shopid == null && counterId != null))
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "(it.CounterId = @CounterId or it.CounterId is null)";
                    ol.Add(new ObjectParameter("CounterId", counterId));
                }

                if (!string.IsNullOrEmpty(SupplierName))
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "(it.p_person.Name LIKE '%' + @SupplierName + '%' or  it.p_person.Family LIKE '%' + @SupplierName + '%')";
                    ol.Add(new ObjectParameter("SupplierName", SupplierName));

                }
                if (!string.IsNullOrEmpty(code))
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += " it.p_person.Code = @code";
                    ol.Add(new ObjectParameter("code", code));
                }
                if (!string.IsNullOrEmpty(customerName))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "(it.p_person.Family LIKE '%' + @customerName + '%' or it.p_person.Name LIKE '%' + @customerName + '%')";
                    ol.Add(new ObjectParameter("customerName", customerName));
                }
                if (!string.IsNullOrEmpty(EmployeeId))
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += " it.p_Employee.p_person.Code = @EmployeeId";
                    ol.Add(new ObjectParameter("EmployeeId", EmployeeId));
                }
                if (!string.IsNullOrEmpty(EmployeeName))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "(it.p_Employee.p_person.Family LIKE '%' + @EmployeeName + '%' or it.p_Employee.p_person.Name LIKE '%' + @EmployeeName + '%')";
                    ol.Add(new ObjectParameter("EmployeeName", EmployeeName));
                }

                if (!string.IsNullOrEmpty(InvoiceId))
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";

                    dynStr += "it.InvoiceNO = @InvoiceId";
                    ol.Add(new ObjectParameter("InvoiceId", InvoiceId));
                }
                if (!string.IsNullOrEmpty(barcode))
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";

                    dynStr += "(EXISTS(select g From it.ac_AccountDetail as g where(g.ac_Account.inv_ItemDetail.inv_Barcode.Barcode LIKE '%' + @Barcode + '%' or g.ac_Account.inv_ItemDetail.inv_Barcode.ItemCode LIKE '%' + @Barcode + '%' or g.ac_Account.inv_ItemDetail.inv_Barcode.Name LIKE '%' + @Barcode + '%')))";
                    ol.Add(new ObjectParameter("Barcode", barcode));
                }

                if (categoryId != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(select o From it.ac_AccountDetail as o where (EXISTS(select g from o.ac_Account.inv_ItemDetail.inv_Barcode.inv_Category as g where( g.CategoryID in  " + utility.getHierarchyDataForGeneralCategory(categoryId) + "))))";
                    ol.Add(new ObjectParameter("CategoryId", categoryId));
                }


                if (PriceFrom != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Amount >= @PriceFrom ";
                    ol.Add(new ObjectParameter("PriceFrom", PriceFrom.Value));
                }
                if (PriceTo != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Amount <= @PriceTo ";
                    ol.Add(new ObjectParameter("PriceTo", PriceTo.Value));
                }
                if (confirmed != null)
                {
                    if (confirmed.Value)
                    {
                        if (dynStr.Length > 0)
                            dynStr += " And ";
                        dynStr += " it.ConfirmerId is not null ";
                    }
                }
                if (notConfirmed != null)
                {

                    if (notConfirmed.Value)
                    {
                        notTransfer = false;
                        transfer = true;
                        if (dynStr.Length > 0)
                            dynStr += " And ";
                        dynStr += " it.ConfirmerId is  null ";
                    }
                }
                if (isDebtor != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    if (isDebtor.Value)
                        dynStr += " it.sell = true ";
                    else
                        dynStr += " it.sell = false ";
                }

                if (passed != null)
                {
                    if (passed.Value && !notPassed.Value)
                    {
                        if (dynStr.Length > 0)
                            dynStr += " And ";
                        dynStr += "EXISTS(select g From it.ac_Cheque as g where it.OrderHeaderId = g.AccountId and g.passed = true)";
                    }
                }
                if (notPassed != null)
                {
                    if (notPassed.Value && !passed.Value)
                    {
                        if (dynStr.Length > 0)
                            dynStr += " And ";
                        dynStr += "EXISTS(select g From it.ac_Cheque as g where it.OrderHeaderId = g.AccountId and g.passed = false)";
                    }
                }

                if (Order != null && Order.Value)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Table = 'order' ";
                }
                if (payment != null && payment.Value)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Table = 'payment' ";
                }

                var result = db.ac_OrderHeader.Where(dynStr, ol.ToArray());
                var results = result.OrderBy("it." + sort).Skip(skip).Take(take);
                decimal? sumDebtor = 0, sumCreditor = 0, sumNotPassed = 0;
                decimal currencyRate = 1;
                int co = result.Count();
                if (results.Count() > 0)
                {
                    // DateTime dt = results.FirstOrDefault().Date;
                    sumCreditor = result.Where(c => c.Sell).Sum(a => (decimal?)a.Amount * a.ac_CurrencyRate.Buy);
                    sumDebtor = result.Where(c => !c.Sell).Sum(a => (decimal?)a.Amount * a.ac_CurrencyRate.Buy);
                    sumNotPassed = result.Sum(a => (decimal?)a.ac_AccountDetail.Where(q => !q.ac_Cheque.Any(c => c.Passed)).Sum(sq => (a.Sell ? 1 : -1) * sq.Amount));
                    sumNotPassed = sumNotPassed == null ? 0 : sumNotPassed;
                    balance = sumCreditor - sumDebtor;
                    if (selectData == "GetProfitList")
                    {
                        currencyRate = db.ac_Currency.Single(c => c.isIndex == true && (c.aspnet_Applications.ApplicationName == appName || c.ApplicationId == null)).ac_CurrencyRate.OrderByDescending(d => d.Date).First().Buy;

                        sumCreditor = result.Where(c => c.Sell).Sum(a => (decimal?)a.Amount * a.ac_CurrencyRate.Buy - a.ac_AccountDetail.Sum(s => s.ac_OrderDetail.ac_AccountDetail.ac_Account.inv_ItemDetail.BuyPrice * s.ac_OrderDetail.Quantity * currencyRate));
                        sumDebtor = result.Where(c => !c.Sell).Sum(a => (decimal?)a.Amount * a.ac_CurrencyRate.Buy - a.ac_AccountDetail.Sum(s => s.ac_OrderDetail.ac_AccountDetail.ac_Account.inv_ItemDetail.BuyPrice * s.ac_OrderDetail.Quantity * currencyRate));
                        balance = sumCreditor - sumDebtor;
                    }
                }
                switch (selectData)
                {
                    case "GetItemList":
                        {
                            if (first)
                            {
                                return Json(new
                                {
                                    count = result.Count(),
                                    sumDebtor,
                                    sumCreditor,
                                    sumNotPassed,
                                    balance,
                                    results = results
                                    .Select(b => new
                                    {
                                        b.OrderHeaderId,
                                        //  receiveVoucherCount = (int)b.ac_Voucher.Count,
                                        //  isFromTransfer = (int?)b.ac_OrderHeader1.FirstOrDefault().OrderHeaderId,
                                        //  isToTransfer = (int?)b.ac_OrderHeader2.FirstOrDefault().OrderHeaderId,
                                        b.InvoiceNO,
                                        b.Date,
                                        ShopName = b.inv_Shop.Name,
                                        b.ShopId,
                                        b.p_Person.Code,
                                        isCustomer = (int?)b.p_Person.p_Customer.AccountId,
                                        isSupplier = (int?)b.p_Person.p_Supplier.AccountId,
                                        ClientName = b.p_Person.Name,
                                        ClientFamily = b.p_Person.Family,
                                        b.EmployeeId,
                                        EmployeeName = b.p_Employee.p_Person.Name,
                                        EmployeeFamily = b.p_Employee.p_Person.Family,
                                        Amount = b.Amount * b.ac_CurrencyRate.Buy,
                                        b.Sell,
                                        b.ac_CurrencyRate.ac_Currency.Currency,
                                        b.CounterId,
                                        counterCode = (int?)b.ac_Counter.Code,
                                        b.Description,
                                        confirmerName = b.p_Employee.p_Person.Name,
                                        confirmerFamily = b.p_Employee.p_Person.Family,
                                        b.ConfirmerId,
                                        b.ClientId,
                                        //b.OrderTypeId,
                                        clientCode = b.p_Person.p_Customer.p_Person.Code,
                                        b.Table
                                    }).AsEnumerable()
                                    .Select(b => new
                                    {
                                        balance = -getBalance((b.Sell ? -1 : 1) * b.Amount),
                                        isOrder = true,
                                        counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
                                        id = b.OrderHeaderId,
                                        b.InvoiceNO,
                                        date = b.Date,
                                        // date = utility.GetstrDateCulture(b.Date),
                                        shopName = b.ShopName,
                                        amount = b.Amount,
                                        isSell = !b.Sell,
                                        PreOrder = b.ConfirmerId != null ? false : true,
                                        currency = b.Currency,
                                        employee = b.EmployeeName + " " + b.EmployeeFamily,
                                        client = b.ClientName + " " + b.ClientFamily,
                                        confirmer = b.confirmerName + " " + b.confirmerFamily,
                                        b.ConfirmerId,
                                        b.clientCode,
                                        b.Description,
                                        b.ClientId,
                                        inOrderOf = b.Description,// (
                                        //b.cashCount > 0 && b.chequeCount == 0 && !b.Sell && b.isToTransfer == null ? "cashReceive" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "cashReceiveChequeReceive" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.receiveVoucherCount > 0 && !b.Sell && b.isToTransfer == null ? "voucherReceive" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "chequeReceive" :

                                        //b.cashCount > 0 && b.chequeCount == 0 && b.Sell && b.isFromTransfer == null ? "cashPay" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "cashPayChequePay" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.sellVoucherCount > 0 && b.Sell && b.isFromTransfer == null ? "voucherSell" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "chequePay" :

                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId != null ? "sell " :
                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId == null ? "preOrder " :
                                        // b.orderDetailCount > 0 && b.Sell && b.isSupplier != null ? "returnFromBuy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isSupplier != null ? "buy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isCustomer != null ? "returnFromSell  " : "" +
                                        //(b.Description != null ? b.Description.Trim() : "")),
                                        detail = b.Table.Trim()// (b.cashCount > 0 || b.chequeCount > 0 ? "payment" :
                                        //(b.receiveVoucherCount > 0 || b.sellVoucherCount > 0) ? "voucher" :
                                        //b.orderDetailCount > 0 ? "order" : "")
                                    })
                                });
                            }
                            else
                            {
                                return Json(new
                                {
                                    sumDebtor,
                                    sumCreditor,
                                    sumNotPassed,
                                    balance,
                                    results = results
                                   .Select(b => new
                                   {
                                       b.OrderHeaderId,
                                       //   receiveVoucherCount = (int)b.ac_Voucher.Count,
                                       //    isFromTransfer = (int?)b.ac_OrderHeader1.FirstOrDefault().AccountId,
                                       //   isToTransfer = (int?)b.ac_OrderHeader2.FirstOrDefault().AccountId,
                                       b.InvoiceNO,
                                       b.Date,
                                       ShopName = b.inv_Shop.Name,
                                       b.ShopId,
                                       b.p_Person.Code,
                                       isCustomer = (int?)b.p_Person.p_Customer.AccountId,
                                       isSupplier = (int?)b.p_Person.p_Supplier.AccountId,
                                       ClientName = b.p_Person.Name,
                                       ClientFamily = b.p_Person.Family,
                                       b.EmployeeId,
                                       EmployeeName = b.p_Employee.p_Person.Name,
                                       EmployeeFamily = b.p_Employee.p_Person.Family,
                                       Amount = b.Amount * b.ac_CurrencyRate.Buy,
                                       b.Sell,
                                       b.ac_CurrencyRate.ac_Currency.Currency,
                                       b.CounterId,
                                       counterCode = (int?)b.ac_Counter.Code,
                                       b.Description,
                                       confirmerName = b.p_Employee.p_Person.Name,
                                       confirmerFamily = b.p_Employee.p_Person.Family,
                                       b.ConfirmerId,
                                       b.ClientId,
                                       //b.OrderTypeId,
                                       clientCode = b.p_Person.p_Customer.p_Person.Code,
                                       b.Table
                                   }).AsEnumerable()
                                    .Select(b => new
                                    {
                                        balance = -getBalance((b.Sell ? -1 : 1) * b.Amount),
                                        isOrder = true,
                                        counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
                                        id = b.OrderHeaderId,
                                        b.InvoiceNO,
                                        date = b.Date,
                                        // date = utility.GetstrDateCulture(b.Date),
                                        shopName = b.ShopName,
                                        amount = b.Amount,
                                        isSell = !b.Sell,
                                        PreOrder = b.ConfirmerId != null ? false : true,
                                        currency = b.Currency,
                                        employee = b.EmployeeName + " " + b.EmployeeFamily,
                                        client = b.ClientName + " " + b.ClientFamily,
                                        confirmer = b.confirmerName + " " + b.confirmerFamily,
                                        b.ConfirmerId,
                                        b.clientCode,
                                        b.Description,
                                        b.ClientId,
                                        inOrderOf = b.Description,// (
                                        //  b.cashCount > 0 && b.chequeCount == 0 && !b.Sell && b.isToTransfer == null ? "cashReceive" :
                                        //  b.cashCount > 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "cashReceiveChequeReceive" :
                                        //  b.cashCount == 0 && b.chequeCount == 0 && b.receiveVoucherCount > 0 && !b.Sell && b.isToTransfer == null ? "voucherReceive" :
                                        //  b.cashCount == 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "chequeReceive" :

                                        //  b.cashCount > 0 && b.chequeCount == 0 && b.Sell && b.isFromTransfer == null ? "cashPay" :
                                        //  b.cashCount > 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "cashPayChequePay" :
                                        //  b.cashCount == 0 && b.chequeCount == 0 && b.sellVoucherCount > 0 && b.Sell && b.isFromTransfer == null ? "voucherSell" :
                                        //  b.cashCount == 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "chequePay" :

                                        //  b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId != null ? "sell " :
                                        //  b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId == null ? "preOrder " :
                                        //  b.orderDetailCount > 0 && b.Sell && b.isSupplier != null ? "returnFromBuy " :
                                        //  b.orderDetailCount > 0 && !b.Sell && b.isSupplier != null ? "buy " :
                                        //  b.orderDetailCount > 0 && !b.Sell && b.isCustomer != null ? "returnFromSell  " : "" +
                                        //  (b.Description != null ? b.Description.Trim() : "")),
                                        detail = b.Table.Trim()// (b.cashCount > 0 || b.chequeCount > 0 ? "payment" :
                                        //(b.receiveVoucherCount > 0 || b.sellVoucherCount > 0) ? "voucher" :
                                        //b.orderDetailCount > 0 ? "order" : "")
                                    })
                                });
                            }
                        }
                    case "GetProfitList":
                        {
                            if (first)
                            {
                                return Json(new
                                {
                                    count = result.Count(),
                                    sumDebtor,
                                    sumCreditor,
                                    balance,
                                    results = results
                                    .Select(b => new
                                    {
                                        b.OrderHeaderId,
                                        //   receiveVoucherCount = (int)b.ac_Voucher.Count,
                                        //  isFromTransfer = (int?)b.ac_OrderHeader1.FirstOrDefault().OrderHeaderId,
                                        //   isToTransfer = (int?)b.ac_OrderHeader2.FirstOrDefault().OrderHeaderId,
                                        b.InvoiceNO,
                                        b.Date,
                                        ShopName = b.inv_Shop.Name,
                                        b.ShopId,
                                        b.p_Person.Code,
                                        isCustomer = (int?)b.p_Person.p_Customer.AccountId,
                                        isSupplier = (int?)b.p_Person.p_Supplier.AccountId,
                                        ClientName = b.p_Person.Name,
                                        ClientFamily = b.p_Person.Family,
                                        b.EmployeeId,
                                        EmployeeName = b.p_Employee.p_Person.Name,
                                        EmployeeFamily = b.p_Employee.p_Person.Family,
                                        Amount = (decimal?)b.Amount - b.ac_AccountDetail.Sum(s => s.ac_OrderDetail.ac_AccountDetail.ac_Account.inv_ItemDetail.BuyPrice * s.ac_OrderDetail.Quantity * currencyRate),
                                        b.Sell,
                                        b.ac_CurrencyRate.ac_Currency.Currency,
                                        b.CounterId,
                                        counterCode = (int?)b.ac_Counter.Code,
                                        b.Description,
                                        confirmerName = b.p_Employee.p_Person.Name,
                                        confirmerFamily = b.p_Employee.p_Person.Family,
                                        b.ConfirmerId,
                                        b.ClientId,
                                        clientCode = b.p_Person.p_Customer.p_Person.Code,
                                        //b.OrderTypeId,
                                        b.Table
                                    }).AsEnumerable()
                                    .Select(b => new
                                    {
                                        balance = -getBalance((b.Sell ? -1 : 1) * b.Amount),
                                        isOrder = true,
                                        counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
                                        id = b.OrderHeaderId,
                                        b.InvoiceNO,
                                        date = b.Date,
                                        // date = utility.GetstrDateCulture(b.Date),
                                        shopName = b.ShopName,
                                        amount = b.Amount,
                                        isSell = !b.Sell,
                                        PreOrder = b.ConfirmerId != null ? false : true,
                                        currency = b.Currency,
                                        employee = b.EmployeeName + " " + b.EmployeeFamily,
                                        client = b.ClientName + " " + b.ClientFamily,
                                        confirmer = b.confirmerName + " " + b.confirmerFamily,
                                        b.ConfirmerId,
                                        b.clientCode,
                                        b.Description,
                                        b.ClientId,
                                        inOrderOf = b.Description,// (
                                        //b.cashCount > 0 && b.chequeCount == 0 && !b.Sell && b.isToTransfer == null ? "cashReceive" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "cashReceiveChequeReceive" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.receiveVoucherCount > 0 && !b.Sell && b.isToTransfer == null ? "voucherReceive" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "chequeReceive" :

                                        //b.cashCount > 0 && b.chequeCount == 0 && b.Sell && b.isFromTransfer == null ? "cashPay" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "cashPayChequePay" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.sellVoucherCount > 0 && b.Sell && b.isFromTransfer == null ? "voucherSell" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "chequePay" :

                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId != null ? "sell " :
                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId == null ? "preOrder " :
                                        // b.orderDetailCount > 0 && b.Sell && b.isSupplier != null ? "returnFromBuy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isSupplier != null ? "buy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isCustomer != null ? "returnFromSell  " : "" +
                                        //(b.Description != null ? b.Description.Trim() : "")),
                                        detail = b.Table.Trim()// (b.cashCount > 0 || b.chequeCount > 0 ? "payment" :
                                        //(b.receiveVoucherCount > 0 || b.sellVoucherCount > 0) ? "voucher" :
                                        //b.orderDetailCount > 0 ? "order" : "")
                                    })
                                });
                            }
                            else
                            {
                                return Json(new
                                {
                                    sumDebtor,
                                    sumCreditor,
                                    balance,
                                    results = results
                                   .Select(b => new
                                   {
                                       b.OrderHeaderId,
                                       //  receiveVoucherCount = (int)b.ac_Voucher.Count,
                                       //  isFromTransfer = (int?)b.ac_OrderHeader1.FirstOrDefault().OrderHeaderId,
                                       //  isToTransfer = (int?)b.ac_OrderHeader2.FirstOrDefault().OrderHeaderId,
                                       b.InvoiceNO,
                                       b.Date,
                                       ShopName = b.inv_Shop.Name,
                                       b.ShopId,
                                       b.p_Person.Code,
                                       isCustomer = (int?)b.p_Person.p_Customer.AccountId,
                                       isSupplier = (int?)b.p_Person.p_Supplier.AccountId,
                                       ClientName = b.p_Person.Name,
                                       ClientFamily = b.p_Person.Family,
                                       b.EmployeeId,
                                       EmployeeName = b.p_Employee.p_Person.Name,
                                       EmployeeFamily = b.p_Employee.p_Person.Family,
                                       Amount = (decimal?)b.Amount - b.ac_AccountDetail.Sum(s => s.ac_OrderDetail.ac_AccountDetail.ac_Account.inv_ItemDetail.BuyPrice * s.ac_OrderDetail.Quantity * currencyRate),
                                       b.Sell,
                                       b.ac_CurrencyRate.ac_Currency.Currency,
                                       b.CounterId,
                                       counterCode = (int?)b.ac_Counter.Code,
                                       b.Description,
                                       confirmerName = b.p_Employee.p_Person.Name,
                                       confirmerFamily = b.p_Employee.p_Person.Family,
                                       b.ConfirmerId,
                                       b.ClientId,
                                       clientCode = b.p_Person.p_Customer.p_Person.Code,
                                       //b.OrderTypeId,
                                       b.Table
                                   }).AsEnumerable()
                                    .Select(b => new
                                    {
                                        balance = -getBalance((b.Sell ? -1 : 1) * b.Amount),
                                        isOrder = true,
                                        counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
                                        id = b.OrderHeaderId,
                                        b.InvoiceNO,
                                        date = b.Date,
                                        // date = utility.GetstrDateCulture(b.Date),
                                        shopName = b.ShopName,
                                        amount = b.Amount,
                                        isSell = !b.Sell,
                                        PreOrder = b.ConfirmerId != null ? false : true,
                                        currency = b.Currency,
                                        employee = b.EmployeeName + " " + b.EmployeeFamily,
                                        client = b.ClientName + " " + b.ClientFamily,
                                        confirmer = b.confirmerName + " " + b.confirmerFamily,
                                        b.ConfirmerId,
                                        b.clientCode,
                                        b.Description,
                                        b.ClientId,
                                        inOrderOf = b.Description,// (
                                        //b.cashCount > 0 && b.chequeCount == 0 && !b.Sell && b.isToTransfer == null ? "cashReceive" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "cashReceiveChequeReceive" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.receiveVoucherCount > 0 && !b.Sell && b.isToTransfer == null ? "voucherReceive" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "chequeReceive" :

                                        //b.cashCount > 0 && b.chequeCount == 0 && b.Sell && b.isFromTransfer == null ? "cashPay" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "cashPayChequePay" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.sellVoucherCount > 0 && b.Sell && b.isFromTransfer == null ? "voucherSell" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "chequePay" :

                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId != null ? "sell " :
                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId == null ? "preOrder " :
                                        //b.orderDetailCount > 0 && b.Sell && b.isSupplier != null ? "returnFromBuy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isSupplier != null ? "buy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isCustomer != null ? "returnFromSell  " : "" +
                                        //(b.Description != null ? b.Description.Trim() : "")),
                                        detail = b.Table.Trim()// (b.cashCount > 0 || b.chequeCount > 0 ? "payment" :
                                        //(b.receiveVoucherCount > 0 || b.sellVoucherCount > 0) ? "voucher" :
                                        //b.orderDetailCount > 0 ? "order" : "")
                                    })
                                });
                            }
                        }
                    //case "Accounting":
                    //    {
                    //        if (first)
                    //        {
                    //            return Json(new
                    //            {
                    //                count = result.Count(),
                    //                sumDebtor,
                    //                sumCreditor,
                    //                sumNotPassed,
                    //                balance,
                    //                results = results
                    //                .Select(b => new
                    //                {
                    //                    b.OrderHeaderId,
                    //                    receiveVoucherCount = (int)b.ac_Voucher.Count,
                    //                    categoryId = (int?)b.ac_ExpenseCategory.ExpenseCategoryId,
                    //                    expenseCategory = b.ac_ExpenseCategory.Expense,
                    //                    Month = (int?)b.ac_SocialSecurity.Month,
                    //                    isFromTransfer = (int?)b.ac_OrderHeader1.FirstOrDefault().OrderHeaderId,
                    //                    isToTransfer = (int?)b.ac_OrderHeader2.FirstOrDefault().OrderHeaderId,
                    //                    salaryFromDate = (DateTime?)b.ac_EmployeeSalary.FromDate,
                    //                    salaryToDate = (DateTime?)b.ac_EmployeeSalary.ToDate,
                    //                    fixSalary = (int?)b.ac_EmployeeSalary.FixSalary,
                    //                    commission = (int?)b.ac_EmployeeSalary.Commission,
                    //                    securityGetterFamily = b.p_Person1.Family,
                    //                    securityGetterName = b.p_Person1.Name,
                    //                    salaryGetterFamily = b.p_Person1.Family,
                    //                    salaryGetterName = b.p_Person1.Name,
                    //                    b.InvoiceNO,
                    //                    b.Date,
                    //                    ShopName = b.inv_Shop.Name,
                    //                    b.ShopId,
                    //                    b.p_Person1.Code,
                    //                    isCustomer = (int?)b.p_Person1.p_Customer.PersonId,
                    //                    isSupplier = (int?)b.p_Person1.p_Supplier.PersonId,
                    //                    ClientName = b.p_Person1.Name,
                    //                    ClientFamily = b.p_Person1.Family,
                    //                    b.EmployeeId,
                    //                    EmployeeName = b.p_Person.Name,
                    //                    EmployeeFamily = b.p_Person.Family,
                    //                    Amount = b.Amount * b.ac_CurrencyRate.Buy,
                    //                    b.Sell,
                    //                    b.ac_CurrencyRate.ac_Currency.Currency,
                    //                    b.CounterId,
                    //                    counterCode = (int?)b.ac_Counter.Code,
                    //                    b.Description,
                    //                    confirmerName = b.p_Employee.p_Person.Name,
                    //                    confirmerFamily = b.p_Employee.p_Person.Family,
                    //                    b.ConfirmerId,
                    //                    b.ClientId,
                    //                    clientCode = b.p_Person1.p_Customer.p_Person.Code
                    //                }).AsEnumerable()
                    //                .Select(b => new
                    //                {
                    //                    balance = getBalance((b.Sell ? -1 : 1) * b.Amount),
                    //                    isOrder = true,
                    //                    counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
                    //                    id = b.OrderHeaderId,
                    //                    b.InvoiceNO,
                    //                    date = b.Date,
                    //                    // date = utility.GetstrDateCulture(b.Date),
                    //                    shopName = b.ShopName,
                    //                    amount = b.Amount,
                    //                    isSell = !b.Sell,
                    //                    PreOrder = b.ConfirmerId != null ? false : true,
                    //                    currency = b.Currency,
                    //                    employee = b.EmployeeName + " " + b.EmployeeFamily,
                    //                    client = b.ClientName + " " + b.ClientFamily,
                    //                    confirmer = b.confirmerName + " " + b.confirmerFamily,
                    //                    b.ConfirmerId,
                    //                    b.clientCode,
                    //                    b.categoryId,
                    //                    b.Description,
                    //                    salaryFromDate = b.salaryFromDate != null ? utility.GetstrDateCultureSimple(b.salaryFromDate.Value) : "",
                    //                    salaryToDate = b.salaryToDate != null ? utility.GetstrDateCultureSimple(b.salaryToDate.Value) : "",
                    //                    b.fixSalary,
                    //                    commission = (int?)b.commission,
                    //                    b.ClientId,
                    //                    b.Month,
                    //                    inOrderOf = (
                    //                      b.cashCount > 0 && b.chequeCount == 0 && !b.Sell && b.isToTransfer == null ? "cashReceive" :
                    //                      b.cashCount > 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "cashReceiveChequeReceive" :
                    //                      b.cashCount == 0 && b.chequeCount == 0 && b.receiveVoucherCount > 0 && !b.Sell && b.isToTransfer == null ? "voucherReceive" :
                    //                      b.cashCount == 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "chequeReceive" :

                    //                      b.cashCount > 0 && b.chequeCount == 0 && b.Sell && b.isFromTransfer == null ? "cashPay" :
                    //                      b.cashCount > 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "cashPayChequePay" :
                    //                      b.cashCount == 0 && b.chequeCount == 0 && b.sellVoucherCount > 0 && b.Sell && b.isFromTransfer == null ? "voucherSell" :
                    //                      b.cashCount == 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "chequePay" :

                    //                      b.isFromTransfer != null && b.Sell ? "transferFrom " + b.counterCode :
                    //                      b.isToTransfer != null && !b.Sell ? "transferTo " + b.counterCode :
                    //                      b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId != null ? "sell " :
                    //                      b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId == null ? "preOrder " :
                    //                      b.orderDetailCount > 0 && b.Sell && b.isSupplier != null ? "returnFromBuy " :
                    //                      b.orderDetailCount > 0 && !b.Sell && b.isSupplier != null ? "buy " :
                    //                      b.orderDetailCount > 0 && !b.Sell && b.isCustomer != null ? "returnFromSell  " :
                    //                      b.expenseCategory != null ? "forExpense " + b.expenseCategory :
                    //                      b.salaryFromDate != null ? (" forSalary " + b.salaryGetterName + " " + b.salaryGetterFamily + " fromDate <span class='dateString' date='" + b.Date + "'></span>"
                    //                      + " toDate " + "<span class='dateString' date='" + b.salaryToDate + "'></span>" + " fixSalary " + b.fixSalary + " commission " + b.commission) :
                    //                      ("forSocialSecurity " + b.securityGetterName + " " + b.securityGetterFamily + " month " + b.Month)) + " " +
                    //                      (b.Description != null ? b.Description.Trim() : ""),
                    //                    detail = (
                    //                    b.cashCount > 0 || b.chequeCount > 0 ? "payment" :
                    //                    (b.receiveVoucherCount > 0 || b.sellVoucherCount > 0) ? "voucher" :
                    //                    b.isFromTransfer != null || b.isToTransfer != null ? "payment" :
                    //                    b.orderDetailCount > 0 ? "order" :
                    //                    b.salaryFromDate != null ? "salary" :
                    //                    b.Month != null ? "social" : "expense")
                    //                })
                    //            });
                    //        }
                    //        else
                    //        {
                    //            return Json(new
                    //            {
                    //                sumDebtor,
                    //                sumCreditor,
                    //                balance,
                    //                results = results
                    //              .Select(b => new
                    //              {
                    //                  b.OrderHeaderId,
                    //                  orderDetailCount = (int)b.ac_OrderDetail.Count,
                    //                  sellVoucherCount = (int)b.ac_Voucher1.Count,
                    //                  receiveVoucherCount = (int)b.ac_Voucher.Count,
                    //                  cashCount = (int)b.ac_Cash.Count,
                    //                  chequeCount = (int)b.ac_Cheque.Count,
                    //                  categoryId = (int?)b.ac_ExpenseCategory.ExpenseCategoryId,
                    //                  expenseCategory = b.ac_ExpenseCategory.Expense,
                    //                  Month = (int?)b.ac_SocialSecurity.Month,
                    //                  isFromTransfer = (int?)b.ac_OrderHeader1.FirstOrDefault().OrderHeaderId,
                    //                  isToTransfer = (int?)b.ac_OrderHeader2.FirstOrDefault().OrderHeaderId,
                    //                  salaryFromDate = (DateTime?)b.ac_EmployeeSalary.FromDate,
                    //                  salaryToDate = (DateTime?)b.ac_EmployeeSalary.ToDate,
                    //                  fixSalary = (int?)b.ac_EmployeeSalary.FixSalary,
                    //                  commission = (int?)b.ac_EmployeeSalary.Commission,
                    //                  securityGetterFamily = b.p_Person1.Family,
                    //                  securityGetterName = b.p_Person1.Name,
                    //                  salaryGetterFamily = b.p_Person1.Family,
                    //                  salaryGetterName = b.p_Person1.Name,
                    //                  b.InvoiceNO,
                    //                  b.Date,
                    //                  ShopName = b.inv_Shop.Name,
                    //                  b.ShopId,
                    //                  b.p_Person1.Code,
                    //                  isCustomer = (int?)b.p_Person1.p_Customer.PersonId,
                    //                  isSupplier = (int?)b.p_Person1.p_Supplier.PersonId,
                    //                  ClientName = b.p_Person1.Name,
                    //                  ClientFamily = b.p_Person1.Family,
                    //                  b.EmployeeId,
                    //                  EmployeeName = b.p_Person.Name,
                    //                  EmployeeFamily = b.p_Person.Family,
                    //                  Amount = b.Amount * b.ac_CurrencyRate.Buy,
                    //                  b.Sell,
                    //                  b.ac_CurrencyRate.ac_Currency.Currency,
                    //                  b.CounterId,
                    //                  counterCode = (int?)b.ac_Counter.Code,
                    //                  b.Description,
                    //                  confirmerName = b.p_Employee.p_Person.Name,
                    //                  confirmerFamily = b.p_Employee.p_Person.Family,
                    //                  b.ConfirmerId,
                    //                  b.ClientId,
                    //                  clientCode = b.p_Person1.p_Customer.p_Person.Code
                    //              }).AsEnumerable()
                    //                .Select(b => new
                    //                {
                    //                    balance = getBalance((b.Sell ? -1 : 1) * b.Amount),
                    //                    isOrder = true,
                    //                    counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
                    //                    id = b.OrderHeaderId,
                    //                    b.InvoiceNO,
                    //                    date = b.Date,
                    //                    // date = utility.GetstrDateCulture(b.Date),
                    //                    shopName = b.ShopName,
                    //                    amount = b.Amount,
                    //                    isSell = !b.Sell,
                    //                    PreOrder = b.ConfirmerId != null ? false : true,
                    //                    currency = b.Currency,
                    //                    employee = b.EmployeeName + " " + b.EmployeeFamily,
                    //                    client = b.ClientName + " " + b.ClientFamily,
                    //                    confirmer = b.confirmerName + " " + b.confirmerFamily,
                    //                    b.ConfirmerId,
                    //                    b.clientCode,
                    //                    b.categoryId,
                    //                    b.Description,
                    //                    salaryFromDate = b.salaryFromDate != null ? utility.GetstrDateCultureSimple(b.salaryFromDate.Value) : "",
                    //                    salaryToDate = b.salaryToDate != null ? utility.GetstrDateCultureSimple(b.salaryToDate.Value) : "",
                    //                    b.fixSalary,
                    //                    commission = (int?)b.commission,
                    //                    b.ClientId,
                    //                    b.Month,
                    //                    inOrderOf = (
                    //                      b.cashCount > 0 && b.chequeCount == 0 && !b.Sell && b.isToTransfer == null ? "cashReceive" :
                    //                      b.cashCount > 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "cashReceiveChequeReceive" :
                    //                      b.cashCount == 0 && b.chequeCount == 0 && b.receiveVoucherCount > 0 && !b.Sell && b.isToTransfer == null ? "voucherReceive" :
                    //                      b.cashCount == 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "chequeReceive" :

                    //                      b.cashCount > 0 && b.chequeCount == 0 && b.Sell && b.isFromTransfer == null ? "cashPay" :
                    //                      b.cashCount > 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "cashPayChequePay" :
                    //                      b.cashCount == 0 && b.chequeCount == 0 && b.sellVoucherCount > 0 && b.Sell && b.isFromTransfer == null ? "voucherSell" :
                    //                      b.cashCount == 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "chequePay" :

                    //                      b.isFromTransfer != null && b.Sell ? "transferFrom " + b.counterCode :
                    //                      b.isToTransfer != null && !b.Sell ? "transferTo " + b.counterCode :
                    //                      b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId != null ? "sell " :
                    //                      b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId == null ? "preOrder " :
                    //                      b.orderDetailCount > 0 && b.Sell && b.isSupplier != null ? "returnFromBuy " :
                    //                      b.orderDetailCount > 0 && !b.Sell && b.isSupplier != null ? "buy " :
                    //                      b.orderDetailCount > 0 && !b.Sell && b.isCustomer != null ? "returnFromSell  " :
                    //                      b.expenseCategory != null ? "forExpense " + b.expenseCategory :
                    //                      b.salaryFromDate != null ? (" forSalary " + b.salaryGetterName + " " + b.salaryGetterFamily + " fromDate <span class='dateString' date='" + b.Date + "'></span>"
                    //                      + " toDate " + "<span class='dateString' date='" + b.salaryToDate + "'></span>" + " fixSalary " + b.fixSalary + " commission " + b.commission) :
                    //                      ("forSocialSecurity " + b.securityGetterName + " " + b.securityGetterFamily + " month " + b.Month)) + " " +
                    //                      (b.Description != null ? b.Description.Trim() : ""),
                    //                    detail = (
                    //                    b.cashCount > 0 || b.chequeCount > 0 ? "payment" :
                    //                    (b.receiveVoucherCount > 0 || b.sellVoucherCount > 0) ? "voucher" :
                    //                    b.isFromTransfer != null || b.isToTransfer != null ? "payment" :
                    //                    b.orderDetailCount > 0 ? "order" :
                    //                    b.salaryFromDate != null ? "salary" :
                    //                    b.Month != null ? "social" : "expense")
                    //                })
                    //            });
                    //        }
                    //    }
                    //case "PrintItemList":
                    //    {

                    //        return Json(new
                    //        {
                    //            sumDebtor,
                    //            sumCreditor,
                    //            sumNotPassed,
                    //            balance,
                    //            results = result.OrderBy("it." + sort)
                    //          .Select(b => new
                    //          {
                    //              b.OrderHeaderId,
                    //              orderDetailCount = (int)b.ac_OrderDetail.Count,
                    //              sellVoucherCount = (int)b.ac_Voucher1.Count,
                    //              receiveVoucherCount = (int)b.ac_Voucher.Count,
                    //              cashCount = (int)b.ac_Cash.Count,
                    //              chequeCount = (int)b.ac_Cheque.Count,
                    //              categoryId = (int?)b.ac_ExpenseCategory.ExpenseCategoryId,
                    //              expenseCategory = b.ac_ExpenseCategory.Expense,
                    //              Month = (int?)b.ac_SocialSecurity.Month,
                    //              isFromTransfer = (int?)b.ac_OrderHeader1.FirstOrDefault().OrderHeaderId,
                    //              isToTransfer = (int?)b.ac_OrderHeader2.FirstOrDefault().OrderHeaderId,
                    //              salaryFromDate = (DateTime?)b.ac_EmployeeSalary.FromDate,
                    //              salaryToDate = (DateTime?)b.ac_EmployeeSalary.ToDate,
                    //              fixSalary = (int?)b.ac_EmployeeSalary.FixSalary,
                    //              commission = (int?)b.ac_EmployeeSalary.Commission,
                    //              securityGetterFamily = b.p_Person1.Family,
                    //              securityGetterName = b.p_Person1.Name,
                    //              salaryGetterFamily = b.p_Person1.Family,
                    //              salaryGetterName = b.p_Person1.Name,
                    //              b.InvoiceNO,
                    //              b.Date,
                    //              ShopName = b.inv_Shop.Name,
                    //              b.ShopId,
                    //              b.p_Person1.Code,
                    //              isCustomer = (int?)b.p_Person1.p_Customer.PersonId,
                    //              isSupplier = (int?)b.p_Person1.p_Supplier.PersonId,
                    //              ClientName = b.p_Person1.Name,
                    //              ClientFamily = b.p_Person1.Family,
                    //              b.EmployeeId,
                    //              EmployeeName = b.p_Person.Name,
                    //              EmployeeFamily = b.p_Person.Family,
                    //              Amount = b.Amount * b.ac_CurrencyRate.Buy,
                    //              b.Sell,
                    //              b.ac_CurrencyRate.ac_Currency.Currency,
                    //              b.CounterId,
                    //              counterCode = (int?)b.ac_Counter.Code,
                    //              b.Description,
                    //              confirmerName = b.p_Employee.p_Person.Name,
                    //              confirmerFamily = b.p_Employee.p_Person.Family,
                    //              b.ConfirmerId,
                    //              b.ClientId,
                    //              clientCode = b.p_Person1.p_Customer.p_Person.Code
                    //          }).AsEnumerable()
                    //            .Select(b => new
                    //            {
                    //                balance = getBalance((b.Sell ? -1 : 1) * b.Amount),
                    //                isOrder = true,
                    //                counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
                    //                id = b.OrderHeaderId,
                    //                b.InvoiceNO,
                    //                date = utility.GetstrDateCulture(b.Date),
                    //                shopName = b.ShopName,
                    //                amount = b.Amount,
                    //                isSell = !b.Sell,
                    //                PreOrder = b.ConfirmerId != null ? false : true,
                    //                currency = b.Currency,
                    //                employee = b.EmployeeName + " " + b.EmployeeFamily,
                    //                client = b.ClientName + " " + b.ClientFamily,
                    //                confirmer = b.confirmerName + " " + b.confirmerFamily,
                    //                b.ConfirmerId,
                    //                b.clientCode,
                    //                b.categoryId,
                    //                b.Description,
                    //                salaryFromDate = b.salaryFromDate != null ? utility.GetstrDateCultureSimple(b.salaryFromDate.Value) : "",
                    //                salaryToDate = b.salaryToDate != null ? utility.GetstrDateCultureSimple(b.salaryToDate.Value) : "",
                    //                b.fixSalary,
                    //                commission = (int?)b.commission,
                    //                b.ClientId,
                    //                b.Month,
                    //                inOrderOf = (
                    //                       b.cashCount > 0 && b.chequeCount == 0 && !b.Sell && b.isToTransfer == null ? "cashReceive" :
                    //                       b.cashCount > 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "cashReceiveChequeReceive" :
                    //                       b.cashCount == 0 && b.chequeCount == 0 && b.receiveVoucherCount > 0 && !b.Sell && b.isToTransfer == null ? "voucherReceive" :
                    //                       b.cashCount == 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "chequeReceive" :

                    //                       b.cashCount > 0 && b.chequeCount == 0 && b.Sell && b.isFromTransfer == null ? "cashPay" :
                    //                       b.cashCount > 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "cashPayChequePay" :
                    //                       b.cashCount == 0 && b.chequeCount == 0 && b.sellVoucherCount > 0 && b.Sell && b.isFromTransfer == null ? "voucherSell" :
                    //                       b.cashCount == 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "chequePay" :

                    //                       b.isFromTransfer != null && b.Sell ? "transferFrom " + b.counterCode :
                    //                       b.isToTransfer != null && !b.Sell ? "transferTo " + b.counterCode :
                    //                       b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId != null ? "sell " :
                    //                       b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId == null ? "preOrder " :
                    //                       b.orderDetailCount > 0 && b.Sell && b.isSupplier != null ? "returnFromBuy " :
                    //                       b.orderDetailCount > 0 && !b.Sell && b.isSupplier != null ? "buy " :
                    //                       b.orderDetailCount > 0 && !b.Sell && b.isCustomer != null ? "returnFromSell  " :
                    //                       b.expenseCategory != null ? "forExpense " + b.expenseCategory :
                    //                       b.salaryFromDate != null ? (" forSalary " + b.salaryGetterName + " " + b.salaryGetterFamily + " fromDate <span class='dateString' date='" + b.Date + "'></span>"
                    //                       + " toDate " + "<span class='dateString' date='" + b.salaryToDate + "'></span>" + " fixSalary " + b.fixSalary + " commission " + b.commission) :
                    //                       ("forSocialSecurity " + b.securityGetterName + " " + b.securityGetterFamily + " month " + b.Month)) + " " +
                    //                       (b.Description != null ? b.Description.Trim() : ""),
                    //                detail = (
                    //                b.cashCount > 0 || b.chequeCount > 0 ? "payment" :
                    //                (b.receiveVoucherCount > 0 || b.sellVoucherCount > 0) ? "voucher" :
                    //                b.isFromTransfer != null || b.isToTransfer != null ? "payment" :
                    //                b.orderDetailCount > 0 ? "order" :
                    //                b.salaryFromDate != null ? "salary" :
                    //                b.Month != null ? "social" : "expense")
                    //            })
                    //        });
                    //    }
                }
                return Json(new { isdone = false });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
            //finally { ((IDisposable)db).Dispose(); }
        }





        public ActionResult GetOnlineOrderStatement(int skip, int take, int currentPage, bool first, string sort, int? supplierid,
          bool? IsClient, string SupplierName, string code, string customerName, string EmployeeId, string EmployeeName, string Shop,
          string InvoiceId, string InvoiceDateStart, string InvoiceDateEnd, decimal? PriceFrom, decimal? PriceTo, bool? Order,
          int? shopid, int? counterId, bool? sell, bool? buy, bool? voucher, bool? payment, bool? transfer, bool? notTransfer, bool? expense, bool? passed,
           bool? notPassed, bool? confirmed, bool? notConfirmed, string selectData,
          bool? isDebtor, int? categoryId, string barcode)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }
            //shopid = null;
            //sort = "OrderHeaderId Asc";

            var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
            // db.ac_OrderHeader.Where(o=>o.p_Person.aspnet_Applications.ApplicationName)
            List<ObjectParameter> ol = new List<ObjectParameter>();
            string dynStr = string.Empty;
            bool isOr = false;
            dynStr += "it.ConfirmerId is NULL and it.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName and it.OrderHeaderId == it.ac_ReceiverDetails.OrderHeaderId";
            ol.Add(new ObjectParameter("appName", appName));
            selectData = "GetItemList";
            if (selectData == "GetItemList")
            {
                sell = true;
            }

            if (InvoiceDateStart.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.Date   >=   @InvoiceDateStart";
                ol.Add(new ObjectParameter("InvoiceDateStart", utility.GetDateCulture(InvoiceDateStart)));
            }

            if (InvoiceDateEnd.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.Date   <=   @InvoiceDateEnd";
                ol.Add(new ObjectParameter("InvoiceDateEnd", utility.GetDateCulture(InvoiceDateEnd)));
            }
            if (roles.Contains("canSeeAllSales"))
            {
                //if (dynStr.Length > 0)
                //    dynStr += " AND ";
                //dynStr += "it.ShopId in " + utility.getShopForUser(User.Identity.Name);
            }
            else
            {
                dynStr += " AND ";
                dynStr += "it.p_Employee.AccountId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name).AccountId);
            }

            //dynStr += " AND ";
            //dynStr += "it.ShopId in " + utility.getShopForUser(User.Identity.Name);
            //dynStr += " AND ";
            //dynStr += "it.counterId in " + utility.getCounterForUser(User.Identity.Name);

            //if (supplierid != null)
            //{
            //    if (dynStr.Length > 0)
            //        dynStr += " AND ";
            //    dynStr += "it.ClientId = @supplierId ";
            //    ol.Add(new ObjectParameter("supplierId", supplierid));
            //}
            if (sell != null && sell.Value)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ClientId = it.p_person.p_Customer.AccountId ";
            }
            if (buy != null && buy.Value)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ClientId = it.p_person.p_Supplier.AccountId ";
            }

            if (shopid == null && counterId == null)
            {
                if (roles.Contains("canSeeAllPaymentes") && shopid == null)
                {

                }
                else
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "(it.CounterId in " + utility.getCounterForUser(User.Identity.Name) + " or it.CounterId is null)"; ;
                }
            }
            else if (shopid != null && counterId == null)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "(it.CounterId in " + utility.getCounterForUser(User.Identity.Name) + " or it.CounterId is null)";
                dynStr += " AND ";
                dynStr += "(it.ShopId =@ShopId or it.ShopId is null)";
                ol.Add(new ObjectParameter("ShopId", shopid));
            }

            else if ((shopid != null && counterId != null) || (shopid == null && counterId != null))
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "(it.CounterId = @CounterId or it.CounterId is null) ";
                ol.Add(new ObjectParameter("CounterId", counterId));
            }


            if (!string.IsNullOrEmpty(SupplierName) && SupplierName.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "(it.p_person.Name LIKE '%' + @SupplierName + '%' or  it.p_person.Family LIKE '%' + @SupplierName + '%')";
                ol.Add(new ObjectParameter("SupplierName", SupplierName));

            }
            if (!string.IsNullOrEmpty(code) && code.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += " it.p_person.Code = @code";
                ol.Add(new ObjectParameter("code", code));
            }
            if (!string.IsNullOrEmpty(customerName) && customerName.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "(it.p_person.Family LIKE '%' + @customerName + '%' or it.p_person.Name LIKE '%' + @customerName + '%')";
                ol.Add(new ObjectParameter("customerName", customerName));
            }
            if (!string.IsNullOrEmpty(EmployeeId) && EmployeeId.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += " it.p_Employee.p_person.Code = @EmployeeId";
                ol.Add(new ObjectParameter("EmployeeId", EmployeeId));
            }
            if (!string.IsNullOrEmpty(EmployeeName) && EmployeeName.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "(it.p_Employee.p_person.Family LIKE '%' + @EmployeeName + '%' or it.p_Employee.p_person.Name LIKE '%' + @EmployeeName + '%')";
                ol.Add(new ObjectParameter("EmployeeName", EmployeeName));
            }

            if (!string.IsNullOrEmpty(InvoiceId) && InvoiceId.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";

                dynStr += "it.InvoiceNO = @InvoiceId";
                ol.Add(new ObjectParameter("InvoiceId", InvoiceId));
            }
            if (!string.IsNullOrEmpty(barcode) && barcode.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";

                dynStr += "(EXISTS(select g From it.ac_AccountDetail as g where(g.ac_Account.inv_ItemDetail.inv_Barcode.Barcode LIKE '%' + @Barcode + '%' or g.ac_Account.inv_ItemDetail.inv_Barcode.ItemCode LIKE '%' + @Barcode + '%' or g.ac_Account.inv_ItemDetail.inv_Barcode.Name LIKE '%' + @Barcode + '%')))";
                ol.Add(new ObjectParameter("Barcode", barcode));
            }
            //if (Broken != null)
            //{
            //    if (Broken.Value)
            //    {
            //        if (dynStr.Length > 0)
            //            dynStr += " And ";
            //        dynStr += "EXISTS(select g From it.ac_OrderDetail as g where g.Broken = true)";
            //    }
            //}
            if (categoryId != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "EXISTS(select o From it.ac_AccountDetail as o where (EXISTS(select g from o.ac_Account.inv_ItemDetail.inv_Barcode.inv_Category as g where( g.CategoryID in  " + utility.getHierarchyDataForGeneralCategory(categoryId) + "))))";
                ol.Add(new ObjectParameter("CategoryId", categoryId));
            }


            if (PriceFrom != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.Amount >= @PriceFrom ";
                ol.Add(new ObjectParameter("PriceFrom", PriceFrom.Value));
            }
            if (PriceTo != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.Amount <= @PriceTo ";
                ol.Add(new ObjectParameter("PriceTo", PriceTo.Value));
            }
            if (confirmed != null)
            {
                if (confirmed.Value)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.ConfirmerId is not null ";
                }
            }
            if (notConfirmed != null)
            {
                if (notConfirmed.Value)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.ConfirmerId is  null ";
                }
            }
            if (isDebtor != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                if (isDebtor.Value)
                    dynStr += " it.sell = true ";
                else
                    dynStr += " it.sell = false ";
            }

            //if (IsClient != null && IsClient.Value)
            //{
            //    if (Order != null)
            //    {
            //        if (dynStr.Length > 0)
            //            dynStr += " And ";
            //        dynStr += " it.Sell   =   @Order";
            //        ol.Add(new ObjectParameter("Order", Order.Value));
            //    }
            //}
            //if (IsClient != null && !IsClient.Value && supplierid == null)
            //{
            //    if (Order != null)
            //    {
            //        if (dynStr.Length > 0)
            //            dynStr += " And ";
            //        dynStr += " it.Sell   =   @Order";
            //        ol.Add(new ObjectParameter("Order", !Order.Value));
            //    }
            //}

            //if (passed != null)
            //{
            //    if (passed.Value && !notPassed.Value)
            //    {
            //        if (dynStr.Length > 0)
            //            dynStr += " And ";
            //        dynStr += "EXISTS(select g From it.ac_Cheque as g where it.OrderHeaderId = g.AccountId and g.passed = true)";
            //    }
            //}
            //if (notPassed != null)
            //{
            //    if (notPassed.Value && !passed.Value)
            //    {
            //        if (dynStr.Length > 0)
            //            dynStr += " And ";
            //        dynStr += "EXISTS(select g From it.ac_Cheque as g where it.OrderHeaderId = g.AccountId and g.passed = false)";
            //    }
            //}
            if (Order != null && Order.Value)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += @" (EXISTS(select g From it.ac_AccountDetail as g where(g.OrderHeaderId=it.OrderHeaderID)) ";
                isOr = true;
            }
            if (payment != null && payment.Value)
            {
                if (dynStr.Length > 0)
                {
                    if (isOr)
                    {
                        dynStr += @"|| EXISTS(select g From it.ac_Cash as g where(g.AccountId=it.OrderHeaderID)) || 
                                 EXISTS(select g From it.ac_Cheque as g where(g.AccountId=it.OrderHeaderID)) || 
                                 EXISTS(select g From it.ac_Voucher as g where(g.AccountId =it.OrderHeaderID)) ";
                    }
                    else
                    {
                        dynStr += " AND ";
                        dynStr += @"(EXISTS(select g From it.ac_Cash as g where(g.AccountId=it.OrderHeaderID)) || 
                                 EXISTS(select g From it.ac_Cheque as g where(g.AccountId=it.OrderHeaderID)) || 
                                 EXISTS(select g From it.ac_Voucher as g where(g.AccountId =it.OrderHeaderID))";
                    }
                }

                isOr = true;
            }
            if (transfer != null && transfer.Value)
            {
                if (dynStr.Length > 0)
                {
                    if (isOr)
                    {
                        dynStr += @"|| EXISTS(select g From it.ac_OrderHeader1 as g where(g.OrderHeaderId is not null)) || 
                                 EXISTS(select g From it.ac_OrderHeader2 as g where(g.OrderHeaderId is not null)) ";
                    }
                    else
                    {
                        dynStr += " AND ";
                        dynStr += @"(EXISTS(select g From it.ac_OrderHeader1 as g where(g.OrderHeaderId is not null)) || 
                                 EXISTS(select g From it.ac_OrderHeader2 as g where(g.OrderHeaderId is not null))";
                    }
                }

                isOr = true;
            }
            if (notTransfer != null && notTransfer.Value)
            {
                if (dynStr.Length > 0)
                {
                    //                if (isOr)
                    //                {
                    //                    dynStr += @"|| EXISTS(select g From it.ac_OrderHeader1 as g where(g.OrderHeaderId is not null)) || 
                    //                         EXISTS(select g From it.ac_OrderHeader2 as g where(g.OrderHeaderId is not null)) ";
                    //                }
                    //                else
                    //                {
                    dynStr += " AND ";
                    dynStr += @"!(EXISTS(select g From it.ac_OrderHeader1 as g where(g.OrderHeaderId is not null)) || 
                                 EXISTS(select g From it.ac_OrderHeader2 as g where(g.OrderHeaderId is not null))";
                    //}
                }

                isOr = true;
            }
            if (voucher != null && voucher.Value)
            {
                if (dynStr.Length > 0)
                {
                    if (isOr)
                    {
                        dynStr += @"|| EXISTS(select g From it.ac_Voucher as g where(g.AccountId =it.OrderHeaderID)) || 
                                 EXISTS(select g From it.ac_Voucher1 as g where(g.OrderHeaderId =it.OrderHeaderID)) ";
                    }
                    else
                    {
                        dynStr += " AND ";
                        dynStr += @"(EXISTS(select g From it.ac_Voucher as g where(g.AccountId =it.OrderHeaderID)) || 
                                 EXISTS(select g From it.ac_Voucher1 as g where(g.OrderHeaderId =it.OrderHeaderID))";
                    }
                }

                isOr = true;
            }
            if (expense != null && expense.Value)
            {
                if (dynStr.Length > 0)
                {
                    if (isOr)
                    {
                        dynStr += @"|| it.ac_EmployeeSalary.orderHeaderId =it.OrderHeaderID ||
                                  it.ac_SocialSecurity.orderHeaderId =it.OrderHeaderID || 
                                 it.ac_ExpenseCategory.ExpenseCategoryId is not null ";
                    }
                    else
                    {
                        dynStr += " AND ";
                        dynStr += @"( it.ac_EmployeeSalary.orderHeaderId =it.OrderHeaderID ||
                                  it.ac_SocialSecurity.orderHeaderId =it.OrderHeaderID || 
                                 it.ac_ExpenseCategory.ExpenseCategoryId is not null";
                    }
                }

                isOr = true;
            }
            if (isOr)
            {
                dynStr += ")";
            }
            //-------------------------------
            try
            {
                var result = db.ac_OrderHeader.Where(dynStr, ol.ToArray());
                var results = result.OrderBy("it." + sort).Skip(skip).Take(take);
                decimal? sumDebtor = 0, sumCreditor = 0;
                if (results.Count() > 0)
                {
                    // DateTime dt = results.FirstOrDefault().Date;
                    sumCreditor = result.Where(c => c.Sell).Sum(a => (decimal?)a.Amount * a.ac_CurrencyRate.Buy);
                    sumDebtor = result.Where(c => !c.Sell).Sum(a => (decimal?)a.Amount * a.ac_CurrencyRate.Buy);
                    balance = sumCreditor - sumDebtor;
                }
                switch (selectData)
                {
                    case "GetItemList":
                        {
                            if (first)
                            {
                                return Json(new
                                {
                                    count = result.Count(),
                                    sumDebtor,
                                    sumCreditor,
                                    balance,
                                    results = results
                                   .Select(b => new
                                   {
                                       b.OrderHeaderId,
                                       //  receiveVoucherCount = (int)b.ac_Voucher.Count,
                                       //  isFromTransfer = (int?)b.ac_OrderHeader1.FirstOrDefault().OrderHeaderId,
                                       //  isToTransfer = (int?)b.ac_OrderHeader2.FirstOrDefault().OrderHeaderId,
                                       b.InvoiceNO,
                                       b.Date,
                                       ShopName = b.inv_Shop.Name,
                                       b.ShopId,
                                       b.p_Person.Code,
                                       isCustomer = (int?)b.p_Person.p_Customer.AccountId,
                                       isSupplier = (int?)b.p_Person.p_Supplier.AccountId,
                                       ClientName = b.p_Person.Name,
                                       ClientFamily = b.p_Person.Family,
                                       b.EmployeeId,
                                       EmployeeName = b.p_Person.Name,
                                       EmployeeFamily = b.p_Person.Family,
                                       Amount = b.Amount * b.ac_CurrencyRate.Buy,
                                       b.Sell,
                                       b.ac_CurrencyRate.ac_Currency.Currency,
                                       b.CounterId,
                                       counterCode = (int?)b.ac_Counter.Code,
                                       b.Description,
                                       confirmerName = b.p_Employee.p_Person.Name,
                                       confirmerFamily = b.p_Employee.p_Person.Family,
                                       b.ConfirmerId,
                                       b.ClientId,
                                       //b.OrderTypeId,
                                       clientCode = b.p_Person.p_Customer.p_Person.Code,
                                       b.Table
                                   }).AsEnumerable()
                                    .Select(b => new
                                    {
                                        balance = getBalance((b.Sell ? -1 : 1) * b.Amount),
                                        isOrder = true,
                                        counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
                                        id = b.OrderHeaderId,
                                        b.InvoiceNO,
                                        date = b.Date,
                                        // date = utility.GetstrDateCulture(b.Date),
                                        shopName = b.ShopName,
                                        amount = b.Amount,
                                        isSell = !b.Sell,
                                        PreOrder = b.ConfirmerId != null ? false : true,
                                        currency = b.Currency,
                                        employee = b.EmployeeName + " " + b.EmployeeFamily,
                                        client = b.ClientName + " " + b.ClientFamily,
                                        confirmer = b.confirmerName + " " + b.confirmerFamily,
                                        b.ConfirmerId,
                                        b.clientCode,
                                        b.Description,
                                        b.ClientId,
                                        inOrderOf = b.Description,// (
                                        //b.cashCount > 0 && b.chequeCount == 0 && !b.Sell && b.isToTransfer == null ? "cashReceive" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "cashReceiveChequeReceive" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.receiveVoucherCount > 0 && !b.Sell && b.isToTransfer == null ? "voucherReceive" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "chequeReceive" :

                                        //b.cashCount > 0 && b.chequeCount == 0 && b.Sell && b.isFromTransfer == null ? "cashPay" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "cashPayChequePay" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.sellVoucherCount > 0 && b.Sell && b.isFromTransfer == null ? "voucherSell" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "chequePay" :

                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId != null ? "sell " :
                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId == null ? "preOrder " :
                                        // b.orderDetailCount > 0 && b.Sell && b.isSupplier != null ? "returnFromBuy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isSupplier != null ? "buy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isCustomer != null ? "returnFromSell  " : "" +
                                        //(b.Description != null ? b.Description.Trim() : "")),
                                        detail = b.Table.Trim()// (b.cashCount > 0 || b.chequeCount > 0 ? "payment" :
                                        //(b.receiveVoucherCount > 0 || b.sellVoucherCount > 0) ? "voucher" :
                                        //b.orderDetailCount > 0 ? "order" : "")
                                    })
                                });
                            }
                            else
                            {
                                return Json(new
                                {
                                    sumDebtor,
                                    sumCreditor,
                                    balance,
                                    results = results
                                   .Select(b => new
                                   {
                                       b.OrderHeaderId,
                                       //  receiveVoucherCount = (int)b.ac_Voucher.Count,
                                       //  isFromTransfer = (int?)b.ac_OrderHeader1.FirstOrDefault().OrderHeaderId,
                                       //  isToTransfer = (int?)b.ac_OrderHeader2.FirstOrDefault().OrderHeaderId,
                                       b.InvoiceNO,
                                       b.Date,
                                       ShopName = b.inv_Shop.Name,
                                       b.ShopId,
                                       b.p_Person.Code,
                                       isCustomer = (int?)b.p_Person.p_Customer.AccountId,
                                       isSupplier = (int?)b.p_Person.p_Supplier.AccountId,
                                       ClientName = b.p_Person.Name,
                                       ClientFamily = b.p_Person.Family,
                                       b.EmployeeId,
                                       EmployeeName = b.p_Person.Name,
                                       EmployeeFamily = b.p_Person.Family,
                                       Amount = b.Amount * b.ac_CurrencyRate.Buy,
                                       b.Sell,
                                       b.ac_CurrencyRate.ac_Currency.Currency,
                                       b.CounterId,
                                       counterCode = (int?)b.ac_Counter.Code,
                                       b.Description,
                                       confirmerName = b.p_Employee.p_Person.Name,
                                       confirmerFamily = b.p_Employee.p_Person.Family,
                                       b.ConfirmerId,
                                       b.ClientId,
                                       //b.OrderTypeId,
                                       clientCode = b.p_Person.p_Customer.p_Person.Code,
                                       b.Table
                                   }).AsEnumerable()
                                    .Select(b => new
                                    {
                                        balance = getBalance((b.Sell ? -1 : 1) * b.Amount),
                                        isOrder = true,
                                        counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
                                        id = b.OrderHeaderId,
                                        b.InvoiceNO,
                                        date = b.Date,
                                        // date = utility.GetstrDateCulture(b.Date),
                                        shopName = b.ShopName,
                                        amount = b.Amount,
                                        isSell = !b.Sell,
                                        PreOrder = b.ConfirmerId != null ? false : true,
                                        currency = b.Currency,
                                        employee = b.EmployeeName + " " + b.EmployeeFamily,
                                        client = b.ClientName + " " + b.ClientFamily,
                                        confirmer = b.confirmerName + " " + b.confirmerFamily,
                                        b.ConfirmerId,
                                        b.clientCode,
                                        b.Description,
                                        b.ClientId,
                                        inOrderOf = b.Description,// (
                                        //b.cashCount > 0 && b.chequeCount == 0 && !b.Sell && b.isToTransfer == null ? "cashReceive" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "cashReceiveChequeReceive" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.receiveVoucherCount > 0 && !b.Sell && b.isToTransfer == null ? "voucherReceive" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "chequeReceive" :

                                        //b.cashCount > 0 && b.chequeCount == 0 && b.Sell && b.isFromTransfer == null ? "cashPay" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "cashPayChequePay" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.sellVoucherCount > 0 && b.Sell && b.isFromTransfer == null ? "voucherSell" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "chequePay" :

                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId != null ? "sell " :
                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId == null ? "preOrder " :
                                        // b.orderDetailCount > 0 && b.Sell && b.isSupplier != null ? "returnFromBuy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isSupplier != null ? "buy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isCustomer != null ? "returnFromSell  " : "" +
                                        //(b.Description != null ? b.Description.Trim() : "")),
                                        detail = b.Table.Trim()// (b.cashCount > 0 || b.chequeCount > 0 ? "payment" :
                                        //(b.receiveVoucherCount > 0 || b.sellVoucherCount > 0) ? "voucher" :
                                        //b.orderDetailCount > 0 ? "order" : "")
                                    })
                                });
                            }
                        }
                    case "Accounting":
                        {
                            if (first)
                            {
                                return Json(new
                                {
                                    count = result.Count(),
                                    sumDebtor,
                                    sumCreditor,
                                    balance,
                                    results = results
                                    .Select(b => new
                                    {
                                        b.OrderHeaderId,
                                        //  receiveVoucherCount = (int)b.ac_Voucher.Count,
                                        //  isFromTransfer = (int?)b.ac_OrderHeader1.FirstOrDefault().OrderHeaderId,
                                        //  isToTransfer = (int?)b.ac_OrderHeader2.FirstOrDefault().OrderHeaderId,
                                        b.InvoiceNO,
                                        b.Date,
                                        ShopName = b.inv_Shop.Name,
                                        b.ShopId,
                                        b.p_Person.Code,
                                        isCustomer = (int?)b.p_Person.p_Customer.AccountId,
                                        isSupplier = (int?)b.p_Person.p_Supplier.AccountId,
                                        ClientName = b.p_Person.Name,
                                        ClientFamily = b.p_Person.Family,
                                        b.EmployeeId,
                                        EmployeeName = b.p_Person.Name,
                                        EmployeeFamily = b.p_Person.Family,
                                        Amount = b.Amount * b.ac_CurrencyRate.Buy,
                                        b.Sell,
                                        b.ac_CurrencyRate.ac_Currency.Currency,
                                        b.CounterId,
                                        counterCode = (int?)b.ac_Counter.Code,
                                        b.Description,
                                        confirmerName = b.p_Employee.p_Person.Name,
                                        confirmerFamily = b.p_Employee.p_Person.Family,
                                        b.ConfirmerId,
                                        b.ClientId,
                                        //b.OrderTypeId,
                                        clientCode = b.p_Person.p_Customer.p_Person.Code,
                                        b.Table
                                    }).AsEnumerable()
                                    .Select(b => new
                                    {
                                        balance = getBalance((b.Sell ? -1 : 1) * b.Amount),
                                        isOrder = true,
                                        counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
                                        id = b.OrderHeaderId,
                                        b.InvoiceNO,
                                        date = b.Date,
                                        // date = utility.GetstrDateCulture(b.Date),
                                        shopName = b.ShopName,
                                        amount = b.Amount,
                                        isSell = !b.Sell,
                                        PreOrder = b.ConfirmerId != null ? false : true,
                                        currency = b.Currency,
                                        employee = b.EmployeeName + " " + b.EmployeeFamily,
                                        client = b.ClientName + " " + b.ClientFamily,
                                        confirmer = b.confirmerName + " " + b.confirmerFamily,
                                        b.ConfirmerId,
                                        b.clientCode,
                                        b.Description,
                                        b.ClientId,
                                        inOrderOf = b.Description,// (
                                        //b.cashCount > 0 && b.chequeCount == 0 && !b.Sell && b.isToTransfer == null ? "cashReceive" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "cashReceiveChequeReceive" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.receiveVoucherCount > 0 && !b.Sell && b.isToTransfer == null ? "voucherReceive" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "chequeReceive" :

                                        //b.cashCount > 0 && b.chequeCount == 0 && b.Sell && b.isFromTransfer == null ? "cashPay" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "cashPayChequePay" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.sellVoucherCount > 0 && b.Sell && b.isFromTransfer == null ? "voucherSell" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "chequePay" :

                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId != null ? "sell " :
                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId == null ? "preOrder " :
                                        // b.orderDetailCount > 0 && b.Sell && b.isSupplier != null ? "returnFromBuy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isSupplier != null ? "buy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isCustomer != null ? "returnFromSell  " : "" +
                                        //(b.Description != null ? b.Description.Trim() : "")),
                                        detail = b.Table.Trim()// (b.cashCount > 0 || b.chequeCount > 0 ? "payment" :
                                        //(b.receiveVoucherCount > 0 || b.sellVoucherCount > 0) ? "voucher" :
                                        //b.orderDetailCount > 0 ? "order" : "")
                                    })
                                });
                            }
                            else
                            {
                                return Json(new
                                {
                                    sumDebtor,
                                    sumCreditor,
                                    balance,
                                    results = results
                                  .Select(b => new
                                  {
                                      b.OrderHeaderId,
                                      //  receiveVoucherCount = (int)b.ac_Voucher.Count,
                                      //  isFromTransfer = (int?)b.ac_OrderHeader1.FirstOrDefault().OrderHeaderId,
                                      //  isToTransfer = (int?)b.ac_OrderHeader2.FirstOrDefault().OrderHeaderId,
                                      b.InvoiceNO,
                                      b.Date,
                                      ShopName = b.inv_Shop.Name,
                                      b.ShopId,
                                      b.p_Person.Code,
                                      isCustomer = (int?)b.p_Person.p_Customer.AccountId,
                                      isSupplier = (int?)b.p_Person.p_Supplier.AccountId,
                                      ClientName = b.p_Person.Name,
                                      ClientFamily = b.p_Person.Family,
                                      b.EmployeeId,
                                      EmployeeName = b.p_Person.Name,
                                      EmployeeFamily = b.p_Person.Family,
                                      Amount = b.Amount * b.ac_CurrencyRate.Buy,
                                      b.Sell,
                                      b.ac_CurrencyRate.ac_Currency.Currency,
                                      b.CounterId,
                                      counterCode = (int?)b.ac_Counter.Code,
                                      b.Description,
                                      confirmerName = b.p_Employee.p_Person.Name,
                                      confirmerFamily = b.p_Employee.p_Person.Family,
                                      b.ConfirmerId,
                                      b.ClientId,
                                      //b.OrderTypeId,
                                      clientCode = b.p_Person.p_Customer.p_Person.Code,
                                      b.Table
                                  }).AsEnumerable()
                                    .Select(b => new
                                    {
                                        balance = getBalance((b.Sell ? -1 : 1) * b.Amount),
                                        isOrder = true,
                                        counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
                                        id = b.OrderHeaderId,
                                        b.InvoiceNO,
                                        date = b.Date,
                                        // date = utility.GetstrDateCulture(b.Date),
                                        shopName = b.ShopName,
                                        amount = b.Amount,
                                        isSell = !b.Sell,
                                        PreOrder = b.ConfirmerId != null ? false : true,
                                        currency = b.Currency,
                                        employee = b.EmployeeName + " " + b.EmployeeFamily,
                                        client = b.ClientName + " " + b.ClientFamily,
                                        confirmer = b.confirmerName + " " + b.confirmerFamily,
                                        b.ConfirmerId,
                                        b.clientCode,
                                        b.Description,
                                        b.ClientId,
                                        inOrderOf = b.Description,// (
                                        //b.cashCount > 0 && b.chequeCount == 0 && !b.Sell && b.isToTransfer == null ? "cashReceive" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "cashReceiveChequeReceive" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.receiveVoucherCount > 0 && !b.Sell && b.isToTransfer == null ? "voucherReceive" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && !b.Sell && b.isToTransfer == null ? "chequeReceive" :

                                        //b.cashCount > 0 && b.chequeCount == 0 && b.Sell && b.isFromTransfer == null ? "cashPay" :
                                        //b.cashCount > 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "cashPayChequePay" :
                                        //b.cashCount == 0 && b.chequeCount == 0 && b.sellVoucherCount > 0 && b.Sell && b.isFromTransfer == null ? "voucherSell" :
                                        //b.cashCount == 0 && b.chequeCount > 0 && b.Sell && b.isFromTransfer == null ? "chequePay" :

                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId != null ? "sell " :
                                        //b.orderDetailCount > 0 && b.Sell && b.isCustomer != null && b.ConfirmerId == null ? "preOrder " :
                                        // b.orderDetailCount > 0 && b.Sell && b.isSupplier != null ? "returnFromBuy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isSupplier != null ? "buy " :
                                        //b.orderDetailCount > 0 && !b.Sell && b.isCustomer != null ? "returnFromSell  " : "" +
                                        //(b.Description != null ? b.Description.Trim() : "")),
                                        detail = b.Table.Trim()// (b.cashCount > 0 || b.chequeCount > 0 ? "payment" :
                                        //(b.receiveVoucherCount > 0 || b.sellVoucherCount > 0) ? "voucher" :
                                        //b.orderDetailCount > 0 ? "order" : "")
                                    })
                                });
                            }
                        }
                }
                return Json(new { isdone = false });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
            //finally { ((IDisposable)db).Dispose(); }


        }

        //public ActionResult ConfirmFullAccount(int orderHeaderId)
        //{
        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }


        //        var orderHeader = db.ac_OrderHeader.Where(o => o.OrderHeaderId == orderHeaderId)
        //        .Select(r => new
        //        {
        //            r.OrderHeaderId,
        //            orderDetailCount = (int?)r.ac_OrderDetail.Count(),
        //            expenseCategory = (int?)r.ac_ExpenseCategory.ExpenseCategoryId,
        //            Month = (int?)r.ac_SocialSecurity.Month,
        //            salaryFromDate = (DateTime?)r.ac_EmployeeSalary.FromDate,
        //            isCustomer = (int?)r.p_Person1.p_Customer.PersonId,
        //            isSupplier = (int?)r.p_Person1.p_Supplier.PersonId,
        //            EmployeeId = (int?)r.EmployeeId,
        //            r.Sell,
        //            r.ConfirmerId,
        //            isFromTransfer = (int?)r.ac_OrderHeader1.FirstOrDefault().OrderHeaderId,
        //            isToTransfer = (int?)r.ac_OrderHeader2.FirstOrDefault().OrderHeaderId
        //        }).Single();
        //        //پیش فاکتور
        //        if (orderHeader.orderDetailCount.Value > 0 && orderHeader.Sell && orderHeader.isCustomer != null && orderHeader.ConfirmerId == null)
        //            return preOrderChange(orderHeader.OrderHeaderId);
        //        //بابت هزینه
        //        else if (orderHeader.expenseCategory != null)
        //            return ConfirmExpense(orderHeader.OrderHeaderId);
        //        //بابت حقوق
        //        else if (orderHeader.salaryFromDate != null)
        //            return ConfirmSalary(orderHeader.OrderHeaderId);
        //        //socialSecurity
        //        else if (orderHeader.Month != null)
        //            return ConfirmSocialSecurity(orderHeader.OrderHeaderId);
        //        //transfer
        //        if (orderHeader.isToTransfer != null && !orderHeader.Sell)
        //            return ConfirmTransferAmount(orderHeader.OrderHeaderId);

        //        return Json(new { isdone = false });
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isdone = false, msg = ex.Message });
        //    }
        //}

        public ActionResult getAccountType()
        {

            //return Json(db.ac_OrderType
            //    .Select(c => new
            //    {
            //        id = c.OrderTypeId,
            //        name = c.OrderType
            //    }));
            return null;
        }

        public ActionResult GetInvoiceList(int skip, int take, int currentPage, bool first, string sort, int? supplierid,
    bool IsClient, string SupplierName, string code, string EmployeeId, string EmployeeName, string Shop,
    string InvoiceId, string ProductId, string ProductName, string Barcode, string InvoiceDateStart,
    string InvoiceDateEnd, decimal? PriceFrom, decimal? PriceTo, bool? Order, bool? PreOrder, bool? Broken,
    int? CategoryId, int? shopid)
        {

            //db.ac_OrderHeader.Where(o=>o.p_Person.aspnet_Applications.ApplicationName)
            List<ObjectParameter> ol = new List<ObjectParameter>();
            string dynStr = string.Empty;
            dynStr += "it.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName and EXISTS(select g From it.ac_OrderDetail as g where(g.orderHeaderId is not null))";
            ol.Add(new ObjectParameter("appName", appName));
            if (supplierid != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ClientId = @supplierId ";
                ol.Add(new ObjectParameter("supplierId", supplierid));
            }
            if (IsClient)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ClientId = it.p_person1.p_Customer.accountId ";
            }
            if (!IsClient)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ClientId = it.p_person1.p_Supplier.accountId ";
            }
            if (shopid != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ShopId = @ShopId ";
                ol.Add(new ObjectParameter("ShopId", shopid));
            }
            else if (!utility.isInRole(db, User.Identity.Name, appName, "canSeeAllSales") && shopid == null)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ShopId in " + utility.getShopForUser(User.Identity.Name);
            }
            if (SupplierName.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "(it.p_person1.Name LIKE '%' + @SupplierName + '%' or  it.p_person1.Family LIKE '%' + @SupplierName + '%')";
                ol.Add(new ObjectParameter("SupplierName", SupplierName));

            }
            if (code.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += " it.p_person1.Code = @code";
                ol.Add(new ObjectParameter("code", code));
            }
            if (EmployeeId.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += " it.p_person.Code = @EmployeeId";
                ol.Add(new ObjectParameter("EmployeeId", EmployeeId));
            }
            if (EmployeeName.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "(it.p_person.Family LIKE '%' + @EmployeeName + '%' or it.p_person.Name LIKE '%' + @EmployeeName + '%')";
                ol.Add(new ObjectParameter("EmployeeName", EmployeeName));
            }

            if (Shop.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.inv_Shop.Name Like '%'+ @Shop +'%'";
                ol.Add(new ObjectParameter("Shop", Shop));
            }
            if (InvoiceId.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";

                dynStr += "it.InvoiceNO = @InvoiceId";
                ol.Add(new ObjectParameter("InvoiceId", InvoiceId));
            }
            if (ProductId.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";

                dynStr += "EXISTS(select g From it.ac_OrderDetail as g where(g.inv_ItemDetail.inv_Barcode.ItemCode like '%'+@ProductId+'%'))";
                ol.Add(new ObjectParameter("ProductId", ProductId));
            }
            if (ProductName.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";

                dynStr += "EXISTS(select g From it.ac_OrderDetail as g where(g.inv_ItemDetail.inv_Barcode.Name like '%'+@ProductName+'%'))";
                ol.Add(new ObjectParameter("ProductName", ProductName));
            }
            if (Barcode.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";

                dynStr += "EXISTS(select g From it.ac_OrderDetail as g where(g.inv_ItemDetail.inv_Barcode.Barcode =@Barcode))";
                ol.Add(new ObjectParameter("Barcode", Barcode));
            }
            if (InvoiceDateStart.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.Date   >=   @InvoiceDateStart";
                ol.Add(new ObjectParameter("InvoiceDateStart", utility.GetDateCulture(InvoiceDateStart)));
            }

            if (InvoiceDateEnd.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.Date   <=   @InvoiceDateEnd";
                ol.Add(new ObjectParameter("InvoiceDateEnd", utility.GetDateCulture(InvoiceDateEnd)));
            }


            if (PriceFrom != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "it.Amount >= @PriceFrom";
                ol.Add(new ObjectParameter("PriceFrom", PriceFrom.Value));
            }
            if (PriceTo != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "it.Amount <= @PriceTo";
                ol.Add(new ObjectParameter("PriceTo", PriceTo.Value));
            }
            if (IsClient)
            {
                if (Order != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Sell   =   @Order";
                    ol.Add(new ObjectParameter("Order", Order.Value));
                }
            }
            if (!IsClient)
            {
                if (Order != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.Sell   =   @Order";
                    ol.Add(new ObjectParameter("Order", !Order.Value));
                }
            }

            if (PreOrder != null)
            {
                if (PreOrder.Value)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.PreOrder = true";
                }
            }
            if (Broken != null)
            {
                if (Broken.Value)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(select g From it.ac_OrderDetail as g where g.Broken = true)";
                }
            }

            if (CategoryId != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "EXISTS(select o From it.ac_OrderDetail as o where (EXISTS(select g from o.inv_ItemDetail.inv_Barcode.inv_Category as g where( g.CategoryID in  " + utility.getHierarchyDataForGeneralCategory(CategoryId) + "))))";
                ol.Add(new ObjectParameter("CategoryId", CategoryId));
            }


            try
            {
                if (first)
                {
                    if (dynStr.Length > 0)
                    {
                        var result = db.ac_OrderHeader.Where(dynStr, ol.ToArray());
                        return Json(new SearchResult()
                        {
                            count = result.Count(),
                            results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                            .Select(b => new
                            {
                                b.OrderHeaderId,
                                b.InvoiceNO,
                                b.Date,
                                ShopName = b.inv_Shop.Name,
                                b.ShopId,
                                b.p_Person.Code,
                                ClientName = b.p_Person.Name,
                                ClientFamily = b.p_Person.Family,
                                b.EmployeeId,
                                EmployeeName = b.p_Person.Name,
                                EmployeeFamily = b.p_Person.Family,
                                b.Amount,
                                b.Sell,
                                b.ac_CurrencyRate.ac_Currency.Currency,
                                b.ConfirmerId
                            }).AsEnumerable()
                            .Select(b => new
                            {
                                b.OrderHeaderId,
                                b.InvoiceNO,
                                Date = utility.GetstrDateCulture(b.Date),
                                b.ShopName,
                                b.ShopId,
                                b.Code,
                                b.ClientName,
                                b.ClientFamily,
                                b.EmployeeId,
                                b.EmployeeName,
                                b.EmployeeFamily,
                                b.Amount,
                                b.Sell,
                                PreOrder = b.ConfirmerId != null ? false : true,
                                b.Currency
                            }).ToArray()
                        });
                    }
                    else
                    {
                        var result = db.ac_OrderHeader;
                        return Json(new SearchResult()
                        {
                            count = result.Count(),
                            results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                            .Select(b => new
                            {
                                b.OrderHeaderId,
                                b.InvoiceNO,
                                b.Date,
                                ShopName = b.inv_Shop.Name,
                                b.ShopId,
                                b.p_Person.Code,
                                ClientName = b.p_Person.Name,
                                ClientFamily = b.p_Person.Family,
                                b.EmployeeId,
                                EmployeeName = b.p_Person.Name,
                                EmployeeFamily = b.p_Person.Family,
                                b.Amount,
                                b.Sell,
                                b.ConfirmerId,
                                b.ac_CurrencyRate.ac_Currency.Currency
                            }).AsEnumerable()
                            .Select(b => new
                            {
                                b.OrderHeaderId,
                                b.InvoiceNO,
                                Date = utility.GetstrDateCulture(b.Date),
                                b.ShopName,
                                b.ShopId,
                                b.Code,
                                b.ClientName,
                                b.ClientFamily,
                                b.EmployeeId,
                                b.EmployeeName,
                                b.EmployeeFamily,
                                b.Amount,
                                b.Sell,
                                PreOrder = b.ConfirmerId != null ? false : true,
                                b.Currency
                            }).ToArray()
                        });

                    }
                }
                else
                {
                    if (dynStr.Length > 0)
                    {
                        return Json(new SearchResult()
                        {
                            results = db.ac_OrderHeader.Where(dynStr, ol.ToArray())
                               .OrderBy("it." + sort).Skip(skip).Take(take)
                         .Select(b => new
                         {
                             b.OrderHeaderId,
                             b.InvoiceNO,
                             b.Date,
                             ShopName = b.inv_Shop.Name,
                             b.ShopId,
                             b.p_Person.Code,
                             ClientName = b.p_Person.Name,
                             ClientFamily = b.p_Person.Family,
                             b.EmployeeId,
                             EmployeeName = b.p_Person.Name,
                             EmployeeFamily = b.p_Person.Family,
                             b.Amount,
                             b.Sell,
                             b.ConfirmerId,
                             b.ac_CurrencyRate.ac_Currency.Currency
                         }).AsEnumerable()
                         .Select(b => new
                         {
                             b.OrderHeaderId,
                             b.InvoiceNO,
                             Date = utility.GetstrDateCulture(b.Date),
                             b.ShopName,
                             b.ShopId,
                             b.Code,
                             b.ClientName,
                             b.ClientFamily,
                             b.EmployeeId,
                             b.EmployeeName,
                             b.EmployeeFamily,
                             b.Amount,
                             b.Sell,
                             PreOrder = b.ConfirmerId != null ? false : true,
                             b.Currency
                         }).ToArray()
                        });
                    }
                    else
                    {
                        return Json(new SearchResult()
                        {
                            results = db.ac_OrderHeader.OrderBy("it." + sort).Skip(skip).Take(take)
                        .Select(b => new
                        {
                            b.OrderHeaderId,
                            b.InvoiceNO,
                            b.Date,
                            ShopName = b.inv_Shop.Name,
                            b.ShopId,
                            b.p_Person.Code,
                            ClientName = b.p_Person.Name,
                            ClientFamily = b.p_Person.Family,
                            b.EmployeeId,
                            EmployeeName = b.p_Person.Name,
                            EmployeeFamily = b.p_Person.Family,
                            b.Amount,
                            b.Sell,
                            b.ConfirmerId,
                            b.ac_CurrencyRate.ac_Currency.Currency
                        }).AsEnumerable()
                        .Select(b => new
                        {
                            b.OrderHeaderId,
                            b.InvoiceNO,
                            Date = utility.GetstrDateCulture(b.Date),
                            b.ShopName,
                            b.ShopId,
                            b.Code,
                            b.ClientName,
                            b.ClientFamily,
                            b.EmployeeId,
                            b.EmployeeName,
                            b.EmployeeFamily,
                            b.Amount,
                            b.Sell,
                            PreOrder = b.ConfirmerId != null ? false : true,
                            b.Currency
                        }).ToArray()
                        });

                    }
                }
            }
            catch (Exception e)
            {
                return Json(new SearchResult());
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        //    public ActionResult GetInvoiceStatement(int skip, int take, int currentPage, bool first, string sort, int? supplierid,
        //bool IsClient, string SupplierName, string code, string EmployeeId, string EmployeeName, string Shop,
        //string InvoiceId, string ProductId, string ProductName, string Barcode, string InvoiceDateStart,
        //string InvoiceDateEnd, decimal? PriceFrom, decimal? PriceTo, bool? Order, bool? PreOrder, bool? Broken,
        //int? CategoryId, int? shopid, int? counterId, string BankName, string Serial,
        //string dueDateFrom, string dueDateTo,
        //bool? pay, bool? receive, bool? cash, bool? cheque, bool? voucher, bool? passed, bool? notpass, string selectData)
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }
        //        //shopid = null;
        //        //sort = "OrderHeaderId Asc";

        //        // db.ac_OrderHeader.Where(o=>o.p_Person.aspnet_Applications.ApplicationName)
        //        List<ObjectParameter> ol = new List<ObjectParameter>();
        //        string dynStr = string.Empty;
        //        dynStr += "it.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName";
        //        ol.Add(new ObjectParameter("appName", appName));
        //        dynStr += " AND ";
        //        dynStr += "it.EmployeeId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName).PersonId);
        //        dynStr += " AND ";
        //        dynStr += "it.ShopId in " + utility.getShopForUser(User.Identity.Name);
        //        if (supplierid != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += "it.ClientId = @supplierId ";
        //            ol.Add(new ObjectParameter("supplierId", supplierid));
        //        }
        //        if (IsClient && supplierid == null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += "it.ClientId = it.p_person1.p_Customer.PersonId ";
        //        }
        //        if (!IsClient)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += "it.ClientId = it.p_person1.p_Supplier.PersonId ";
        //        }
        //        if (shopid != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += "it.ShopId = @ShopId ";
        //            ol.Add(new ObjectParameter("ShopId", shopid));
        //        }
        //        else if (!utility.isInRole(db, User.Identity.Name, appName, "canSeeAllSales") && shopid == null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += "it.ShopId in " + utility.getShopForUser(User.Identity.Name);
        //        }
        //        if (SupplierName.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += "(it.p_person1.Name LIKE '%' + @SupplierName + '%' or  it.p_person1.Family LIKE '%' + @SupplierName + '%')";
        //            ol.Add(new ObjectParameter("SupplierName", SupplierName));

        //        }
        //        if (code.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += " it.p_person1.Code = @code";
        //            ol.Add(new ObjectParameter("code", code));
        //        }
        //        if (EmployeeId.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += " it.p_person.Code = @EmployeeId";
        //            ol.Add(new ObjectParameter("EmployeeId", EmployeeId));
        //        }
        //        if (EmployeeName.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " And ";
        //            dynStr += "(it.p_person.Family LIKE '%' + @EmployeeName + '%' or it.p_person.Name LIKE '%' + @EmployeeName + '%')";
        //            ol.Add(new ObjectParameter("EmployeeName", EmployeeName));
        //        }

        //        if (Shop.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += "it.inv_Shop.Name Like '%'+ @Shop +'%'";
        //            ol.Add(new ObjectParameter("Shop", Shop));
        //        }
        //        if (InvoiceId.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";

        //            dynStr += "it.InvoiceNO = @InvoiceId";
        //            ol.Add(new ObjectParameter("InvoiceId", InvoiceId));
        //        }
        //        if (ProductId.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";

        //            dynStr += "EXISTS(select g From it.ac_OrderDetail as g where(g.inv_ItemDetail.inv_Barcode.ItemCode like '%'+@ProductId+'%'))";
        //            ol.Add(new ObjectParameter("ProductId", ProductId));
        //        }
        //        if (ProductName.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";

        //            dynStr += "EXISTS(select g From it.ac_OrderDetail as g where(g.inv_ItemDetail.inv_Barcode.Name like '%'+@ProductName+'%'))";
        //            ol.Add(new ObjectParameter("ProductName", ProductName));
        //        }
        //        if (Barcode.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";

        //            dynStr += "EXISTS(select g From it.ac_OrderDetail as g where(g.inv_ItemDetail.inv_Barcode.Barcode =@Barcode))";
        //            ol.Add(new ObjectParameter("Barcode", Barcode));
        //        }
        //        if (InvoiceDateStart.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " And ";
        //            dynStr += " it.Date   >=   @InvoiceDateStart";
        //            ol.Add(new ObjectParameter("InvoiceDateStart", utility.GetDateCulture(InvoiceDateStart)));
        //        }

        //        if (InvoiceDateEnd.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " And ";
        //            dynStr += " it.Date   <=   @InvoiceDateEnd";
        //            ol.Add(new ObjectParameter("InvoiceDateEnd", utility.GetDateCulture(InvoiceDateEnd)));
        //        }


        //        if (PriceFrom != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " And ";
        //            dynStr += "it.Amount >= @PriceFrom";
        //            ol.Add(new ObjectParameter("PriceFrom", PriceFrom.Value));
        //        }
        //        if (PriceTo != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " And ";
        //            dynStr += "it.Amount <= @PriceTo";
        //            ol.Add(new ObjectParameter("PriceTo", PriceTo.Value));
        //        }
        //        if (IsClient)
        //        {
        //            if (Order != null)
        //            {
        //                if (dynStr.Length > 0)
        //                    dynStr += " And ";
        //                dynStr += " it.Sell   =   @Order";
        //                ol.Add(new ObjectParameter("Order", Order.Value));
        //            }
        //        }
        //        if (!IsClient && supplierid == null)
        //        {
        //            if (Order != null)
        //            {
        //                if (dynStr.Length > 0)
        //                    dynStr += " And ";
        //                dynStr += " it.Sell   =   @Order";
        //                ol.Add(new ObjectParameter("Order", !Order.Value));
        //            }
        //        }

        //        if (PreOrder != null)
        //        {
        //            if (PreOrder.Value)
        //            {
        //                if (dynStr.Length > 0)
        //                    dynStr += " And ";
        //                dynStr += "it.PreOrder = true";
        //            }
        //        }
        //        if (Broken != null)
        //        {
        //            if (Broken.Value)
        //            {
        //                if (dynStr.Length > 0)
        //                    dynStr += " And ";
        //                dynStr += "EXISTS(select g From it.ac_OrderDetail as g where g.Broken = true)";
        //            }
        //        }

        //        if (CategoryId != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " And ";
        //            dynStr += "EXISTS(select o From it.ac_OrderDetail as o where (EXISTS(select g from o.inv_ItemDetail.inv_Barcode.inv_Category as g where( g.CategoryID in  " + utility.getHierarchyDataForGeneralCategory(CategoryId) + "))))";
        //            ol.Add(new ObjectParameter("CategoryId", CategoryId));
        //        }
        //        if (!string.IsNullOrEmpty(BankName))
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";

        //            dynStr += "EXISTS(select g From it.ac_Cheque as g where g.Bank = @BankName)";
        //            ol.Add(new ObjectParameter("BankName", BankName));
        //        }
        //        if (Serial.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";

        //            dynStr += "EXISTS(select g From it.ac_Cheque as g where g.Serial = @Serial)";
        //            ol.Add(new ObjectParameter("Serial", Serial));
        //        }
        //        //-------------------------------
        //        //List<ObjectParameter> ol = new List<ObjectParameter>();
        //        //string adynStr = string.Empty;
        //        //adynStr += "it.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName";
        //        //aol.Add(new ObjectParameter("appName", appName));

        //        if (shopid == null && counterId == null)
        //        {
        //            if (utility.isInRole(db, User.Identity.Name, appName, "canSeeAllPaymentes") && shopid == null)
        //            {

        //            }
        //            else
        //            {
        //                string cid = "{";
        //                foreach (var item in db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName).p_Employee.ac_Counter1.Select(c => c.CounterId))
        //                {
        //                    cid += item.ToString() + ",";
        //                }

        //                cid = cid.Remove(cid.Length - 1, 1);
        //                cid += "}";
        //                if (dynStr.Length > 0)
        //                    dynStr += " AND ";
        //                dynStr += "it.CounterId in " + cid;
        //            }
        //        }

        //        else if (shopid != null && counterId == null)
        //        {
        //            string cid = "{";
        //            foreach (var item in db.ac_Counter.Where(c => c.ShopId == shopid).Select(s => s.CounterId))
        //            {
        //                cid += item.ToString() + ",";
        //            }

        //            cid = cid.Remove(cid.Length - 1, 1);
        //            cid += "}";


        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += " (it.CounterId in " + cid + " or it.counterid is null)";
        //        }
        //        else if (shopid != null && counterId != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " AND ";
        //            dynStr += "(it.CounterId = @CounterId or it.CounterId is null)";
        //            ol.Add(new ObjectParameter("CounterId", counterId));
        //        }

        //        if (dueDateFrom.Length > 0 || dueDateTo.Length > 0)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " And ";
        //            if (dueDateFrom.Length > 0 && dueDateTo.Length > 0)
        //            {
        //                dynStr += "EXISTS(select g From it.ac_Cheque as g where g.DueDate >= @PaymentDateStart and g.DueDate <= @PaymentDateEnd)";
        //                ol.Add(new ObjectParameter("PaymentDateStart", utility.GetDateCulture(dueDateFrom)));
        //                ol.Add(new ObjectParameter("PaymentDateEnd", utility.GetDateCulture(dueDateTo)));
        //            }
        //            else if (dueDateFrom.Length > 0)
        //            {
        //                dynStr += "EXISTS(select g From it.ac_Cheque as g where g.DueDate >= @PaymentDateStart)";
        //                ol.Add(new ObjectParameter("PaymentDateStart", utility.GetDateCulture(dueDateFrom)));
        //            }
        //            else if (dueDateTo.Length > 0)
        //            {
        //                dynStr += "EXISTS(select g From it.ac_Cheque as g where g.DueDate <= @PaymentDateEnd)";
        //                ol.Add(new ObjectParameter("PaymentDateEnd", utility.GetDateCulture(dueDateTo)));
        //            }
        //        }

        //        if (PriceFrom != null || PriceTo != null)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " And ";
        //            if (PriceFrom != null && PriceTo != null)
        //            {
        //                dynStr += "(EXISTS(select g From it.ac_Cheque as g where g.Amount >= @PriceFrom  and g.Amount <= @PriceTo)  or EXISTS(select c From it.ac_Cash as c where c.Amount >= @PriceFrom and c.Amount <= @PriceTo ))";
        //                ol.Add(new ObjectParameter("PriceFrom", PriceFrom));
        //                ol.Add(new ObjectParameter("PriceTo", PriceTo));
        //            }
        //            else if (PriceFrom != null)
        //            {
        //                dynStr += "(EXISTS(select g From it.ac_Cheque as g where g.Amount >= @PriceFrom)  or EXISTS(select c From it.ac_Cash as c where c.Amount >= @PriceFrom ))";
        //                ol.Add(new ObjectParameter("PriceFrom", PriceFrom));
        //            }
        //            else if (PriceTo != null)
        //            {
        //                dynStr += "(EXISTS(select g From it.ac_Cheque as g where g.Amount <= @PriceTo )  or EXISTS( select c From it.ac_Cash as c where c.Amount <= @PriceTo ))";
        //                ol.Add(new ObjectParameter("PriceTo", PriceTo));
        //            }
        //        }

        //        if (pay != false && receive == false)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " And ";
        //            dynStr += " EXISTS(select g From it.ac_OrderDetail as g where(g.orderHeaderId is not null))";
        //        }
        //        if (pay == false && receive != false)
        //        {
        //            if (dynStr.Length > 0)
        //                dynStr += " And ";
        //            dynStr += "and (EXISTS(select g From it.ac_Cash as g where(g.CashId is not null)) or EXISTS(select g From it.ac_Cheque as g where(g.ChequeId is not null)) ) ";
        //        }
        //        //if (receive != null)
        //        //{
        //        //    if (receive.Value && !pay.Value)
        //        //    {
        //        //        if (dynStr.Length > 0)
        //        //            dynStr += " And ";
        //        //        dynStr += " it.sell   !=   @receive";
        //        //        ol.Add(new ObjectParameter("receive", !receive));
        //        //    }
        //        //}
        //        if (cash != null)
        //        {
        //            if (cash.Value)
        //            {
        //                if (dynStr.Length > 0)
        //                    dynStr += " And ";
        //                dynStr += "EXISTS(select g From it.ac_Cash as g where it.OrderHeaderId = g.AccountId)";
        //            }
        //        }
        //        if (cheque != null)
        //        {
        //            if (cheque.Value)
        //            {
        //                if (dynStr.Length > 0)
        //                    dynStr += " And ";
        //                dynStr += "EXISTS(select g From it.ac_Cheque as g where it.OrderHeaderId = g.AccountId)";
        //            }
        //        }
        //        if (voucher != null)
        //        {
        //            if (voucher.Value)
        //            {
        //                if (dynStr.Length > 0)
        //                    dynStr += " And ";
        //                dynStr += "EXISTS(select g From it.ac_Voucher as g where it.OrderHeaderId = g.AccountId)";
        //            }
        //        }
        //        if (passed != null)
        //        {
        //            if (passed.Value && !notpass.Value)
        //            {
        //                if (dynStr.Length > 0)
        //                    dynStr += " And ";
        //                dynStr += "EXISTS(select g From it.ac_Cheque as g where it.OrderHeaderId = g.AccountId and g.passed = true)";
        //            }
        //        }
        //        if (notpass != null)
        //        {
        //            if (notpass.Value && !passed.Value)
        //            {
        //                if (dynStr.Length > 0)
        //                    dynStr += " And ";
        //                dynStr += "EXISTS(select g From it.ac_Cheque as g where it.AccountId = g.AccountId and g.passed = false)";
        //            }
        //        }

        //        //-------------------------------
        //        try
        //        {
        //            var result = db.ac_OrderHeader.Where(dynStr, ol.ToArray());
        //            var results = result.OrderBy("it." + sort).Skip(skip).Take(take);
        //            DateTime dt = results.FirstOrDefault().Date;
        //            decimal? sumDebtor = result.Where(c => c.Sell && c.Date <= dt).Sum(a => (decimal?)a.Amount * a.ac_CurrencyRate.Buy);
        //            decimal? sumCreditor = result.Where(c => !c.Sell && c.Date <= dt).Sum(a => (decimal?)a.Amount * a.ac_CurrencyRate.Buy);
        //            balance = sumDebtor - sumCreditor;
        //            switch (selectData)
        //            {

        //                case "GetItemList":
        //                    {

        //                        if (first)
        //                        {
        //                            return Json(new
        //                            {
        //                                count = result.Count(),
        //                                sumDebtor = sumDebtor,
        //                                sumCreditor = sumCreditor,
        //                                results = results.Select(b => new
        //                                {
        //                                    b.OrderHeaderId,
        //                                    orderDetailCount = (int?)b.ac_OrderDetail.Count(),
        //                                    expenseCategory = b.ac_ExpenseCategory.Expense,
        //                                    Month = (int?)b.ac_SocialSecurity.Month,
        //                                    securityGetterFamily = b.p_Employee.p_Person.Family,
        //                                    securityGetterName = b.p_Employee.p_Person.Name,
        //                                    salaryGetterFamily = b.p_Employee.p_Person.Family,
        //                                    salaryGetterName = b.p_Employee.p_Person.Name,
        //                                    b.InvoiceNO,
        //                                    b.Date,
        //                                    ShopName = b.inv_Shop.Name,
        //                                    b.ShopId,
        //                                    b.p_Person1.Code,
        //                                    ClientName = b.p_Person1.Name,
        //                                    ClientFamily = b.p_Person1.Family,
        //                                    b.EmployeeId,
        //                                    EmployeeName = b.p_Person.Name,
        //                                    EmployeeFamily = b.p_Person.Family,
        //                                    Amount = b.Amount * b.ac_CurrencyRate.Buy,
        //                                    b.Sell,
        //                                    b.ConfirmerId,
        //                                    b.ac_CurrencyRate.ac_Currency.Currency,
        //                                    b.CounterId,
        //                                    counterCode = (int?)b.ac_Counter.Code,
        //                                    b.Description
        //                                }).AsEnumerable()
        //                                  .Select((b, index) => new
        //                                  {
        //                                      balance = getBalance((b.Sell ? -1 : 1) * b.Amount),
        //                                      isOrder = true,
        //                                      counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
        //                                      id = b.OrderHeaderId,
        //                                      b.InvoiceNO,
        //                                      date = utility.GetstrDateCulture(b.Date),
        //                                      shopName = b.ShopName,
        //                                      amount = b.Amount,
        //                                      isSell = b.Sell,
        //                                      PreOrder = b.ConfirmerId != null ? false : true,
        //                                      currency = b.Currency,
        //                                      employee = EmployeeName = b.EmployeeName + " " + b.EmployeeFamily,
        //                                      client = b.ClientName + " " + b.ClientFamily,
        //                                      inOrderOf = (
        //                                        b.counterCode != null && !b.Sell ? "واریز وجه" :
        //                                        b.counterCode != null && b.Sell ? "پرداخت وجه" :
        //                                        b.orderDetailCount > 0 && b.Sell && IsClient && b.ConfirmerId != null ? "فروش " :
        //                                        b.orderDetailCount > 0 && b.Sell && IsClient && b.ConfirmerId == null ? "پیش فاکتور " :
        //                                        b.orderDetailCount > 0 && b.Sell && !IsClient ? "مرجوعی " :
        //                                        b.orderDetailCount > 0 && !b.Sell && !IsClient ? "خرید " :
        //                                        b.orderDetailCount > 0 && !b.Sell && IsClient ? "مرجوعی  " :
        //                                        b.expenseCategory != null && b.Sell ? "بابت هزینه " + b.expenseCategory :
        //                                        b.salaryGetterFamily != null && !b.Sell ? "بابت حقوق  " + b.salaryGetterName + " " + b.salaryGetterFamily :
        //                                        "بابت بیمه " + b.securityGetterName + " " + b.securityGetterFamily) + " " +
        //                                        (b.Description != null ? b.Description : "")
        //                                  })
        //                            });
        //                        }
        //                        else
        //                        {
        //                            return Json(new
        //                            {
        //                                sumDebtor = sumDebtor,
        //                                sumCreditor = sumCreditor,
        //                                balance = balance,
        //                                results = results
        //                               .Select(b => new
        //                               {
        //                                   b.OrderHeaderId,
        //                                   orderDetailCount = (int?)b.ac_OrderDetail.Count(),
        //                                   expenseCategory = b.ac_ExpenseCategory.Expense,
        //                                   Month = (int?)b.ac_SocialSecurity.Month,
        //                                   securityGetterFamily = b.p_Employee.p_Person.Family,
        //                                   securityGetterName = b.p_Employee.p_Person.Name,
        //                                   salaryGetterFamily = b.p_Employee.p_Person.Family,
        //                                   salaryGetterName = b.p_Employee.p_Person.Name,
        //                                   b.InvoiceNO,
        //                                   b.Date,
        //                                   ShopName = b.inv_Shop.Name,
        //                                   b.ShopId,
        //                                   b.p_Person1.Code,
        //                                   ClientName = b.p_Person1.Name,
        //                                   ClientFamily = b.p_Person1.Family,
        //                                   b.EmployeeId,
        //                                   EmployeeName = b.p_Person.Name,
        //                                   EmployeeFamily = b.p_Person.Family,
        //                                   Amount = b.Amount * b.ac_CurrencyRate.Buy,
        //                                   b.Sell,
        //                                   b.ConfirmerId,
        //                                   b.ac_CurrencyRate.ac_Currency.Currency,
        //                                   b.CounterId,
        //                                   counterCode = (int?)b.ac_Counter.Code
        //                               }).AsEnumerable()
        //                                .Select(b => new
        //                                {
        //                                    balance = getBalance((b.Sell ? -1 : 1) * b.Amount),
        //                                    isOrder = true,
        //                                    counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
        //                                    id = b.OrderHeaderId,
        //                                    b.InvoiceNO,
        //                                    date = utility.GetstrDateCulture(b.Date),
        //                                    shopName = b.ShopName,
        //                                    //  b.EmployeeFamily,
        //                                    amount = b.Amount,
        //                                    isSell = b.Sell,
        //                                    PreOrder = b.ConfirmerId != null ? false : true,
        //                                    currency = b.Currency,
        //                                    employee = EmployeeName = b.EmployeeName + " " + b.EmployeeFamily,
        //                                    client = b.ClientName + " " + b.ClientFamily,
        //                                    inOrderOf = (
        //                                       b.counterCode != null && !b.Sell ? "واریز وجه" :
        //                                       b.counterCode != null && b.Sell ? "پرداخت وجه" :
        //                                       b.orderDetailCount > 0 && b.Sell && IsClient && b.ConfirmerId != null ? "فروش " :
        //                                      b.orderDetailCount > 0 && b.Sell && IsClient && b.ConfirmerId == null ? "پیش فاکتور " :
        //                                       b.orderDetailCount > 0 && b.Sell && !IsClient ? "مرجوعی " :
        //                                       b.orderDetailCount > 0 && !b.Sell && !IsClient ? "خرید " :
        //                                       b.orderDetailCount > 0 && !b.Sell && IsClient ? "مرجوعی  " :
        //                                       b.expenseCategory != null && b.Sell ? "بابت هزینه " + b.expenseCategory :
        //                                       b.salaryGetterFamily != null && !b.Sell ? "بابت حقوق  " + b.salaryGetterName + " " + b.salaryGetterFamily :
        //                                       "بابت بیمه " + b.securityGetterName + " " + b.securityGetterFamily)
        //                                })
        //                            });

        //                        }
        //                    }
        //                case "PrintItemList":
        //                    {

        //                        return Json(new
        //                        {
        //                            sumDebtor = sumDebtor,
        //                            sumCreditor = sumCreditor,
        //                            results = result.OrderBy("it." + sort)
        //                            .Select(b => new
        //                            {
        //                                b.OrderHeaderId,
        //                                orderDetailCount = (int?)b.ac_OrderDetail.Count(),
        //                                expenseCategory = b.ac_ExpenseCategory.Expense,
        //                                Month = (int?)b.ac_SocialSecurity.Month,
        //                                securityGetterFamily = b.p_Employee.p_Person.Family,
        //                                securityGetterName = b.p_Employee.p_Person.Name,
        //                                salaryGetterFamily = b.p_Employee.p_Person.Family,
        //                                salaryGetterName = b.p_Employee.p_Person.Name,
        //                                b.InvoiceNO,
        //                                b.Date,
        //                                ShopName = b.inv_Shop.Name,
        //                                b.ShopId,
        //                                b.p_Person1.Code,
        //                                ClientName = b.p_Person1.Name,
        //                                ClientFamily = b.p_Person1.Family,
        //                                b.EmployeeId,
        //                                EmployeeName = b.p_Person.Name,
        //                                EmployeeFamily = b.p_Person.Family,
        //                                Amount = b.Amount * b.ac_CurrencyRate.Buy,
        //                                b.Sell,
        //                                b.ac_CurrencyRate.ac_Currency.Currency,
        //                                b.CounterId,
        //                                counterCode = (int?)b.ac_Counter.Code,
        //                                b.Description,
        //                                b.ConfirmerId
        //                            }).AsEnumerable()
        //                            .Select(b => new
        //                            {
        //                                balance = getBalance((b.Sell ? -1 : 1) * b.Amount),
        //                                isOrder = true,
        //                                counterCode = b.counterCode == null ? "" : b.counterCode.ToString(),
        //                                id = b.OrderHeaderId,
        //                                b.InvoiceNO,
        //                                date = utility.GetstrDateCulture(b.Date),
        //                                shopName = b.ShopName,
        //                                amount = b.Amount,
        //                                isSell = b.Sell,
        //                                currency = b.Currency,
        //                                employee = EmployeeName = b.EmployeeName + " " + b.EmployeeFamily,
        //                                client = b.ClientName + " " + b.ClientFamily,
        //                                inOrderOf = (
        //                                  b.counterCode != null && !b.Sell ? "پرداخت" :
        //                                  b.counterCode != null && b.Sell ? "واریز" :
        //                                  b.orderDetailCount > 0 && b.Sell && IsClient && b.ConfirmerId != null ? "خرید " :
        //                                  b.orderDetailCount > 0 && b.Sell && IsClient && b.ConfirmerId == null ? "پیش فاکتور " :
        //                                  b.orderDetailCount > 0 && b.Sell && !IsClient ? "مرجوعی " :
        //                                  b.orderDetailCount > 0 && !b.Sell && !IsClient ? "خرید " :
        //                                  b.orderDetailCount > 0 && !b.Sell && IsClient ? "مرجوعی  " :
        //                                  b.expenseCategory != null && b.Sell ? "بابت هزینه " + b.expenseCategory :
        //                                  b.salaryGetterFamily != null && !b.Sell ? "بابت حقوق  " + b.salaryGetterName + " " + b.salaryGetterFamily :
        //                                  "بابت بیمه " + b.securityGetterName + " " + b.securityGetterFamily) + " " +
        //                                  (b.Description != null ? b.Description : "")
        //                            })
        //                        });
        //                    }
        //            }
        //            return Json(new { isdone = false });
        //        }
        //        catch (Exception e)
        //        {
        //            return Json(new SearchResult());
        //        }
        //        //finally { ((IDisposable)db).Dispose(); }
        //    }
        public ActionResult GetDetailInvoice(int id)
        {
            return Json(db.ac_OrderDetail.Where(i => i.ac_AccountDetail.OrderHeaderId == id)
                .Select(b => new
                {
                    b.AccountDetailId,
                    b.ac_AccountDetail.ac_Account.inv_ItemDetail.BarcodeId,
                    b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Barcode,
                    b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Name,
                    b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.ItemCode,
                    b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Size,
                    b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Color,
                    b.Quantity,
                    b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.inv_MeasureUnit.UnitType,
                    salePrice = b.ac_AccountDetail1.Amount,
                    buyPrice = b.ac_AccountDetail.Amount,
                    b.Serial,
                    b.ac_AccountDetail.Description
                }).AsEnumerable()
                .Select(a => new
                {
                    OrderDetailId = a.AccountDetailId,
                    a.BarcodeId,
                    a.Barcode,
                    a.Name,
                    a.ItemCode,
                    Color = (a.inv_Color.Count > 0 ? a.inv_Color.FirstOrDefault().Color : ""),
                    Size = (a.inv_Size.Count() > 0 ? a.inv_Size.FirstOrDefault().Size : ""),
                    a.Quantity,
                    a.UnitType,
                    Price = a.salePrice == null ? Math.Abs(a.buyPrice.Value / a.Quantity) : Math.Abs(a.salePrice.Value / a.Quantity),
                    a.Serial,
                    a.Description
                }));
        }
        public ActionResult GetEditDetailInvoice(int id)
        {
            try
            {
                var orderHeader = db.ac_OrderHeader.Single(a => a.OrderHeaderId == id);
                var iscustomer = db.p_Customer.SingleOrDefault(c => c.AccountId == orderHeader.ClientId);
                var vat = orderHeader.ac_AccountDetail.SingleOrDefault(a => a.ac_Account.ac_TableAccount != null && (a.ac_Account.ac_TableAccount.Table == "vatExpense" || a.ac_Account.ac_TableAccount.Table == "vatIncome"));
                bool iscu = false;
                if (iscustomer != null)
                    iscu = true;
                return Json(new
                {
                    isdone = true,
                    VatAmount = vat != null ? Math.Abs(vat.Amount.Value) : 0,
                    iscustomer = iscu,
                    person = orderHeader.p_Person.Name + " " + orderHeader.p_Person.Family,
                    code = orderHeader.p_Person.Code,
                    isSell = orderHeader.Sell,
                    orderHeader.InvoiceNO,
                    orderHeader.Description,
                    Amount = orderHeader.Amount - (vat != null ? Math.Abs(vat.Amount.Value) : 0),
                    Date = orderHeader.Date,//utility.GetstrDateCulture(orderHeader.Date),
                    result = db.ac_OrderDetail.Where(i => i.ac_AccountDetail.OrderHeaderId == id)
                    .Select(b => new
                    {
                        b.AccountDetailId,
                        b.ac_AccountDetail.ac_Account.inv_ItemDetail.BarcodeId,
                        barcode = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Barcode,
                        b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Name,
                        code = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.ItemCode,
                        Size = (int?)b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Size.FirstOrDefault().SizeId,
                        Color = (int?)b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Color.FirstOrDefault().ColorId,
                        b.Quantity,
                        Price = b.ac_AccountDetail1 != null ? b.ac_AccountDetail1.Amount / b.Quantity : b.ac_AccountDetail.Amount / b.Quantity,
                        b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.inv_MeasureUnit.UnitType,
                        measureUnits = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.inv_BarcodeMeasureUnit.Select(m => new { id = m.Quantity, discount = m.DiscountPercentage, name = m.inv_MeasureUnit.UnitType }),
                        b.ac_AccountDetail.ac_OrderHeader.Amount,
                        b.Serial,
                        b.ac_AccountDetail.AccountId,
                        b.ac_AccountDetail.Description,
                        priceType = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.inv_Price.OrderByDescending(p => p.Date).Select(s => new { basePrice = s.Regular, wholesalePrice = s.Wholesale, friendPrice = s.Freinds, onlinePrice = s.Online }).FirstOrDefault(),
                        colors = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.inv_ItemDetail.Where(d => d.inv_Color.Count > 0)
                    .Select(aa => new
                    {
                        id = aa.inv_Color.FirstOrDefault().ColorId,
                        name = aa.inv_Color.FirstOrDefault().Color,
                    }).Distinct(),
                        sizes = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.inv_ItemDetail.Where(d => d.inv_Size.Count > 0).Select(aa => new
                        {
                            id = aa.inv_Size.FirstOrDefault().SizeId,
                            name = aa.inv_Size.FirstOrDefault().Size
                        }).Distinct()
                    })
                });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.Message });
            }

        }

        public ActionResult GetInvoiceById(int id)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }

            ac_OrderHeader orderheader = db.ac_OrderHeader.Single(i => i.OrderHeaderId == id);
            var od = orderheader.ac_AccountDetail.Where(s => s.ac_OrderDetail != null);
            if (orderheader.ac_AccountDetail.Count > 0)
                return Json(new
                {
                    isdone = true,
                    orderheader.InvoiceNO,
                    orderheader.Sell,
                    PreOrder = orderheader.ConfirmerId != null ? false : true,
                    ShopName = orderheader.inv_Shop.Name,
                    orderheader.p_Employee.p_Person.Gender,
                    orderheader.p_Employee.p_Person.Family,
                    ClientGender = orderheader.p_Person.Gender,
                    ClientFamily = orderheader.p_Person.Family,
                    Date = utility.GetstrDateCulture(orderheader.Date),
                    Time = orderheader.Date.ToString("HH:mm"),
                    orderheader.Amount,
                    orderheader.ac_CurrencyRate.ac_Currency.Currency,
                    detail = orderheader.ac_AccountDetail.Where(s => s.ac_OrderDetail != null).GroupBy(d => new { d.ac_Account.inv_ItemDetail.BarcodeId, d.ac_Account.inv_ItemDetail.inv_Barcode.Name }).Select(o => new { o.Key.Name, Price = Math.Abs(o.Sum(s => s.ac_OrderDetail.ac_AccountDetail1 != null ? s.ac_OrderDetail.ac_AccountDetail1.Amount.Value : s.ac_OrderDetail.ac_AccountDetail.Amount.Value)), Quantity = o.Sum(s => s.ac_OrderDetail.Quantity) })
                });
            else
                return Json(new { isdone = false, msg = "noData" });
        }
        public ActionResult GetAccountById(int id)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }

            ac_OrderHeader orderheader = db.ac_OrderHeader.Single(i => i.OrderHeaderId == id);
            if (orderheader.ac_AccountDetail.Count > 0)
                return Json(new
                {
                    isdone = true,
                    InvoiceNO = orderheader.InvoiceNO,
                    Date = utility.GetstrDateCulture(orderheader.Date),
                    Amount = Math.Abs(orderheader.Amount),
                    Description = orderheader.Description,
                    accountDetail = orderheader.ac_AccountDetail.Select(a => new
                    {
                        a.ac_Account.Name,
                        a.ac_Account.Code,
                        Amount = Math.Abs((decimal)a.Amount),
                        a.IsDept
                    }).OrderBy(a => a.Code)
                });
            else
                return Json(new { isdone = false, msg = "noData" });
        }

        public ActionResult DeleteDetailInvoice(int id)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canDeleteSale"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }
            try
            {
                bool isSell = db.ac_OrderDetail.Single(o => o.AccountDetailId == id).ac_AccountDetail.ac_OrderHeader.Sell;

                //agar factor kharid bashad
                if (!isSell)
                {
                    bool result = DeleteBuyInvoice(id, false);
                    if (result)
                    {
                        db.SaveChanges();
                        return Json(new { isdone = true, msg = "oK" });
                    }
                    else
                        return Json(new { isdone = false, msg = "notInRole" });
                }
                else
                {
                    bool result = DeleteSellInvoice(id, false);
                    if (result)
                    {
                        db.SaveChanges();
                        return Json(new { isdone = true, msg = "oK" });
                    }
                    else
                        return Json(new { isdone = false, msg = "notInRole" });
                }

            }
            catch (Exception e)
            {
                return Json(new { isdone = false, msg = e.InnerException.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public bool DeleteBuyInvoice(int id, bool isEdit)
        {
            var orderDetail = db.ac_OrderDetail.Single(o => o.AccountDetailId == id);
            int employeeId = orderDetail.ac_AccountDetail.ac_OrderHeader.EmployeeId;
            List<int> listid = db.GetParentEmployeeByID(employeeId, "").Select(pr => pr.AccountId).ToList();
            listid.Add(employeeId);
            if (!listid.Contains(db.p_Person.Single(cus => cus.Code == User.Identity.Name && cus.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId) && (orderDetail.ac_AccountDetail.ac_OrderHeader.EmployeeId != orderDetail.ac_AccountDetail.ac_OrderHeader.ClientId && !utility.isInRole(db, User.Identity.Name, appName, "canDeleteOnlineOrder")))
                return false;
            //var accDetail = orderDetail.ac_AccountDetail;
            //var orderHeader = orderDetail.ac_AccountDetail.ac_OrderHeader;

            // delete orderDetail

            var orderHeader = orderDetail.ac_AccountDetail.ac_OrderHeader;
            orderHeader.Amount = orderHeader.Amount - Math.Abs(orderDetail.ac_AccountDetail.Amount.Value);
            var clientAccount = db.ac_AccountDetail.Single(s => s.OrderHeaderId == orderHeader.OrderHeaderId && s.AccountId == orderHeader.ClientId);
            clientAccount.Amount = Math.Abs(clientAccount.Amount.Value) - Math.Abs(orderDetail.ac_AccountDetail.Amount.Value);
            db.ac_OrderDetail.DeleteObject(orderDetail);
            //delete accountDetail
            //db.ac_AccountDetail.DeleteObject(accDetail);

            // foroshande -> bestankar
            //int? accSupplierID = db.p_Person.Single(p => p.AccountId == orderHeader.ClientId).AccountId;
            //var accDetails = db.ac_AccountDetail.Where(a => a.OrderHeaderId == orderHeader.OrderHeaderId);

            //foreach (var item in accDetails)
            //{
            //    // agar accountDetail marbot be foroshande bashad
            //    if (item.AccountId == accSupplierID)
            //    {
            //        item.Amount -= accDetail.Amount;

            //        if (!isEdit)
            //        {
            //            var OrderDetails = db.ac_OrderDetail.Where(o => o.ac_AccountDetail.ac_OrderHeader.OrderHeaderId == orderHeader.OrderHeaderId);
            //            //agar orderDetail vojod nadashte bashad bayad accountDetail marbot be an hazf gardad
            //            if (OrderDetails.Count() - 1 == 0)
            //            {
            //                db.ac_AccountDetail.DeleteObject(item);
            //            }
            //        }
            //    }
            //}
            //db.SaveChanges();
            return true;

        }
        public bool DeleteSellInvoice(int id, bool isEdit)
        {
            var orderDetail = db.ac_OrderDetail.Single(o => o.AccountDetailId == id);
            int employeeId = orderDetail.ac_AccountDetail.ac_OrderHeader.EmployeeId;
            List<int> listid = db.GetParentEmployeeByID(employeeId, "").Select(pr => pr.AccountId).ToList();
            listid.Add(employeeId);
            if (!listid.Contains(db.p_Person.Single(cus => cus.Code == User.Identity.Name && cus.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId) && (orderDetail.ac_AccountDetail.ac_OrderHeader.EmployeeId != orderDetail.ac_AccountDetail.ac_OrderHeader.ClientId && !utility.isInRole(db, User.Identity.Name, appName, "canDeleteOnlineOrder")))
                return false;
            //var accDetail = orderDetail.ac_AccountDetail;
            //var orderHeader = orderDetail.ac_AccountDetail.ac_OrderHeader;
            //int? accId = accDetail.AccountId;

            // delete orderDetail

            //delete accountDetail
            //var accDetail1 = orderDetail.ac_AccountDetail1;
            //var accDetail2 = orderDetail.ac_AccountDetail2;
            //db.ac_AccountDetail.DeleteObject(orderDetail.ac_AccountDetail);
            //db.ac_AccountDetail.DeleteObject(accDetail1);
            //db.ac_AccountDetail.DeleteObject(accDetail2);

            var orderHeader = orderDetail.ac_AccountDetail.ac_OrderHeader;
            orderHeader.Amount = orderHeader.Amount - Math.Abs(orderDetail.ac_AccountDetail.Amount.Value);
            var clientAccount = db.ac_AccountDetail.Single(s => s.OrderHeaderId == orderHeader.OrderHeaderId && s.AccountId == orderHeader.ClientId);
            clientAccount.Amount = Math.Abs(clientAccount.Amount.Value) - Math.Abs(orderDetail.ac_AccountDetail.Amount.Value);
            db.ac_OrderDetail.DeleteObject(orderDetail);
            // moshtari -> bedehkar
            //int? accCuID = db.p_Person.Single(p => p.AccountId == orderHeader.ClientId).AccountId;
            //var accDetails = orderHeader.ac_AccountDetail;

            //foreach (var item in accDetails)
            //{
            //    // agar accountDetail marbot be moshtari bashad
            //    if (item.AccountId == accCuID)
            //    {
            //        item.Amount -= accDetail.Amount;
            //        if (!isEdit)
            //        {
            //            //agar orderDetail vojod nadashte bashad bayad accountDetail marbot be an hazf gardad
            //            var OrderDetails = db.ac_OrderDetail.Where(o => o.ac_AccountDetail.ac_OrderHeader.OrderHeaderId == orderHeader.OrderHeaderId
            //                && o.ac_AccountDetail.AccountId != accId);
            //            if (OrderDetails.Count() - 2 == 0)
            //            {
            //                db.ac_AccountDetail.DeleteObject(item);
            //            }
            //        }
            //    }
            //}
            return true;
        }

        public ActionResult EditHeaderInvoice(int OrderHeaderId, string Code, decimal Amount)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditSale"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            var orderHeader1 = db.ac_OrderHeader.Single(o => o.OrderHeaderId == OrderHeaderId);
            int employeeId = orderHeader1.EmployeeId;
            List<int> listid = db.GetParentEmployeeByID(employeeId, "").Select(pr => pr.AccountId).ToList();
            listid.Add(employeeId);
            if (!listid.Contains(db.p_Person.Single(cus => cus.Code == User.Identity.Name && cus.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId))
                return Json(new { isDone = false, msg = "notInRole" });
            try
            {
                p_Person c = db.p_Person.Single(p => p.Code == Code && p.ac_Account.aspnet_Applications.ApplicationName == appName);
                ac_OrderHeader order = db.ac_OrderHeader.Single(h => h.OrderHeaderId == OrderHeaderId);
                order.ClientId = c.AccountId;
                order.Amount = Amount;
                db.SaveChanges();
                return Json(new { isDone = true, msg = c.Name + " " + c.Family });
            }
            catch (Exception e) { return Json(new { isDone = false, msg = e.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult EditDetailInvoice(int OrderDetailId, int? ColorId, int? SizeId, decimal Quantity, decimal Amount, string Serial)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canEditSale"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            var orderHeader = db.ac_OrderDetail.Single(o => o.AccountDetailId == OrderDetailId).ac_AccountDetail.ac_OrderHeader;
            var orderDetail = db.ac_OrderDetail.Single(o => o.AccountDetailId == OrderDetailId);
            int itemDetaiId = orderDetail.ac_AccountDetail.AccountId.Value;
            int? itemAccID = orderDetail.ac_AccountDetail.AccountId;
            bool isSell = orderDetail.ac_AccountDetail.ac_OrderHeader.Sell;
            int employeeId = orderDetail.ac_AccountDetail.ac_OrderHeader.EmployeeId;
            string description = orderDetail.ac_AccountDetail.Description;
            decimal? lastAmount = orderDetail.ac_AccountDetail.Amount;
            decimal lastQuantity = orderDetail.Quantity;
            bool? broken = orderDetail.Broken;
            List<int> listid = db.GetParentEmployeeByID(employeeId, "").Select(pr => pr.AccountId).ToList();
            listid.Add(employeeId);
            if (!listid.Contains(db.p_Person.Single(cus => cus.Code == User.Identity.Name && cus.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId))
                return Json("notInRole");
            try
            {

                //agar forosh bashad
                if (isSell)
                {

                    var accDetailcu = db.ac_AccountDetail.Single(a => a.OrderHeaderId == orderHeader.OrderHeaderId && a.AccountId == orderHeader.ClientId);

                    //mojodi kala -> bestankar
                    orderDetail.Quantity = Quantity;
                    orderDetail.ac_AccountDetail.Amount = Amount * Quantity;
                    orderDetail.ac_AccountDetail.Description = description;


                    //forosh -> bestankar
                    orderDetail.ac_AccountDetail1.Amount = Amount * Quantity;
                    orderDetail.ac_AccountDetail1.Description = description;


                    //gheimate tamam shode -> bedehkar
                    orderDetail.ac_AccountDetail2.Amount = Amount * Quantity;
                    orderDetail.ac_AccountDetail2.Description = description;


                    //bayad az amount orderHeader be andaze amount accoutDetail hazf shode kam kard va be andaze etelate accountDetail jadid ezafe kard
                    decimal? orderHeaderAmount = (orderHeader.Amount != null ? orderHeader.Amount : 0) - (lastAmount != null ? lastAmount : 0) + Amount * Quantity;
                    orderHeader.Amount = orderHeaderAmount.Value;
                    accDetailcu.Amount = orderHeaderAmount.Value;
                    var itemLocation = db.inv_ItemLocation.Single(s => s.ItemDetailId == itemDetaiId && s.ShopId == orderHeader.ShopId);
                    itemLocation.Quantity = itemLocation.Quantity + lastQuantity - Quantity;
                }
                //agar kharid bashad
                else
                {
                    var accDetailSupplier = db.ac_AccountDetail.Single(a => a.OrderHeaderId == orderHeader.OrderHeaderId && a.AccountId == orderHeader.ClientId);

                    //mojodi kala -> bestankar
                    orderDetail.Quantity = Quantity;
                    orderDetail.ac_AccountDetail.Amount = Amount * Quantity;
                    orderDetail.ac_AccountDetail.Description = description;

                    //accDetailSupplier.Amount = accDetailSupplier.Amount - lastAmount + Amount * Quantity;

                    //bayad az amount orderHeader be andaze amount accoutDetail hazf shode kam kard va be andaze etelate accountDetail jadid ezafe kard
                    decimal? orderHeaderAmount = (orderHeader.Amount != null ? orderHeader.Amount : 0) - (lastAmount != null ? lastAmount : 0) + Amount * Quantity;
                    orderHeader.Amount = orderHeaderAmount.Value;
                    accDetailSupplier.Amount = orderHeaderAmount.Value;
                    var itemLocation = db.inv_ItemLocation.Single(s => s.ItemDetailId == itemDetaiId && s.ShopId == orderHeader.ShopId);
                    itemLocation.Quantity = itemLocation.Quantity - lastQuantity + Quantity;
                }
                db.SaveChanges();
                return Json(new { orderHeaderId = orderHeader.OrderHeaderId, isDone = true });

            }
            catch (Exception e) { return Json(e.InnerException.Message); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult AddOrder(OrderHeader header, List<OrderDetail> itemDetails, int counterId, decimal? vat)
        {

            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);

                if (!roles.Contains("canSale"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
                decimal? sum = 0;
                int eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                int curid = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == header.currenyid).CurrencyRateId;
                var isCustomer = db.p_Customer.SingleOrDefault(c => c.AccountId == header.customerid);

                ac_OrderHeader orderheader = new ac_OrderHeader();
                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;
                orderheader.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                orderheader.ShopId = header.shopid;
                orderheader.CurrencyRateId = curid;
                orderheader.Amount = header.totalamount;
                //if (!string.IsNullOrEmpty(header.description))
                orderheader.Description = getInvoicDescription(false, false, false, (isCustomer != null ? true : false), header.issell, header.ispreorder) + " " + header.description;
                orderheader.InvoiceNO = getInvoiceNumber(db, header.invoicenumber, header.issell, header.ispreorder);
                if (!header.ispreorder)
                    orderheader.ConfirmerId = eid;
                orderheader.CounterId = counterId;
                orderheader.EmployeeId = eid;
                if (!string.IsNullOrEmpty(header.clientCode))
                    header.customerid = db.p_Person.Single(p => p.Code == header.clientCode && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                orderheader.ClientId = header.customerid;
                orderheader.Date = utility.GetDateTimeCulture(header.date);
                orderheader.Sell = header.issell;
                orderheader.IsMoney = false;
                //orderheader.OrderTypeId = getOrderType(db, header.customerid, header.issell, false, false, false, false, false, false, false, false);


                db.AddToac_OrderHeader(orderheader);
                ac_Cash cash = new ac_Cash();
                ac_AccountDetail accountDetail = new ac_AccountDetail();
                cash.CurrencyRateId = curid;
                accountDetail.AccountId = db.ac_Counter.Single(c => c.AccountId == counterId).AccountId;
                cash.Type = "نقدی";
                accountDetail.ac_Cash = cash;
                ac_AccountDetail accountDetailCu = new ac_AccountDetail();
                ac_AccountDetail acDetail = new ac_AccountDetail();
                ac_AccountDetail accDetailCu = new ac_AccountDetail();


                if (isCustomer == null)
                {
                    //if (!header.issell)
                    //{
                    //mojodi kala -> bedehkar
                    foreach (var dItem in itemDetails)
                    {
                        ac_AccountDetail accDetail = new ac_AccountDetail();

                        ac_OrderDetail orderdetail = new ac_OrderDetail();
                        View_inv_ItemDetail ItemDetail = new View_inv_ItemDetail();

                        if (dItem.colorid != null && dItem.sizeid != null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == dItem.sizeid);
                        if (dItem.colorid == null && dItem.sizeid == null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == null && i.SizeId == null);
                        if (dItem.colorid != null && dItem.sizeid == null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == null);
                        if (dItem.colorid == null && dItem.sizeid != null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == null && i.SizeId == dItem.sizeid);
                        orderdetail.Quantity = dItem.quantity;
                        accDetail.Amount = dItem.price * dItem.quantity;
                        // orderdetail.ac_AccountDetail.AccountId = ItemDetail.AccountId.Value;
                        accDetail.AccountId = ItemDetail.AccountId;
                        accDetail.IsDept = !header.issell ? true : false;

                        if (!string.IsNullOrEmpty(dItem.description))
                            accDetail.Description = dItem.description;
                        if (!string.IsNullOrEmpty(dItem.serial))
                            orderdetail.Serial = dItem.serial;
                        orderdetail.Broken = dItem.broken;
                        sum += dItem.quantity * dItem.price;
                        orderdetail.ac_AccountDetail = accDetail;
                        db.ac_OrderDetail.AddObject(orderdetail);
                        accDetail.ac_OrderDetail = orderdetail;
                        orderheader.ac_AccountDetail.Add(accDetail);
                    }
                    //moshtari ->bestankar
                    accountDetailCu.AccountId = db.p_Person.Single(c => c.AccountId == header.customerid).AccountId;
                    accountDetailCu.IsDept = !header.issell ? false : true;
                    accountDetailCu.Amount = header.totalamount;
                    orderheader.ac_AccountDetail.Add(accountDetailCu);
                    orderheader.Table = "order";

                    if (vat != null)
                    {
                        if (orderheader.Sell)
                            AddOtherAccount("ReturnedShopping", ref orderheader, 0, 0, 0, 0, vat.Value, 0, 0, 0, 0);
                        else
                            AddOtherAccount("buy", ref orderheader, 0, 0, vat.Value, 0, 0, 0, 0, 0, 0);
                    }
                    // agar majmoe hazine kalaha (sum) va totalamount ekhtelaf dashte bashand pas takhfif mibashad
                    //totalamount nemitavand az sum bishtar bashad
                    if ((sum - header.totalamount) > 0)
                    {
                        decimal buyDiscountIncome = (sum - header.totalamount).Value;
                        AddOtherAccount("buy", ref orderheader, buyDiscountIncome, 0, 0, 0, 0, 0, 0, 0, 0);
                    }
                    //}

                }
                else
                {
                    //if (header.issell)
                    //{
                    var accId = db.p_Person.Single(c => c.AccountId == header.customerid).AccountId;
                    foreach (var dItem in itemDetails)
                    {
                        ac_AccountDetail accDetail = new ac_AccountDetail();
                        ac_OrderDetail orderdetail = new ac_OrderDetail();
                        View_inv_ItemDetail ItemDetail = new View_inv_ItemDetail();
                        if (dItem.colorid != null && dItem.sizeid != null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == dItem.sizeid);
                        if (dItem.colorid == null && dItem.sizeid == null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == null && i.SizeId == null);
                        if (dItem.colorid != null && dItem.sizeid == null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == null);
                        if (dItem.colorid == null && dItem.sizeid != null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == null && i.SizeId == dItem.sizeid);

                        //mojodi kala -> bestankar
                        orderdetail.Quantity = dItem.quantity;
                        accDetail.Amount = ItemDetail.BuyPrice * dItem.quantity;
                        //orderdetail.ac_AccountDetail.AccountId = ItemDetail.AccountId.Value;
                        orderdetail.Broken = dItem.broken;
                        orderdetail.Serial = dItem.serial;
                        accDetail.AccountId = ItemDetail.AccountId;
                        accDetail.IsDept = header.issell ? false : true; ;


                        //forosh -> bestankar
                        ac_AccountDetail accDetailS = new ac_AccountDetail();
                        var accSell_TotalAmount = db.ac_Account.Where(a => a.RelatedAccountId == ItemDetail.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemSale");
                        accDetailS.Amount = dItem.price * dItem.quantity;
                        accDetailS.AccountId = accSell_TotalAmount.First().AccountId;
                        accDetailS.IsDept = header.issell ? false : true;
                        if (!string.IsNullOrEmpty(dItem.description))
                            accDetailS.Description = dItem.description;

                        //orderdetail.ac_AccountDetail1 = accDetailS;


                        //gheimate tamam shode -> bedehkar
                        var accPrice_TotalAmount = db.ac_Account.Where(a => a.RelatedAccountId == ItemDetail.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemPrice");
                        ac_AccountDetail accDetailTA = new ac_AccountDetail();
                        accDetailTA.Amount = ItemDetail.BuyPrice * dItem.quantity;
                        accDetailTA.AccountId = accPrice_TotalAmount.First().AccountId;
                        accDetailTA.IsDept = header.issell ? true : false;
                        if (!string.IsNullOrEmpty(dItem.description))
                            accDetailTA.Description = dItem.description;


                        sum += dItem.quantity * dItem.price;

                        orderdetail.ac_AccountDetail = accDetail;
                        accDetailS.ac_OrderDetail1.Add(orderdetail);
                        accDetailTA.ac_OrderDetail2.Add(orderdetail);

                        orderheader.ac_AccountDetail.Add(accDetail);
                        orderheader.ac_AccountDetail.Add(accDetailTA);
                        orderheader.ac_AccountDetail.Add(accDetailS);
                    }

                    accountDetailCu.AccountId = db.p_Person.Single(c => c.AccountId == header.customerid).AccountId;
                    accountDetailCu.IsDept = header.issell ? true : false;
                    accountDetailCu.Amount = header.totalamount;// +(vat == null ? 0 : vat.Value); ;
                    orderheader.ac_AccountDetail.Add(accountDetailCu);
                    orderheader.Table = "order";


                    if (vat != null)
                    {
                        if (!orderheader.Sell)
                            AddOtherAccount("ReturnedSelling", ref orderheader, 0, 0, vat.Value, 0, 0, 0, 0, 0, 0);
                        else
                            AddOtherAccount("sale", ref orderheader, 0, 0, 0, 0, vat.Value, 0, 0, 0, 0);
                    }
                    // agar majmoe hazine kalaha (sum) va totalamount ekhtelaf dashte bashand pas takhfif mibashad
                    //totalamount nemitavand az sum bishtar bashad
                    if ((sum - header.totalamount) > 0)
                    {
                        decimal saleDiscountIncome = (sum - header.totalamount).Value;
                        AddOtherAccount("sale", ref orderheader, 0, 0, 0, saleDiscountIncome, 0, 0, 0, 0, 0);
                    }
                    //}

                }
                if (header.PaymentAmount != null)
                {
                    ac_OrderHeader ac = new ac_OrderHeader();
                    ac.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                    ac.ClientId = header.customerid;
                    ac.EmployeeId = eid;
                    ac.Sell = !header.issell;
                    ac.CounterId = counterId;
                    ac.Date = utility.GetDateTimeCulture(header.date);
                    ac.CurrencyRateId = curid;
                    ac.Description = getInvoicDescription(true, false, true, (isCustomer != null ? true : false), !header.issell, header.ispreorder);
                    ac.InvoiceNO = getInvoiceNumber(db, "payment", ac.Sell, false);
                    //ac.OrderTypeId = getOrderType(db, header.customerid, header.issell, true, false, false, false, false, false, false, false);

                    ac.ShopId = header.shopid;
                    ac.IsMoney = true;
                    ac.ConfirmerId = eid;

                    if (isCustomer == null && !header.issell)
                    {
                        ac.Amount = header.PaymentAmount.Value;
                        accountDetail.IsDept = false;
                        accountDetail.Amount = header.PaymentAmount;
                        ac.ac_AccountDetail.Add(accountDetail);

                        accountDetailCu.AccountId = db.p_Person.Single(c => c.AccountId == header.customerid).AccountId;
                        accountDetailCu.IsDept = true;
                        accountDetailCu.Amount = header.PaymentAmount.Value;
                        ac.ac_AccountDetail.Add(accountDetailCu);
                        ac.Table = "payment";
                        db.ac_OrderHeader.AddObject(ac);

                        acDetail.Amount = sum;
                        acDetail.AccountId = accountDetailCu.AccountId;
                        acDetail.IsDept = false;

                        orderheader.ac_AccountDetail.Add(acDetail);

                    }
                    else
                    {
                        if (isCustomer != null && header.issell)
                        {
                            ac.Amount = header.PaymentAmount.Value;
                            accountDetail.IsDept = true;
                            accountDetail.Amount = header.PaymentAmount;
                            ac.ac_AccountDetail.Add(accountDetail);

                            accDetailCu.AccountId = isCustomer.p_Person.AccountId;
                            accDetailCu.IsDept = false;
                            accDetailCu.Amount = header.PaymentAmount.Value;

                            ac.ac_AccountDetail.Add(accDetailCu);
                            ac.Table = "payment";
                            db.ac_OrderHeader.AddObject(ac);
                        }
                    }
                }

                //moshtari va factor forosh
                if (isCustomer != null && !header.issell && 1 == 2)
                {

                    //mojodi kala -> bedehkar
                    foreach (var dItem in itemDetails)
                    {
                        ac_AccountDetail accDetail = new ac_AccountDetail();

                        ac_OrderDetail orderdetail = new ac_OrderDetail();
                        View_inv_ItemDetail ItemDetail = new View_inv_ItemDetail();

                        if (dItem.colorid != null && dItem.sizeid != null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == dItem.sizeid);
                        if (dItem.colorid == null && dItem.sizeid == null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == null && i.SizeId == null);
                        if (dItem.colorid != null && dItem.sizeid == null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == null);
                        if (dItem.colorid == null && dItem.sizeid != null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == null && i.SizeId == dItem.sizeid);
                        orderdetail.Quantity = dItem.quantity;
                        accDetail.Amount = dItem.price * dItem.quantity;
                        // orderdetail.ac_AccountDetail.AccountId = ItemDetail.AccountId.Value;
                        accDetail.AccountId = ItemDetail.AccountId;
                        accDetail.IsDept = true;

                        if (!string.IsNullOrEmpty(dItem.description))
                            accDetail.Description = dItem.description;
                        if (!string.IsNullOrEmpty(dItem.serial))
                            orderdetail.Serial = dItem.serial;
                        orderdetail.Broken = dItem.broken;
                        sum += dItem.quantity * dItem.price;
                        orderdetail.ac_AccountDetail = accDetail;
                        db.ac_OrderDetail.AddObject(orderdetail);
                        accDetail.ac_OrderDetail = orderdetail;
                        orderheader.ac_AccountDetail.Add(accDetail);
                    }
                    //moshtari ->bestankar
                    accountDetailCu.AccountId = db.p_Person.Single(c => c.AccountId == header.customerid).AccountId;
                    accountDetailCu.IsDept = false;
                    accountDetailCu.Amount = header.totalamount;
                    orderheader.ac_AccountDetail.Add(accountDetailCu);
                    orderheader.Table = "order";


                    orderheader.ConfirmerId = eid;

                    if (vat > 0)
                    {
                        AddOtherAccount("ReturnedSelling", ref orderheader, 0, 0, vat.Value, 0, 0, 0, 0, 0, 0);
                    }

                    // agar majmoe hazine kalaha (sum) va totalamount ekhtelaf dashte bashand pas takhfif mibashad
                    //totalamount nemitavand az sum bishtar bashad
                    if ((sum - header.totalamount) > 0)
                    {
                        decimal saleReturnDiscountIncome = (sum - header.totalamount).Value;
                        AddOtherAccount("ReturnedSelling", ref orderheader, 0, saleReturnDiscountIncome, 0, 0, 0, 0, 0, 0, 0);
                    }


                    // vase karbarayi hast ke nesiye nemitoonan befrooshan , dar natije vaghti yechiro marjoo mikonan poolesham bayad hamoon moghe pas bedan
                    //masalan agar 100000 toman to ye factore kharid mikoni va poolesham dadi , age 20000 tomaneshoo marjoo mikoni
                    //ye factore sefareshe marjooyi zade mishe va ye factore pardakht be moshtariyeh 20000 tomani
                    if (!roles.Contains("canGiveCredit"))
                    {
                        ac_OrderHeader ac = new ac_OrderHeader();
                        ac.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                        ac.ClientId = header.customerid;
                        ac.EmployeeId = eid;
                        ac.Sell = !header.issell;
                        ac.CounterId = counterId;
                        ac.Date = utility.GetDateTimeCulture(header.date);
                        ac.CurrencyRateId = curid;
                        ac.Description = getInvoicDescription(true, false, true, (isCustomer != null ? true : false), !header.issell, header.ispreorder);
                        ac.InvoiceNO = getInvoiceNumber(db, "payment", ac.Sell, false);
                        //ac.OrderTypeId = getOrderType(db, header.customerid, header.issell, true, false, false, false, false, false, false, false);

                        ac.ShopId = header.shopid;
                        ac.IsMoney = true;
                        ac.ConfirmerId = eid;

                        ac.Amount = header.PaymentAmount.Value;
                        accountDetail.IsDept = true;
                        accountDetail.Amount = header.PaymentAmount;
                        ac.ac_AccountDetail.Add(accountDetail);

                        ac.ac_AccountDetail.Add(accDetailCu);
                        ac.Table = "payment";
                        db.ac_OrderHeader.AddObject(ac);

                    }

                }
                //foroshande va factor kharid
                if (isCustomer == null && header.issell && 1 == 2)
                {
                    var accId = db.p_Person.Single(c => c.AccountId == header.customerid).AccountId;
                    foreach (var dItem in itemDetails)
                    {
                        ac_AccountDetail accDetail = new ac_AccountDetail();
                        ac_OrderDetail orderdetail = new ac_OrderDetail();
                        View_inv_ItemDetail ItemDetail = new View_inv_ItemDetail();
                        if (dItem.colorid != null && dItem.sizeid != null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == dItem.sizeid);
                        if (dItem.colorid == null && dItem.sizeid == null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == null && i.SizeId == null);
                        if (dItem.colorid != null && dItem.sizeid == null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == null);
                        if (dItem.colorid == null && dItem.sizeid != null)
                            ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == dItem.barcodeid && i.ColorId == null && i.SizeId == dItem.sizeid);

                        //mojodi kala -> bestankar
                        orderdetail.Quantity = dItem.quantity;
                        accDetail.Amount = ItemDetail.BuyPrice * dItem.quantity;
                        //orderdetail.ac_AccountDetail.AccountId = ItemDetail.AccountId.Value;
                        orderdetail.Broken = dItem.broken;
                        orderdetail.Serial = dItem.serial;
                        accDetail.AccountId = ItemDetail.AccountId;
                        accDetail.IsDept = false;


                        //forosh -> bestankar
                        ac_AccountDetail accDetailS = new ac_AccountDetail();
                        var accSell_TotalAmount = db.ac_Account.Where(a => a.RelatedAccountId == ItemDetail.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemSale");
                        accDetailS.Amount = dItem.price * dItem.quantity;
                        accDetailS.AccountId = accSell_TotalAmount.First().AccountId;
                        accDetailS.IsDept = false;
                        if (!string.IsNullOrEmpty(dItem.description))
                            accDetailS.Description = dItem.description;

                        //orderdetail.ac_AccountDetail1 = accDetailS;


                        //gheimate tamam shode -> bedehkar
                        var accPrice_TotalAmount = db.ac_Account.Where(a => a.RelatedAccountId == ItemDetail.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemPrice");
                        ac_AccountDetail accDetailTA = new ac_AccountDetail();
                        accDetailTA.Amount = ItemDetail.BuyPrice * dItem.quantity;
                        accDetailTA.AccountId = accPrice_TotalAmount.First().AccountId;
                        accDetailTA.IsDept = true;
                        if (!string.IsNullOrEmpty(dItem.description))
                            accDetailTA.Description = dItem.description;


                        sum += dItem.quantity * dItem.price;

                        orderdetail.ac_AccountDetail = accDetail;
                        accDetailS.ac_OrderDetail1.Add(orderdetail);
                        accDetailTA.ac_OrderDetail2.Add(orderdetail);

                        orderheader.ac_AccountDetail.Add(accDetail);
                        orderheader.ac_AccountDetail.Add(accDetailTA);
                        orderheader.ac_AccountDetail.Add(accDetailS);
                    }

                    //foroshande -> bedehkar
                    accountDetailCu.AccountId = eid;
                    accountDetailCu.IsDept = true;
                    accountDetailCu.Amount = header.totalamount;
                    orderheader.ac_AccountDetail.Add(accountDetailCu);

                    if (vat > 0)
                    {
                        AddOtherAccount("ReturnedShopping", ref orderheader, 0, 0, 0, 0, vat.Value, 0, 0, 0, 0);
                    }
                    // agar majmoe hazine kalaha (sum) va totalamount ekhtelaf dashte bashand pas takhfif mibashad
                    //totalamount nemitavand az sum bishtar bashad
                    if ((sum - header.totalamount) > 0)
                    {
                        decimal discountExpense = (sum - header.totalamount).Value;
                        AddOtherAccount("ReturnedShopping", ref orderheader, 0, 0, 0, discountExpense, vat.Value, 0, 0, 0, 0);
                    }

                    orderheader.Table = "order";
                    db.ac_OrderHeader.AddObject(orderheader);

                    if (!roles.Contains("canGiveCredit"))
                    {
                        ac_OrderHeader ac = new ac_OrderHeader();
                        ac.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                        ac.ClientId = header.customerid;
                        ac.EmployeeId = eid;
                        ac.Sell = !header.issell;
                        ac.CounterId = counterId;
                        ac.Date = utility.GetDateTimeCulture(header.date);
                        ac.CurrencyRateId = curid;
                        ac.Description = getInvoicDescription(true, false, true, (isCustomer != null ? true : false), !header.issell, header.ispreorder);
                        ac.InvoiceNO = getInvoiceNumber(db, "payment", ac.Sell, false);
                        //ac.OrderTypeId = getOrderType(db, header.customerid, header.issell, true, false, false, false, false, false, false, false);

                        ac.ShopId = header.shopid;
                        ac.IsMoney = true;
                        ac.ConfirmerId = eid;

                        ac.Amount = header.PaymentAmount.Value;
                        accountDetail.IsDept = false;
                        accountDetail.Amount = header.PaymentAmount;
                        ac.ac_AccountDetail.Add(accountDetail);

                        ac.ac_AccountDetail.Add(accDetailCu);
                        ac.Table = "payment";
                        db.ac_OrderHeader.AddObject(ac);
                    }


                }


                int save = 0;

                if (!roles.Contains("canGiveDiscount") && sum != header.totalamount)
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
                if (!roles.Contains("canGiveCredit") && sum != header.PaymentAmount.Value)
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
                else
                {
                    string alert = "";
                    if (orderheader.ac_AccountDetail.Count > 0)
                        save = db.SaveChanges();
                    if (save > 0)
                        if (save > 0 && header.PaymentAmount != null)
                            alert = "." + "اطلاعات فاکتور و پرداخت با موفقیت ذخیره شد ";
                        else if (save > 0 && header.PaymentAmount == null)
                            alert = "." + "اطلاعات فاکتور با موفقیت ذخیره شد";
                    return Json(new
                    {
                        alert = alert,
                        orderheader.InvoiceNO,
                        orderheader.Sell,
                        PreOrder = orderheader.ConfirmerId != null ? false : true,
                        ShopName = orderheader.inv_Shop.Name,
                        ShopPhone = orderheader.inv_Shop.Fax,
                        ShopAddress = orderheader.inv_Shop.p_Address.Address,
                        orderheader.p_Person.Gender,
                        orderheader.p_Person.Family,
                        ClientGender = orderheader.p_Person.Gender,
                        ClientFamily = orderheader.p_Person.Family,
                        Date = utility.GetstrDateCulture(orderheader.Date),
                        Time = orderheader.Date.ToString("HH:mm"),
                        orderheader.Amount,
                        orderheader.ac_CurrencyRate.ac_Currency.Currency,
                        detail = orderheader.ac_AccountDetail.Where(o => o.ac_OrderDetail != null).Select(s => s.ac_OrderDetail).GroupBy(d => new { d.ac_AccountDetail.ac_Account.inv_ItemDetail.BarcodeId, d.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Name }).Select(o => new { o.Key.Name, Price = o.Sum(s => s.ac_AccountDetail1 != null ? s.ac_AccountDetail1.Amount : s.ac_AccountDetail.Amount), Quantity = o.Sum(s => s.Quantity) })
                    });

                }
            }
            catch (InvalidOperationException)
            {
                return Json(new { isDone = false, msg = "." + "اطلاعات رنگ و جزئیات کالا را درست انتخاب کنید" });
            }
            catch (UpdateException e2)
            {
                return Json(new { isDone = false, msg = e2.InnerException.Message });
            }

            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = "." + "اطلاعات ذخیره نشد /n" + ex.InnerException.Message });

            }
        }

        public ActionResult AddOrderWholeSale(OrderHeader header, List<OrderWholeSaleDetail> itemDetails, int counterId, decimal vat)
        {
            try
            {

                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);

                if (!roles.Contains("canSale"))
                {
                    return Json("notInRole");
                }
                decimal sum = 0;
                int eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName).AccountId;
                int curid = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == header.currenyid).CurrencyRateId;
                var isCustomer = db.p_Customer.SingleOrDefault(c => c.AccountId == header.customerid);

                ac_OrderHeader orderheader = new ac_OrderHeader();
                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;
                orderheader.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                orderheader.ShopId = header.shopid;
                orderheader.CurrencyRateId = curid;
                orderheader.Amount = header.totalamount;
                if (!string.IsNullOrEmpty(header.description))
                    orderheader.Description = header.description;
                orderheader.InvoiceNO = getInvoiceNumber(db, header.invoicenumber, header.issell, header.ispreorder);
                if (!header.ispreorder)
                    orderheader.ConfirmerId = eid;
                orderheader.CounterId = counterId;
                orderheader.EmployeeId = eid;
                orderheader.ClientId = header.customerid;
                orderheader.Date = utility.GetDateTimeCulture(header.date);
                orderheader.Sell = header.issell;
                orderheader.IsMoney = false;
                if (!string.IsNullOrEmpty(header.clientCode))
                    header.customerid = db.p_Person.Single(p => p.Code == header.clientCode && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                db.AddToac_OrderHeader(orderheader);

                ac_Cash cash = new ac_Cash();
                ac_AccountDetail accountDetail = new ac_AccountDetail();
                cash.CurrencyRateId = curid;
                accountDetail.AccountId = db.ac_Counter.Single(c => c.AccountId == counterId).AccountId;
                cash.Type = "نقدی";
                accountDetail.ac_Cash = cash;


                ac_AccountDetail accountDetailCu = new ac_AccountDetail();
                ac_AccountDetail acDetail = new ac_AccountDetail();
                ac_AccountDetail accDetailCu = new ac_AccountDetail();

                if (isCustomer == null)
                {
                    //if (!header.issell)
                    //{
                    //mojodi kala -> bedehkar
                    foreach (var parentitem in itemDetails)
                    {
                        foreach (var dItem in parentitem.itemDetails)
                        {
                            ac_AccountDetail accDetail = new ac_AccountDetail();

                            ac_OrderDetail orderdetail = new ac_OrderDetail();
                            View_inv_ItemDetail ItemDetail = new View_inv_ItemDetail();

                            if (dItem.colorid != null && dItem.sizeid != null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == dItem.sizeid);
                            if (dItem.colorid == null && dItem.sizeid == null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == null);
                            if (dItem.colorid != null && dItem.sizeid == null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == null);
                            if (dItem.colorid == null && dItem.sizeid != null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == dItem.sizeid);
                            orderdetail.Quantity = dItem.quantity;
                            accDetail.Amount = parentitem.price * dItem.quantity;
                            accDetail.AccountId = ItemDetail.AccountId;
                            accDetail.IsDept = !header.issell ? true : false;

                            if (!string.IsNullOrEmpty(parentitem.description))
                                accDetail.Description = parentitem.description;
                            if (!string.IsNullOrEmpty(parentitem.serial))
                                orderdetail.Serial = parentitem.serial;
                            orderdetail.Broken = parentitem.broken;
                            sum += dItem.quantity * parentitem.price;
                            //orderdetail.ac_AccountDetail = accDetail;
                            //db.ac_OrderDetail.AddObject(orderdetail);
                            accDetail.ac_OrderDetail = orderdetail;
                            orderheader.ac_AccountDetail.Add(accDetail);
                        }
                    }
                    //moshtari ->bestankar
                    accountDetailCu.AccountId = db.p_Person.Single(c => c.AccountId == header.customerid).AccountId;
                    accountDetailCu.IsDept = !header.issell ? false : true;
                    accountDetailCu.Amount = header.totalamount;
                    orderheader.ac_AccountDetail.Add(accountDetailCu);
                    orderheader.Table = "order";

                    if (vat > 0)
                    {
                        AddOtherAccount("buy", ref orderheader, 0, 0, vat, 0, 0, 0, 0, 0, 0);
                    }
                    // agar majmoe hazine kalaha (sum) va totalamount ekhtelaf dashte bashand pas takhfif mibashad
                    //totalamount nemitavand az sum bishtar bashad
                    if ((sum - header.totalamount) > 0)
                    {
                        decimal buyDiscountIncome = (sum - header.totalamount);
                        AddOtherAccount("buy", ref orderheader, buyDiscountIncome, 0, 0, 0, 0, 0, 0, 0, 0);
                    }
                    //}

                }
                else
                {
                    //if (header.issell)
                    //{
                    var accId = db.p_Person.Single(c => c.AccountId == header.customerid).AccountId;
                    foreach (var parentitem in itemDetails)
                    {
                        foreach (var dItem in parentitem.itemDetails)
                        {
                            ac_AccountDetail accDetail = new ac_AccountDetail();
                            ac_OrderDetail orderdetail = new ac_OrderDetail();
                            View_inv_ItemDetail ItemDetail = new View_inv_ItemDetail();

                            if (dItem.colorid != null && dItem.sizeid != null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == dItem.sizeid);
                            if (dItem.colorid == null && dItem.sizeid == null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == null);
                            if (dItem.colorid != null && dItem.sizeid == null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == null);
                            if (dItem.colorid == null && dItem.sizeid != null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == dItem.sizeid);
                            orderdetail.Quantity = dItem.quantity;
                            accDetail.Amount = ItemDetail.BuyPrice * dItem.quantity;
                            // orderdetail.ac_AccountDetail.AccountId = ItemDetail.AccountId.Value;
                            accDetail.AccountId = ItemDetail.AccountId;
                            accDetail.IsDept = header.issell ? false : true;

                            if (!string.IsNullOrEmpty(parentitem.description))
                                accDetail.Description = parentitem.description;
                            if (!string.IsNullOrEmpty(parentitem.serial))
                                orderdetail.Serial = parentitem.serial;
                            orderdetail.Broken = parentitem.broken;
                            sum += dItem.quantity * parentitem.price;
                            orderdetail.ac_AccountDetail = accDetail;
                            db.ac_OrderDetail.AddObject(orderdetail);


                            //forosh -> bestankar
                            ac_AccountDetail accDetailS = new ac_AccountDetail();
                            var accSell_TotalAmount = db.ac_Account.Where(a => a.RelatedAccountId == ItemDetail.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemSale");
                            accDetailS.Amount = parentitem.price * dItem.quantity;
                            accDetailS.AccountId = accSell_TotalAmount.First().AccountId;
                            accDetailS.IsDept = header.issell ? false : true;
                            if (!string.IsNullOrEmpty(parentitem.description))
                                accDetailS.Description = parentitem.description;

                            //orderdetail.ac_AccountDetail1 = accDetailS;


                            //gheimate tamam shode -> bedehkar
                            var accPrice_TotalAmount = db.ac_Account.Where(a => a.RelatedAccountId == ItemDetail.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemPrice");
                            ac_AccountDetail accDetailTA = new ac_AccountDetail();
                            accDetailTA.Amount = ItemDetail.BuyPrice * dItem.quantity;
                            accDetailTA.AccountId = accPrice_TotalAmount.First().AccountId;
                            accDetailTA.IsDept = header.issell ? true : false;
                            if (!string.IsNullOrEmpty(parentitem.description))
                                accDetailTA.Description = parentitem.description;


                            sum += dItem.quantity * parentitem.price;

                            orderdetail.ac_AccountDetail = accDetail;
                            accDetailS.ac_OrderDetail1.Add(orderdetail);
                            accDetailTA.ac_OrderDetail2.Add(orderdetail);

                            orderheader.ac_AccountDetail.Add(accDetail);
                            orderheader.ac_AccountDetail.Add(accDetailTA);
                            orderheader.ac_AccountDetail.Add(accDetailS);
                        }
                    }

                    accountDetailCu.AccountId = db.p_Person.Single(c => c.AccountId == header.customerid).AccountId;
                    accountDetailCu.IsDept = header.issell ? true : false;
                    accountDetailCu.Amount = header.totalamount;
                    orderheader.ac_AccountDetail.Add(accountDetailCu);
                    orderheader.Table = "order";

                    if (vat > 0)
                    {
                        AddOtherAccount("sale", ref orderheader, 0, 0, 0, 0, vat, 0, 0, 0, 0);
                    }
                    // agar majmoe hazine kalaha (sum) va totalamount ekhtelaf dashte bashand pas takhfif mibashad
                    //totalamount nemitavand az sum bishtar bashad
                    if ((sum - header.totalamount) > 0)
                    {
                        decimal saleDiscountIncome = (sum - header.totalamount);
                        AddOtherAccount("sale", ref orderheader, 0, 0, 0, saleDiscountIncome, vat, 0, 0, 0, 0);
                    }
                    //}

                }
                if (header.PaymentAmount != null)
                {
                    ac_OrderHeader ac = new ac_OrderHeader();
                    ac.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                    ac.ClientId = header.customerid;
                    ac.EmployeeId = eid;
                    ac.Sell = !header.issell;
                    ac.CounterId = counterId;
                    ac.Date = utility.GetDateTimeCulture(header.date);
                    ac.CurrencyRateId = curid;
                    ac.Description = getInvoicDescription(true, false, true, (isCustomer != null ? true : false), !header.issell, header.ispreorder);
                    ac.InvoiceNO = getInvoiceNumber(db, "payment", ac.Sell, false);
                    //ac.OrderTypeId = getOrderType(db, header.customerid, header.issell, true, false, false, false, false, false, false, false);

                    ac.ShopId = header.shopid;
                    ac.IsMoney = true;
                    ac.ConfirmerId = eid;

                    if (isCustomer == null && !header.issell)
                    {
                        ac.Amount = header.PaymentAmount.Value;
                        accountDetail.IsDept = false;
                        accountDetail.Amount = header.PaymentAmount;
                        ac.ac_AccountDetail.Add(accountDetail);

                        accountDetailCu.AccountId = db.p_Person.Single(c => c.AccountId == header.customerid).AccountId;
                        accountDetailCu.IsDept = true;
                        accountDetailCu.Amount = header.PaymentAmount.Value;
                        ac.ac_AccountDetail.Add(accountDetailCu);
                        ac.Table = "payment";
                        db.ac_OrderHeader.AddObject(ac);

                        acDetail.Amount = sum;
                        acDetail.AccountId = accountDetailCu.AccountId;
                        acDetail.IsDept = false;

                        orderheader.ac_AccountDetail.Add(acDetail);

                    }
                    else
                    {
                        if (isCustomer != null && header.issell)
                        {
                            ac.Amount = header.PaymentAmount.Value;
                            accountDetail.IsDept = true;
                            accountDetail.Amount = header.PaymentAmount;
                            ac.ac_AccountDetail.Add(accountDetail);

                            accDetailCu.AccountId = isCustomer.p_Person.AccountId;
                            accDetailCu.IsDept = false;
                            accDetailCu.Amount = header.PaymentAmount.Value;

                            ac.ac_AccountDetail.Add(accDetailCu);
                            ac.Table = "payment";
                            db.ac_OrderHeader.AddObject(ac);
                        }
                    }
                }


                //moshtari va factor forosh
                if (isCustomer != null && !header.issell && 1 == 2)
                {

                    //mojodi kala -> bedehkar
                    foreach (var parentitem in itemDetails)
                    {
                        foreach (var dItem in parentitem.itemDetails)
                        {
                            ac_AccountDetail accDetail = new ac_AccountDetail();

                            ac_OrderDetail orderdetail = new ac_OrderDetail();
                            View_inv_ItemDetail ItemDetail = new View_inv_ItemDetail();

                            if (dItem.colorid != null && dItem.sizeid != null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == dItem.sizeid);
                            if (dItem.colorid == null && dItem.sizeid == null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == null);
                            if (dItem.colorid != null && dItem.sizeid == null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == null);
                            if (dItem.colorid == null && dItem.sizeid != null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == dItem.sizeid);
                            orderdetail.Quantity = dItem.quantity;
                            accDetail.Amount = parentitem.price * dItem.quantity;
                            // orderdetail.ac_AccountDetail.AccountId = ItemDetail.AccountId.Value;
                            accDetail.AccountId = ItemDetail.AccountId;
                            accDetail.IsDept = true;

                            if (!string.IsNullOrEmpty(parentitem.description))
                                accDetail.Description = parentitem.description;
                            if (!string.IsNullOrEmpty(parentitem.serial))
                                orderdetail.Serial = parentitem.serial;
                            orderdetail.Broken = parentitem.broken;
                            sum += dItem.quantity * parentitem.price;
                            orderdetail.ac_AccountDetail = accDetail;
                            db.ac_OrderDetail.AddObject(orderdetail);
                            accDetail.ac_OrderDetail = orderdetail;
                            orderheader.ac_AccountDetail.Add(accDetail);
                        }
                    }
                    //moshtari ->bestankar
                    accountDetailCu.AccountId = db.p_Person.Single(c => c.AccountId == header.customerid).AccountId;
                    accountDetailCu.IsDept = false;
                    accountDetailCu.Amount = header.totalamount;
                    orderheader.ac_AccountDetail.Add(accountDetailCu);
                    orderheader.Table = "order";


                    orderheader.ConfirmerId = eid;

                    if (vat > 0)
                    {
                        AddOtherAccount("ReturnedSelling", ref orderheader, 0, 0, vat, 0, 0, 0, 0, 0, 0);
                    }
                    // agar majmoe hazine kalaha (sum) va totalamount ekhtelaf dashte bashand pas takhfif mibashad
                    //totalamount nemitavand az sum bishtar bashad
                    if ((sum - header.totalamount) > 0)
                    {
                        decimal saleReturnDiscountIncome = (sum - header.totalamount);
                        AddOtherAccount("ReturnedSelling", ref orderheader, 0, saleReturnDiscountIncome, 0, 0, 0, 0, 0, 0, 0);
                    }


                    // vase karbarayi hast ke nesiye nemitoonan befrooshan , dar natije vaghti yechiro marjoo mikonan poolesham bayad hamoon moghe pas bedan
                    //masalan agar 100000 toman to ye factore kharid mikoni va poolesham dadi , age 20000 tomaneshoo marjoo mikoni
                    //ye factore sefareshe marjooyi zade mishe va ye factore pardakht be moshtariyeh 20000 tomani
                    if (!roles.Contains("canGiveCredit"))
                    {
                        ac_OrderHeader ac = new ac_OrderHeader();
                        ac.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                        ac.ClientId = header.customerid;
                        ac.EmployeeId = eid;
                        ac.Sell = !header.issell;
                        ac.CounterId = counterId;
                        ac.Date = utility.GetDateTimeCulture(header.date);
                        ac.CurrencyRateId = curid;
                        ac.Description = getInvoicDescription(true, false, true, (isCustomer != null ? true : false), !header.issell, header.ispreorder);
                        ac.InvoiceNO = getInvoiceNumber(db, "payment", ac.Sell, false);
                        //ac.OrderTypeId = getOrderType(db, header.customerid, header.issell, true, false, false, false, false, false, false, false);

                        ac.ShopId = header.shopid;
                        ac.IsMoney = true;
                        ac.ConfirmerId = eid;

                        ac.Amount = header.PaymentAmount.Value;
                        accountDetail.IsDept = true;
                        accountDetail.Amount = header.PaymentAmount;
                        ac.ac_AccountDetail.Add(accountDetail);

                        ac.ac_AccountDetail.Add(accDetailCu);
                        ac.Table = "payment";
                        db.ac_OrderHeader.AddObject(ac);

                    }

                }
                //foroshande va factor kharid
                if (isCustomer == null && header.issell && 1 == 2)
                {
                    var accId = db.p_Person.Single(c => c.AccountId == header.customerid).AccountId;
                    foreach (var parentitem in itemDetails)
                    {
                        foreach (var dItem in parentitem.itemDetails)
                        {
                            ac_AccountDetail accDetail = new ac_AccountDetail();
                            ac_OrderDetail orderdetail = new ac_OrderDetail();
                            View_inv_ItemDetail ItemDetail = new View_inv_ItemDetail();
                            if (dItem.colorid != null && dItem.sizeid != null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == dItem.sizeid);
                            if (dItem.colorid == null && dItem.sizeid == null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == null);
                            if (dItem.colorid != null && dItem.sizeid == null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == null);
                            if (dItem.colorid == null && dItem.sizeid != null)
                                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == dItem.sizeid);

                            //mojodi kala -> bestankar
                            orderdetail.Quantity = dItem.quantity;
                            accDetail.Amount = ItemDetail.BuyPrice * dItem.quantity;
                            //orderdetail.ac_AccountDetail.AccountId = ItemDetail.AccountId.Value;
                            orderdetail.Broken = parentitem.broken;
                            orderdetail.Serial = parentitem.serial;
                            accDetail.AccountId = ItemDetail.AccountId;
                            accDetail.IsDept = false;


                            //forosh -> bestankar
                            ac_AccountDetail accDetailS = new ac_AccountDetail();
                            var accSell_TotalAmount = db.ac_Account.Where(a => a.RelatedAccountId == ItemDetail.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemSale");
                            accDetailS.Amount = parentitem.price * dItem.quantity;
                            accDetailS.AccountId = accSell_TotalAmount.First().AccountId;
                            accDetailS.IsDept = false;
                            if (!string.IsNullOrEmpty(parentitem.description))
                                accDetailS.Description = parentitem.description;

                            //orderdetail.ac_AccountDetail1 = accDetailS;


                            //gheimate tamam shode -> bedehkar
                            var accPrice_TotalAmount = db.ac_Account.Where(a => a.RelatedAccountId == ItemDetail.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemPrice");
                            ac_AccountDetail accDetailTA = new ac_AccountDetail();
                            accDetailTA.Amount = ItemDetail.BuyPrice * dItem.quantity;
                            accDetailTA.AccountId = accPrice_TotalAmount.First().AccountId;
                            accDetailTA.IsDept = true;
                            if (!string.IsNullOrEmpty(parentitem.description))
                                accDetailTA.Description = parentitem.description;


                            sum += dItem.quantity * parentitem.price;

                            orderdetail.ac_AccountDetail = accDetail;
                            accDetailS.ac_OrderDetail1.Add(orderdetail);
                            accDetailTA.ac_OrderDetail2.Add(orderdetail);

                            orderheader.ac_AccountDetail.Add(accDetail);
                            orderheader.ac_AccountDetail.Add(accDetailTA);
                            orderheader.ac_AccountDetail.Add(accDetailS);
                        }
                    }

                    //foroshande -> bedehkar
                    accountDetailCu.AccountId = eid;
                    accountDetailCu.IsDept = true;
                    accountDetailCu.Amount = header.totalamount;
                    orderheader.ac_AccountDetail.Add(accountDetailCu);

                    if (vat > 0)
                    {
                        AddOtherAccount("ReturnedShopping", ref orderheader, 0, 0, 0, 0, vat, 0, 0, 0, 0);
                    }
                    // agar majmoe hazine kalaha (sum) va totalamount ekhtelaf dashte bashand pas takhfif mibashad
                    //totalamount nemitavand az sum bishtar bashad
                    if ((sum - header.totalamount) > 0)
                    {
                        decimal discountExpense = (sum - header.totalamount);
                        AddOtherAccount("ReturnedShopping", ref orderheader, 0, 0, 0, discountExpense, 0, 0, 0, 0, 0);
                    }

                    orderheader.Table = "order";
                    db.ac_OrderHeader.AddObject(orderheader);

                    if (!roles.Contains("canGiveCredit"))
                    {
                        ac_OrderHeader ac = new ac_OrderHeader();
                        ac.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                        ac.ClientId = header.customerid;
                        ac.EmployeeId = eid;
                        ac.Sell = !header.issell;
                        ac.CounterId = counterId;
                        ac.Date = utility.GetDateTimeCulture(header.date);
                        ac.CurrencyRateId = curid;
                        ac.Description = getInvoicDescription(true, false, true, (isCustomer != null ? true : false), !header.issell, header.ispreorder);
                        ac.InvoiceNO = getInvoiceNumber(db, "payment", ac.Sell, false);
                        //ac.OrderTypeId = getOrderType(db, header.customerid, header.issell, true, false, false, false, false, false, false, false);

                        ac.ShopId = header.shopid;
                        ac.IsMoney = true;
                        ac.ConfirmerId = eid;

                        ac.Amount = header.PaymentAmount.Value;
                        accountDetail.IsDept = false;
                        accountDetail.Amount = header.PaymentAmount;
                        ac.ac_AccountDetail.Add(accountDetail);

                        ac.ac_AccountDetail.Add(accDetailCu);
                        ac.Table = "payment";
                        db.ac_OrderHeader.AddObject(ac);
                    }


                }


                int save = 0;

                if (!roles.Contains("canGiveDiscount") && sum != header.totalamount)
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
                if (!roles.Contains("canGiveCredit") && sum != header.PaymentAmount.Value)
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
                else
                {
                    string alert = "";
                    if (orderheader.ac_AccountDetail.Count > 0)
                        save = db.SaveChanges();
                    if (save > 0)
                        if (save > 0 && header.PaymentAmount != null)
                            alert = "." + "اطلاعات فاکتور و پرداخت با موفقیت ذخیره شد ";
                        else if (save > 0 && header.PaymentAmount == null)
                            alert = "." + "اطلاعات فاکتور با موفقیت ذخیره شد";
                    return Json(new
                    {
                        alert = alert,
                        orderheader.InvoiceNO,
                        orderheader.Sell,
                        PreOrder = orderheader.ConfirmerId != null ? false : true,
                        ShopName = orderheader.inv_Shop.Name,
                        ShopPhone = orderheader.inv_Shop.Fax,
                        ShopAddress = orderheader.inv_Shop.p_Address.Address,
                        orderheader.p_Person.Gender,
                        orderheader.p_Person.Family,
                        ClientGender = orderheader.p_Person.Gender,
                        ClientFamily = orderheader.p_Person.Family,
                        Date = utility.GetstrDateCulture(orderheader.Date),
                        Time = orderheader.Date.ToString("HH:mm"),
                        orderheader.Amount,
                        orderheader.ac_CurrencyRate.ac_Currency.Currency,
                        detail = orderheader.ac_AccountDetail.Where(o => o.ac_OrderDetail != null).Select(s => s.ac_OrderDetail).GroupBy(d => new { d.ac_AccountDetail.ac_Account.inv_ItemDetail.BarcodeId, d.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Name }).Select(o => new { o.Key.Name, Price = o.Sum(s => s.ac_AccountDetail1 != null ? s.ac_AccountDetail1.Amount : s.ac_AccountDetail.Amount), Quantity = o.Sum(s => s.Quantity) })
                    });

                }



                //foreach (var parentitem in itemDetails)
                //{

                //    foreach (var dItem in parentitem.itemDetails)
                //    {
                //        ac_OrderDetail orderdetail = new ac_OrderDetail();

                //        if (dItem.colorid != null && dItem.sizeid != null)
                //            orderdetail.ItemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == dItem.sizeid).ItemDetailId;
                //        if (dItem.colorid == null && dItem.sizeid == null)
                //            orderdetail.ItemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == null).ItemDetailId;
                //        if (dItem.colorid != null && dItem.sizeid == null)
                //            orderdetail.ItemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == null).ItemDetailId;
                //        if (dItem.colorid == null && dItem.sizeid != null)
                //            orderdetail.ItemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == dItem.sizeid).ItemDetailId;
                //        orderdetail.Quantity = dItem.quantity;
                //        orderdetail.Price = parentitem.price;
                //        if (!string.IsNullOrEmpty(parentitem.description))
                //            orderdetail.Description = parentitem.description;
                //        if (!string.IsNullOrEmpty(parentitem.serial))
                //            orderdetail.Serial = parentitem.serial;
                //        orderdetail.Broken = parentitem.broken;
                //        sum += parentitem.quantity * parentitem.price;
                //        orderheader.ac_OrderDetail.Add(orderdetail);
                //    }

                //}
                //db.ac_OrderHeader.AddObject(orderheader);

                //if (header.PaymentAmount != null)
                //{
                //    ac_OrderHeader ac = new ac_OrderHeader();
                //    ac.ClientId = header.customerid;
                //    ac.EmployeeId = eid;
                //    ac.Sell = !header.issell;
                //    ac.CounterId = counterId;
                //    ac.Date = utility.GetDateTimeCulture(header.date);
                //    ac.CurrencyRateId = curid;
                //    ac.InvoiceNO = getInvoiceNumber(db, "payment", ac.Sell, false);
                //    ac.OrderTypeId = getOrderType(db, header.customerid, header.issell, true, false, false, false, false, false, false, false);
                //    ac.Amount = header.PaymentAmount.Value;
                //    ac.IsMoney = true;
                //    ac.ShopId = header.shopid;
                //    ac.ConfirmerId = eid;
                //    ac_Cash cash = new ac_Cash();
                //    cash.CurrencyRateId = curid;
                //    cash.Amount = header.PaymentAmount.Value;
                //    cash.Type = "نقدی";
                //    ac.ac_Cash.Add(cash);
                //    db.ac_OrderHeader.AddObject(ac);
                //}

                //int save = 0;
                //if (!roles.Contains("canGiveDiscount") && sum != header.totalamount)
                //{
                //    return Json("notInRole");
                //}
                //if (!roles.Contains("canGiveCredit") && sum != header.PaymentAmount.Value)
                //{
                //    return Json("notInRole");
                //}
                //else
                //{
                //    string alert = "";
                //    if (orderheader.ac_OrderDetail.Count > 0)
                //        save = db.SaveChanges();
                //    if (save > 0 && header.PaymentAmount != null)
                //        alert = "." + "اطلاعات فاکتور و پرداخت با موفقیت ذخیره شد ";
                //    else if (save > 0 && header.PaymentAmount == null)
                //        alert = "." + "اطلاعات فاکتور با موفقیت ذخیره شد";
                //    return Json(new
                //    {
                //        alert = alert,
                //        orderheader.InvoiceNO,
                //        orderheader.Sell,
                //        PreOrder = orderheader.ConfirmerId != null ? false : true,
                //        ShopName = orderheader.inv_Shop.Name,
                //        orderheader.p_Person.Gender,
                //        orderheader.p_Person.Family,
                //        ClientGender = orderheader.p_Person1.Gender,
                //        ClientFamily = orderheader.p_Person1.Family,
                //        Date = utility.GetstrDateCulture(orderheader.Date),
                //        Time = orderheader.Date.ToString("HH:mm"),
                //        orderheader.Amount,
                //        orderheader.ac_CurrencyRate.ac_Currency.Currency,
                //        detail = orderheader.ac_OrderDetail.GroupBy(d => new { d.inv_ItemDetail.BarcodeId, d.inv_ItemDetail.inv_Barcode.Name }).Select(o => new { o.Key.Name, Price = o.Sum(s => s.Price), Quantity = o.Sum(s => s.Quantity) })
                //    });
                //}

            }
            catch (InvalidOperationException)
            {
                return Json("." + "اطلاعات رنگ و جزئیات کالا را درست انتخاب کنید");
            }
            catch (UpdateException e2)
            {
                return Json(e2.InnerException.Message);
            }

            catch (Exception ex)
            {
                return Json("." + "اطلاعات ذخیره نشد /n" + ex.InnerException.Message);

            }

        }

        public View_inv_ItemDetail getItemDetailByColorAndDetail(int barcodeid, int? colorid, int? sizeid)
        {
            View_inv_ItemDetail ItemDetail = new View_inv_ItemDetail();
            if (colorid != null && sizeid != null)
                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == barcodeid && i.ColorId == colorid && i.SizeId == sizeid);
            if (colorid == null && sizeid == null)
                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == barcodeid && i.ColorId == null && i.SizeId == null);
            if (colorid != null && sizeid == null)
                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == barcodeid && i.ColorId == colorid && i.SizeId == null);
            if (colorid == null && sizeid != null)
                ItemDetail = db.View_inv_ItemDetail.Single(i => i.BarcodeId == barcodeid && i.ColorId == null && i.SizeId == sizeid);

            return ItemDetail;
        }


        public ActionResult EditOrder(OrderHeader header, List<OrderDetail> itemDetails, int counterId, int orderHeaderId, decimal vat)
        {

            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditSale"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }

                var oldOrderHeader = db.ac_OrderHeader.Single(o => o.OrderHeaderId == orderHeaderId);
                header.issell = oldOrderHeader.Sell;
                var oldItemDetails = db.ac_OrderDetail.Where(a => a.ac_AccountDetail.OrderHeaderId == orderHeaderId)
                    .Select(s => new
                    {
                        s.AccountDetailId,
                        s.Quantity,
                        s.Broken,
                        s.ac_AccountDetail.AccountId,
                        s.ac_AccountDetail.Amount,
                        s.ac_AccountDetail.ac_Account.inv_ItemDetail.BarcodeId,
                        s.ac_AccountDetail.ac_Account.inv_ItemDetail,
                        SizeId = (int?)s.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Size.FirstOrDefault().SizeId,
                        ColorId = (int?)s.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Color.FirstOrDefault().ColorId
                    }).ToList();


                if (itemDetails != null)
                {
                    var client = db.p_Person.Single(c => c.Code == header.clientCode && (c.aspnet_Applications == null || c.aspnet_Applications.ApplicationName == appName));
                    var isCustomer = client.p_Customer;
                    decimal sum = itemDetails == null ? 0 : itemDetails.Sum(s => s.quantity * s.price);
                    int oldClientId = oldOrderHeader.ClientId.Value;

                    var oldClient = oldOrderHeader.ac_AccountDetail.Single(s => s.AccountId == oldClientId);
                    oldClient.AccountId = client.AccountId;
                    oldClient.Amount = header.totalamount + vat;

                    if ((sum - header.totalamount) == 0)
                    {

                        int clientId = oldOrderHeader.ClientId.Value;
                        var t = oldOrderHeader.ac_AccountDetail.Where(o => o.ac_Account.ac_TableAccount != null);
                        var incomeExpense = oldOrderHeader.ac_AccountDetail.Where(o => o.ac_Account.ac_TableAccount != null && (o.ac_Account.ac_TableAccount.Table == "vatExpense" || o.ac_Account.ac_TableAccount.Table == "buyDiscountIncome" || o.ac_Account.ac_TableAccount.Table == "discountExpense" || o.ac_Account.ac_TableAccount.Table == "vatIncome" || o.ac_Account.ac_TableAccount.Table == "saleReturnDiscountIncome" || o.ac_Account.ac_TableAccount.Table == "deliveryExpense" || o.ac_Account.ac_TableAccount.Table == "deliveryIncome")).ToList();

                        foreach (var item in incomeExpense)
                        {
                            db.ac_AccountDetail.DeleteObject(item);
                        }
                    }

                    foreach (var item in itemDetails.ToList())
                    {
                        var id = getItemDetailByColorAndDetail(item.barcodeid, item.colorid, item.sizeid);
                        var matchAll = oldItemDetails.FirstOrDefault(a => a.Amount / a.Quantity == item.price && a.AccountId == id.AccountId && a.Quantity == item.quantity);
                        if (matchAll == null)
                            break;
                        var orderDetail = db.ac_OrderDetail.Single(o => o.ac_AccountDetail.AccountDetailId == matchAll.AccountDetailId);
                        orderDetail.Serial = item.serial;
                        var oldItemLocation = db.inv_ItemLocation.Single(i => i.ItemDetailId == matchAll.AccountId && i.ShopId == oldOrderHeader.ShopId);
                        inv_ItemLocation newItemLocation = new inv_ItemLocation();
                        newItemLocation = db.inv_ItemLocation.SingleOrDefault(i => i.ItemDetailId == id.AccountId && i.ShopId == header.shopid);
                        if (newItemLocation == null)
                        {
                            newItemLocation = new inv_ItemLocation();
                            newItemLocation.ItemDetailId = id.AccountId;
                            newItemLocation.ShopId = header.shopid;
                            newItemLocation.InitialQuantity = 0;
                            newItemLocation.Quantity = 0;
                            newItemLocation.inv_ItemDetail = db.inv_ItemDetail.Single(s => s.AccountId == id.AccountId);
                            db.inv_ItemLocation.AddObject(newItemLocation);
                        }
                        if (!header.issell)
                        {
                            if (isCustomer == null)
                            {
                                oldItemLocation.inv_ItemDetail.BuyPrice = oldItemLocation.inv_ItemDetail.BuyQuantity == 0 ? matchAll.Amount.Value / matchAll.Quantity : (oldItemLocation.inv_ItemDetail.BuyQuantity * oldItemLocation.inv_ItemDetail.BuyPrice - Math.Abs(matchAll.Amount.Value)) / oldItemLocation.inv_ItemDetail.BuyQuantity - matchAll.Quantity;
                                oldItemLocation.Quantity = oldItemLocation.Quantity == 0 ? matchAll.Quantity : oldItemLocation.Quantity - matchAll.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity - matchAll.Quantity;

                                newItemLocation.inv_ItemDetail.BuyPrice = newItemLocation.inv_ItemDetail.BuyQuantity == 0 ? item.price : (newItemLocation.inv_ItemDetail.BuyQuantity * newItemLocation.inv_ItemDetail.BuyPrice + item.quantity * item.price) / newItemLocation.inv_ItemDetail.BuyQuantity + item.quantity;

                            }
                            else
                            {
                                oldItemLocation.Quantity = oldItemLocation.Quantity - matchAll.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity - matchAll.Quantity;
                            }

                            newItemLocation.Quantity = newItemLocation.Quantity + item.quantity;
                            newItemLocation.inv_ItemDetail.BuyQuantity = newItemLocation.inv_ItemDetail.BuyQuantity + item.quantity;
                        }
                        else
                        {
                            if (isCustomer == null)
                            {
                                oldItemLocation.inv_ItemDetail.BuyPrice = (oldItemLocation.inv_ItemDetail.BuyQuantity * oldItemLocation.inv_ItemDetail.BuyPrice + Math.Abs(matchAll.Amount.Value)) / oldItemLocation.inv_ItemDetail.BuyQuantity + matchAll.Quantity;
                                oldItemLocation.Quantity = oldItemLocation.Quantity + matchAll.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity + matchAll.Quantity;

                                newItemLocation.inv_ItemDetail.BuyPrice = newItemLocation.inv_ItemDetail.BuyQuantity == 0 ? item.price : (newItemLocation.inv_ItemDetail.BuyQuantity * newItemLocation.inv_ItemDetail.BuyPrice - item.quantity * item.price) / newItemLocation.inv_ItemDetail.BuyQuantity + item.quantity;
                            }
                            else
                            {
                                oldItemLocation.Quantity = oldItemLocation.Quantity + matchAll.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity + matchAll.Quantity;
                            }

                            newItemLocation.Quantity = newItemLocation.Quantity - item.quantity;
                            newItemLocation.inv_ItemDetail.BuyQuantity = newItemLocation.inv_ItemDetail.BuyQuantity - item.quantity;
                        }

                        if (matchAll != null)
                        {
                            oldItemDetails.Remove(matchAll);
                            itemDetails.Remove(item);
                        }
                    }

                    foreach (var item in itemDetails.ToList())
                    {
                        var id = getItemDetailByColorAndDetail(item.barcodeid, item.colorid, item.sizeid);
                        var matchAllExAmount = oldItemDetails.FirstOrDefault(a => a.AccountId == id.AccountId);
                        if (matchAllExAmount == null)
                            break;
                        var accountDetail = db.ac_AccountDetail.Single(a => a.AccountDetailId == matchAllExAmount.AccountDetailId);
                        var orderDetail = accountDetail.ac_OrderDetail;
                        orderDetail.Serial = item.serial;
                        if (isCustomer != null)
                        {
                            orderDetail.ac_AccountDetail1.Amount = item.quantity * item.price;
                            var accSell_TotalAmount = orderDetail.ac_AccountDetail;
                            decimal saleAmount = (accSell_TotalAmount.Amount.Value / orderDetail.Quantity) * item.quantity;
                            accSell_TotalAmount.Amount = saleAmount;
                            var accSPrice_TotalAmount = orderDetail.ac_AccountDetail2;
                            accSPrice_TotalAmount.Amount = saleAmount;
                        }
                        else
                        {
                            orderDetail.ac_AccountDetail.Amount = item.quantity * item.price;
                        }
                        orderDetail.Quantity = item.quantity;
                        var oldItemLocation = db.inv_ItemLocation.Single(i => i.ItemDetailId == matchAllExAmount.AccountId && i.ShopId == oldOrderHeader.ShopId);
                        inv_ItemLocation newItemLocation = new inv_ItemLocation();
                        newItemLocation = db.inv_ItemLocation.SingleOrDefault(i => i.ItemDetailId == id.AccountId && i.ShopId == header.shopid);
                        if (newItemLocation == null)
                        {
                            newItemLocation = new inv_ItemLocation();
                            newItemLocation.ItemDetailId = id.AccountId;
                            newItemLocation.ShopId = header.shopid;
                            newItemLocation.InitialQuantity = 0;
                            newItemLocation.Quantity = 0;
                            newItemLocation.inv_ItemDetail = db.inv_ItemDetail.Single(s => s.AccountId == id.AccountId);
                            db.inv_ItemLocation.AddObject(newItemLocation);

                        }
                        if (!header.issell)
                        {
                            if (isCustomer == null)
                            {
                                oldItemLocation.inv_ItemDetail.BuyPrice = oldItemLocation.inv_ItemDetail.BuyQuantity - matchAllExAmount.Quantity == 0 ? 0 : (oldItemLocation.inv_ItemDetail.BuyQuantity * oldItemLocation.inv_ItemDetail.BuyPrice - Math.Abs(matchAllExAmount.Amount.Value)) / oldItemLocation.inv_ItemDetail.BuyQuantity - matchAllExAmount.Quantity;

                                oldItemLocation.Quantity = oldItemLocation.Quantity - matchAllExAmount.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity - matchAllExAmount.Quantity;
                                newItemLocation.inv_ItemDetail.BuyPrice = newItemLocation.inv_ItemDetail.BuyQuantity == 0 ? item.price : (newItemLocation.inv_ItemDetail.BuyQuantity * newItemLocation.inv_ItemDetail.BuyPrice + item.quantity * item.price) / newItemLocation.inv_ItemDetail.BuyQuantity + item.quantity;

                            }
                            else
                            {
                                oldItemLocation.Quantity = oldItemLocation.Quantity - matchAllExAmount.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity - matchAllExAmount.Quantity;
                            }
                            newItemLocation.Quantity = newItemLocation.Quantity + item.quantity;
                            newItemLocation.inv_ItemDetail.BuyQuantity = newItemLocation.inv_ItemDetail.BuyQuantity + item.quantity;
                        }
                        else
                        {
                            if (isCustomer == null)
                            {
                                oldItemLocation.inv_ItemDetail.BuyPrice = (oldItemLocation.inv_ItemDetail.BuyQuantity * oldItemLocation.inv_ItemDetail.BuyPrice + Math.Abs(matchAllExAmount.Amount.Value)) / oldItemLocation.inv_ItemDetail.BuyQuantity + matchAllExAmount.Quantity;
                                oldItemLocation.Quantity = oldItemLocation.Quantity + matchAllExAmount.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity + matchAllExAmount.Quantity;
                                newItemLocation.inv_ItemDetail.BuyPrice = newItemLocation.inv_ItemDetail.BuyQuantity == 0 ? item.price : (newItemLocation.inv_ItemDetail.BuyQuantity * newItemLocation.inv_ItemDetail.BuyPrice - item.quantity * item.price) / newItemLocation.inv_ItemDetail.BuyQuantity + item.quantity;
                            }
                            else
                            {
                                oldItemLocation.Quantity = oldItemLocation.Quantity + matchAllExAmount.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity + matchAllExAmount.Quantity;
                            }

                            newItemLocation.Quantity = newItemLocation.Quantity - item.quantity;
                            newItemLocation.inv_ItemDetail.BuyQuantity = newItemLocation.inv_ItemDetail.BuyQuantity - item.quantity;
                        }
                        if (matchAllExAmount != null)
                        {
                            oldItemDetails.Remove(matchAllExAmount);
                            itemDetails.Remove(item);
                        }
                    }

                    foreach (var item in itemDetails.ToList())
                    {
                        var id = getItemDetailByColorAndDetail(item.barcodeid, item.colorid, item.sizeid);
                        var matchBarcode = oldItemDetails.FirstOrDefault(a => a.BarcodeId == item.barcodeid);
                        if (matchBarcode == null)
                            break;
                        var accountDetail = db.ac_AccountDetail.Single(a => a.AccountDetailId == matchBarcode.AccountDetailId); ;
                        var orderDetail = accountDetail.ac_OrderDetail;
                        orderDetail.Serial = item.serial;
                        accountDetail.AccountId = id.AccountId;
                        if (isCustomer != null)
                        {
                            var accPrice = db.ac_Account.Single(a => a.RelatedAccountId == id.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemPrice");
                            var accSale = db.ac_Account.Single(a => a.RelatedAccountId == id.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemSale");
                            orderDetail.ac_AccountDetail1.AccountId = accSale.AccountId;
                            orderDetail.ac_AccountDetail1.Amount = item.quantity * item.price;
                            decimal saleAmount = id.BuyPrice.Value * item.quantity;
                            orderDetail.ac_AccountDetail.Amount = saleAmount;
                            var accSPrice_TotalAmount = orderDetail.ac_AccountDetail2;
                            accSPrice_TotalAmount.AccountId = accPrice.AccountId;
                            accSPrice_TotalAmount.Amount = saleAmount;
                        }
                        else
                        {
                            orderDetail.ac_AccountDetail.Amount = item.quantity * item.price;
                        }
                        orderDetail.Quantity = item.quantity;
                        var oldItemLocation = db.inv_ItemLocation.Single(i => i.ItemDetailId == matchBarcode.AccountId && i.ShopId == oldOrderHeader.ShopId);
                        inv_ItemLocation newItemLocation = new inv_ItemLocation();
                        newItemLocation = db.inv_ItemLocation.SingleOrDefault(i => i.ItemDetailId == id.AccountId && i.ShopId == header.shopid);
                        if (newItemLocation == null)
                        {
                            newItemLocation = new inv_ItemLocation();
                            newItemLocation.ItemDetailId = id.AccountId;
                            newItemLocation.ShopId = header.shopid;
                            newItemLocation.InitialQuantity = 0;
                            newItemLocation.Quantity = 0;
                            db.inv_ItemLocation.AddObject(newItemLocation);
                        }
                        if (!header.issell)
                        {
                            if (isCustomer == null)
                            {
                                oldItemLocation.inv_ItemDetail.BuyPrice = oldItemLocation.inv_ItemDetail.BuyQuantity - matchBarcode.Quantity == 0 ? 0 : (oldItemLocation.inv_ItemDetail.BuyQuantity * oldItemLocation.inv_ItemDetail.BuyPrice - Math.Abs(matchBarcode.Amount.Value)) / oldItemLocation.inv_ItemDetail.BuyQuantity - matchBarcode.Quantity;
                                oldItemLocation.Quantity = oldItemLocation.Quantity - matchBarcode.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity - matchBarcode.Quantity;
                                newItemLocation.inv_ItemDetail.BuyPrice = newItemLocation.inv_ItemDetail.BuyQuantity == 0 ? item.price : (newItemLocation.inv_ItemDetail.BuyQuantity * newItemLocation.inv_ItemDetail.BuyPrice + item.quantity * item.price) / newItemLocation.inv_ItemDetail.BuyQuantity + item.quantity;
                            }
                            else
                            {
                                oldItemLocation.Quantity = oldItemLocation.Quantity - matchBarcode.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity - matchBarcode.Quantity;
                            }
                            newItemLocation.Quantity = newItemLocation.Quantity + item.quantity;
                            newItemLocation.inv_ItemDetail.BuyQuantity = newItemLocation.inv_ItemDetail.BuyQuantity + item.quantity;
                        }
                        else
                        {
                            if (isCustomer == null)
                            {
                                oldItemLocation.inv_ItemDetail.BuyPrice = (oldItemLocation.inv_ItemDetail.BuyQuantity * oldItemLocation.inv_ItemDetail.BuyPrice + Math.Abs(matchBarcode.Amount.Value)) / oldItemLocation.inv_ItemDetail.BuyQuantity + matchBarcode.Quantity;
                                oldItemLocation.Quantity = oldItemLocation.Quantity + matchBarcode.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity + matchBarcode.Quantity;
                                newItemLocation.inv_ItemDetail.BuyPrice = newItemLocation.inv_ItemDetail.BuyQuantity == 0 ? item.price : (newItemLocation.inv_ItemDetail.BuyQuantity * newItemLocation.inv_ItemDetail.BuyPrice - item.quantity * item.price) / newItemLocation.inv_ItemDetail.BuyQuantity + item.quantity;
                            }
                            else
                            {
                                oldItemLocation.Quantity = oldItemLocation.Quantity + matchBarcode.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity + matchBarcode.Quantity;
                            }

                            newItemLocation.Quantity = newItemLocation.Quantity - item.quantity;
                            newItemLocation.inv_ItemDetail.BuyQuantity = newItemLocation.inv_ItemDetail.BuyQuantity - item.quantity;
                        }
                        if (matchBarcode != null)
                        {
                            oldItemDetails.Remove(matchBarcode);
                            itemDetails.Remove(item);
                        }
                    }
                    while (oldItemDetails.ToList().Count() > 0)
                    {
                        var item = itemDetails.FirstOrDefault();
                        if (item == null)
                            break;
                        var id = getItemDetailByColorAndDetail(item.barcodeid, item.colorid, item.sizeid);
                        var lastItemDetail = oldItemDetails.Last();
                        var accountDetail = db.ac_AccountDetail.Single(a => a.AccountDetailId == lastItemDetail.AccountDetailId);
                        var orderDetail = accountDetail.ac_OrderDetail;
                        orderDetail.Serial = item.serial;
                        accountDetail.AccountId = id.AccountId;
                        if (isCustomer != null)
                        {
                            var accPrice = db.ac_Account.Single(a => a.RelatedAccountId == id.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemPrice");
                            var accSale = db.ac_Account.Single(a => a.RelatedAccountId == id.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemSale");
                            orderDetail.ac_AccountDetail1.AccountId = accSale.AccountId;
                            orderDetail.ac_AccountDetail1.Amount = item.quantity * item.price;
                            decimal saleAmount = id.BuyPrice.Value * item.quantity;
                            orderDetail.ac_AccountDetail.Amount = saleAmount;
                            var accSPrice_TotalAmount = orderDetail.ac_AccountDetail2;
                            accSPrice_TotalAmount.AccountId = accPrice.AccountId;
                            accSPrice_TotalAmount.Amount = saleAmount;
                        }
                        else
                        {
                            orderDetail.ac_AccountDetail.Amount = item.quantity * item.price;
                        }
                        orderDetail.Quantity = item.quantity;
                        var oldItemLocation = db.inv_ItemLocation.Single(i => i.ItemDetailId == lastItemDetail.AccountId && i.ShopId == oldOrderHeader.ShopId);
                        inv_ItemLocation newItemLocation = new inv_ItemLocation();
                        newItemLocation = db.inv_ItemLocation.SingleOrDefault(i => i.ItemDetailId == id.AccountId && i.ShopId == header.shopid);
                        if (newItemLocation == null)
                        {
                            newItemLocation = new inv_ItemLocation();
                            newItemLocation.ItemDetailId = id.AccountId;
                            newItemLocation.ShopId = header.shopid;
                            newItemLocation.InitialQuantity = 0;
                            newItemLocation.Quantity = 0;
                            db.inv_ItemLocation.AddObject(newItemLocation);
                        }
                        if (!header.issell)
                        {
                            if (isCustomer == null)
                            {
                                oldItemLocation.inv_ItemDetail.BuyPrice = oldItemLocation.inv_ItemDetail.BuyQuantity - lastItemDetail.Quantity == 0 ? 0 : (oldItemLocation.inv_ItemDetail.BuyQuantity * oldItemLocation.inv_ItemDetail.BuyPrice - Math.Abs(lastItemDetail.Amount.Value)) / oldItemLocation.inv_ItemDetail.BuyQuantity - lastItemDetail.Quantity;
                                oldItemLocation.Quantity = oldItemLocation.Quantity - lastItemDetail.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity - lastItemDetail.Quantity;
                                newItemLocation.inv_ItemDetail.BuyPrice = newItemLocation.inv_ItemDetail.BuyQuantity == 0 ? item.price : (newItemLocation.inv_ItemDetail.BuyQuantity * newItemLocation.inv_ItemDetail.BuyPrice + item.quantity * item.price) / newItemLocation.inv_ItemDetail.BuyQuantity + item.quantity;

                            }
                            else
                            {
                                oldItemLocation.Quantity = oldItemLocation.Quantity - lastItemDetail.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity - lastItemDetail.Quantity;
                            }
                            newItemLocation.Quantity = newItemLocation.Quantity + item.quantity;
                            newItemLocation.inv_ItemDetail.BuyQuantity = newItemLocation.inv_ItemDetail.BuyQuantity + item.quantity;
                        }
                        else
                        {
                            if (isCustomer == null)
                            {
                                oldItemLocation.inv_ItemDetail.BuyPrice = (oldItemLocation.inv_ItemDetail.BuyQuantity * oldItemLocation.inv_ItemDetail.BuyPrice + Math.Abs(lastItemDetail.Amount.Value)) / oldItemLocation.inv_ItemDetail.BuyQuantity + lastItemDetail.Quantity;
                                oldItemLocation.Quantity = oldItemLocation.Quantity + lastItemDetail.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity + lastItemDetail.Quantity;
                                newItemLocation.inv_ItemDetail.BuyPrice = newItemLocation.inv_ItemDetail.BuyQuantity == 0 ? item.price : (newItemLocation.inv_ItemDetail.BuyQuantity * newItemLocation.inv_ItemDetail.BuyPrice - item.quantity * item.price) / newItemLocation.inv_ItemDetail.BuyQuantity + item.quantity;
                            }
                            else
                            {
                                oldItemLocation.Quantity = oldItemLocation.Quantity + lastItemDetail.Quantity;
                                oldItemLocation.inv_ItemDetail.BuyQuantity = oldItemLocation.inv_ItemDetail.BuyQuantity + lastItemDetail.Quantity;
                            }

                            newItemLocation.Quantity = newItemLocation.Quantity - item.quantity;
                            newItemLocation.inv_ItemDetail.BuyQuantity = newItemLocation.inv_ItemDetail.BuyQuantity - item.quantity;
                        }

                        oldItemDetails.Remove(lastItemDetail);
                        itemDetails.Remove(item);
                    }
                    foreach (var dItem in itemDetails.ToList())
                    {
                        var id = getItemDetailByColorAndDetail(dItem.barcodeid, dItem.colorid, dItem.sizeid);

                        if (isCustomer != null)
                        {
                            ac_AccountDetail accDetail = new ac_AccountDetail();
                            ac_OrderDetail orderdetail = new ac_OrderDetail();

                            //mojodi kala -> bestankar
                            orderdetail.Quantity = dItem.quantity;
                            accDetail.Amount = id.BuyPrice * dItem.quantity;
                            //orderdetail.ac_AccountDetail.AccountId = ItemDetail.AccountId.Value;
                            orderdetail.Broken = dItem.broken;
                            orderdetail.Serial = dItem.serial;
                            accDetail.AccountId = id.AccountId;
                            accDetail.IsDept = header.issell ? false : true; ;


                            //forosh -> bestankar
                            ac_AccountDetail accDetailS = new ac_AccountDetail();
                            var accSell_TotalAmount = db.ac_Account.Where(a => a.RelatedAccountId == id.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemSale");
                            accDetailS.Amount = dItem.price * dItem.quantity;
                            accDetailS.AccountId = accSell_TotalAmount.First().AccountId;
                            accDetailS.IsDept = header.issell ? false : true;
                            if (!string.IsNullOrEmpty(dItem.description))
                                accDetailS.Description = dItem.description;

                            //orderdetail.ac_AccountDetail1 = accDetailS;


                            //gheimate tamam shode -> bedehkar
                            var accPrice_TotalAmount = db.ac_Account.Where(a => a.RelatedAccountId == id.AccountId && a.ac_Account2.ac_TableAccount.Table == "itemPrice");
                            ac_AccountDetail accDetailTA = new ac_AccountDetail();
                            accDetailTA.Amount = id.BuyPrice * dItem.quantity;
                            accDetailTA.AccountId = accPrice_TotalAmount.First().AccountId;
                            accDetailTA.IsDept = header.issell ? true : false;
                            if (!string.IsNullOrEmpty(dItem.description))
                                accDetailTA.Description = dItem.description;

                            orderdetail.ac_AccountDetail = accDetail;
                            accDetailS.ac_OrderDetail1.Add(orderdetail);
                            accDetailTA.ac_OrderDetail2.Add(orderdetail);

                            oldOrderHeader.ac_AccountDetail.Add(accDetail);
                            oldOrderHeader.ac_AccountDetail.Add(accDetailTA);
                            oldOrderHeader.ac_AccountDetail.Add(accDetailS);


                        }
                        else
                        {
                            ac_AccountDetail accDetail = new ac_AccountDetail();
                            ac_OrderDetail orderdetail = new ac_OrderDetail();
                            orderdetail.Quantity = dItem.quantity;
                            accDetail.Amount = dItem.price * dItem.quantity;
                            // orderdetail.ac_AccountDetail.AccountId = ItemDetail.AccountId.Value;
                            accDetail.AccountId = id.AccountId;
                            accDetail.IsDept = !header.issell ? true : false;

                            if (!string.IsNullOrEmpty(dItem.description))
                                accDetail.Description = dItem.description;
                            if (!string.IsNullOrEmpty(dItem.serial))
                                orderdetail.Serial = dItem.serial;
                            orderdetail.Broken = dItem.broken;
                            orderdetail.ac_AccountDetail = accDetail;
                            db.ac_OrderDetail.AddObject(orderdetail);
                            accDetail.ac_OrderDetail = orderdetail;
                            oldOrderHeader.ac_AccountDetail.Add(accDetail);
                        }

                        itemDetails.Remove(dItem);

                    }
                    if (isCustomer != null)
                    {
                        if (oldOrderHeader.Sell)
                        {
                            if (vat > 0)
                            {
                                AddOtherAccount("sale", ref oldOrderHeader, 0, 0, 0, 0, vat, 0, 0, 0, 0);
                            }
                            if ((sum - header.totalamount) > 0)
                            {
                                decimal saleDiscountIncome = (sum - header.totalamount);
                                AddOtherAccount("sale", ref oldOrderHeader, 0, 0, 0, saleDiscountIncome, vat, 0, 0, 0, 0);
                            }
                        }
                        else
                        {
                            decimal discountExpense = (sum - header.totalamount);
                            if (vat > 0)
                            {
                                AddOtherAccount("ReturnedShopping", ref oldOrderHeader, 0, 0, 0, 0, vat, 0, 0, 0, 0);
                            }
                            if (discountExpense != 0)
                            {
                                AddOtherAccount("ReturnedShopping", ref oldOrderHeader, 0, 0, 0, discountExpense, 0, 0, 0, 0, 0);
                            }
                        }
                    }
                    else
                    {
                        if (!oldOrderHeader.Sell)
                        {
                            if (vat > 0)
                            {
                                AddOtherAccount("buy", ref oldOrderHeader, 0, 0, vat, 0, 0, 0, 0, 0, 0);
                            }
                            if ((sum - header.totalamount) > 0)
                            {
                                decimal buyDiscountIncome = (sum - header.totalamount);
                                AddOtherAccount("buy", ref oldOrderHeader, buyDiscountIncome, 0, 0, 0, 0, 0, 0, 0, 0);
                            }
                        }
                        else
                        {
                            decimal saleReturnDiscountIncome = (sum - header.totalamount);
                            if (vat > 0)
                            {
                                AddOtherAccount("ReturnedSelling", ref oldOrderHeader, 0, 0, vat, 0, 0, 0, 0, 0, 0);
                            }
                            if (saleReturnDiscountIncome > 0)
                            {
                                AddOtherAccount("ReturnedSelling", ref oldOrderHeader, 0, saleReturnDiscountIncome, 0, 0, 0, 0, 0, 0, 0);
                            }
                        }
                    }



                    oldOrderHeader.ShopId = header.shopid;
                    oldOrderHeader.ClientId = client.AccountId;
                    oldOrderHeader.Description = string.IsNullOrEmpty(header.description) ? oldOrderHeader.Description : header.description;
                    oldOrderHeader.Date = utility.GetDateTimeCulture(header.date);
                    //oldOrderHeader.InvoiceNO = header.invoicenumber;
                    oldOrderHeader.CounterId = counterId;
                    oldOrderHeader.Amount = header.totalamount + vat;
                }
                foreach (var item in oldItemDetails.ToList())
                {
                    db.ac_OrderDetail.DeleteObject(db.ac_OrderDetail.Single(s => s.AccountDetailId == item.AccountDetailId));
                    oldItemDetails.Remove(item);
                }


                int save = 0;
                string alert = "";
                if (oldOrderHeader.ac_AccountDetail.Count > 0)
                    save = db.SaveChanges();
                if (save > 0)
                    if (save > 0 && header.PaymentAmount != null)
                        alert = "." + "اطلاعات فاکتور و پرداخت با موفقیت ذخیره شد ";
                    else if (save > 0 && header.PaymentAmount == null)
                        alert = "." + "اطلاعات فاکتور با موفقیت ذخیره شد";
                return Json(new
                {
                    alert = alert,
                    oldOrderHeader.InvoiceNO,
                    oldOrderHeader.Sell,
                    PreOrder = oldOrderHeader.ConfirmerId != null ? false : true,
                    ShopName = oldOrderHeader.inv_Shop.Name,
                    ShopPhone = oldOrderHeader.inv_Shop.Fax,
                    ShopAddress = oldOrderHeader.inv_Shop.p_Address.Address,
                    oldOrderHeader.p_Person.Gender,
                    oldOrderHeader.p_Person.Family,
                    ClientGender = oldOrderHeader.p_Person.Gender,
                    ClientFamily = oldOrderHeader.p_Person.Family,
                    Date = utility.GetstrDateCulture(oldOrderHeader.Date),
                    Time = oldOrderHeader.Date.ToString("HH:mm"),
                    oldOrderHeader.Amount,
                    oldOrderHeader.ac_CurrencyRate.ac_Currency.Currency,
                    detail = oldOrderHeader.ac_AccountDetail.Where(o => o.ac_OrderDetail != null).Select(s => s.ac_OrderDetail).GroupBy(d => new { d.ac_AccountDetail.ac_Account.inv_ItemDetail.BarcodeId, d.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Name }).Select(o => new { o.Key.Name, Price = o.Sum(s => s.ac_AccountDetail1 != null ? s.ac_AccountDetail1.Amount : s.ac_AccountDetail.Amount), Quantity = o.Sum(s => s.Quantity) })
                });


            }
            catch (InvalidOperationException)
            {
                return Json(new { isDone = false, msg = "." + "اطلاعات رنگ و جزئیات کالا را درست انتخاب کنید" });
            }
            catch (UpdateException e2)
            {
                return Json(new { isDone = false, msg = e2.InnerException.Message });
            }

            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = "." + "اطلاعات ذخیره نشد /n" + ex.InnerException.Message });

            }
        }
        //public ActionResult AddEmployeeSalary(int employeeId, string fromDate, string toDate, decimal? fixSalary,
        //                        decimal? commission, int counterId, int currencyId, string description, int shopId, string date)
        //{

        //    try
        //    {
        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canAddSalary"))
        //        {
        //            return Json(new { isDone = false, msg = "notInRole" });
        //        }
        //        var eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName);
        //        var lst = db.GetParentEmployeeByID(employeeId, "").Select(p => p.PersonId);
        //        if (!lst.Contains(eid.PersonId))
        //        {
        //            return Json(new { isDone = false, msg = "notInRole" });
        //        }

        //        int curid = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == currencyId).CurrencyRateId;
        //        ac_OrderHeader orderheader = new ac_OrderHeader();
        //        orderheader.CurrencyRateId = curid;
        //        orderheader.Amount = ((fixSalary != null ? fixSalary.Value : 0) + (commission != null ? commission.Value : 0));
        //        if (!string.IsNullOrEmpty(description))
        //            orderheader.Description = description;
        //        orderheader.InvoiceNO = getInvoiceNumber(db, "salary", false, true);
        //        orderheader.EmployeeId = eid.PersonId;
        //        orderheader.ClientId = employeeId;
        //        orderheader.Date = utility.GetDateTimeCulture(date);
        //        orderheader.Sell = false;
        //        orderheader.Description = description;
        //        orderheader.ShopId = shopId;
        //        orderheader.CounterId = counterId;
        //        orderheader.IsMoney = false;
        //        orderheader.OrderTypeId = getOrderType(db, 0, false, false, false, false, false, true, false, false, false);
        //        if (eid.p_Employee.p_Employee2 == null)
        //            orderheader.ConfirmerId = eid.PersonId;
        //        orderheader.ac_EmployeeSalary = new ac_EmployeeSalary { FromDate = utility.GetDateCulture(fromDate), ToDate = utility.GetDateCulture(toDate), FixSalary = fixSalary, Commission = commission };
        //        db.ac_OrderHeader.AddObject(orderheader);
        //        db.SaveChanges();
        //        return Json(new { isDone = true, msg = "oK" });
        //        // return Json( new {orderheader.EmployeeId,orderheader.Date,orderheader.ClientId,orderheader.ac_EmployeeSalary.FromDate,orderheader.ac_EmployeeSalary.ToDate,orderheader.ac_EmployeeSalary.Confirmed,orderheader.ac_EmployeeSalary.FixSalary,orderheader.ac_EmployeeSalary.Commission,confirmBy=orderheader.ac_EmployeeSalary.EmployeeId});
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isDone = false, msg = ex.Message });
        //    }
        //    finally { ((IDisposable)db).Dispose(); }
        //}

        //public ActionResult AddExpense(int expenseCategoryId, decimal amount, int counterId,
        //                         int currencyId, string description, int shopId, string date)
        //{


        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }
        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canAddExpense"))
        //        {
        //            return Json(new { isDone = false, msg = "notInRole" });
        //        }
        //        var eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName);
        //        int curid = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == currencyId).CurrencyRateId;
        //        ac_OrderHeader orderheader = new ac_OrderHeader();
        //        orderheader.CurrencyRateId = curid;
        //        orderheader.Amount = amount;
        //        if (!string.IsNullOrEmpty(description))
        //            orderheader.Description = description;
        //        orderheader.InvoiceNO = getInvoiceNumber(db, "expense", false, true);
        //        orderheader.EmployeeId = eid.PersonId;
        //        orderheader.Date = utility.GetDateTimeCulture(date);
        //        orderheader.Sell = false;
        //        orderheader.Description = description;
        //        orderheader.ShopId = shopId;
        //        orderheader.CounterId = counterId;
        //        orderheader.IsMoney = false;
        //        orderheader.OrderTypeId = getOrderType(db, 0, false, false, false, true, false, false, false, false, false);
        //        if (eid.p_Employee.p_Employee2 == null)
        //            orderheader.ConfirmerId = eid.PersonId;
        //        orderheader.ac_ExpenseCategory = db.ac_ExpenseCategory.Single(x => x.ExpenseCategoryId == expenseCategoryId);
        //        db.ac_OrderHeader.AddObject(orderheader);
        //        if (eid.p_Employee.p_Employee2 == null)
        //        {
        //            //payment
        //            ac_OrderHeader acc = new ac_OrderHeader();
        //            acc.CounterId = counterId;
        //            acc.ShopId = shopId;
        //            acc.Date = DateTime.Now;
        //            acc.ConfirmerId = eid.PersonId;
        //            acc.EmployeeId = eid.PersonId;
        //            acc.InvoiceNO = getInvoiceNumber(db, "payment", true, false);
        //            acc.OrderTypeId = getOrderType(db, 0, true, true, false, true, false, false, false, false, false);
        //            acc.CurrencyRateId = curid;
        //            acc.Description = "paidForExpense";
        //            acc.Sell = true;
        //            acc.IsMoney = true;
        //            acc.ac_Cash.Add(new ac_Cash
        //            {
        //                Amount = amount,
        //                CurrencyRateId = curid
        //            });
        //            acc.Amount = amount;
        //            db.ac_OrderHeader.AddObject(acc);
        //            //
        //        }
        //        db.SaveChanges();
        //        return Json(new { isDone = true, msg = "oK" });
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isDone = false, msg = ex.Message });
        //    }
        //}

        //public ActionResult AddSocialSecurity(int employeeId, decimal amount, int counterId,
        //                             int currencyId, string description, int shopId, int month, string date)
        //{
        //    try
        //    {
        //        if (!User.Identity.IsAuthenticated)
        //        {
        //            return Json(new { isExpired = true });
        //        }


        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canAddSocialSecurity"))
        //        {
        //            return Json(new { isDone = false, msg = "notInRole" });
        //        }
        //        var eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName);
        //        int curid = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == currencyId).CurrencyRateId;
        //        ac_OrderHeader orderheader = new ac_OrderHeader();
        //        orderheader.CurrencyRateId = curid;
        //        orderheader.Amount = amount;
        //        if (!string.IsNullOrEmpty(description))
        //            orderheader.Description = description;
        //        orderheader.InvoiceNO = getInvoiceNumber(db, "socialSecurity", false, true);
        //        orderheader.EmployeeId = eid.PersonId;
        //        orderheader.ClientId = employeeId;
        //        orderheader.Date = utility.GetDateTimeCulture(date);
        //        orderheader.Sell = false;
        //        orderheader.Description = description;
        //        orderheader.ShopId = shopId;
        //        orderheader.CounterId = counterId;
        //        orderheader.IsMoney = false;
        //        orderheader.OrderTypeId = getOrderType(db, 0, false, false, false, false, true, false, false, false, false);
        //        if (eid.p_Employee.p_Employee2 == null)
        //            orderheader.ConfirmerId = eid.PersonId;
        //        orderheader.ac_SocialSecurity = new ac_SocialSecurity { Month = month };
        //        db.ac_OrderHeader.AddObject(orderheader);
        //        //
        //        if (eid.p_Employee.p_Employee2 == null)
        //        {
        //            ac_OrderHeader acc = new ac_OrderHeader();
        //            acc.ClientId = employeeId;
        //            acc.CounterId = counterId;
        //            acc.ShopId = shopId;
        //            acc.InvoiceNO = getInvoiceNumber(db, "payment", true, false);
        //            acc.OrderTypeId = getOrderType(db, 0, true, true, false, false, true, false, false, false, false);
        //            acc.CurrencyRateId = curid;
        //            acc.Description = "paidForSocialSecurity";
        //            acc.Date = DateTime.Now;
        //            acc.EmployeeId = eid.PersonId;
        //            acc.Sell = true;
        //            acc.IsMoney = true;
        //            acc.ConfirmerId = eid.PersonId;
        //            acc.ac_Cash.Add(new ac_Cash
        //            {
        //                Amount = amount,
        //                CurrencyRateId = curid,
        //            });
        //            acc.Amount = amount;
        //            db.ac_OrderHeader.AddObject(acc);
        //        }
        //        //
        //        db.SaveChanges();
        //        return Json(new { isDone = true, msg = "oK" });
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isDone = false, msg = ex.Message });
        //    }
        //}

        public ActionResult GetAllItemDetailsByBarcodeAndShopIDNoQuantity(string barcode, int? shopId)
        {
            ItemDetailQuantity itemDetailQuantity = new ItemDetailQuantity();
            if (shopId == null)
            {
                var collection = db.View_inv_ItemDetailLocation.Where(i => (i.ApplicationName == appName || i.ApplicationName == null) && i.Barcode == barcode).Select(s => new { Size = new { s.Size, s.SizeId }, Color = new { s.Color, s.ColorId } });
                itemDetailQuantity.Size = collection.Where(s => s.Size.SizeId != null).Select(size => size.Size).Distinct();
                itemDetailQuantity.Color = collection.Where(c => c.Color.ColorId != null).Select(color => color.Color).Distinct();
                return Json(itemDetailQuantity);
            }
            else
            {
                var collection = db.View_inv_ItemDetailLocation.Where(i => (i.ApplicationName == appName || i.ApplicationName == null) && i.Barcode == barcode && i.ShopId == shopId).Select(s => new { Size = new { s.Size, s.SizeId }, Color = new { s.Color, s.ColorId } });
                itemDetailQuantity.Size = collection.Where(s => s.Size.SizeId != null).Select(size => size.Size).Distinct();
                itemDetailQuantity.Color = collection.Where(c => c.Color.ColorId != null).Select(color => color.Color).Distinct();
                return Json(itemDetailQuantity);
            }
        }

        public ActionResult GetItemDetailsByBarcodeAndShopIDNoQuantity(string barcode, int? shopId)
        {
            int barcodeId = Convert.ToInt32(barcode);
            ItemDetailQuantity itemDetailQuantity = new ItemDetailQuantity();
            var collection = db.View_inv_ItemDetailLocation.Where(i => (i.ApplicationName == appName || i.ApplicationName == null) && i.BarcodeId == barcodeId && (i.ShopId == shopId.Value || i.ShopId == null) && (i.Quantity >= 0 || i.Quantity == null)).Select(s => new { Size = new { s.Size, s.SizeId }, Color = new { s.Color, s.ColorId } });
            itemDetailQuantity.Size = collection.Where(s => s.Size.SizeId != null).Select(size => size.Size).Distinct();
            itemDetailQuantity.Color = collection.Where(c => c.Color.ColorId != null).Select(color => color.Color).Distinct();
            return Json(itemDetailQuantity);
        }

        public ActionResult GetSizeListByBarcodeIdColorId(int arg, int? sarg, int? targ, bool isReturn)
        {

            if (targ == null)
            {
                if (isReturn)
                {
                    return Json(db.inv_ItemDetail.Where(b => b.BarcodeId == arg && b.inv_Size.Count() > 0)
                              .Select(a => new
                              {
                                  id = a.inv_Size.FirstOrDefault().SizeId,
                                  name = a.inv_Size.FirstOrDefault().Size,
                              }).Distinct());
                }
                else
                {
                    return Json(db.inv_ItemDetail.Where(b => b.BarcodeId == arg && b.inv_Size.Count() > 0 && b.inv_ItemLocation.Where(s => s.ShopId == sarg.Value).Sum(q => q.Quantity) > 0)
              .Select(a => new
              {
                  id = a.inv_Size.FirstOrDefault().SizeId,
                  name = a.inv_Size.FirstOrDefault().Size,
              }).Distinct());
                }

            }
            else
            {
                if (isReturn)
                {
                    return Json(db.inv_ItemDetail.Where(b => b.BarcodeId == arg && b.inv_Color.Any(c => c.ColorId == targ.Value) && b.inv_Size.Count() > 0)
                        .Select(a => new
                        {
                            id = a.inv_Size.FirstOrDefault().SizeId,
                            name = a.inv_Size.FirstOrDefault().Size,
                        }).Distinct());
                }
                else
                {
                    return Json(db.inv_ItemDetail.Where(b => b.BarcodeId == arg && b.inv_Color.Any(c => c.ColorId == targ.Value) && b.inv_Size.Count() > 0 && b.inv_ItemLocation.Where(s => s.ShopId == sarg.Value).Sum(q => q.Quantity) > 0)
                 .Select(a => new
                 {
                     id = a.inv_Size.FirstOrDefault().SizeId,
                     name = a.inv_Size.FirstOrDefault().Size,
                 }).Distinct());

                }
            }
        }


        #endregion
        //Order End



        //customer begin
        #region

        public ActionResult AddCustomer(string name, string family, int age, string gender, string job, string mobile, string phone, int? addressid, string address, string intoducercode, string date)
        {

            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                if (!utility.isInRole(db, User.Identity.Name, appName, "canAddCustomer"))
                {
                    return Json(new { isDone = false, alert = "notInRole" });
                }

                EntityCollection<p_Phone> phones = new EntityCollection<p_Phone>();
                if (!string.IsNullOrEmpty(mobile))
                    phones.Add(new p_Phone() { Number = mobile, Cell = true });
                if (!string.IsNullOrEmpty(phone))
                    phones.Add(new p_Phone() { Number = phone, Cell = false });
                var pcode = db.p_Person.Where(r => r.AccountId == r.p_Customer.AccountId);
                var co = pcode.Count() > 0 ? pcode.OrderByDescending(c => c.AccountId).Select(c => c.Code).First() : "9998";
                co = co.Replace("c", "");
                co = co.Replace("s", "");
                co = "c" + (int.Parse(co) + 2).ToString();
                var applicationId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;
                var tableAccount = db.ac_TableAccount.Single(a => a.Table == "customer" && a.ac_Account.aspnet_Applications.ApplicationName == appName);
                var parentAccount = db.ac_Account.Single(a => a.AccountId == tableAccount.AccountId);

                var account = new ac_Account()
                {
                    AccountNature = parentAccount.AccountNature,
                    Code = utility.FindAccountCodeByParentId(tableAccount.AccountId) + 1,
                    GroupType = parentAccount.GroupType,
                    //Level = Convert.ToByte(parentAccount.Level + 1),
                    Level = 3,
                    Name = family + " " + name + " " + co,
                    ParentAccountId = tableAccount.AccountId,
                    ApplicationId = applicationId,
                    RegistererId = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId,
                    LedgentId = findLedgentAccId(tableAccount.AccountId)

                };
                db.p_Person.AddObject(new p_Person()
                {
                    Code = co,
                    Name = name,
                    Family = family,
                    RegDate = utility.GetDateTimeCulture(date),
                    DateOfBirth = DateTime.Parse((DateTime.Now.Year - age).ToString() + "-1-1"),
                    Gender = bool.Parse(gender),
                    //ApplicationId = applicationId,
                    AddressId = addressid,
                    ac_Account = account,
                    p_Customer = new p_Customer()
                    {
                        Address = address,
                        NetBuy = 0,
                        NetPayment = 0,
                        Job = job,
                        IntroducerId = string.IsNullOrEmpty(intoducercode.Trim()) ? null : (int?)db.p_Customer.Single(d => d.p_Person.Code == intoducercode && d.p_Person.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId
                    },
                    p_Phone = phones
                });

                return Json(new { alert = "ok", count = db.SaveChanges(), code = co });


            }
            catch (Exception ex) { return Json(new { alert = ex.InnerException.Message, count = 0 }); }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult EditCustomer(int personid, string code, string name, string family, int? age, string gender, string job, string introducercode)
        {

            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditCustomer"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }

                p_Customer c = db.p_Customer.Single(cus => cus.AccountId == personid);
                List<int> listid = db.GetParentEmployeeByID(c.p_Person.ac_Account.p_Employee.AccountId, "").Select(pr => pr.AccountId).ToList();
                listid.Add(c.p_Person.ac_Account.p_Employee.AccountId);
                if (!listid.Contains(db.p_Person.Single(cus => cus.Code == User.Identity.Name && cus.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId))
                    return Json("notInRole");
                c.p_Person.Code = code;
                c.p_Person.Name = String.IsNullOrEmpty(name) ? null : name;
                c.p_Person.Family = family;
                if (age != null)
                    c.p_Person.DateOfBirth = DateTime.Parse((DateTime.Now.Year - age.Value).ToString() + "-1-1");
                else
                    c.p_Person.DateOfBirth = null;
                c.p_Person.Gender = bool.Parse(gender);
                c.Job = String.IsNullOrEmpty(job) ? null : job;
                c.IntroducerId = string.IsNullOrEmpty(introducercode) ? null : (int?)db.p_Customer.Single(d => d.p_Person.Code == introducercode && d.p_Person.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult EditAddressCustomer(int personid, int addressid, string address)
        {

            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditCustomerAddress"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }

                p_Customer c = db.p_Customer.Single(cus => cus.AccountId == personid);
                List<int> listid = db.GetParentEmployeeByID(c.p_Person.AccountId, "").Select(pr => pr.AccountId).ToList();
                listid.Add(c.p_Person.AccountId);
                if (!listid.Contains(db.p_Person.Single(cus => cus.Code == User.Identity.Name && cus.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId))
                    return Json(new { isDone = false, msg = "notInRole" });
                c.p_Person.AddressId = addressid;
                c.Address = address;
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult GetCustomerList(int skip, int take, int currentPage, bool first, string sort, string namefamily, string introducer, string registerername, string agefrom, string ageto, string regdatefrom, string regdateto, string mobile, string phone, string email)
        {

            try
            {
                List<ObjectParameter> ol = new List<ObjectParameter>();
                string dynStr = string.Empty;
                dynStr += "(it.p_Person.ac_Account.aspnet_Applications.ApplicationName = @appname or it.p_Person.ac_Account.ApplicationId Is NULL)";
                ol.Add(new ObjectParameter("appname", appName));
                if (utility.isInRole(db, User.Identity.Name, appName, "canSeeAllCustomers"))
                {

                }
                else
                {
                    dynStr += " AND ";
                    dynStr += "it..p_Person.ac_Account.p_Employee.accountId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name).AccountId);
                }

                if (email.Length > 0)
                {
                    if (dynStr.Length > 0)

                        dynStr += " AND ";
                    dynStr += " (it.aspnet_Membership.Email= @email)";
                    ol.Add(new ObjectParameter("email", email));
                }

                if (registerername.Length > 0)
                {
                    if (dynStr.Length > 0)

                        dynStr += " AND ";
                    dynStr += " ((it.p_Person.ac_Account.p_Employee.P_Person.Name+it.p_Person.ac_Account.p_Employee.P_Person.Family) LIKE '%' + @name + '%' or it.p_Person.ac_Account.p_Employee.P_Person.Name LIKE '%' + @name + '%' or it.p_Person.ac_Account.p_Employee.P_Person.Family  or it.p_Person.ac_Account.p_Employee.P_Person.Code LIKE '%' + @name + '%' )";
                    ol.Add(new ObjectParameter("name", registerername.Replace(" ", string.Empty)));

                }

                if (mobile.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += " EXISTS(select g From it.p_Person.p_Phone as g where g.Number LIKE '%' + @Mobile +'%' and g.Cell=true)";
                    ol.Add(new ObjectParameter("Mobile", mobile));
                }

                if (phone.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += " EXISTS(select g From it.p_Person.p_Phone as g where g.Number LIKE '%' + @Mobile +'%' and g.Cell=false)";
                    ol.Add(new ObjectParameter("Phone", phone));
                }

                //if (namefamily.Length > 0)
                //{
                //    if (dynStr.Length > 0)
                //        dynStr += " AND ";
                //    dynStr += "( (it.p_Person.Name+' '+it.p_Person.Family) LIKE '%' + @name + '%' or it.p_Person.Code LIKE '%' + @name + '%' )";
                //    ol.Add(new ObjectParameter("name", namefamily.Replace(" ", string.Empty)));
                //}

                if (namefamily.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "( (it.p_Person.Name+it.p_Person.Family) LIKE '%' + @name + '%' or it.p_Person.Name LIKE '%' + @name + '%' or it.p_Person.Family LIKE '%' + @name + '%' or it.p_Person.Code LIKE '%' + @name + '%' )";
                    ol.Add(new ObjectParameter("name", namefamily.Replace(" ", string.Empty)));

                }

                if (agefrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.p_Person.DateOfBirth   <=   @dateFrom";
                    ol.Add(new ObjectParameter("dateFrom", DateTime.Parse((DateTime.Now.Year - int.Parse(agefrom)).ToString() + "-1-1")));
                }

                if (ageto.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.p_Person.DateOfBirth   >=   @dateTo";
                    ol.Add(new ObjectParameter("dateTo", DateTime.Parse((DateTime.Now.Year - int.Parse(ageto)).ToString() + "-1-1")));
                }

                if (introducer.Length > 0)
                {

                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += " ((it.p_Customer.p_Person2.Family) LIKE '%' + @introducer + '%' OR (it.p_Customer.p_Person2.Name) LIKE '%' + @introducer + '%' or it.p_Customer.p_Person2.Code LIKE '%' + @introducer + '%' )";
                    ol.Add(new ObjectParameter("introducer", introducer.Replace(" ", string.Empty)));
                }

                if (regdatefrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.p_Person.RegDate   >=   @dateFrom";
                    ol.Add(new ObjectParameter("dateFrom", utility.GetDateCulture(regdatefrom)));
                }

                if (regdateto.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.p_Person.RegDate   <=   @dateTo";
                    ol.Add(new ObjectParameter("dateTo", utility.GetDateCulture(regdateto)));
                }


                if (first)
                {

                    var result = db.p_Customer.Where(dynStr, ol.ToArray());
                    return Json(new
                    {
                        count = result.Count(),
                        results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                           .Select(cc => new
                           {
                               cc.AccountId,
                               cc.p_Person.Name,
                               cc.p_Person.Family,
                               cc.p_Person.Code,
                               cc.p_Person.RegDate,
                               cc.p_Person.Gender,
                               cc.p_Person.DateOfBirth,
                               introducerName = cc.p_Customer2.p_Person.Name,
                               introducerFamily = cc.p_Customer2.p_Person.Family,
                               regName = cc.p_Person.ac_Account.p_Employee.p_Person.Name,
                               regFamily = cc.p_Person.ac_Account.p_Employee.p_Person.Family,
                               email = cc.aspnet_Membership.Email
                           }).AsEnumerable()
                            .Select(c => new
                            {
                                c.AccountId,
                                Name = c.Name != null ? c.Name : "",
                                Family = c.Family != null ? c.Family : "",
                                Code = c.Code != null ? c.Code : "",
                                //regdate = utility.GetstrDateCulture(c.RegDate),
                                regdate = c.RegDate,
                                c.Gender,
                                age = (c.DateOfBirth == null ? 0 : (DateTime.Now.Year - c.DateOfBirth.Value.Year)),
                                introducerName = c.introducerName != null ? c.introducerName : "",
                                introducerFamily = c.introducerFamily != null ? c.introducerFamily : "",
                                regName = c.regName != null ? c.regName : "",
                                regFamily = c.regFamily != null ? c.regFamily : ""
                                ,
                                email = c.email
                            })
                                .ToArray()
                    });


                }
                else
                {

                    return Json(new
                    {
                        results = db.p_Customer.Where(dynStr, ol.ToArray()).OrderBy("it." + sort).Skip(skip).Take(take)
                                .Select(cc => new
                                {
                                    cc.AccountId,
                                    cc.p_Person.Name,
                                    cc.p_Person.Family,
                                    cc.p_Person.Code,
                                    cc.p_Person.RegDate,
                                    cc.p_Person.Gender,
                                    cc.p_Person.DateOfBirth,
                                    introducerName = cc.p_Customer2.p_Person.Name,
                                    introducerFamily = cc.p_Customer2.p_Person.Family,
                                    regName = cc.p_Person.ac_Account.p_Employee.p_Person.Name,
                                    regFamily = cc.p_Person.ac_Account.p_Employee.p_Person.Family,
                                    email = cc.aspnet_Membership.Email
                                }).AsEnumerable()
                            .Select(c => new
                            {
                                c.AccountId,
                                Name = c.Name != null ? c.Name : "",
                                Family = c.Family != null ? c.Family : "",
                                Code = c.Code != null ? c.Code : "",
                                regdate = c.RegDate,
                                c.Gender,
                                age = (c.DateOfBirth == null ? 0 : (DateTime.Now.Year - c.DateOfBirth.Value.Year)),
                                introducerName = c.introducerName != null ? c.introducerName : "",
                                introducerFamily = c.introducerFamily != null ? c.introducerFamily : "",
                                regName = c.regName != null ? c.regName : "",
                                regFamily = c.regFamily != null ? c.regFamily : ""
                                ,
                                email = c.email
                            })
                            .ToArray()
                    });


                }
            }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult DeleteCustomer(int personid)
        {

            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditCustomer"))
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }

                p_Customer c = db.p_Customer.Single(cus => cus.AccountId == personid);
                var membership = db.p_Customer.Single(cu => cu.AccountId == personid).aspnet_Membership;
                string username = "";
                if (membership != null)
                    username = membership.Email;
                List<int> listid = db.GetParentEmployeeByID(c.p_Person.ac_Account.p_Employee.AccountId, "").Select(pr => pr.AccountId).ToList();
                listid.Add(c.p_Person.ac_Account.p_Employee.AccountId);
                if (!listid.Contains(db.p_Person.Single(cus => cus.Code == User.Identity.Name && cus.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId))
                    return Json(new { isdone = false, msg = "notInRole" });
                db.p_Person.DeleteObject(c.p_Person);
                int count = db.SaveChanges();
                if (!string.IsNullOrEmpty(username) && count > 0)
                    Membership.DeleteUser(username);
                return Json(new { isdone = true, msg = "oK" });
            }
            catch (Exception e) { return Json(new { isdone = false, msg = "امکان حذف مشتری وجود ندارد." }); }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult GetCustomerById(int customerid)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                return Json(db.p_Customer.Where(c => c.AccountId == customerid)
                    .Select(cc => new { cc.p_Person.Name, cc.p_Person.Family, cc.p_Person.Code, cc.p_Person.Gender, cc.p_Person.DateOfBirth, IntroducerCode = cc.p_Customer2.p_Person.Code, cc.Job }).AsEnumerable()
                    .Select(c => new { c.Name, c.Family, c.Code, c.Gender, Age = (c.DateOfBirth == null ? 0 : (DateTime.Now.Year - c.DateOfBirth.Value.Year)), c.IntroducerCode, c.Job }));

            }
            catch (Exception ex)
            {
                return null;
            }
        }


        public ActionResult GetAddressById(int customerid)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                return Json(db.p_Customer.Where(c => c.AccountId == customerid).Select(cc => new { cc.p_Person.AddressId, cc.Address }));
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        public ActionResult GetPhoneById(int personid)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                return Json(db.p_Phone.Where(p => p.PersonId == personid)
                    .Select(pp => new
                    {
                        pp.PhoneId,
                        pp.Number,
                        pp.Cell
                    }));
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        public ActionResult DeleteCustomerPhone(int phoneid)
        {

            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canDeletePhoneCustomer"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }

                p_Phone phone = db.p_Phone.Single(o => o.PhoneId == phoneid);
                p_Customer c = db.p_Customer.SingleOrDefault(cus => cus.AccountId == phone.PersonId);
                if (c != null)
                {
                    List<int> listid = db.GetParentEmployeeByID(c.p_Person.ac_Account.p_Employee.AccountId, "").Select(pr => pr.AccountId).ToList();
                    listid.Add(c.p_Person.ac_Account.p_Employee.AccountId);
                    if (!listid.Contains(db.p_Person.Single(cus => cus.Code == User.Identity.Name && cus.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId))
                        return Json(new { isDone = false, msg = "notInRole" });
                    db.p_Phone.DeleteObject(phone);
                    db.SaveChanges();
                    return Json(new { isDone = true, msg = "oK" });
                }
                else
                {
                    p_Supplier s = db.p_Supplier.SingleOrDefault(sup => sup.AccountId == phone.PersonId);
                    List<int> listid = db.GetParentEmployeeByID(s.p_Person.AccountId, "").Select(pr => pr.AccountId).ToList();
                    listid.Add(s.p_Person.AccountId);
                    if (!listid.Contains(db.p_Person.Single(sup => sup.Code == User.Identity.Name && sup.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId))
                        return Json(new { isDone = false, msg = "notInRole" });
                    db.p_Phone.DeleteObject(phone);
                    db.SaveChanges();
                    return Json(new { isDone = true, msg = "oK" });
                }
            }
            catch (Exception e) { return Json(new { isDone = false, msg = e.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult AddCustomerPhone(int personid, string number, bool cell)
        {


            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canAddPhoneCustomer"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }

                db.p_Phone.AddObject(new p_Phone() { PersonId = personid, Number = number, Cell = cell });
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult EditCustomerPhone(int phoneid, string number, bool cell)
        {


            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canDeletePhoneCustomer"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }

                p_Phone phone = db.p_Phone.Single(o => o.PhoneId == phoneid);
                p_Customer c = db.p_Customer.SingleOrDefault(cus => cus.AccountId == phone.PersonId);
                p_Supplier s = db.p_Supplier.SingleOrDefault(sup => sup.AccountId == phone.PersonId);
                if (c != null)
                {
                    List<int> listid = db.GetParentEmployeeByID(c.p_Person.ac_Account.p_Employee.AccountId, "").Select(pr => pr.AccountId).ToList();
                    listid.Add(c.p_Person.ac_Account.p_Employee.AccountId);
                    if (!listid.Contains(db.p_Person.Single(cus => cus.Code == User.Identity.Name && cus.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId))
                        return Json(new { isDone = false, msg = "notInRole" });
                    phone.Number = number;
                    phone.Cell = cell;
                    db.SaveChanges();
                    return Json(new { isDone = true, msg = "oK" });
                }
                else if (c == null && s != null)
                {
                    List<int> listid = db.GetParentEmployeeByID(s.p_Person.AccountId, "").Select(pr => pr.AccountId).ToList();
                    listid.Add(s.p_Person.AccountId);
                    if (!listid.Contains(db.p_Person.Single(sup => sup.Code == User.Identity.Name && sup.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId))
                        return Json(new { isDone = false, msg = "notInRole" });
                    phone.Number = number;
                    phone.Cell = cell;
                    db.SaveChanges();
                    return Json(new { isDone = true, msg = "oK" });
                }
                return Json(new { isDone = false, msg = "error" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        //public ActionResult AddVoucher(int customerId, decimal voucherAmount, decimal minimumBuy, int currencyId, int shopId, DateTime expieryDate)
        //{

        //    try
        //    {
        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canIssueVoucher"))
        //        {
        //            return Json(new { isDone = false, msg = "notInRole" });
        //        }

        //        var c = db.p_Customer.Single(cc => cc.PersonId == customerId);
        //        var employee = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName);
        //        var OrderHeader = c.p_Person.ac_OrderHeader;
        //        decimal? introducerBuy = c.p_Customer1.Sum(b => b.NetBuy);
        //        decimal? commission = c.NetBuy * c.BuyCommission + introducerBuy * c.IntroducedCommission;
        //        decimal? orderDetailDiscount = 0;// OrderHeader.Sum(d => d.ac_OrderDetail.Sum(od => (od.Price * od.ac_OrderHeader.ac_CurrencyRate.Buy - od.inv_ItemDetail.inv_Barcode.inv_Price.OrderByDescending(dt => dt.Date).First().Regular) * od.Quantity * (od.ac_OrderHeader.Sell ? 1 : -1)));
        //        decimal? headerDiscount = 0;// OrderHeader.Sum(d => d.ac_OrderDetail.Sum(od => (od.Price * od.ac_OrderHeader.ac_CurrencyRate.Buy) * od.Quantity * (od.ac_OrderHeader.Sell ? 1 : -1))) - c.NetBuy;
        //        decimal? oldVoucher = db.ac_Voucher.Where(vo => vo.ac_OrderHeader.p_Person.PersonId == c.PersonId && vo.ac_OrderHeader.Amount > 0).Sum(s => (decimal?)s.Amount);
        //        oldVoucher = (oldVoucher != null ? oldVoucher : 0);
        //        if (c.NetBuy + introducerBuy > minimumBuy && commission - (orderDetailDiscount + headerDiscount) - oldVoucher > voucherAmount)
        //        {
        //            decimal d = Math.Round(((commission - (orderDetailDiscount + headerDiscount) - oldVoucher) / voucherAmount).Value);
        //            ac_OrderHeader orderHeader = new ac_OrderHeader();
        //            orderHeader.Amount = 0;
        //            orderHeader.CurrencyRateId = db.ac_CurrencyRate.OrderByDescending(cc => cc.Date).FirstOrDefault(cc => cc.CurrencyId == currencyId).CurrencyRateId;
        //            orderHeader.ClientId = c.PersonId;
        //            orderHeader.EmployeeId = employee.PersonId;
        //            orderHeader.Date = DateTime.Now;
        //            orderHeader.Sell = true;
        //            orderHeader.ShopId = shopId;
        //            orderHeader.ConfirmerId = employee.PersonId;
        //            orderHeader.InvoiceNO = getInvoiceNumber(db, "voucher", true, false);
        //            orderHeader.OrderTypeId = getOrderType(db, c.PersonId, true, false, false, false, false, false, false, false, true);
        //            orderHeader.IsMoney = false;
        //            int randomNum = new Random().Next(1000000, 9999999);
        //            for (int i = 0; i < d; i++)
        //            {

        //                orderHeader.ac_Voucher1.Add(new ac_Voucher()
        //                {
        //                    CurrencyRateId = orderHeader.CurrencyRateId,
        //                    Amount = voucherAmount,
        //                    ExpieryDate = DateTime.Now,
        //                    Number = randomNum++,
        //                    IsValid = true
        //                });
        //            }
        //            db.AddToac_OrderHeader(orderHeader);
        //            db.SaveChanges();
        //        }
        //        return Json("ok");
        //    }
        //    catch (Exception ex) { return Json(ex.Message); }
        //    finally { ((IDisposable)db).Dispose(); }
        //}
        public class Voucher
        {
            public string ExpieryDate { get; set; }
            public decimal Amount { get; set; }
        }

        //public ActionResult AddSellVoucher(string customerCode, int currencyId, int shopId, List<Voucher> vouchers, int counterId,
        //                            decimal? amount, decimal? payAmount, string description)
        //{

        //    try
        //    {
        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canIssueVoucher"))
        //        {
        //            return Json(new { isdone = false, msg = "notInRole" });
        //        }

        //        if (vouchers.Count() > 0)
        //        {
        //            //if (!User.IsInRole("canAddVoucher"))
        //            //{
        //            //    return "شما مجاز به انجام این کار نیستید";
        //            //}
        //            int customerId = db.p_Person.Single(p => p.Code == customerCode && p.aspnet_Applications.ApplicationName == appName).PersonId;
        //            var employee = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName);
        //            ac_OrderHeader orderHeader = new ac_OrderHeader();
        //            orderHeader.Description = description;
        //            if (amount == null)
        //                amount = 0;
        //            orderHeader.Amount = amount.Value;
        //            orderHeader.CurrencyRateId = db.ac_CurrencyRate.OrderByDescending(cc => cc.Date).FirstOrDefault(cc => cc.CurrencyId == currencyId).CurrencyRateId;
        //            orderHeader.ClientId = customerId;
        //            orderHeader.EmployeeId = employee.PersonId;
        //            orderHeader.Date = DateTime.Now;
        //            orderHeader.Sell = true;
        //            orderHeader.CounterId = counterId;
        //            orderHeader.ShopId = shopId;
        //            orderHeader.ConfirmerId = employee.PersonId;
        //            orderHeader.InvoiceNO = getInvoiceNumber(db, "voucher", true, false);
        //            orderHeader.OrderTypeId = getOrderType(db, customerId, true, false, false, false, false, false, false, false, true);
        //            orderHeader.IsMoney = false;
        //            int randomNum = new Random().Next(1000000, 9999999);
        //            for (int i = 0; i < vouchers.Count(); i++)
        //            {
        //                orderHeader.ac_Voucher1.Add(new ac_Voucher()
        //                {
        //                    CurrencyRateId = orderHeader.CurrencyRateId,
        //                    IssueDate = DateTime.Now,
        //                    Amount = vouchers[i].Amount,
        //                    ExpieryDate = utility.GetDateCulture(vouchers[i].ExpieryDate),
        //                    Number = randomNum++,
        //                    IsValid = true
        //                });
        //            }
        //            if (payAmount != null)
        //            {
        //                ac_OrderHeader acc = new ac_OrderHeader();
        //                acc.Description = description;
        //                acc.InvoiceNO = getInvoiceNumber(db, "payment", false, false);
        //                acc.OrderTypeId = getOrderType(db, customerId, false, true, false, false, false, false, false, false, false);
        //                acc.ClientId = customerId;
        //                acc.EmployeeId = employee.PersonId;
        //                acc.Date = DateTime.Now;
        //                acc.Sell = false;
        //                acc.CounterId = counterId;
        //                acc.ShopId = shopId;
        //                acc.CurrencyRateId = db.ac_CurrencyRate.Where(c => c.Buy == 1).FirstOrDefault().CurrencyRateId;
        //                acc.IsMoney = true;
        //                acc.ConfirmerId = employee.PersonId;
        //                acc.Amount = payAmount.Value;
        //                var currency = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == currencyId);
        //                ac_Cash ca = new ac_Cash();
        //                ca.CurrencyRateId = currency.CurrencyRateId;
        //                ca.Amount = payAmount.Value;
        //                ca.Type = "نقدی";
        //                acc.ac_Cash.Add(ca);
        //                db.ac_OrderHeader.AddObject(acc);
        //            }
        //            db.ac_OrderHeader.AddObject(orderHeader);
        //        }
        //        int count = db.SaveChanges();
        //        if (count > 0)
        //            return Json(new { isdone = true, msg = "oK" });
        //        else
        //            return Json(new { isdone = false, msg = "error" });
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { isdone = false, msg = ex.Message });
        //    }
        //    finally { ((IDisposable)db).Dispose(); }
        //}


        public ActionResult GetOnlineProfile(int customerId)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                var customer = db.p_Customer.Single(c => c.AccountId == customerId);
                if (customer.aspnet_Membership == null)
                    return Json(new { isDone = false, msg = "notRegistered" });

                var roles = customer.aspnet_Membership.aspnet_Users.aspnet_Roles.Select(r => r.RoleName);
                return Json(new { isDone = true, email = customer.aspnet_Membership.Email, isWholesaleBuyer = (roles.Contains("isWholesaleBuyer") ? true : false), isFriend = (roles.Contains("isFriend") ? true : false), canGetCredit = (roles.Contains("canGetCredit") ? true : false) });
            }

            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = "error" });
            }
        }


        public ActionResult GetCustomerRestrictionList(int customerId)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                var customer = db.p_Customer.Single(c => c.AccountId == customerId);
                if (customer.aspnet_Membership == null)
                    return Json(new { isDone = false, msg = "notRegistered" });
                return Json(new { isDone = true, results = customer.inv_Restriction.Select(r => new { r.Restriction, r.RestrictionId }) });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = "error" });
            }
        }


        public ActionResult DeleteCustomerRestriction(int customerId, int restrictionId)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                var customer = db.p_Customer.Single(c => c.AccountId == customerId);
                if (customer.aspnet_Membership == null)
                    return Json(new { isDone = false, msg = "notRegistered" });
                db.p_Customer.Single(s => s.AccountId == customerId).inv_Restriction.Remove(db.inv_Restriction.Single(r => r.RestrictionId == restrictionId));
                db.SaveChanges();
                return Json(new { isDone = true, results = customer.inv_Restriction.Select(r => new { r.Restriction, r.RestrictionId }) });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = "error" });
            }
        }



        public ActionResult AddCustomerRestriction(int customerId, int restrictionId)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                var customer = db.p_Customer.Single(c => c.AccountId == customerId);
                if (customer.aspnet_Membership == null)
                    return Json(new { isDone = false, msg = "notRegistered" });
                db.p_Customer.Single(s => s.AccountId == customerId).inv_Restriction.Add(db.inv_Restriction.Single(r => r.RestrictionId == restrictionId));
                db.SaveChanges();
                return Json(new { isDone = true, restrictionList = customer.inv_Restriction.Select(r => new { r.Restriction, r.RestrictionId }) });

            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = "error" });
            }
        }


        public ActionResult UpdateOnlineProfile(int customerId, string email, bool isWholesaleBuyer, bool canGetCredit, bool isFriend)
        {


            try
            {

                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditCustomerRoles"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }


                var customer = db.p_Customer.Single(c => c.AccountId == customerId);
                if (customer.aspnet_Membership == null)
                    return Json(new { isDone = false, msg = "notRegistered" });
                var customerRoles = customer.aspnet_Membership.aspnet_Users.aspnet_Roles;
                customer.aspnet_Membership.Email = email;
                customer.Email = email;
                if (isWholesaleBuyer)
                {
                    if (customerRoles.FirstOrDefault(r => r.RoleName == "isWholesaleBuyer") == null)
                        customerRoles.Add(db.aspnet_Roles.Single(r => r.RoleName == "isWholesaleBuyer"));
                }
                else if (!isWholesaleBuyer)
                {
                    if (customerRoles.FirstOrDefault(r => r.RoleName == "isWholesaleBuyer") != null)
                        customerRoles.Remove(db.aspnet_Roles.Single(r => r.RoleName == "isWholesaleBuyer"));
                }
                if (isFriend)
                {
                    if (customerRoles.FirstOrDefault(r => r.RoleName == "isFriend") == null)
                        customerRoles.Add(db.aspnet_Roles.Single(r => r.RoleName == "isFriend"));
                }
                else if (!isFriend)
                {
                    if (customerRoles.FirstOrDefault(r => r.RoleName == "isFriend") != null)
                        customerRoles.Remove(db.aspnet_Roles.Single(r => r.RoleName == "isFriend"));
                }
                if (canGetCredit)
                {
                    if (customerRoles.FirstOrDefault(r => r.RoleName == "canGetCredit") == null)
                        customerRoles.Add(db.aspnet_Roles.Single(r => r.RoleName == "canGetCredit"));
                }
                else if (!canGetCredit)
                {
                    if (customerRoles.FirstOrDefault(r => r.RoleName == "canGetCredit") != null)
                        customerRoles.Remove(db.aspnet_Roles.Single(r => r.RoleName == "canGetCredit"));
                }
                db.SaveChanges();
                return Json(new { isDone = true, msg = "done" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }
        #endregion
        //customer end

        //sms begin
        #region

        public ActionResult GetCustomerForSMSList(int skip, int take, int currentPage,
  bool first, string sort, string code, string namefamily, string introducer, string registerername, string Mobile, string Phone,
  string agefrom, string ageto, string regdatefrom, string regdateto,
  bool? gender, int? shopId, string LastDateSMSFrom, string LastDateSMSTo, int? subjectsms, int? AddressId,
  string barcode, string productname, string productcode, int? categoryid,
  string PaymenytLastFrom, string PaymenytLastTo, decimal? PaymentAmountFrom, decimal? PaymentAmountTo,
  string BuyLastFrom, string BuyLastTo,
  decimal? BuyAmountFrom, decimal? BuyAmountTo, decimal? BuyIntroducerFrom, decimal? BuyIntroducerTo,
  decimal? DebtFrom, decimal? DebtTo, decimal? VocherBuyFrom, decimal? VocherBuyTo, decimal? ChequeNotFrom,
  decimal? ChequeNotTo, bool regDate, bool address, bool product, bool shop, bool category, bool registerer,
  bool lastSentDate, int? registererId, bool subject, bool lastBuy, string email)
        {


            try
            {
                DTO dto = CreateDTO(code, namefamily, introducer, registerername, Mobile, Phone, agefrom, ageto,
                           regdatefrom, regdateto, gender, shopId, LastDateSMSFrom, LastDateSMSTo, subjectsms, AddressId, barcode,
                           productname, productcode, categoryid, PaymenytLastFrom, PaymenytLastTo, PaymentAmountFrom, PaymentAmountTo,
                           BuyLastFrom, BuyLastTo, BuyAmountFrom, BuyAmountTo, BuyIntroducerFrom, BuyIntroducerTo, DebtFrom, DebtTo,
                           VocherBuyFrom, VocherBuyTo, ChequeNotFrom, ChequeNotTo, regDate, address, product, shop, category,
                           registerer, lastSentDate, registererId, subject, lastBuy, email, db);

                //  CustomerResult cr = new CustomerResult();

                var result = db.p_Customer.Where(dto.dynStr, dto.param.ToArray());
                var results = result.OrderBy("it." + sort).Skip(skip).Take(take);
                if (first)
                {

                    return Json(new
                    {
                        count = result.Count(),
                        results = results
                    .Select(cc => new
                    {
                        cc.AccountId,
                        cc.p_Person.Name,
                        cc.p_Person.Family,
                        cc.NetBuy,
                        cc.NetPayment,
                        cc.p_Person.Code,
                        cc.p_Person.RegDate,
                        cc.p_Person.Gender,
                        cc.p_Person.DateOfBirth,
                        cc.aspnet_Membership.Email,
                        introducerId = cc.p_Customer2.p_Person != null ? (int?)cc.p_Customer2.p_Person.AccountId : null,
                        introducerCode = cc.p_Customer2.p_Person.Code,
                        introducerName = cc.p_Customer2.p_Person.Name,
                        introducerFamily = cc.p_Customer2.p_Person.Family,
                        regName = cc.p_Person.ac_Account.p_Employee.p_Person.Name,
                        regFamily = cc.p_Person.ac_Account.p_Employee.p_Person.Family,
                        Mobile = cc.p_Person.p_Phone.Where(p => p.Cell).Select(m => m.Number),
                        //paidVoucher = cc.p_Person.ac_OrderHeader.Sum(ac => ac.ac_Voucher1.Where(c => c.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.Amount * c.ac_CurrencyRate.Sell))),
                        //ReceivedVoucher = cc.p_Person.ac_OrderHeader.Sum(ac => ac.ac_Voucher.Where(c => !c.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.Amount * c.ac_CurrencyRate.Sell))),
                        //VoucherPower = cc.p_Person.ac_OrderHeader.Sum(ac => ac.ac_Voucher1.Where(c => c.ExpieryDate < DateTime.Now && c.IsValid.Value).Sum(c => (decimal?)(c.Amount * c.ac_CurrencyRate.Sell))),
                        //ReceivedCheque = cc.p_Person.ac_OrderHeader.Sum(ac => ac.ac_Cheque.Where(c => !c.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.Amount * c.ac_CurrencyRate.Sell))),
                        //ChequeNotPassed = cc.p_Person.ac_OrderHeader.Sum(ac => ac.ac_Cheque.Where(c => !c.Passed && !c.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.Amount * c.ac_CurrencyRate.Sell))),
                        LastPayment = (DateTime?)cc.p_Person.ac_OrderHeader.Where(a => !a.Sell).OrderByDescending(ac => ac.Date).FirstOrDefault().Date,
                        LastBuy = (DateTime?)cc.p_Person.ac_OrderHeader.Where(o => o.Sell).OrderByDescending(o => o.Date).FirstOrDefault().Date,
                        BuyIntroducer = cc.p_Customer1.Sum(cu => (decimal?)(cu.NetBuy)),
                        PaymentIntroducer = cc.p_Customer1.Sum(cu => (decimal?)(cu.NetBuy)),
                    }).AsEnumerable()
                .Select(c => new
                {
                    c.AccountId,
                    Name = (c.Name == null ? " " : c.Name),
                    c.Family,
                    c.NetBuy,
                    c.NetPayment,
                    c.Code,
                    c.introducerCode,
                    c.Email,
                    regdate = c.RegDate,
                    c.Gender,
                    age = (c.DateOfBirth == null ? 0 : (DateTime.Now.Year - c.DateOfBirth.Value.Year)),
                    c.introducerId,
                    c.introducerName,
                    c.introducerFamily,
                    c.regName,
                    c.regFamily,
                    c.Mobile,
                    //paidVoucher = (c.paidVoucher == null ? 0 : c.paidVoucher),
                    //ChequeNotPassed = (c.ChequeNotPassed == null ? 0 : c.ChequeNotPassed),
                    //ReceivedCheque = (c.ReceivedCheque == null ? 0 : c.ReceivedCheque),
                    //ReceivedVoucher = (c.ReceivedVoucher == null ? 0 : c.ReceivedVoucher),
                    //VoucherPower = (c.VoucherPower == null ? 0 : c.VoucherPower),
                    LastPayment = (DateTime?)c.LastPayment,
                    LastBuy = (DateTime?)c.LastBuy,
                    BuyIntroducer = (c.BuyIntroducer == null ? 0 : c.BuyIntroducer),
                    PaymentIntroducer = (c.PaymentIntroducer == null ? 0 : c.PaymentIntroducer)
                })

                    });
                }
                else
                {
                    return Json(new
                    {
                        results = results
                       .Select(cc => new
                       {
                           cc.AccountId,
                           cc.p_Person.Name,
                           cc.p_Person.Family,
                           cc.NetBuy,
                           cc.NetPayment,
                           cc.p_Person.Code,
                           cc.p_Person.RegDate,
                           cc.p_Person.Gender,
                           cc.p_Person.DateOfBirth,
                           cc.aspnet_Membership.Email,
                           introducerId = cc.p_Customer2.p_Person != null ? (int?)cc.p_Customer2.p_Person.AccountId : null,
                           introducerCode = cc.p_Customer2.p_Person.Code,
                           introducerName = cc.p_Customer2.p_Person.Name,
                           introducerFamily = cc.p_Customer2.p_Person.Family,
                           regName = cc.p_Person.ac_Account.p_Employee.p_Person.Name,
                           regFamily = cc.p_Person.ac_Account.p_Employee.p_Person.Family,
                           Mobile = cc.p_Person.p_Phone.Where(p => p.Cell).Select(m => m.Number),
                           //paidVoucher = cc.p_Person.ac_OrderHeader.Sum(ac => ac.ac_Voucher1.Where(c => c.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.Amount * c.ac_CurrencyRate.Sell))),
                           //ReceivedVoucher = cc.p_Person.ac_OrderHeader.Sum(ac => ac.ac_Voucher.Where(c => !c.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.Amount * c.ac_CurrencyRate.Sell))),
                           //VoucherPower = cc.p_Person.ac_OrderHeader.Sum(ac => ac.ac_Voucher1.Where(c => c.ExpieryDate < DateTime.Now && c.IsValid.Value).Sum(c => (decimal?)(c.Amount * c.ac_CurrencyRate.Sell))),
                           //ReceivedCheque = cc.p_Person.ac_OrderHeader.Sum(ac => ac.ac_Cheque.Where(c => !c.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.Amount * c.ac_CurrencyRate.Sell))),
                           //ChequeNotPassed = cc.p_Person.ac_OrderHeader.Sum(ac => ac.ac_Cheque.Where(c => !c.Passed && !c.ac_OrderHeader.Sell).Sum(c => (decimal?)(c.Amount * c.ac_CurrencyRate.Sell))),
                           LastPayment = (DateTime?)cc.p_Person.ac_OrderHeader.Where(a => !a.Sell).OrderByDescending(ac => ac.Date).FirstOrDefault().Date,
                           LastBuy = (DateTime?)cc.p_Person.ac_OrderHeader.Where(o => o.Sell).OrderByDescending(o => o.Date).FirstOrDefault().Date,
                           BuyIntroducer = cc.p_Customer1.Sum(cu => (decimal?)(cu.NetBuy)),
                           PaymentIntroducer = cc.p_Customer1.Sum(cu => (decimal?)(cu.NetBuy)),
                       }).AsEnumerable()
                .Select(c => new
                {
                    c.AccountId,
                    Name = (c.Name == null ? " " : c.Name),
                    c.Family,
                    c.NetBuy,
                    c.NetPayment,
                    c.Code,
                    c.introducerId,
                    c.introducerCode,
                    regdate = c.RegDate,
                    c.Gender,
                    age = (c.DateOfBirth == null ? 0 : (DateTime.Now.Year - c.DateOfBirth.Value.Year)),
                    c.introducerName,
                    c.introducerFamily,
                    c.regName,
                    c.regFamily,
                    c.Mobile,
                    c.Email,
                    //paidVoucher = (c.paidVoucher == null ? 0 : c.paidVoucher),
                    //ChequeNotPassed = (c.ChequeNotPassed == null ? 0 : c.ChequeNotPassed),
                    //ReceivedCheque = (c.ReceivedCheque == null ? 0 : c.ReceivedCheque),
                    //ReceivedVoucher = (c.ReceivedVoucher == null ? 0 : c.ReceivedVoucher),
                    //VoucherPower = (c.VoucherPower == null ? 0 : c.VoucherPower),
                    LastPayment = (DateTime?)c.LastPayment,
                    LastBuy = (DateTime?)c.LastBuy,
                    BuyIntroducer = (c.BuyIntroducer == null ? 0 : c.BuyIntroducer),
                    PaymentIntroducer = (c.PaymentIntroducer == null ? 0 : c.PaymentIntroducer)
                })
                    });

                }

            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }


        }

        public class HeaderMessage
        {
            public List<string> listNumber { get; set; }
            public int personid { get; set; }
            public string family { get; set; }
            public string sex { get; set; }

        }
        public class DTO
        {
            public List<ObjectParameter> param { get; set; }
            public string dynStr { get; set; }
        }

        public DTO CreateDTO(string code, string namefamily, string introducer, string registerername, string Mobile, string Phone,
        string agefrom, string ageto, string regdatefrom, string regdateto,
        bool? gender, int? shopId, string LastDateSMSFrom, string LastDateSMSTo, int? subjectsms, int? AddressId,
        string barcode, string productname, string productcode, int? categoryid,
        string PaymenytLastFrom, string PaymenytLastTo, decimal? PaymentAmountFrom, decimal? PaymentAmountTo,
        string BuyLastFrom, string BuyLastTo,
        decimal? BuyAmountFrom, decimal? BuyAmountTo, decimal? BuyIntroducerFrom, decimal? BuyIntroducerTo,
        decimal? DebtFrom, decimal? DebtTo, decimal? VocherBuyFrom, decimal? VocherBuyTo, decimal? ChequeNotFrom,
        decimal? ChequeNotTo, bool regDate, bool address, bool product, bool shop, bool category, bool registerer,
        bool lastSentDate, int? registererId, bool subject, bool lastBuy, string email, MapiDBEntities db)
        {
            string dynStr = "";
            List<ObjectParameter> ol = new List<ObjectParameter>();
            dynStr += "(it.p_Person.ac_Account.aspnet_Applications.ApplicationName = @appname)";
            ol.Add(new ObjectParameter("appname", appName));
            if (utility.isInRole(db, User.Identity.Name, appName, "canSeeAllCustomers"))
            {

            }
            else
            {
                dynStr += " AND ";
                dynStr += "it.p_Person.ac_Account.p_Employee.accountId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name).AccountId);
            }
            if (code.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.p_Person.Code = @code ";
                ol.Add(new ObjectParameter("code", code));
            }
            if (namefamily.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += " (it.p_Person.Family) LIKE '%' + @name + '%' OR (it.p_Person.Name) LIKE '%' + @name + '%' ";
                ol.Add(new ObjectParameter("name", namefamily.Replace(" ", string.Empty)));

            }
            if (email.Length > 0)
            {
                if (dynStr.Length > 0)

                    dynStr += " AND ";
                dynStr += " (it.aspnet_Membership.Email= @email)";
                ol.Add(new ObjectParameter("email", email));

            }
            //----
            if (registerer && registererId != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += " it.p_Person.ac_Account.p_Employee.accountId = @registererId ";
                ol.Add(new ObjectParameter("registererId", registererId));
            }
            else if (!registerer && registererId != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += " it.p_Person.ac_Account.p_Employee.accountId != @registererId ";
                ol.Add(new ObjectParameter("registererId", registererId));
            }
            //----
            if (Mobile.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += " EXISTS(select g From it.p_Person.p_Phone as g where g.Number LIKE '%' + @Mobile +'%' and g.Cell=true)";
                ol.Add(new ObjectParameter("Mobile", Mobile));
            }

            if (Phone.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += " EXISTS(select g From it.p_Person.p_Phone as g where g.Number LIKE '%' + @Mobile +'%' and g.Cell=false)";
                ol.Add(new ObjectParameter("Phone", Phone));
            }

            if (agefrom.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.p_Person.DateOfBirth   <=   @dateFrom";
                ol.Add(new ObjectParameter("dateFrom", DateTime.Parse((DateTime.Now.Year - int.Parse(agefrom)).ToString() + "-1-1")));
            }
            if (ageto.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.p_Person.DateOfBirth   >=   @dateTo";
                ol.Add(new ObjectParameter("dateTo", DateTime.Parse((DateTime.Now.Year - int.Parse(ageto)).ToString() + "-1-1")));
            }
            if (introducer.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += " it.p_Customer2.p_Person.Code = @code";
                ol.Add(new ObjectParameter("code", introducer));
            }
            //----
            if (regDate)
            {
                if (regdatefrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.p_Person.RegDate   >=   @dateFrom";
                    ol.Add(new ObjectParameter("dateFrom", utility.GetDateCulture(regdatefrom)));
                }
                if (regdateto.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.p_Person.RegDate   <=   @dateTo";
                    ol.Add(new ObjectParameter("dateTo", utility.GetDateCulture(regdateto)));
                }
            }
            else if (!regDate)
            {
                if (regdatefrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " !(it.p_Person.RegDate   >=   @dateFrom)";
                    ol.Add(new ObjectParameter("dateFrom", utility.GetDateCulture(regdatefrom)));
                }
                if (regdateto.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " !(it.p_Person.RegDate   <=   @dateTo)";
                    ol.Add(new ObjectParameter("dateTo", utility.GetDateCulture(regdateto)));
                }
            }
            //----
            if (gender != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.p_Person.Gender =   @gender";
                ol.Add(new ObjectParameter("gender", gender.Value));
            }
            //----
            if (shop && shopId != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " EXISTS(select g From it.p_Person.ac_OrderHeader as g where g.ShopId = @shopId)";
                ol.Add(new ObjectParameter("shopId", shopId.Value));
            }
            else if (!shop && shopId != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " !EXISTS(select g From it.p_Person.ac_OrderHeader as g where g.ShopId = @shopId)";
                ol.Add(new ObjectParameter("shopId", shopId.Value));
            }
            //----
            //----
            if (lastSentDate)
            {
                if (LastDateSMSFrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " EXISTS(select o From it.p_Person.p_Message1 as o where(o.Date >= @LastDateSMSFrom))";
                    ol.Add(new ObjectParameter("LastDateSMSFrom", utility.GetDateCulture(LastDateSMSFrom)));
                }
                if (LastDateSMSTo.Length > 0)
                {

                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(select o From it.p_Person.p_Message1 as o where(o.Date <= @LastDateSMSTo))";
                    ol.Add(new ObjectParameter("LastDateSMSTo", utility.GetDateCulture(LastDateSMSTo)));
                }
            }
            else if (!lastSentDate)
            {
                if (LastDateSMSFrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " !EXISTS(select o From it.p_Person.p_Message1 as o where(o.Date >= @LastDateSMSFrom))";
                    ol.Add(new ObjectParameter("LastDateSMSFrom", utility.GetDateCulture(LastDateSMSFrom)));
                }
                if (LastDateSMSTo.Length > 0)
                {

                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "!EXISTS(select o From it.p_Person.p_Message1 as o where(o.Date <= @LastDateSMSTo))";
                    ol.Add(new ObjectParameter("LastDateSMSTo", utility.GetDateCulture(LastDateSMSTo)));
                }
            }
            //----
            //----
            if (subject && subjectsms != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "EXISTS(select o From it.p_Person.p_Message1 as o where(o.Title  = @subjectsms))";
                ol.Add(new ObjectParameter("subjectsms", subjectsms));
            }
            else if (!subject && subjectsms != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "!EXISTS(select o From it.p_Person.p_Message1 as o where(o.Title  = @subjectsms))";
                ol.Add(new ObjectParameter("subjectsms", subjectsms));
            }
            //----
            //----
            if (address && AddressId != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.p_Person.p_Address.AddressId  in" + utility.getHierarchyDataForAddress(AddressId.Value);
            }
            else if (!address && AddressId != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " !( it.p_Person.p_Address.AddressId  in" + utility.getHierarchyDataForAddress(AddressId.Value) + " ) ";
            }
            //----
            //----
            if (product)
            {
                if (barcode.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(select oh From it.p_Person.ac_OrderHeader as oh where(EXISTS(select o From oh.ac_AccountDetail as o where ( o.ac_Account.inv_ItemDetail.inv_Barcode.Barcode = @barcode))))";
                    ol.Add(new ObjectParameter("barcode", barcode));
                }
                if (productname.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(select oh From it.p_Person.ac_OrderHeader as oh where(EXISTS(select o From oh.ac_AccountDetail as o where (o.ac_Account.inv_ItemDetail.inv_Barcode.Name like '%'+@productname+'%'))))";
                    ol.Add(new ObjectParameter("productname", productname));
                }
                if (productcode.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(select oh From it.p_Person.ac_OrderHeader as oh where(EXISTS(select o From oh.ac_AccountDetail as o where (o.ac_Account.inv_ItemDetail.inv_Barcode.ItemCode like '%'+@ProductCode+'%'))))";
                    ol.Add(new ObjectParameter("ProductCode", productcode));
                }
            }
            else if (!product)
            {
                if (barcode.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "!EXISTS(select oh From it.p_Person.ac_OrderHeader as oh where(EXISTS(select o From oh.ac_AccountDetail as o where ( o.ac_Account.inv_ItemDetail.inv_Barcode.Barcode = @barcode))))";
                    ol.Add(new ObjectParameter("barcode", barcode));
                }
                if (productname.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "!EXISTS(select oh From it.p_Person.ac_OrderHeader as oh where(EXISTS(select o From oh.ac_AccountDetail as o where (o.ac_Account.inv_ItemDetail.inv_Barcode.Name like '%'+@productname+'%'))))";
                    ol.Add(new ObjectParameter("productname", productname));
                }
                if (productcode.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "!EXISTS(select oh From it.p_Person.ac_OrderHeader as oh where(EXISTS(select o From oh.ac_AccountDetail as o where (o.ac_Account.inv_ItemDetail.inv_Barcode.ItemCode like '%'+@ProductCode+'%'))))";
                    ol.Add(new ObjectParameter("ProductCode", productcode));
                }
            }
            //----
            //----
            if (category && categoryid != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "EXISTS(select oh From it.p_Person.ac_OrderHeader as oh where(EXISTS(select o From oh.ac_AccountDetail as o where (EXISTS(select g from o.ac_Account.inv_ItemDetail.inv_Barcode.inv_Category as g where( g.CategoryID in  " + utility.getHierarchyDataForGeneralCategory(categoryid) + "))))))";
            }
            if (!category && categoryid != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "!EXISTS(select oh From it.p_Person.ac_OrderHeader as oh where(EXISTS(select o From oh.ac_AccountDetail as o where (EXISTS(select g from o.ac_Account.inv_ItemDetail.inv_Barcode.inv_Category as g where( g.CategoryID in  " + utility.getHierarchyDataForGeneralCategory(categoryid) + "))))))";
            }
            //----
            if (PaymenytLastFrom.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "EXISTS(Select sub.MDate From(select Top(1) oh.Date as MDate From it.p_Person.ac_OrderHeader as oh Order By oh.Date Desc)As sub  where(sub.MDate  >=   @PaymenytLastFrom))";
                ol.Add(new ObjectParameter("PaymenytLastFrom", utility.GetDateCulture(PaymenytLastFrom)));
            }
            if (PaymenytLastTo.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "EXISTS(Select sub.MDate From(select Top(1) oh.Date as MDate From it.p_Person.ac_OrderHeader as oh Order By oh.Date Desc)As sub  where(sub.MDate  <=   @PaymenytLastTo))";
                ol.Add(new ObjectParameter("PaymenytLastTo", utility.GetDateCulture(PaymenytLastTo)));
            }
            //----
            if (lastBuy)
            {
                if (BuyLastFrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(Select sub.MDate From(select Top(1) oh.Date as MDate From it.p_Person.ac_OrderHeader as oh Order By oh.Date Desc)As sub  where(sub.MDate  >=   @BuyLastFrom))";
                    ol.Add(new ObjectParameter("BuyLastFrom", utility.GetDateCulture(BuyLastFrom)));
                }
                if (BuyLastTo.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "EXISTS(Select sub.MDate From(select Top(1) oh.Date as MDate From it.p_Person.ac_OrderHeader as oh Order By oh.Date Desc)As sub  where(sub.MDate  <=   @BuyLastTo))";
                    ol.Add(new ObjectParameter("BuyLastTo", utility.GetDateCulture(BuyLastTo)));
                }
            }
            if (!lastBuy)
            {
                if (BuyLastFrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "!EXISTS(Select sub.MDate From(select Top(1) oh.Date as MDate From it.p_Person.ac_OrderHeader as oh Order By oh.Date Desc)As sub  where(sub.MDate  >=   @BuyLastFrom))";
                    ol.Add(new ObjectParameter("BuyLastFrom", utility.GetDateCulture(BuyLastFrom)));
                }
                if (BuyLastTo.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "!EXISTS(Select sub.MDate From(select Top(1) oh.Date as MDate From it.p_Person.ac_OrderHeader as oh Order By oh.Date Desc)As sub  where(sub.MDate  <=   @BuyLastTo))";
                    ol.Add(new ObjectParameter("BuyLastTo", utility.GetDateCulture(BuyLastTo)));
                }
            }
            //----

            if (PaymentAmountFrom != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.NetPayment   >=   @PaymentAmountFrom";
                ol.Add(new ObjectParameter("PaymentAmountFrom", PaymentAmountFrom.Value));
            }

            if (PaymentAmountTo != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.NetPayment   <=   @PaymentAmountTo";
                ol.Add(new ObjectParameter("PaymentAmountTo", PaymentAmountTo.Value));
            }
            if (BuyAmountFrom != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.NetBuy   >=   @BuyAmountFrom";
                ol.Add(new ObjectParameter("BuyAmountFrom", BuyAmountFrom.Value));
            }
            if (BuyAmountTo != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.NetBuy   <=   @BuyAmountTo";
                ol.Add(new ObjectParameter("BuyAmountTo", BuyAmountTo.Value));
            }
            if (BuyIntroducerFrom != null && BuyIntroducerTo != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "Exists(Select sub.SumIntroducer From (select Sum(o.NetBuy)as SumIntroducer from it.p_Customer1 as o )as sub Where (sub.SumIntroducer between @BuyIntroducerFrom and @BuyIntroducerTo ))";
                ol.Add(new ObjectParameter("BuyIntroducerFrom", BuyIntroducerFrom.Value));
                ol.Add(new ObjectParameter("BuyIntroducerTo", BuyIntroducerTo.Value));
            }
            if (BuyIntroducerFrom != null && BuyIntroducerTo == null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "Exists(Select sub.SumIntroducer From (select Sum(o.NetBuy)as SumIntroducer from it.p_Customer1 as o )as sub Where (sub.SumIntroducer >= @BuyIntroducerFrom))";
                ol.Add(new ObjectParameter("BuyIntroducerFrom", BuyIntroducerFrom.Value));
            }
            if (BuyIntroducerFrom == null && BuyIntroducerTo != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "Exists(Select sub.SumIntroducer From (select Sum(o.NetBuy)as SumIntroducer from it.p_Customer1 as o )as sub Where (sub.SumIntroducer <= @BuyIntroducerTo ))";
                ol.Add(new ObjectParameter("BuyIntroducerTo", BuyIntroducerTo.Value));
            }
            if (DebtFrom != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.NetBuy - it.NetPayment   >=   @DebtFrom";
                ol.Add(new ObjectParameter("DebtFrom", DebtFrom.Value));
            }
            if (DebtTo != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.NetBuy - it.NetPayment   <=   @DebtTo";
                ol.Add(new ObjectParameter("DebtTo", DebtTo.Value));
            }
            if (VocherBuyFrom != null && VocherBuyTo != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "Exists(select o.ClientId from it.p_Person.ac_OrderHeader as o GROUP BY o.ClientId HAVING(" +
                    " (case when count(select value c.OrderHeaderId  from ac_Voucher as c where c.ac_OrderHeader.ClientId=o.ClientId)  >0 then sum(  (select value sum(Case when c.ac_OrderHeader.Sell then -c.Amount* c.ac_CurrencyRate.Sell else c.Amount* c.ac_CurrencyRate.Sell end)  from ac_Voucher as c where c.ac_OrderHeader.ClientId = o.ClientId and c.ExpieryDate < @DateNow ) ) else 0 end)" +
                    "between @VocherBuyFrom and @VocherBuyTo ))";
                ol.Add(new ObjectParameter("DateNow", DateTime.Now));
                ol.Add(new ObjectParameter("VocherBuyFrom", VocherBuyFrom.Value));
                ol.Add(new ObjectParameter("VocherBuyTo", VocherBuyTo.Value));
            }
            else if (VocherBuyFrom != null && VocherBuyTo == null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "Exists(select o.ClientId from it.p_Person.ac_OrderHeader as o GROUP BY o.ClientId HAVING(" +
                    " (case when count(select value c.OrderHeaderId  from ac_Voucher as c where c.ac_OrderHeader.ClientId=o.ClientId)  >0 then sum(  (select value sum(Case when c.ac_OrderHeader.Sell then -c.Amount* c.ac_CurrencyRate.Sell else c.Amount* c.ac_CurrencyRate.Sell end)  from ac_Voucher as c where c.ac_OrderHeader.ClientId = o.ClientId and c.ExpieryDate < @DateNow ) ) else 0 end)" +
                    ">= @VocherBuyFrom ))";
                ol.Add(new ObjectParameter("DateNow", DateTime.Now));
                ol.Add(new ObjectParameter("VocherBuyFrom", VocherBuyFrom.Value));
            }
            else if (VocherBuyFrom == null && VocherBuyTo != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "Exists(select o.ClientId from it.p_Person.ac_OrderHeader as o GROUP BY o.ClientId HAVING(" +
                    " (case when count(select value c.OrderHeaderId  from ac_Voucher as c where c.ac_OrderHeader.ClientId=o.ClientId)  >0 then sum(  (select value sum(Case when c.ac_OrderHeader.Sell then -c.Amount* c.ac_CurrencyRate.Sell else c.Amount* c.ac_CurrencyRate.Sell end)  from ac_Voucher as c where c.ac_OrderHeader.ClientId = o.ClientId and c.ExpieryDate < @DateNow ) ) else 0 end)" +
                    "<= @VocherBuyTo ))";
                ol.Add(new ObjectParameter("DateNow", DateTime.Now));
                ol.Add(new ObjectParameter("VocherBuyTo", VocherBuyTo.Value));
            }
            if (ChequeNotFrom != null && ChequeNotTo != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "Exists(select o.ClientId from it.p_Person.ac_OrderHeader as o GROUP BY o.ClientId HAVING(" +
                    " (case when count(select value c.OrderHeaderId  from ac_Cheque as c where c.ac_OrderHeader.ClientId=o.ClientId)  >0 then sum(  (select value sum(Case when c.ac_OrderHeader.Sell then -c.Amount* c.ac_CurrencyRate.Sell else c.Amount* c.ac_CurrencyRate.Sell end)  from ac_Cheque as c where c.ac_OrderHeader.ClientId = o.ClientId and c.passed =  false) ) else 0 end)" +
                    "between @ChequeNotFrom and @ChequeNotTo ))";
                ol.Add(new ObjectParameter("ChequeNotFrom", ChequeNotFrom.Value));
                ol.Add(new ObjectParameter("ChequeNotTo", ChequeNotTo.Value));
            }
            else if (ChequeNotFrom != null && ChequeNotTo == null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "Exists(select o.ClientId from it.p_Person.ac_OrderHeader as o GROUP BY o.ClientId HAVING(" +
                    " (case when count(select value c.OrderHeaderId  from ac_Cheque as c where c.ac_OrderHeader.ClientId=o.ClientId)  >0 then sum(  (select value sum(Case when c.ac_OrderHeader.Sell then -c.Amount* c.ac_CurrencyRate.Sell else c.Amount* c.ac_CurrencyRate.Sell end)  from ac_Cheque as c where c.ac_OrderHeader.ClientId = o.ClientId and c.passed =  false) ) else 0 end)" +
                    ">= @ChequeNotFrom))";
                ol.Add(new ObjectParameter("ChequeNotFrom", ChequeNotFrom.Value));
            }
            else if (ChequeNotFrom == null && ChequeNotTo != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "Exists(select o.ClientId from it.p_Person.ac_OrderHeader as o GROUP BY o.ClientId HAVING(" +
                    " (case when count(select value c.OrderHeaderId  from ac_Cheque as c where c.ac_OrderHeader.ClientId=o.ClientId)  >0 then sum(  (select value sum(Case when c.ac_OrderHeader.Sell then -c.Amount* c.ac_CurrencyRate.Sell else c.Amount* c.ac_CurrencyRate.Sell end)  from ac_Cheque as c where c.ac_OrderHeader.ClientId = o.ClientId and c.passed =  false) ) else 0 end)" +
                    "<= @ChequeNotTo ))";
                ol.Add(new ObjectParameter("ChequeNotTo", ChequeNotTo.Value));
            }
            return new DTO { dynStr = dynStr, param = ol };
        }

        public ActionResult SendSMSForSelected(List<HeaderMessage> header, string messageBody, string messageHeader, bool Setname, int? title, byte paging)
        {

            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canSendSMS"))
                {
                    return Json("notInRole");
                }

                var appDetails = db.aspnet_Applications.Single(s => s.ApplicationName == appName).ApplicationDetail;
                int senderid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName).AccountId;
                int q = 0;
                string mesg = messageBody;
                foreach (var item in header)
                {

                    ir.afe.www.BoxService ibs = new ir.afe.www.BoxService();
                    var person = db.p_Person.Single(p => p.AccountId == item.personid);
                    if (!mesg.Contains("<%name%>"))
                        mesg = mesg.Replace("<%family%>", (" " + (person.Gender == false ? "خانم" : "آقای") + " " + person.Family + " ").ToString());
                    else if (mesg.Contains("<%name%>"))
                    {
                        mesg = mesg.Replace("<%name%>", (" " + (person.Gender == false ? "خانم" : "آقای") + " " + person.Name + " ").ToString());
                        mesg = mesg.Replace("<%family%>", (" " + person.Family + " ").ToString());
                    }
                    if (mesg.Contains("<%title%>"))
                        mesg = mesg.Replace("<%title%>", (" " + (person.Gender == false ? "سرکار" : "جناب") + " ").ToString());
                    if (mesg.Contains("<%amount%>"))
                        mesg = mesg.Replace("<%amount%>", (person.p_Customer.NetBuy - person.p_Customer.NetPayment).ToString());
                    //if (mesg.Contains("<%voucherAmount%>"))
                    //mesg = mesg.Replace("<%voucherAmount%>", (person.ac_OrderHeader.Sum(s => s.ac_Voucher1.Where(v => v.ExpieryDate < DateTime.Now && v.IsValid == true).Sum(v => v.Amount))).ToString());
                    List<string> numbers = item.listNumber;
                    var smsCredit = db.ApplicationDetails.Single(a => a.aspnet_Applications.ApplicationName == appName);
                    foreach (var number in numbers)
                    {
                        p_Message msg = new p_Message();
                        msg.ReceiverId = item.personid;
                        msg.SenderId = senderid;
                        msg.Date = DateTime.Now;
                        msg.Body = mesg;
                        msg.Title = title;
                        msg.Number = number;
                        msg.Length = paging;
                        db.p_Message.AddObject(msg);
                        // db.SaveChanges();
                        if (smsCredit.SmsCredit > 13)
                        {
                            string[] sendResult = ibs.SendMessage(appDetails.SmsUser, appDetails.SmsPass, appDetails.SmsNumber.ToString(), new string[] { number }, mesg, "2", new long?[] { msg.MessageId });
                            long result;
                            if (long.TryParse(sendResult[0], out result))
                            {
                                smsCredit.SmsCredit = smsCredit.SmsCredit - 13;
                                msg.ReferenceId = result;
                                q++;
                            }
                            else
                                msg.Status = sendResult[0];
                            db.SaveChanges();
                        }
                        else
                        {
                            return Json("notEnoughCredit");
                        }
                    }
                    mesg = messageBody;
                }
                if (q > 0)
                {
                    return Json(q + " پیغام ارسال شد");
                }
                else
                {
                    return Json("ارسال نشد");
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
            finally { ((IDisposable)db).Dispose(); }
        }



        public ActionResult SendSMSForAll(string code, string namefamily, string introducer, string registerername, string Mobile, string Phone,
        string agefrom, string ageto, string regdatefrom, string regdateto,
        bool? gender, int? shopId, string LastDateSMSFrom, string LastDateSMSTo, int? subjectsms, int? AddressId,
        string barcode, string productname, string productcode, int? categoryid,
        string PaymenytLastFrom, string PaymenytLastTo, decimal? PaymentAmountFrom, decimal? PaymentAmountTo,
        string BuyLastFrom, string BuyLastTo,
        decimal? BuyAmountFrom, decimal? BuyAmountTo, decimal? BuyIntroducerFrom, decimal? BuyIntroducerTo,
        decimal? DebtFrom, decimal? DebtTo, decimal? VocherBuyFrom, decimal? VocherBuyTo, decimal? ChequeNotFrom, decimal? ChequeNotTo
        , string messageBody, string messageHeader, bool Setname, int? title, byte paging, bool regDate, bool address, bool product, bool shop, bool category, bool registerer,
        bool lastSentDate, int? registererId, bool subject, bool lastBuy, string email)
        {

            try
            {
                var appDetails = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationDetail;
                if (!utility.isInRole(db, User.Identity.Name, appName, "canSendSMS"))
                {
                    return Json("notInRole");
                }


                DTO dto = CreateDTO(code, namefamily, introducer, registerername, Mobile, Phone, agefrom, ageto,
                           regdatefrom, regdateto, gender, shopId, LastDateSMSFrom, LastDateSMSTo, subjectsms, AddressId, barcode,
                           productname, productcode, categoryid, PaymenytLastFrom, PaymenytLastTo, PaymentAmountFrom,
                           PaymentAmountTo, BuyLastFrom, BuyLastTo, BuyAmountFrom, BuyAmountTo, BuyIntroducerFrom, BuyIntroducerTo,
                           DebtFrom, DebtTo, VocherBuyFrom, VocherBuyTo, ChequeNotFrom, ChequeNotTo, regDate, address, product,
                           shop, category, registerer, lastSentDate, registererId, subject, lastBuy, email, db);
                int senderid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName).AccountId;
                var result = db.p_Customer.Where(dto.dynStr, dto.param.ToArray());
                string mesg = messageBody;
                int q = 0;
                foreach (var item in result)
                {

                    ir.afe.www.BoxService ibs = new ir.afe.www.BoxService();
                    if (!mesg.Contains("<%name%>"))
                        mesg = mesg.Replace("<%family%>", (" " + (item.p_Person.Gender == false ? "خانم" : "آقای") + " " + item.p_Person.Family + " ").ToString());
                    else if (mesg.Contains("<%name%>"))
                    {
                        mesg = mesg.Replace(@"<%name%>", (" " + (item.p_Person.Gender == false ? "خانم" : "آقای") + " " + item.p_Person.Name + " ").ToString());
                        mesg = mesg.Replace(@"<%family%>", (" " + item.p_Person.Family + " ").ToString());
                    }
                    if (mesg.Contains("<%title%>"))
                        mesg = mesg.Replace(@"<%title%>", (" " + (item.p_Person.Gender == false ? "سرکار" : "جناب") + " ").ToString());
                    if (mesg.Contains("<%amount%>"))
                        mesg = mesg.Replace(@"<%amount%>", (item.NetBuy - item.NetPayment).ToString());
                    //if (mesg.Contains("<%voucherAmount%>"))
                    //mesg = mesg.Replace(@"<%voucherAmount%>", (item.p_Person.ac_OrderHeader.Sum(s => s.ac_Voucher1.Where(v => v.ExpieryDate < DateTime.Now && v.IsValid == true).Sum(v => v.Amount))).ToString());
                    IEnumerable<string> numbers = item.p_Person.p_Phone.Where(p => p.Cell).Select(c => c.Number);
                    var smsCredit = db.ApplicationDetails.Single(a => a.aspnet_Applications.ApplicationName == appName);
                    foreach (var number in numbers)
                    {
                        p_Message msg = new p_Message();
                        msg.ReceiverId = item.AccountId;
                        msg.SenderId = senderid;
                        msg.Date = DateTime.Now;
                        msg.Body = mesg;
                        msg.Title = title;
                        msg.Number = number;
                        msg.Length = paging;
                        db.p_Message.AddObject(msg);
                        // db.SaveChanges();
                        if (smsCredit.SmsCredit > 13)
                        {
                            string[] sendResult = ibs.SendMessage(appDetails.SmsUser, appDetails.SmsPass, appDetails.SmsNumber.ToString(), new string[] { number }, mesg, "2", new long?[] { msg.MessageId });
                            long resultId;
                            if (long.TryParse(sendResult[0], out resultId))
                            {
                                smsCredit.SmsCredit = smsCredit.SmsCredit - 13;
                                msg.ReferenceId = resultId;
                                q++;
                            }
                            else
                                msg.Status = sendResult[0];
                            db.SaveChanges();
                        }
                        else
                        {
                            return Json("notEnoughCredit");
                        }
                    }
                    mesg = messageBody;
                }
                //  int co = db.SaveChanges();
                if (q > 0)
                {
                    return Json(q.ToString() + " پیغام ارسال شد");
                }
                else
                {
                    return Json("ارسال نشد");
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult GetCredit()
        {
            try
            {
                if (!utility.isInRole(new MapiDBEntities(), User.Identity.Name, appName, "canSendSMS"))
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }
                var appDetails = new MapiDBEntities().aspnet_Applications.Single(s => s.ApplicationName == appName).ApplicationDetail;
                ir.afe.www.BoxService ibs = new ir.afe.www.BoxService();
                return Json(new { isdone = true, msg = "مبلغ اعتبار :  " + (ibs.GetRemainingCredit(appDetails.SmsUser, appDetails.SmsPass)) + "  ریال" });
                // return Json( new { isdone = true, msg = "مبلغ اعتبار :  " + (appName == "/" ? ibs.GetRemainingCredit(appDetails.SmsUser,appDetails.SmsPass) : (new MapiDBEntities().ApplicationDetails.Single(a => a.AppName == HttpContext.Current.appName).SmsCredit.ToString())) + "  ریال" });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = true, msg = ex.Message });
            }
        }

        public ActionResult CheckSmsStatus(int? id, int? title, string body, string datefrom, string dateto, string status, string mobile, string customerCode)
        {

            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canSendSMS"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
                string dynStr = null;
                List<ObjectParameter> ol = new List<ObjectParameter>();
                dynStr += "it.p_Person.ac_Account.aspnet_Applications.ApplicationName = @appname";
                ol.Add(new ObjectParameter("appname", appName));
                if (id != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.ReceiverId = @id ";
                    ol.Add(new ObjectParameter("id", id));
                }
                if (!string.IsNullOrEmpty(customerCode))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.p_Person1.Code = @customerCode ";
                    ol.Add(new ObjectParameter("customerCode", customerCode));
                }
                if (title != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Title = @title";
                    ol.Add(new ObjectParameter("title", title.Value));
                }
                if (body.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Body like '%'+@body+'%'";
                    ol.Add(new ObjectParameter("body", body));
                }
                if (datefrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Date >= @datefrom";
                    ol.Add(new ObjectParameter("datefrom", utility.GetDateCulture(datefrom)));
                }
                if (dateto.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Date <= @dateto";
                    ol.Add(new ObjectParameter("dateto", utility.GetDateCulture(dateto)));
                }
                if (!string.IsNullOrEmpty(status))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Status like '%'+@status+'%'";
                    ol.Add(new ObjectParameter("status", status));
                }
                if (!string.IsNullOrEmpty(mobile))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Number LIKE '%' + @mobile +'%' ";
                    ol.Add(new ObjectParameter("mobile", mobile));
                }

                var result = db.p_Message.Where(dynStr, ol.ToArray());
                ir.afe.www.BoxService ibs = new ir.afe.www.BoxService();
                foreach (var item in result)
                {
                    long num;
                    if ((DateTime.Now - item.Date).Days < 10 && item.ReferenceId != null)
                    {
                        var appDetails = new MapiDBEntities().aspnet_Applications.Single(s => s.ApplicationName == appName).ApplicationDetail;
                        item.Status = ibs.GetMessageStatus(appDetails.SmsUser, appDetails.SmsPass, item.ReferenceId.ToString());
                    }
                }
                int r = db.SaveChanges();
                if (r > 0)
                    return Json(new { isdone = true, msg = r + " Messages Checked!" });
                else
                    return Json(new { isdone = false, msg = "Messages dont checked!" });
            }
            catch (Exception e)
            {
                return Json(new { isdone = false, msg = e.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult GetListSMS(int skip, int take, int currentPage, bool first, string sort, int? id, int? title,
                                       string body, string datefrom, string dateto, string status, string mobile, string customerCode)
        {

            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "Sms"))
                {
                    return null;// new { isDone = false, msg = "notAllowed" });
                }
                string dynStr = null;
                List<ObjectParameter> ol = new List<ObjectParameter>();
                dynStr += "it.p_Person.ac_Account.aspnet_Applications.ApplicationName = @appname";
                ol.Add(new ObjectParameter("appname", appName));
                if (id != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.ReceiverId = @id ";
                    ol.Add(new ObjectParameter("id", id));
                }
                if (!string.IsNullOrEmpty(customerCode))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.p_Person1.Code = @customerCode ";
                    ol.Add(new ObjectParameter("customerCode", customerCode));
                }
                if (title != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Title = @title";
                    ol.Add(new ObjectParameter("title", title.Value));
                }
                if (body.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Body like '%'+@body+'%'";
                    ol.Add(new ObjectParameter("body", body));
                }
                if (datefrom.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Date >= @datefrom";
                    ol.Add(new ObjectParameter("datefrom", utility.GetDateCulture(datefrom)));
                }
                if (dateto.Length > 0)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Date <= @dateto";
                    ol.Add(new ObjectParameter("dateto", utility.GetDateCulture(dateto)));
                }
                if (!string.IsNullOrEmpty(status))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Status like '%'+@status+'%'";
                    ol.Add(new ObjectParameter("status", status));
                }
                if (!string.IsNullOrEmpty(mobile))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "it.Number LIKE '%' + @mobile +'%' ";
                    ol.Add(new ObjectParameter("mobile", mobile));
                }

                if (first)
                {
                    var result = db.p_Message.Where(dynStr, ol.ToArray());
                    return Json(new SearchResult()
                    {
                        count = result.Count(),
                        results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                       .Select(cc => new
                       {
                           cc.Date,
                           cc.Title,
                           cc.Body,
                           cc.p_Person.Name,
                           cc.p_Person.Family,
                           cc.Number,
                           cName = cc.p_Person1.Name,
                           cFamily = cc.p_Person1.Family,
                           cc.Status,
                           cc.Length,
                           cc.MessageId
                       }).AsEnumerable()
                        .Select(c => new
                        {
                            c.Date,
                            Title = c.Title != null ? GetTitleValue(c.Title) : "",
                            c.Body,
                            Name = c.Name != null ? c.Name : "",
                            c.Family,
                            c.Number,
                            cName = c.cName != null ? c.cName : "",
                            c.cFamily,
                            Status = c.Status == "Mobile number is invalid or empty." ? ("شماره موبایل معتبر نمی باشد" + ".") : c.Status,
                            c.Length,
                            c.MessageId
                        }).ToArray()
                    });
                }
                else
                {
                    return Json(new SearchResult()
                    {
                        results = db.p_Message.Where(dynStr, ol.ToArray()).OrderBy("it." + sort).Skip(skip).Take(take)
                        .Select(cc => new
                        {
                            cc.Date,
                            cc.Title,
                            cc.Body,
                            cc.p_Person.Name,
                            cc.p_Person.Family,
                            cc.Number,
                            cName = cc.p_Person1.Name,
                            cFamily = cc.p_Person1.Family,
                            cc.Status,
                            cc.Length,
                            cc.MessageId
                        }).AsEnumerable()
                        .Select(c => new
                        {
                            c.Date,
                            Title = c.Title != null ? GetTitleValue(c.Title) : "",
                            c.Body,
                            Name = c.Name != null ? c.Name : "",
                            c.Family,
                            c.Number,
                            cName = c.cName != null ? c.cName : "",
                            c.cFamily,
                            Status = c.Status == "Mobile number is invalid or empty." ? ("شماره موبایل معتبر نمی باشد" + ".") : c.Status,
                            c.Length,
                            c.MessageId
                        }).ToArray()
                    });
                }
            }
            catch (Exception e)
            {
                return Json(new SearchResult());
            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public string GetTitleValue(int? tiltleid)
        {
            if (tiltleid != null)
                return XDocument.Load(Server.MapPath("~/Customer/smsTitle.xml")).Elements("root").Elements("Title").Single(d => d.Attribute("Id").Value == tiltleid.Value.ToString()).Attribute("Title").Value;
            else
                return "";
        }


        public ActionResult GetSmsTitles()
        {
            try
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Customer/smsTitle.xml"));
                var res = xmlDoc.Elements("root").Elements("Title").Select(s => new { id = s.Attribute("Id").Value.ToString(), name = s.Attribute("Title").Value });
                return Json(res);
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public ActionResult ResendSms(int[] messageId)
        {

            try
            {

                var appDetails = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationDetail;
                if (!utility.isInRole(db, User.Identity.Name, appName, "canSendSMS"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }

                int q = 0;
                var currPerson = db.p_Person.Single(p => p.Code == User.Identity.Name && (p.ac_Account.aspnet_Applications.ApplicationName == appName));
                foreach (var item in messageId)
                {
                    ir.afe.www.BoxService ibs = new ir.afe.www.BoxService();
                    var message = db.p_Message.Single(m => m.MessageId == item);
                    message.SenderId = currPerson.AccountId;
                    message.Date = DateTime.Now;
                    db.SaveChanges();
                    string[] sendResult = ibs.SendMessage(appDetails.SmsUser, appDetails.SmsPass, appDetails.SmsNumber.ToString(), new string[] { message.Number }, message.Body, "2", new long?[] { message.MessageId });
                    long result;
                    if (long.TryParse(sendResult[0], out result))
                    {
                        message.ReferenceId = result;
                        q++;
                    }
                    else
                        message.Status = sendResult[0];
                    db.SaveChanges();
                }
                if (q > 0)
                {
                    return Json(new { isdone = true, msg = q + " پیغام ارسال شد" });
                }
                else
                {
                    return Json(new { isdone = false, msg = "ارسال نشد" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }


        #endregion
        //sms end

        //email begin
        #region

        //public ActionResult SendEmailForAll(string code, string namefamily, string introducer, string registerername, string Mobile, string Phone,
        //string agefrom, string ageto, string regdatefrom, string regdateto,
        //bool? gender, int? shopId, string LastDateSMSFrom, string LastDateSMSTo, int? subjectsms, int? AddressId,
        //string barcode, string productname, string productcode, int? categoryid,
        //string PaymenytLastFrom, string PaymenytLastTo, decimal? PaymentAmountFrom, decimal? PaymentAmountTo,
        //string BuyLastFrom, string BuyLastTo,
        //decimal? BuyAmountFrom, decimal? BuyAmountTo, decimal? BuyIntroducerFrom, decimal? BuyIntroducerTo,
        //decimal? DebtFrom, decimal? DebtTo, decimal? VocherBuyFrom, decimal? VocherBuyTo, decimal? ChequeNotFrom, decimal? ChequeNotTo
        //, string messageBody, string messageHeader, bool Setname, int? title, byte? paging, bool regDate, bool address, bool product, bool shop, bool category, bool registerer,
        //bool lastSentDate, int? registererId, bool subject, bool lastBuy, string email)
        //{

        //    try
        //    {

        //        var appDetails = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationDetail;
        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canSendSMS"))
        //        {
        //            return Json("notInRole");
        //        }


        //        DTO dto = CreateDTO(code, namefamily, introducer, registerername, Mobile, Phone, agefrom, ageto,
        //                   regdatefrom, regdateto, gender, shopId, LastDateSMSFrom, LastDateSMSTo, subjectsms, AddressId, barcode,
        //                   productname, productcode, categoryid, PaymenytLastFrom, PaymenytLastTo, PaymentAmountFrom,
        //                   PaymentAmountTo, BuyLastFrom, BuyLastTo, BuyAmountFrom, BuyAmountTo, BuyIntroducerFrom, BuyIntroducerTo,
        //                   DebtFrom, DebtTo, VocherBuyFrom, VocherBuyTo, ChequeNotFrom, ChequeNotTo, regDate, address, product,
        //                   shop, category, registerer, lastSentDate, registererId, subject, lastBuy, email, db);
        //        int senderid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName).PersonId;
        //        var result = db.p_Customer.Where(dto.dynStr, dto.param.ToArray());
        //        int q = 0;

        //        string mesg = messageHeader;
        //        string mBody = messageBody;
        //        foreach (var item in result)
        //        {
        //            if (!mesg.Contains("<%name%>"))
        //                mesg = mesg.Replace("<%family%>", (" " + (item.p_Person.Gender == false ? "خانم" : "آقای") + " " + item.p_Person.Family + " ").ToString());
        //            else if (mesg.Contains("<%name%>"))
        //            {
        //                mesg = mesg.Replace(@"<%name%>", (" " + (item.p_Person.Gender == false ? "خانم" : "آقای") + " " + item.p_Person.Name + " ").ToString());
        //                mesg = mesg.Replace(@"<%family%>", (" " + item.p_Person.Family + " ").ToString());
        //            }
        //            if (mesg.Contains("<%title%>"))
        //                mesg = mesg.Replace(@"<%title%>", (" " + (item.p_Person.Gender == false ? "سرکار" : "جناب") + " ").ToString());
        //            if (mesg.Contains("<%amount%>"))
        //                mesg = mesg.Replace(@"<%amount%>", (item.NetBuy - item.NetPayment).ToString());
        //            if (mesg.Contains("<%voucherAmount%>"))
        //                mesg = mesg.Replace(@"<%voucherAmount%>", (item.p_Person.ac_OrderHeader1.Sum(s => s.ac_Voucher1.Where(v => v.ExpieryDate < DateTime.Now && v.IsValid == true).Sum(v => v.Amount))).ToString());

        //            if (!mBody.Contains("%name%"))
        //                mBody = mBody.Replace("%family%", (" " + (item.p_Person.Gender == false ? "خانم" : "آقای") + " " + item.p_Person.Family + " ").ToString());
        //            else if (mBody.Contains("%name%"))
        //            {
        //                mBody = mBody.Replace(@"%name%", (" " + (item.p_Person.Gender == false ? "خانم" : "آقای") + " " + item.p_Person.Name + " ").ToString());
        //                mBody = mBody.Replace(@"%family%", (" " + item.p_Person.Family + " ").ToString());
        //            }
        //            if (mBody.Contains("%title%"))
        //                mBody = mBody.Replace(@"%title%", (" " + (item.p_Person.Gender == false ? "سرکار" : "جناب") + " ").ToString());
        //            if (mBody.Contains("%amount%"))
        //                mBody = mBody.Replace(@"%amount%", (item.NetBuy - item.NetPayment).ToString());
        //            if (mBody.Contains("%voucherAmount%"))
        //                mBody = mBody.Replace(@"%voucherAmount%", (item.p_Person.ac_OrderHeader1.Sum(s => s.ac_Voucher1.Where(v => v.ExpieryDate < DateTime.Now && v.IsValid == true).Sum(v => v.Amount))).ToString());
        //            var cusInfi = item.aspnet_Membership;
        //            if (cusInfi != null)
        //            {
        //                if (utility.CheckForInternetConnection())
        //                {
        //                    System.Threading.Thread t = new System.Threading.Thread(utility.sendEmail);
        //                    object[] parameters = new object[] { 
        //                cusInfi.Email,
        //                mesg,
        //                mBody,
        //                appDetails.Email,
        //                appDetails.EmailPass,
        //                appDetails.Port,
        //                appDetails.Host
        //            };
        //                    t.Start(parameters);
        //                }
        //            }
        //            mesg = messageBody;
        //            return Json("done");
        //        }
        //        //  int co = db.SaveChanges();
        //        if (q > 0)
        //        {
        //            return Json(q.ToString() + " پیغام ارسال شد");
        //        }
        //        else
        //        {
        //            return Json("ارسال نشد");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(ex.Message);
        //    }
        //    finally { ((IDisposable)db).Dispose(); }
        //}


        //public ActionResult SendEmailForSelected(List<HeaderMessage> header, string messageBody, string messageHeader, bool Setname, int? title)
        //{

        //    try
        //    {

        //        if (!utility.isInRole(db, User.Identity.Name, appName, "canSendSMS"))
        //        {
        //            return Json("notInRole");
        //        }

        //        var appDetails = db.aspnet_Applications.Single(s => s.ApplicationName == appName).ApplicationDetail;
        //        int senderid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName).PersonId;

        //        string mesg = messageHeader;
        //        string mBody = messageBody;
        //        foreach (var item in header)
        //        {
        //            var person = db.p_Person.Single(p => p.PersonId == item.personid);
        //            if (!mesg.Contains("<%name%>"))
        //                mesg = mesg.Replace("<%family%>", (" " + (person.Gender == false ? "خانم" : "آقای") + " " + person.Family + " ").ToString());
        //            else if (mesg.Contains("<%name%>"))
        //            {
        //                mesg = mesg.Replace("<%name%>", (" " + (person.Gender == false ? "خانم" : "آقای") + " " + person.Name + " ").ToString());
        //                mesg = mesg.Replace("<%family%>", (" " + person.Family + " ").ToString());
        //            }
        //            if (mesg.Contains("<%title%>"))
        //                mesg = mesg.Replace("<%title%>", (" " + (person.Gender == false ? "سرکار" : "جناب") + " ").ToString());
        //            if (mesg.Contains("<%amount%>"))
        //                mesg = mesg.Replace("<%amount%>", (person.p_Customer.NetBuy - person.p_Customer.NetPayment).ToString());
        //            if (mesg.Contains("<%voucherAmount%>"))
        //                mesg = mesg.Replace("<%voucherAmount%>", (person.ac_OrderHeader1.Sum(s => s.ac_Voucher1.Where(v => v.ExpieryDate < DateTime.Now && v.IsValid == true).Sum(v => v.Amount))).ToString());

        //            if (!mBody.Contains("%name%"))
        //                mBody = mBody.Replace("%family%", (" " + (person.Gender == false ? "خانم" : "آقای") + " " + person.Family + " ").ToString());
        //            else if (mBody.Contains("%name%"))
        //            {
        //                mBody = mBody.Replace("%name%", (" " + (person.Gender == false ? "خانم" : "آقای") + " " + person.Name + " ").ToString());
        //                mBody = mBody.Replace("%family%", (" " + person.Family + " ").ToString());
        //            }
        //            if (mBody.Contains("%title%"))
        //                mBody = mBody.Replace("%title%", (" " + (person.Gender == false ? "سرکار" : "جناب") + " ").ToString());
        //            if (mBody.Contains("%amount%"))
        //                mBody = mBody.Replace("%amount%", (person.p_Customer.NetBuy - person.p_Customer.NetPayment).ToString());
        //            if (mBody.Contains("%voucherAmount%"))
        //                mBody = mBody.Replace("%voucherAmount%", (person.ac_OrderHeader1.Sum(s => s.ac_Voucher1.Where(v => v.ExpieryDate < DateTime.Now && v.IsValid == true).Sum(v => v.Amount))).ToString());
        //            List<string> numbers = item.listNumber;

        //            foreach (var number in numbers)
        //            {
        //                if (utility.CheckForInternetConnection())
        //                {
        //                    System.Threading.Thread t = new System.Threading.Thread(utility.sendEmail);
        //                    object[] parameters = new object[] { 
        //                number,
        //                mesg,
        //                mBody,
        //                appDetails.Email,
        //                appDetails.EmailPass,
        //                appDetails.Port,
        //                appDetails.Host
        //            };
        //                    t.Start(parameters);
        //                }
        //            }
        //            mesg = messageBody;
        //            return Json("done");
        //        }
        //        return Json("done");
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(ex.Message);
        //    }
        //    finally { ((IDisposable)db).Dispose(); }
        //}


        #endregion
        //email end

        //Currency Begin
        #region


        public ActionResult CurrensyList()
        {

            return Json(db.ac_Currency.Where(c => c.ApplicationId == null || c.aspnet_Applications.ApplicationName == appName).Select(c => new { id = c.CurrencyId, name = c.Currency, symbol = c.Symbol, c.isIndex }));
        }


        public ActionResult AddCurrency(string name, string symbol)
        {


            try
            {
                db.ac_Currency.AddObject(new ac_Currency() { Currency = name, Symbol = symbol, ApplicationId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId });
                db.SaveChanges();
                return Json("ok");
            }
            catch (Exception ex) { return Json(ex.Message); }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult EditCurrency(int id, string name, string symbol)
        {


            try
            {
                ac_Currency ac = db.ac_Currency.Single(c => c.CurrencyId == id);
                ac.Currency = name;
                ac.Symbol = symbol;
                db.SaveChanges();
                return Json("ok");
            }
            catch (Exception e) { return Json(e.Message); }
            finally { ((IDisposable)db).Dispose(); }


        }


        public ActionResult setIndexCurrency(int id)
        {


            try
            {
                if (db.ac_Currency.Any(c => c.isIndex.Value))
                {
                    db.ac_Currency.FirstOrDefault(c => c.isIndex == true).isIndex = false;
                }
                ac_Currency ac = db.ac_Currency.Single(c => c.CurrencyId == id);
                ac.isIndex = true;

                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }


        }


        public ActionResult DeleteCurrency(int id)
        {


            try
            {
                db.ac_Currency.DeleteObject(db.ac_Currency.Single(c => c.CurrencyId == id));
                db.SaveChanges();
                return Json("ok");
            }
            catch (Exception e) { return Json(e.Message); }
            finally { ((IDisposable)db).Dispose(); }
        }


        #region CurrencyRateManagment


        public ActionResult CurrencyRateLlist()
        {
            return Json(db.ac_CurrencyRate.Where(c => c.ac_Currency.ApplicationId == null || c.ac_Currency.aspnet_Applications.ApplicationName == appName).Select(cr => new { cr.CurrencyId, cr.ac_Currency.Currency, cr.ac_Currency.Symbol, cr.Buy, cr.Sell, cr.Date }));
        }


        public ActionResult AddCurrencyRate(int idcurrency, decimal buy, decimal sell, string date)
        {


            try
            {
                db.ac_CurrencyRate.AddObject(new ac_CurrencyRate() { CurrencyId = idcurrency, Buy = buy, Sell = sell, Date = utility.GetDateCulture(date) });
                db.SaveChanges();
                return Json("ok");
            }
            catch (Exception ex) { return Json(ex.Message); }

            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult EditCurrencyRate(int id, int currencyid, decimal buy, decimal sell, string date)
        {


            try
            {
                ac_CurrencyRate cr = db.ac_CurrencyRate.Single(cur => cur.CurrencyRateId == id);
                cr.CurrencyId = currencyid;
                cr.Buy = buy;
                cr.Sell = sell;
                cr.Date = utility.GetDateCulture(date);
                db.SaveChanges();
                return Json("ok");
            }
            catch (Exception ex) { return Json(ex.Message); }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult DeleteCurrencyRate(int id)
        {


            try
            {
                db.ac_CurrencyRate.DeleteObject(db.ac_CurrencyRate.Single(cur => cur.CurrencyRateId == id));
                db.SaveChanges();
                return Json("ok");
            }
            catch (Exception ex) { return Json(ex.Message); }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult GetCurrencyRate(int skip, int take, int currentPage, string datefrom, string dateto, string buyratefrom, string buyrateto, string sellratefrom, string sellrateto, int? currencyid, bool first, string sort, bool advance)
        {
            List<ObjectParameter> ol = new List<ObjectParameter>();
            string dynStr = string.Empty;
            dynStr += "(it.ac_Currency.aspnet_Applications.ApplicationName = @appname or it.ac_Currency.ApplicationId Is NULL)";
            ol.Add(new ObjectParameter("appname", appName));
            if (currencyid > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ac_Currency.CurrencyId = @CurrencyID ";
                ol.Add(new ObjectParameter("CurrencyID", currencyid));
            }

            if (buyratefrom.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                if (advance)
                    dynStr += " it.Buy   >=   @BuyFrom  ";
                else
                    dynStr += " it.Buy   =   @BuyFrom  ";
                ol.Add(new ObjectParameter("BuyFrom", decimal.Parse(buyratefrom)));

            }

            if (buyrateto.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.Buy   <=   @BuyTo";
                ol.Add(new ObjectParameter("BuyTo", decimal.Parse(buyrateto)));
            }

            if (sellratefrom.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                if (advance)
                    dynStr += " it.Sell   >=   @SellFrom";
                else dynStr += " it.Sell   =   @SellFrom";
                ol.Add(new ObjectParameter("SellFrom", decimal.Parse(sellratefrom)));
            }
            if (sellrateto.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.Sell   <=   @SellTo";
                ol.Add(new ObjectParameter("SellTo", decimal.Parse(sellrateto)));
            }
            if (datefrom.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                if (advance)
                    dynStr += " it.Date   >=   @DateFrom";
                else dynStr += " it.Date   =   @DateFrom";
                ol.Add(new ObjectParameter("DateFrom", utility.GetDateCulture(datefrom)));
            }
            if (dateto.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.Date   <=   @DateTo";
                ol.Add(new ObjectParameter("DateTo", utility.GetDateCulture(dateto)));
            }


            try
            {
                if (first)
                {
                    if (dynStr.Length > 0)
                    {
                        var result = db.ac_CurrencyRate.Where(dynStr, ol.ToArray());  //ac_CurrencyRate.getList().Where(dynStr, ol.ToArray());
                        return Json(new
                        {
                            count = result.Count(),
                            results = result.OrderBy("it." + sort).Skip(skip)
                                .Take(take).Select(cc => new
                                {
                                    cc.CurrencyRateId,
                                    cc.ac_Currency.Currency,
                                    cc.ac_Currency.Symbol,
                                    cc.Date,
                                    cc.Buy,
                                    cc.Sell,
                                    cc.CurrencyId
                                }).AsEnumerable()
                                .Select(c => new
                                {
                                    c.CurrencyRateId,
                                    c.Currency,
                                    c.Symbol,
                                    Date = c.Date,
                                    date = utility.GetstrDateCulture(c.Date),
                                    c.Buy,
                                    c.Sell,
                                    c.CurrencyId
                                })
                                .ToArray()
                        });
                    }
                    else
                    {
                        var result = db.ac_CurrencyRate;
                        return Json(new
                        {
                            count = result.Count(),
                            results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                                .Select(cc => new
                                {
                                    cc.CurrencyRateId,
                                    cc.ac_Currency.Currency,
                                    cc.ac_Currency.Symbol,
                                    cc.Date,
                                    cc.Buy,
                                    cc.Sell,
                                    cc.CurrencyId
                                }).AsEnumerable()
                                .Select(c => new
                                {
                                    c.CurrencyRateId,
                                    c.Currency,
                                    c.Symbol,
                                    Date = c.Date,
                                    date = utility.GetstrDateCulture(c.Date),
                                    c.Buy,
                                    c.Sell,
                                    c.CurrencyId
                                })
                                .ToArray()
                        });
                    }
                }
                else
                {
                    if (dynStr.Length > 0)
                    {
                        return Json(new
                        {
                            results = db.ac_CurrencyRate.Where(dynStr, ol.ToArray())
                                .OrderBy("it." + sort).Skip(skip).Take(take)
                                .Select(cc => new
                                {
                                    cc.CurrencyRateId,
                                    cc.ac_Currency.Currency,
                                    cc.ac_Currency.Symbol,
                                    cc.Date,
                                    cc.Buy,
                                    cc.Sell,
                                    cc.CurrencyId
                                }).AsEnumerable()
                                .Select(c => new
                                {
                                    c.CurrencyRateId,
                                    c.Currency,
                                    c.Symbol,
                                    Date = c.Date,
                                    date = utility.GetstrDateCulture(c.Date),
                                    c.Buy,
                                    c.Sell,
                                    c.CurrencyId
                                })
                                .ToArray()
                        });
                    }
                    else
                    {
                        return Json(new
                        {
                            results = db.ac_CurrencyRate.OrderBy("it." + sort).Skip(skip).Take(take)
                                .Select(cc => new
                                {
                                    cc.CurrencyRateId,
                                    cc.ac_Currency.Currency,
                                    cc.ac_Currency.Symbol,
                                    cc.Date,
                                    cc.Buy,
                                    cc.Sell,
                                    cc.CurrencyId
                                }).AsEnumerable()
                                .Select(c => new
                                {
                                    c.CurrencyRateId,
                                    c.Currency,
                                    c.Symbol,
                                    Date = c.Date,
                                    date = utility.GetstrDateCulture(c.Date),
                                    c.Buy,
                                    c.Sell,
                                    c.CurrencyId
                                })
                                .ToArray()
                        });

                    }
                }
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.Message });
            }
            finally { ((IDisposable)db).Dispose(); }
        }


        public ActionResult getCurrencyName()
        {
            try
            {

                var currencies = db.ac_Currency.Where(c => c.ac_CurrencyRate.Count() > 0 && c.aspnet_Applications.ApplicationName == appName || c.ApplicationId == null);
                if (currencies.Count() > 0)
                {
                    return Json(currencies
                        .Select(c => new
                        {
                            id = c.CurrencyId,
                            name = c.Currency,
                            c.ac_CurrencyRate.OrderByDescending(cr => cr.Date).FirstOrDefault().Sell
                        }).AsEnumerable()
                        .Select(c => new { c.id, name = c.name + " _ " + c.Sell.ToString() }));
                }
                else
                {
                    return Json(new { isdone = false, msg = "noCurrencyYet" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.Message });
            }
        }

        #endregion
        #endregion
        //Currency end

        //Transfer begin
        #region
        public class TransferDetail
        {
            public int barcodeid { get; set; }
            public decimal quantity { get; set; }
            public List<ItemDetail> itemDetails { get; set; }
        }

        public class TransferHeader
        {
            public int shopidFrom { get; set; }
            public int shopidTo { get; set; }
            public string description { get; set; }
            public int customerid { get; set; }
            public string date { get; set; }
        }
        public ActionResult AddTransferProducts(TransferHeader header, List<TransferDetail> itemDetails)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canTransferProduct"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }
            if (header.shopidFrom == header.shopidTo)
            {
                return Json(new { isdone = false, msg = "sameShop" });
            }
            try
            {
                if (header.shopidFrom == header.shopidTo)
                    return Json(new { isdone = false, msg = "." + "شعبه مقصد را درست انتخاب کنید" });
                int eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                inv_TransferItem TransferHeader = new inv_TransferItem();
                TransferHeader.FromShopId = header.shopidFrom;
                TransferHeader.ToShopId = header.shopidTo;
                TransferHeader.Confirmed = false;
                TransferHeader.Date = utility.GetDateTimeCulture(header.date);
                if (!string.IsNullOrEmpty(header.description))
                    TransferHeader.Description = header.description;
                TransferHeader.SenderEmployeeId = eid;
                bool Havedetail = false;
                int count = 0;
                foreach (var parentitem in itemDetails)
                {
                    if (parentitem.itemDetails != null)
                    {
                        foreach (var dItem in parentitem.itemDetails)
                        {
                            Havedetail = true;
                            inv_TransferItemDetail Transferdetail = new inv_TransferItemDetail();
                            //if (dItem.colorid != 0 && dItem.sizeid != 0)
                            //    Transferdetail.ItemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == dItem.sizeid ).ItemDetailId;
                            //if (dItem.colorid == 0 && dItem.sizeid == 0)
                            //    Transferdetail.ItemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == null ).ItemDetailId;
                            //if (dItem.colorid != 0 && dItem.sizeid == 0)
                            //    Transferdetail.ItemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == null ).ItemDetailId;
                            //if (dItem.colorid == 0 && dItem.sizeid != 0)
                            //Transferdetail.ItemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == dItem.sizeid ).ItemDetailId;
                            if (dItem.colorid != null && dItem.sizeid != null)
                                Transferdetail.ItemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == dItem.sizeid).AccountId;
                            if (dItem.colorid == null && dItem.sizeid == null)
                                Transferdetail.ItemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == null).AccountId;
                            if (dItem.colorid != null && dItem.sizeid == null)
                                Transferdetail.ItemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == dItem.colorid && i.SizeId == null).AccountId;
                            if (dItem.colorid == null && dItem.sizeid != null)
                                Transferdetail.ItemDetailId = db.View_inv_ItemDetail.Single(i => i.BarcodeId == parentitem.barcodeid && i.ColorId == null && i.SizeId == dItem.sizeid).AccountId;
                            Transferdetail.Quantity = dItem.quantity;
                            TransferHeader.inv_TransferItemDetail.Add(Transferdetail);
                            count++;
                        }
                    }

                }
                db.inv_TransferItem.AddObject(TransferHeader);
                int save = 0;
                if (Havedetail & count > 0)
                    save = db.SaveChanges();

                if (save > 0)
                    return Json(new { isdone = true, msg = "." + "اطلاعات انتقال با موفقیت ذخیره شد " });
                else
                    return Json(new { isdone = false, msg = "." + "اطلاعات انتقال ذخیره نشد" });
            }
            catch (FormatException)
            {
                return Json(new { isdone = false, msg = "." + "اطلاعات انتقال را درست وارد کنید" });
            }
            catch (IndexOutOfRangeException)
            {
                return Json(new { isdone = false, msg = "." + "اطلاعات انتقال را درست وارد کنید" });
            }
            catch (UpdateException e2)
            {
                return Json(new { isdone = true, msg = e2.InnerException.Message });
            }

            catch (Exception ex)
            {
                return Json(new { isdone = true, msg = "." + "اطلاعات ذخیره نشد /n" + ex.InnerException.Message });

            }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult GetTransferProductsList(int skip, int take, int currentPage, bool first, string sort, string barcode, string name, string code, decimal? price, decimal? quantityfrom, decimal? quantityto, string regdatefrom, string regdateto, int? shopid)
        {
            List<ObjectParameter> ol = new List<ObjectParameter>();

            var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
            string dynStr = string.Empty;
            dynStr += "it.p_Employee.aspnet_Membership.aspnet_Applications.ApplicationName=@appName";
            ol.Add(new ObjectParameter("appName", appName));
            if (barcode.Length > 0)
            {


                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "EXISTS(select p From it.inv_TransferItemDetail as p where(p.inv_ItemDetail.inv_Barcode.Barcode=@barcode))";
                ol.Add(new ObjectParameter("barcode", barcode));
            }
            if (name.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "EXISTS(select p From it.inv_TransferItemDetail as p where(p.inv_ItemDetail.inv_Barcode.Name+p.inv_ItemDetail.inv_Barcode.ItemCode like '%'+@name+'%'))";
                ol.Add(new ObjectParameter("name", name));

            }
            if (roles.Contains("canSeeAllSales"))
            {
            }
            else
            {
                string subEmployees = utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name).AccountId);
                dynStr += " AND ";
                dynStr += "(!it.Confirmed OR it.p_Employee.accountId in " + subEmployees + " OR it.p_Employee1.accountId in " + subEmployees + ")";
            }
            if (code.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "EXISTS(select p From it.inv_TransferItemDetail as p where(p.inv_ItemDetail.inv_Barcode.ItemCode like '%'+@code+'%'))";
                ol.Add(new ObjectParameter("code", code));
            }
            if (price != null)
            {
                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "EXISTS(select p From it.inv_TransferItemDetail as p where(p.inv_ItemDetail.SellPrice=@price))";
                ol.Add(new ObjectParameter("price", price));


            }
            if (shopid != null)
            {
                //  lstShop.Add(shopid.Value);
                if (dynStr.Length > 0)

                    dynStr += " AND ";
                dynStr += "(it.inv_Shop1.ShopId = @ShopId or it.inv_Shop1.ShopId is NULL OR it.inv_Shop.ShopId = @ShopId or it.inv_Shop.ShopId is NULL)";
                ol.Add(new ObjectParameter("ShopId", shopid));
            }

            //if (ageto.Length > 0)
            //{
            //    if (dynStr.Length > 0)
            //        dynStr += " And ";
            //    dynStr += " it.p_Person.DateOfBirth   >=   @dateTo";
            //    ol.Add(new ObjectParameter("dateTo", DateTime.Parse((DateTime.Now.Year - int.Parse(ageto)).ToString() + "-1-1")));
            //}

            if (regdatefrom.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.Date   >=   @dateFrom";
                ol.Add(new ObjectParameter("dateFrom", utility.GetDateCulture(regdatefrom)));
            }
            if (regdateto.Length > 0)
            {
                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += " it.Date   <=   @dateTo";
                ol.Add(new ObjectParameter("dateTo", utility.GetDateCulture(regdateto)));
            }


            try
            {
                if (first)
                {
                    if (dynStr.Length > 0)
                    {
                        var result = db.inv_TransferItem.Where(dynStr, ol.ToArray());
                        return Json(new SearchResult()
                        {
                            count = result.Count(),
                            results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                            .Select(b => new
                            {
                                b.TransferItemId,
                                b.Date,
                                ShopFromName = b.inv_Shop.Name,
                                ShopToName = b.inv_Shop1.Name,
                                sendername = b.p_Employee.p_Person.Name,
                                senderfamily = b.p_Employee.p_Person.Family,
                                receivername = b.p_Employee1.p_Person.Name,
                                receiverfamily = b.p_Employee1.p_Person.Family
                            })
                        });
                    }
                    else
                    {
                        var result = db.inv_TransferItem;
                        return Json(new SearchResult()
                        {
                            count = result.Count(),
                            results = result.OrderBy("it." + sort).Skip(skip).Take(take)
                             .Select(b => new
                             {
                                 b.TransferItemId,
                                 b.Date,
                                 ShopFromName = b.inv_Shop.Name,
                                 ShopToName = b.inv_Shop1.Name,
                                 sendername = b.p_Employee.p_Person.Name,
                                 senderfamily = b.p_Employee.p_Person.Family,
                                 receivername = b.p_Employee1.p_Person.Name,
                                 receiverfamily = b.p_Employee1.p_Person.Family
                             })
                        });

                    }
                }
                else
                {
                    if (dynStr.Length > 0)
                    {
                        return Json(new SearchResult()
                        {

                            //it.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName AND (it.inv_Shop1.ShopId = @ShopId or
                            //it.inv_Shop1.ShopId is NULL OR it.inv_Shop.ShopId = @ShopId or it.inv_Shop.ShopId is NULL)

                            results = db.inv_TransferItem.Where(dynStr, ol.ToArray())
                               .OrderBy("it." + sort).Skip(skip).Take(take)
                            .Select(b => new
                            {
                                b.TransferItemId,
                                b.Date,
                                ShopFromName = b.inv_Shop.Name,
                                ShopToName = b.inv_Shop1.Name,
                                sendername = b.p_Employee.p_Person.Name,
                                senderfamily = b.p_Employee.p_Person.Family,
                                receivername = b.p_Employee1.p_Person.Name,
                                receiverfamily = b.p_Employee1.p_Person.Family
                            })
                        });
                    }
                    else
                    {
                        return Json(new SearchResult()
                        {
                            results = db.inv_TransferItem.OrderBy("it." + sort).Skip(skip).Take(take)
                            .Select(b => new
                            {
                                b.TransferItemId,
                                b.Date,
                                ShopFromName = b.inv_Shop.Name,
                                ShopToName = b.inv_Shop1.Name,
                                sendername = b.p_Employee.p_Person.Name,
                                senderfamily = b.p_Employee.p_Person.Family,
                                receivername = b.p_Employee1.p_Person.Name,
                                receiverfamily = b.p_Employee1.p_Person.Family
                            })
                        });

                    }
                }
            }
            catch (Exception e)
            {
                return Json(new SearchResult());
            }

        }

        public ActionResult GetDetailTransferProducts(int id)
        {

            return Json(db.inv_TransferItemDetail.Where(i => i.inv_TransferItem.TransferItemId == id)
                .Select(b => new
                {
                    b.TransferItemId,
                    b.ItemDetailId,
                    b.inv_ItemDetail.BarcodeId,
                    b.inv_ItemDetail.inv_Barcode.Barcode,
                    b.inv_ItemDetail.inv_Barcode.Name,
                    b.inv_ItemDetail.inv_Barcode.ItemCode,
                    b.inv_ItemDetail.inv_Barcode.inv_Price.OrderByDescending(d => d.Date).FirstOrDefault().Regular,
                    Size = (b.inv_ItemDetail.inv_Size.Count() > 0 ? b.inv_ItemDetail.inv_Size.FirstOrDefault().Size : ""),
                    Color = (b.inv_ItemDetail.inv_Color.Count > 0 ? b.inv_ItemDetail.inv_Color.FirstOrDefault().Color : ""),
                    b.Quantity,
                    b.inv_ItemDetail.inv_Barcode.inv_MeasureUnit.UnitType
                }));
        }

        public ActionResult DeleteDetailTransferProducts(int id, int TransferId)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canTransferProduct"))
            {
                return Json(new { isDone = false, msg = "notInRole" });
            }
            try
            {
                db.inv_TransferItemDetail.DeleteObject(db.inv_TransferItemDetail.Single(c => c.ItemDetailId == id && c.TransferItemId == TransferId));
                if (db.SaveChanges() > 0)
                    return Json(new { isDone = true, msg = "oK" });
                else
                    return Json(new { isDone = false, msg = "امکان حذف وجود ندارد" + "." });
            }
            catch (Exception e) { return Json(new { isDone = false, msg = e.InnerException.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }



        public ActionResult ConfirmTransferProducts(int id)
        {

            if (!utility.isInRole(db, User.Identity.Name, appName, "canConfirmTransferProduct"))
            {
                return Json("notInRole");
            }
            try
            {
                inv_TransferItem oldTransferItem = db.inv_TransferItem.Single(c => c.TransferItemId == id);
                inv_TransferItem transferItem = new inv_TransferItem();
                transferItem.Confirmed = true;
                transferItem.Date = DateTime.Now;
                transferItem.Description = oldTransferItem.Description;
                transferItem.FromShopId = oldTransferItem.FromShopId;
                transferItem.ToShopId = oldTransferItem.ToShopId;
                transferItem.SenderEmployeeId = oldTransferItem.SenderEmployeeId;
                transferItem.ReceiverEmployeeId = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                foreach (var item in oldTransferItem.inv_TransferItemDetail.ToList())
                {
                    inv_TransferItemDetail td = new inv_TransferItemDetail();
                    td.ItemDetailId = item.ItemDetailId;
                    td.Quantity = item.Quantity;
                    transferItem.inv_TransferItemDetail.Add(td);
                    oldTransferItem.inv_TransferItemDetail.Remove(item);
                }
                db.inv_TransferItem.AddObject(transferItem);
                db.SaveChanges();
                return Json("ok");
            }
            catch (Exception e) { return Json(e.Message); }
            finally { ((IDisposable)db).Dispose(); }
        }



        //public ActionResult AddTransferAmount(decimal amount, int counteridFrom, int counteridTo, int currencyid, string date)
        //{

        //    if (!utility.isInRole(db, User.Identity.Name, appName, "canTransferMoney"))
        //    {
        //        return Json(new { isDone = false, msg = "notInRole" });
        //    }
        //    if (counteridFrom == counteridTo)
        //    {
        //        return Json(new { isDone = false, msg = "sameCounter" });
        //    }
        //    try
        //    {
        //        var currentUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.aspnet_Applications.ApplicationName == appName);
        //        ac_OrderHeader ord = new ac_OrderHeader();
        //        ord.Amount = amount;
        //        ord.Date = utility.GetDateTimeCulture(date);
        //        ord.CounterId = counteridFrom;
        //        ord.ShopId = db.ac_Counter.Single(c => c.CounterId == counteridFrom).ShopId;
        //        ord.EmployeeId = currentUser.PersonId;
        //        ord.IsMoney = true;
        //        ord.Sell = true;
        //        ord.CurrencyRateId = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == currencyid).CurrencyRateId;
        //        ord.InvoiceNO = getInvoiceNumber(db, "transfer", true, false);
        //        ord.OrderTypeId = getOrderType(db, 0, true, true, true, false, false, false, false, false, false);
        //        //ord.ConfirmerId = currentUser.PersonId;
        //        ord.ac_Cash.Add(new ac_Cash
        //        {
        //            Amount = amount,
        //            Type = "نقدی",
        //            CurrencyRateId = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == currencyid).CurrencyRateId,
        //        });
        //        ac_OrderHeader ord2 = new ac_OrderHeader();
        //        ord2.Amount = amount;
        //        ord2.Date = utility.GetDateTimeCulture(date);
        //        ord2.CounterId = counteridTo;
        //        ord2.ShopId = db.ac_Counter.Single(c => c.CounterId == counteridTo).ShopId;
        //        ord2.EmployeeId = currentUser.PersonId;
        //        ord2.Sell = false;
        //        ord2.IsMoney = true;
        //        ord2.CurrencyRateId = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == currencyid).CurrencyRateId;
        //        ord2.InvoiceNO = getInvoiceNumber(db, "transfer", false, false);
        //        ord2.OrderTypeId = getOrderType(db, 0, false, true, true, false, false, false, false, false, false);
        //        ord2.ac_Cash.Add(new ac_Cash
        //        {
        //            Amount = amount,
        //            Type = "نقدی",
        //            CurrencyRateId = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == currencyid).CurrencyRateId,
        //        });
        //        ord.ac_OrderHeader1.Add(ord2);
        //        db.ac_OrderHeader.AddObject(ord);
        //        //db.ac_OrderHeader.AddObject(new ac_OrderHeader
        //        //{
        //        //    Amount = amount,
        //        //    Date = DateTime.Now,
        //        //    CounterId = counteridFrom,
        //        //    EmployeeId = db.p_Person.Single(p => p.Code == User.Identity.Name).PersonId,
        //        //    IsMoney = true,
        //        //    Sell = true,
        //        //    CurrencyRateId = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == currencyid).CurrencyRateId
        //        //});
        //        //db.ac_OrderHeader.AddObject(new ac_OrderHeader
        //        //{
        //        //    Amount = amount,
        //        //    Date = DateTime.Now,
        //        //    CounterId = counteridTo,
        //        //    EmployeeId = db.p_Person.Single(p => p.Code == User.Identity.Name).PersonId,
        //        //    Sell = false,
        //        //    CurrencyRateId = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == currencyid).CurrencyRateId
        //        //});
        //        db.SaveChanges();
        //        return Json("ok");
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(ex.Message);
        //    }
        //    finally { ((IDisposable)db).Dispose(); }
        //}



        //public ActionResult GetTransferAmountList(int skip, int take, int currentPage, bool first, string sort, string barcode, string name, string code, decimal? price, decimal? quantityfrom, decimal? quantityto, string regdatefrom, string regdateto, int? counterid)
        //{
        //    List<ObjectParameter> ol = new List<ObjectParameter>();
        //    string dynStr = string.Empty;
        //    dynStr += "it.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName and EXISTS(select g From it.ac_OrderHeader2 as g where(g.OrderHeaderId is not null))";
        //    ol.Add(new ObjectParameter("appName", appName));
        //    if (barcode.Length > 0)
        //    {
        //        if (dynStr.Length > 0)
        //            dynStr += " AND ";
        //        dynStr += "it.Barcode = @barcode ";
        //        ol.Add(new ObjectParameter("barcode", barcode));
        //    }
        //    if (name.Length > 0)
        //    {
        //        if (dynStr.Length > 0)
        //            dynStr += " AND ";
        //        dynStr += " (it.Name+it.ItemCode ) LIKE '%' + @name + '%'";
        //        ol.Add(new ObjectParameter("name", name));

        //    }
        //    if (code.Length > 0)
        //    {
        //        if (dynStr.Length > 0)
        //            dynStr += " AND ";
        //        dynStr += " it.ItemCode = @code";
        //        ol.Add(new ObjectParameter("code", code));
        //    }
        //    if (price != null)
        //    {
        //        if (dynStr.Length > 0)

        //            dynStr += " AND ";
        //        dynStr += "it.Price = @price)";
        //        ol.Add(new ObjectParameter("price", price));


        //    }
        //    if (regdatefrom.Length > 0)
        //    {
        //        if (dynStr.Length > 0)
        //            dynStr += " And ";
        //        dynStr += " it.p_Person.RegDate   >=   @dateFrom";
        //        ol.Add(new ObjectParameter("dateFrom", utility.GetDateCulture(regdatefrom)));
        //    }
        //    if (regdateto.Length > 0)
        //    {
        //        if (dynStr.Length > 0)
        //            dynStr += " And ";
        //        dynStr += " it.p_Person.RegDate   <=   @dateTo";
        //        ol.Add(new ObjectParameter("dateTo", utility.GetDateCulture(regdateto)));
        //    }

        //    try
        //    {
        //        if (first)
        //        {
        //            var result = db.ac_OrderHeader.Where(dynStr, ol.ToArray());
        //            return Json(new SearchResult()
        //            {
        //                count = result.Count(),
        //                results = result.OrderBy("it." + sort).Skip(skip).Take(take)
        //                .Select(b => new
        //                {
        //                    b.OrderHeaderId,
        //                    b.Amount,
        //                    b.Date,
        //                    CounterFromName = b.ac_OrderHeader2.FirstOrDefault().ac_Counter.Code,
        //                    CounterToName = b.ac_Counter.Code,
        //                    sendername = b.p_Person.Name,
        //                    senderfamily = b.p_Person.Family,
        //                    receivername = b.p_Employee.p_Person.Name,
        //                    receiverfamily = b.p_Employee.p_Person.Family,
        //                    b.ac_CurrencyRate.ac_Currency.Currency
        //                }).AsEnumerable()
        //                .Select(b => new
        //                {
        //                    b.OrderHeaderId,
        //                    b.Amount,
        //                    Date = utility.GetstrDateCulture(b.Date),
        //                    b.CounterFromName,
        //                    b.CounterToName,
        //                    b.sendername,
        //                    b.senderfamily,
        //                    b.receivername,
        //                    b.receiverfamily,
        //                    b.Currency
        //                }).ToArray()
        //            });
        //        }
        //        else
        //        {
        //            return Json(new SearchResult()
        //            {
        //                results = db.ac_OrderHeader.Where(dynStr, ol.ToArray())
        //                   .OrderBy("it." + sort).Skip(skip).Take(take)
        //            .Select(b => new
        //            {
        //                b.OrderHeaderId,
        //                b.Amount,
        //                b.Date,
        //                CounterFromName = b.ac_OrderHeader2.FirstOrDefault().ac_Counter.Code,
        //                CounterToName = b.ac_Counter.Code,
        //                sendername = b.p_Person.Name,
        //                senderfamily = b.p_Person.Family,
        //                receivername = b.p_Employee.p_Person.Name,
        //                receiverfamily = b.p_Employee.p_Person.Family,
        //                b.ac_CurrencyRate.ac_Currency.Currency
        //            }).AsEnumerable()
        //                .Select(b => new
        //                {
        //                    b.OrderHeaderId,
        //                    b.Amount,
        //                    Date = utility.GetstrDateCulture(b.Date),
        //                    b.CounterFromName,
        //                    b.CounterToName,
        //                    b.sendername,
        //                    b.senderfamily,
        //                    b.receivername,
        //                    b.receiverfamily,
        //                    b.Currency
        //                }).ToArray()
        //            });
        //        }
        //    }
        //    catch (Exception e)
        //    {
        //        return Json(new SearchResult());
        //    }
        //    finally { ((IDisposable)db).Dispose(); }
        //}



        //public ActionResult DeleteTransferAmount(int id)
        //{
        //    //if (!User.IsInRole("canDeleteTransferMoney"))
        //    //{
        //    //    return null;
        //    //}

        //    if (!utility.isInRole(db, User.Identity.Name, appName, "canDeleteTransferMoney"))
        //    {
        //        return Json(new { isdone = false, msg = "notInRole" });
        //    }
        //    try
        //    {
        //        var orderHeader = db.ac_OrderHeader.Single(o => o.OrderHeaderId == id);
        //        var currentUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName);
        //        var q = currentUser.p_Employee.ac_Counter.Select(c => c.AccountId);
        //        if (q.Contains(orderHeader.ac_OrderHeader.FirstOrDefault().CounterId.Value))
        //        {
        //            if ((orderHeader.ConfirmerId == null && orderHeader.EmployeeId == currentUser.AccountId) ||
        //                (orderHeader.ConfirmerId != null && orderHeader.ConfirmerId == currentUser.AccountId))
        //            {
        //                db.ac_OrderHeader.DeleteObject(orderHeader);
        //                db.SaveChanges();
        //            }
        //        }
        //        return Json(new { isdone = true, msg = "oK" });
        //    }
        //    catch (Exception e) { return Json(new { isdone = true, msg = e.Message }); }
        //    finally { ((IDisposable)db).Dispose(); }
        //}

        //public ActionResult ConfirmTransferAmount(int id)
        //{
        //    if (!utility.isInRole(db, User.Identity.Name, appName, "canConfirmTransferMoney"))
        //    {
        //        return Json(new { isdone = false, msg = "notInRole" });
        //    }
        //    try
        //    {
        //        var orderHeader = db.ac_OrderHeader.Single(o => o.OrderHeaderId == id);
        //        var currentUser = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName);
        //        var q = currentUser.p_Employee.ac_Counter.Select(c => c.AccountId);
        //        if (q.Contains(orderHeader.ac_OrderHeader.FirstOrDefault().CounterId.Value))
        //        {
        //            orderHeader.ConfirmerId = currentUser.AccountId;
        //            orderHeader.ac_OrderHeader.FirstOrDefault().ConfirmerId = currentUser.AccountId;
        //            db.SaveChanges();
        //        }
        //        return Json(new
        //        {
        //            isdone = true,
        //            msg = "oK",
        //            name = currentUser.Name,
        //            family = currentUser.Family
        //        });
        //    }
        //    catch (Exception e) { return Json(new { isdone = false, msg = e.Message }); }
        //    finally { ((IDisposable)db).Dispose(); }
        //}
        #endregion
        // utilities begin
        #region
        public string GetTitleValueById(int? tiltleid, string path)
        {
            if (tiltleid != null)
            {
                XDocument xmlDoc = XDocument.Load(Server.MapPath("~/" + path + ".xml"));
                var title = xmlDoc.Elements("root").Elements("Title").SingleOrDefault(d => d.Attribute("Id").Value == tiltleid.Value.ToString());
                if (title == null)
                    return "?";
                else
                    return title.Attribute("Title").Value;
            }
            else
                return "";
        }
        #endregion

        //utilities end

        //setting begin
        #region

        public ActionResult GetSetting()
        {
            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "Setting"))
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }
                var result = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationDetail;
                return Json(new
                {
                    isDone = true,
                    msg = "done",
                    result = new
                    {
                        result.EmployeeId,
                        result.CounterId,
                        result.AppName,
                        result.Email,
                        result.ExpieryDate,
                        result.Host,
                        result.Language,
                        result.PaymentPassword,
                        result.PaymentUserName,
                        result.Port,
                        result.ShopLimit,
                        result.SmsCredit,
                        result.SmsNumber,
                        result.SmsPass,
                        result.SmsUser,
                        result.StartingDate,
                        result.TerminalId,
                        result.EmailPass,
                        result.OnlineHost,
                        result.DeliveryExpense,
                        result.CurrentFiscalPeriodId
                    }
                });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex });
            }
        }



        public ActionResult UpdateSetting(int? employeeId, int? counterId, string host, string emailPass, string language,
            string paymentPassword, string paymentUserName, int? port, string email, long smsNumber, string smsPass, string smsUser, long? terminalId, string onlineHost, decimal deliveryExpense, int FiscalPeriodId)
        {
            try
            {
                if (!utility.isInRole(db, User.Identity.Name, appName, "canEditSetting"))
                {
                    return Json(new { isdone = false, msg = "notInRole" });
                }
                var settting = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationDetail;
                settting.CounterId = counterId;
                settting.Email = email;
                settting.EmailPass = emailPass;
                settting.EmployeeId = employeeId;
                settting.Host = host;
                settting.Language = language;
                settting.PaymentPassword = paymentPassword;
                settting.PaymentUserName = paymentUserName;
                settting.Port = port;
                settting.SmsNumber = smsNumber;
                settting.SmsPass = smsPass;
                settting.SmsUser = smsUser;
                settting.TerminalId = terminalId;
                settting.OnlineHost = onlineHost;
                settting.DeliveryExpense = deliveryExpense;
                settting.CurrentFiscalPeriodId = FiscalPeriodId;
                db.SaveChanges();
                return Json(new { isDone = true, msg = "done" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = true, msg = ex.Message });
            }
        }


        #endregion
        //setting end

        //application begin
        #region
        public ActionResult BuyApplication(string userName, decimal amount, int? branchLimit, int? employeeLimit, decimal? extraBranchPrice, decimal? extraEmployeePrice, decimal membershipPrice,
     int? smsLimit, decimal? smsRate, string expieryDate, string name, string family, string email, string mobile, string password)
        {
            try
            {
                Membership.ApplicationName = userName;
                var uuuu = Membership.CreateUser(userName, password, email);
                if (uuuu != null)
                {
                    ProfileManager.ApplicationName = userName;
                    ProfileBase pbf = ProfileBase.Create(userName);
                    pbf.SetPropertyValue("Family", family);
                    pbf.SetPropertyValue("Name", name);
                    pbf.SetPropertyValue("Phone", mobile);
                    pbf.SetPropertyValue("Address", "20");
                    pbf.Save();
                    var uuf = db.aspnet_Users.Single(u => u.UserName == userName && u.aspnet_Applications.ApplicationName == userName);
                    db.aspnet_Roles.Single(r => r.RoleName == "FreshRegister").aspnet_Users.Add(uuf);
                    db.SaveChanges();
                    //  ProfileManager.ApplicationName = "/";
                    //  Membership.ApplicationName = userName;
                }
                //  string userName = User.Identity.Name;
                var uu = db.aspnet_Users.Single(u => u.UserName == userName);
                string appName = uu.aspnet_Applications.ApplicationName;
                var roles = db.aspnet_Roles;
                //  db.aspnet_Roles.Single(r => r.RoleName == "Admin").aspnet_Users.Add(uu);
                db.aspnet_Roles.Single(r => r.RoleName == "FreshRegister").aspnet_Users.Remove(uu);
                foreach (var role in roles)
                {
                    string roleName = role.RoleName;
                    if (roleName != "Application"
                        && roleName != "Admin" &&
                        roleName != "canEditApplication" &&
                        roleName != "canEditHelp" &&
                        roleName != "Sms" &&
                        roleName != "Setting" &&
                        roleName != "canAddEmployee" &&
                        roleName != "canTransferProduct" &&
                        roleName != "Online" &&
                        roleName != "FreshRegister"
                        )
                        uu.aspnet_Roles.Add(role);
                }
                ProfileManager.ApplicationName = userName;
                ProfileBase pb = ProfileBase.Create(userName);

                p_Employee employee = new p_Employee();
                employee.HierDate = DateTime.Now;
                employee.UserId = uu.UserId;
                employee.Address = pb.GetPropertyValue("Address").ToString();
                p_Person person = new p_Person();
                if (pb.GetPropertyValue("Name").ToString() != string.Empty)
                    person.Name = pb.GetPropertyValue("Name").ToString();
                person.Family = pb.GetPropertyValue("Family").ToString();
                person.Code = userName;
                person.RegDate = DateTime.Now;
                //person.ApplicationId = uu.ApplicationId;
                person.p_Phone.Add(new p_Phone()
                {
                    Number = pb.GetPropertyValue("Phone").ToString(),
                    Cell = true
                });

                employee.p_Person = person;

                //db.p_Person.AddObject(person);

                //var buyAccount = XDocument.Load(Server.MapPath("~/Data/BuyAccount.xml")).Elements("root").Elements("User").Single(d => d.Attribute("UserName").Value == userName);
                //BuyAccountModel model = new BuyAccountModel()
                //{
                //    Amount = Decimal.Parse(buyAccount.Attribute("Amount").Value),
                //    BranchLimit = Int32.Parse(buyAccount.Attribute("BranchLimit").Value),
                //    EmployeeLimit = Int32.Parse(buyAccount.Attribute("EmployeeLimit").Value),
                //    ExtraBranchPrice = Int32.Parse(buyAccount.Attribute("ExtraBranchPrice").Value),
                //    ExtraEmployeePrice = Int32.Parse(buyAccount.Attribute("ExtraEmployeePrice").Value),
                //    MembershipPrice = decimal.Parse(buyAccount.Attribute("MembershipPrice").Value),
                //    SmsLimit = Int32.Parse(buyAccount.Attribute("SmsLimit").Value),
                //    SmsRate = decimal.Parse(buyAccount.Attribute("SmsRate").Value)
                //};
                string desc = "";
                string invoiceNo = "";
                int empCount = db.p_Employee.Where(s => s.p_Person.Code == User.Identity.Name).Count();
                if (empCount > 0)
                {
                    var user = db.p_Employee.Single(s => s.p_Person.Code == User.Identity.Name);
                    invoiceNo = db.u_UserOrderHeader.Count() > 0 ? (Int64.Parse(db.u_UserOrderHeader.OrderByDescending(i => i.InvoiceNo).FirstOrDefault().InvoiceNo) + 1).ToString() : "1";
                    db.AddTou_UserOrderHeader(new u_UserOrderHeader()
                    {
                        p_Employee = user,
                        Date = DateTime.Now,
                        Description = "خرید اشتراک 1 ساله برنامه با یک فروشگاه و یک کاربر (کارمند)",
                        Discount = 0,
                        InvoiceNo = invoiceNo,
                        IsCredit = false,
                        IsMoney = false,
                        IsPreOrder = true,
                        Quantity = 1,
                        Rate = membershipPrice,
                        Price = membershipPrice,
                        Tax = 0,
                        //p_Employee1 = employee,
                        ValueAdded = 0,
                    });
                    desc = "خرید اشتراک 1 ساله برنامه با یک فروشگاه و یک کاربر (کارمند) ";
                    if (branchLimit != null)
                    {
                        invoiceNo = (Convert.ToInt64(invoiceNo) + 1).ToString();
                        db.AddTou_UserOrderHeader(new u_UserOrderHeader()
                        {
                            Date = DateTime.Now,
                            p_Employee = user,
                            Description = "تعداد شعبه اضافه با یک کاربر به ازای هر شعبه",
                            Discount = 0,
                            InvoiceNo = invoiceNo,
                            IsCredit = false,
                            IsMoney = false,
                            IsPreOrder = true,
                            Price = extraBranchPrice.Value * branchLimit.Value,
                            Quantity = branchLimit.Value,
                            Rate = extraBranchPrice.Value,
                            Tax = 0,
                            //p_Employee1 = employee,
                            ValueAdded = 0
                        });
                        desc += "تعداد" + branchLimit + " شعبه اضافه با یک کاربر به ازای هر شعبه ";
                    }
                    if (employeeLimit != null)
                    {
                        invoiceNo = (Convert.ToInt64(invoiceNo) + 1).ToString();
                        db.AddTou_UserOrderHeader(new u_UserOrderHeader()
                        {
                            p_Employee = user,
                            Date = DateTime.Now,
                            Description = "تعداد کاربر (کارمند) اضافه ",
                            Discount = 0,
                            InvoiceNo = invoiceNo,
                            IsCredit = false,
                            IsMoney = false,
                            IsPreOrder = true,
                            Price = extraEmployeePrice.Value * employeeLimit.Value,
                            Quantity = employeeLimit.Value,
                            Rate = extraEmployeePrice.Value,
                            Tax = 0,
                            //p_Employee1 = employee,
                            ValueAdded = 0
                        });
                        desc += "تعداد" + branchLimit + " کاربر (کارمند) ";
                    }
                    if (smsLimit != null)
                    {
                        invoiceNo = (Convert.ToInt64(invoiceNo) + 1).ToString();
                        db.AddTou_UserOrderHeader(new u_UserOrderHeader()
                        {
                            p_Employee = user,
                            Date = DateTime.Now,
                            Description = "اعتبار پیامک ",
                            Discount = 0,
                            InvoiceNo = invoiceNo,
                            IsCredit = false,
                            IsMoney = false,
                            IsPreOrder = true,
                            Price = smsLimit.Value * smsRate.Value,
                            Quantity = smsLimit.Value,
                            Rate = smsRate.Value,
                            Tax = 0,
                            //p_Employee1 = employee,
                            ValueAdded = 0
                        });
                    }

                    invoiceNo = (Convert.ToInt64(invoiceNo) + 1).ToString();
                    u_UserOrderHeader payment = new u_UserOrderHeader();
                    payment.p_Employee = user;
                    payment.Date = DateTime.Now;
                    payment.Description = desc;
                    payment.InvoiceNo = invoiceNo;
                    payment.IsCredit = true;
                    payment.IsMoney = true;
                    payment.IsPreOrder = false;
                    payment.Price = amount;
                    payment.p_Employee = employee;
                    payment.PaymentNumber = ""; // Bank
                    payment.PaymentType = "دستی";
                    db.AddTou_UserOrderHeader(payment);
                }
                else
                {
                    db.p_Employee.AddObject(employee);
                }
                ApplicationDetail appDetails = new ApplicationDetail();
                appDetails.AppName = appName;
                // appDetails.ApplicationId = uu.ApplicationId;
                appDetails.ShopLimit = 1 + branchLimit != null ? branchLimit.Value : 0;
                appDetails.EmployeeLimit = 1 + employeeLimit != null ? employeeLimit.Value : 0;
                appDetails.ExpieryDate = string.IsNullOrEmpty(expieryDate) ? DateTime.Now.AddYears(1) : utility.GetDateCulture(expieryDate);
                appDetails.IsActive = true;
                if (smsLimit != null && smsRate != null)
                    appDetails.SmsCredit = smsLimit.Value * smsRate.Value;
                appDetails.StartingDate = DateTime.Now;
                // db.ApplicationDetails.AddObject(appDetails);
                desc += " مبلغ " + smsLimit * smsRate + " اعتبار پیامک ";
                uu.aspnet_Applications.ApplicationDetail = appDetails;
                var shop = new inv_Shop()
                {
                    Code = 1,
                    Name = appName,
                    StartingDate = DateTime.Now,
                    Email = email,
                    AddressId = db.p_Address.First().AddressId
                };
                uu.aspnet_Applications.inv_Shop.Add(shop);
                employee.inv_Shop.Add(shop);
                employee.inv_Shop.Add(shop);
                db.SaveChanges();
                string currentAppName = appName;
                var currentAppDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == currentAppName).ApplicationDetail;
                System.Threading.Thread t = new System.Threading.Thread(utility.sendEmail);
                object[] parameters = new object[] { 
                        email,
                         ": رمز عبور شما  ",
               "<div id='yui_3_2_0_1_131658669409891' style='width: 400px; margin: 20px auto; direction: rtl; font: 8pt/22px tahoma; border: 3px double rgb(40, 128, 192);'><div id='yui_3_2_0_1_131658669409888' style='direction: rtl; padding-right: 12px;'>اطلاعات کاربری شما در سایت  به شرح زیر می باشد :</div><div style='width: 350px; margin: 10px auto; direction: rtl; font: 8pt/22px tahoma; border: 1px solid rgb(40, 128, 192);'><div style='padding-right: 20px;'>شماره کاربری:  " +
                    userName + "</div><div style='padding-right: 20px;'>کلمه عبور: " +
                     password+ "</div></div><blockquote>با آروزی روزگار خوش برای شما<div style='text-align: left;'><a rel='nofollow' style='text-decoration: none; color: blue;' target='_blank' href='http://mapiha.com'>mapiha.com</a></div></blockquote></div>",
                        currentAppDetails.Email,
                        currentAppDetails.EmailPass,
                        currentAppDetails.Port,
                        currentAppDetails.Host};
                t.Start(parameters);
                ir.afe.www.BoxService ibs = new ir.afe.www.BoxService();
                ibs.SendMessage(currentAppDetails.SmsUser, currentAppDetails.SmsPass, currentAppDetails.SmsNumber.ToString(), new string[] { mobile }, "USERNAME: " + userName + " PASSWORD:" + password + "\n www.mapiha.com", "2", new long?[] { (new Random().Next(100000000, 990000000) + 1000 + DateTime.Now.Second) });
                return Json(new { isdone = true, msg = "done" });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.Message });
            }
        }

        public ActionResult GetApplicationList()
        {
            return Json(db.ApplicationDetails.Select(a => new
            {
                a.ApplicationId,
                a.AppName,
                a.StartingDate,
                a.IsActive,
                a.ExpieryDate,
                a.ShopLimit

            }).AsEnumerable().Select(a => new
            {
                a.ApplicationId,
                a.AppName,
                a.StartingDate,
                IsActive = a.IsActive == true ? "فعال" : "غیرفعال",
                a.ExpieryDate,
                a.ShopLimit
            }));
        }

        public ActionResult GetApplicationDetails(Guid appId)
        {
            try
            {
                return Json(db.ApplicationDetails.Where(p => p.ApplicationId == appId).Select(a => new
                {
                    a.ApplicationId,
                    a.AppName,
                    a.StartingDate,
                    a.IsActive,
                    a.ExpieryDate,
                    a.AccountLimit,
                    a.EmployeeLimit,
                    a.ShopLimit,
                    a.SmsCredit,
                    a.SmsNumber
                }).AsEnumerable().Select(a => new
                {
                    a.ApplicationId,
                    a.AppName,
                    StartingDate = utility.GetstrDateCultureSimple(a.StartingDate),
                    a.IsActive,
                    ExpieryDate = utility.GetstrDateCultureSimple(a.ExpieryDate),
                    a.AccountLimit,
                    a.EmployeeLimit,
                    a.ShopLimit,
                    a.SmsCredit,
                    a.SmsNumber
                }));
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
        }



        public ActionResult EditApplication(Guid appId, string appName, int shopLimit, int accountLimit, int employeeLimit, bool status, string dateStart, string expieryDate, int smsLimit, long smsNumber)
        {
            try
            {
                if (!utility.isInRole(db, User.Identity.Name, Membership.ApplicationName, "Application"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }

                ApplicationDetail app = db.ApplicationDetails.Single(cus => cus.ApplicationId == appId);
                app.AppName = appName;
                app.ShopLimit = shopLimit;
                app.AccountLimit = accountLimit;
                app.EmployeeLimit = employeeLimit;
                app.IsActive = status;
                app.StartingDate = utility.GetDateCulture(dateStart);
                app.ExpieryDate = utility.GetDateCulture(expieryDate);
                app.SmsCredit = smsLimit;
                app.SmsNumber = smsNumber;
                db.SaveChanges();
                return Json(new { isDone = true, msg = "oK" });
            }
            catch (Exception ex) { return Json(new { isDone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }


        #endregion

        //application end

        //accounting begin
        #region

        public ActionResult GetCompletionListByAccountName(string q, int limit)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return Json(new { isExpired = true });
            }
            //          return Json(db.ac_Account.Where(b => (b.ApplicationId == null || b.aspnet_Applications.ApplicationName == appName) && b.Level == 3 && ((b.Name).Contains(q))).OrderBy(b => b.Name).Take(limit).AsEnumerable()
            //.Select(cc => new
            //{
            //    label = cc.Name + " " + (cc.ac_AccountDetail.Count() > 0 ? cc.ac_AccountDetail.Sum(s => s.Amount).ToString() : ""),
            //    value = cc.Code,
            //    id = cc.AccountId
            //}
            //          ));
            return Json(getReturnAccount(db, q, limit, appName));
        }
        public static Func<MapiDBEntities, string, int, string, object>
getReturnAccount = CompiledQuery.Compile((MapiDBEntities db, string q, int limit, string appName)
=> db.ac_Account.Where(b => (b.ApplicationId == null || b.aspnet_Applications.ApplicationName == appName) && b.Level == 3 && ((b.Name).Contains(q))).OrderBy(b => b.Name).Take(limit)
.Select(cc => new
{
    label = cc.Name,
    label1 = cc.Code,
    label2 = cc.ac_AccountDetail.Sum(s => s.Amount),
    id = cc.AccountId,
    value = cc.Code
}
      ));




        public ActionResult AddItemAccounting()
        {
            try
            {

                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);

                if (!roles.Contains("canSale"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
                int orderHeaderId = !string.IsNullOrEmpty(Request["txt_OrderHeaderId"]) ? Convert.ToInt32(Request["txt_OrderHeaderId"]) : 0;
                int eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                int currencyId = Convert.ToInt32(Request["CurrencyRateId"]);
                int curid = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == currencyId).CurrencyRateId;
                var orderHeader = db.ac_OrderHeader.SingleOrDefault(o => o.OrderHeaderId == orderHeaderId);
                ac_OrderHeader orderheader = new ac_OrderHeader();
                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;

                if (orderHeader == null)
                {
                    orderheader.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                    orderheader.ShopId = Convert.ToInt32(Request["ShopId"]);
                    orderheader.CurrencyRateId = curid;
                    if (!string.IsNullOrEmpty(Request["Description"]))
                        orderheader.Description = Request["Description"];
                    orderheader.InvoiceNO = getInvoiceNumber(db, "", true, Convert.ToBoolean(Request["isper"]));
                    orderheader.CounterId = Convert.ToInt32(Request["CounterId"]);
                    orderheader.EmployeeId = eid;
                    orderheader.Date = utility.GetDateTimeCulture(Request["Date"]);
                    orderheader.Sell = true;
                    orderheader.IsMoney = false;
                    //permanent => employeeId else null
                    if (!string.IsNullOrEmpty(Request["isper"]) && Convert.ToBoolean(Request["isper"]))
                        orderheader.ConfirmerId = eid;
                }
                else
                {
                    orderHeader.Description = Request["txt_AccountingDescription"];
                    orderHeader.Date = utility.GetDateTimeCulture(Request["Date"]);
                    if (!string.IsNullOrEmpty(Request["txt_InvoiceNum"]))
                    {
                        orderHeader.InvoiceNO = Request["txt_InvoiceNum"];
                    }
                }

                decimal totalamount = 0;
                int count = 0;
                int rowcount = Convert.ToInt32(Request["hi_cRow"]);
                while (rowcount > 0)
                {
                    var accDetailId = string.IsNullOrEmpty(Request["hi_AccountId" + rowcount]) ? 0 : Convert.ToInt32(Request["hi_AccountId" + rowcount]);

                    if (accDetailId > 0)
                    {
                        if (!string.IsNullOrEmpty(Request["txt_code" + rowcount]) && !string.IsNullOrEmpty(Request["txt_title" + rowcount]) &&
               (!string.IsNullOrEmpty(Request["txt_deptor" + rowcount]) || !string.IsNullOrEmpty(Request["txt_creditor" + rowcount])))
                        {
                            var AccDetail = db.ac_AccountDetail.Single(a => a.AccountDetailId == accDetailId);
                            int code = Convert.ToInt32(Request["txt_code" + rowcount]);

                            int accId = db.ac_Account.Single(a => a.Code == code && a.aspnet_Applications.ApplicationName == appName).AccountId;

                            if (!string.IsNullOrEmpty(Request["txt_deptor" + rowcount]) && Convert.ToDecimal(Request["txt_deptor" + rowcount]) > 0)
                            {
                                AccDetail.Amount = Math.Abs(Convert.ToDecimal(Request["txt_deptor" + rowcount]));
                                AccDetail.IsDept = true;
                                totalamount += Math.Abs(Convert.ToDecimal(Request["txt_deptor" + rowcount]));
                            }
                            else
                            {
                                AccDetail.Amount = Math.Abs(Convert.ToDecimal(Request["txt_creditor" + rowcount]));
                                AccDetail.IsDept = false;
                            }
                            AccDetail.AccountId = accId;
                            AccDetail.Description = Request["txt_description" + (rowcount + 1)];
                            count++;

                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(Request["txt_code" + rowcount]) && !string.IsNullOrEmpty(Request["txt_title" + rowcount]) &&
                (!string.IsNullOrEmpty(Request["txt_deptor" + rowcount]) || !string.IsNullOrEmpty(Request["txt_creditor" + rowcount])))
                        {
                            int code = Convert.ToInt32(Request["txt_code" + rowcount]);
                            int accId = db.ac_Account.Single(a => a.Code == code && a.aspnet_Applications.ApplicationName == appName).AccountId;

                            ac_AccountDetail accountDetail = new ac_AccountDetail();
                            if (!string.IsNullOrEmpty(Request["txt_deptor" + rowcount]) && Convert.ToDecimal(Request["txt_deptor" + rowcount]) > 0)
                            {
                                accountDetail.Amount = Math.Abs(Convert.ToDecimal(Request["txt_deptor" + rowcount]));
                                accountDetail.IsDept = true;
                                totalamount += Math.Abs(Convert.ToDecimal(Request["txt_deptor" + rowcount]));
                            }
                            else
                            {
                                accountDetail.Amount = Math.Abs(Convert.ToDecimal(Request["txt_creditor" + rowcount]));
                                accountDetail.IsDept = false;
                            }
                            accountDetail.AccountId = accId;
                            accountDetail.Description = Request["txt_description" + (rowcount)];
                            orderheader.ac_AccountDetail.Add(accountDetail);
                            count++;
                        }
                    }

                    rowcount--;
                }

                orderheader.Amount = Math.Abs(totalamount);
                if (count > 0)
                {
                    if (orderHeader == null)
                    {
                        db.ac_OrderHeader.AddObject(orderheader);
                        db.SaveChanges();
                        return Json(new { isDone = true, msg = "اطلاعات ذخیره شد.", orderHeaderId = orderheader.OrderHeaderId });
                    }
                    else
                    {
                        db.SaveChanges();
                        return Json(new { isDone = true, msg = "اطلاعات ذخیره شد.", orderHeaderId = orderHeader.OrderHeaderId });
                    }

                }
                else
                {
                    return Json(new { isDone = false, msg = "لطفا اطلاعات را وارد نمایید." });
                }
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = "." + "اطلاعات ذخیره نشد /n" + ex.InnerException.Message });
            }
        }


        public ActionResult GetFullAccountList(int? skip, int? take, int? currentPage, bool? first, string sort, int? shopid,
  int? accCode, string AccountingDateStart, string AccountingDateEnd, int? accountId, int? counterId, bool? preOrder, string description, string invoiceNo, int? documentNumber, string isPrint)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }
                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;

                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
                List<ObjectParameter> ol = new List<ObjectParameter>();
                string dynStr = string.Empty;
                dynStr += "it.ac_OrderHeader.p_employee.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName";
                ol.Add(new ObjectParameter("appName", appName));

                //int EmployeeId = db.p_Person.Single(p => p.Code == User.Identity.Name).AccountId;
                //dynStr += " AND ";
                //dynStr += " it.ac_OrderHeader.p_Employee.accountId = @EmployeeId";
                //ol.Add(new ObjectParameter("EmployeeId", EmployeeId));


                if (!string.IsNullOrEmpty(AccountingDateStart))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.ac_OrderHeader.Date   >=   @AccountingDateStart";
                    ol.Add(new ObjectParameter("AccountingDateStart", utility.GetDateCulture(AccountingDateStart)));
                }
                if (!string.IsNullOrEmpty(AccountingDateEnd))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += " it.ac_OrderHeader.Date   <=   @AccountingDateEnd";
                    ol.Add(new ObjectParameter("AccountingDateEnd", utility.GetDateCulture(AccountingDateEnd)));
                }
                if (roles.Contains("canSeeAllSales"))
                {
                }
                else
                {
                    dynStr += " AND ";
                    dynStr += "it.ac_OrderHeader.EmployeeId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name).AccountId);
                }

                //if (shopid == null && counterId == null)
                //{
                //    if (roles.Contains("canSeeAllPaymentes") && shopid == null)
                //    {

                //    }
                //    else
                //    {
                //        if (dynStr.Length > 0)
                //            dynStr += " AND ";
                //        dynStr += "it.ac_OrderHeader.CounterId in " + utility.getCounterForUser(User.Identity.Name);
                //    }
                //}
                //else if (shopid != null && counterId == null)
                //{
                //    if (dynStr.Length > 0)
                //        dynStr += " AND ";
                //    dynStr += "it.ac_OrderHeader.CounterID in " + utility.getCounterForUser(User.Identity.Name);
                //    dynStr += " AND ";
                //    dynStr += "it.ac_OrderHeader.ShopId =@ShopId";
                //    ol.Add(new ObjectParameter("ShopId", shopid));
                //}

                //else if ((shopid != null && counterId != null) || (shopid == null && counterId != null))
                //{
                //    if (dynStr.Length > 0)
                //        dynStr += " AND ";
                //    dynStr += "it.ac_OrderHeader.CounterID = @CounterId";
                //    ol.Add(new ObjectParameter("CounterId", counterId));
                //}

                if (accCode != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += " it.ac_Account.Code = @code";
                    ol.Add(new ObjectParameter("code", accCode));
                }

                if (accountId != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "( it.accountID in  " + utility.getHierarchyDataForAccount(accountId) + ")";
                    ol.Add(new ObjectParameter("accountID", accountId));
                }

                if (preOrder != null)
                {
                    if (preOrder.Value)
                    {
                        if (dynStr.Length > 0)
                            dynStr += " And ";
                        dynStr += "it.PreOrder = true";
                    }
                }
                if (!string.IsNullOrEmpty(description))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "( it.Description like '%@description%')";
                    ol.Add(new ObjectParameter("description", description));
                }
                if (!string.IsNullOrEmpty(invoiceNo))
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "( it.ac_OrderHeader.InvoiceNo =@invoiceNo)";
                    ol.Add(new ObjectParameter("invoiceNo", invoiceNo));
                }
                if (documentNumber != null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " And ";
                    dynStr += "( it.AccountDetailId =@documentNumber)";
                    ol.Add(new ObjectParameter("documentNumber", documentNumber));
                }

                if (dynStr.Length > 0)
                    dynStr += " And ";
                dynStr += "( it.ac_OrderHeader.FiscalPeriodId =@FiscalPeriodId)";
                ol.Add(new ObjectParameter("FiscalPeriodId", appDetails.CurrentFiscalPeriodId));


                var result = db.ac_AccountDetail.Where(dynStr, ol.ToArray());
                if (isPrint == "daybook")
                {
                    var results = result.OrderBy("it." + sort).Skip(skip.Value).Take(take.Value);
                    decimal? sumDebtor = 0, sumCreditor = 0, sumNotPassed = 0;
                    decimal currencyRate = 1;
                    int co = result.Count();
                    if (results.Count() > 0)
                    {
                        // DateTime dt = results.FirstOrDefault().Date;
                        sumDebtor = result.Where(c => c.IsDept.Value).Sum(a => (decimal?)a.Amount * a.ac_OrderHeader.ac_CurrencyRate.Buy);
                        sumCreditor = -result.Where(c => !c.IsDept.Value).Sum(a => (decimal?)a.Amount * a.ac_OrderHeader.ac_CurrencyRate.Buy);
                        balance = sumDebtor - sumCreditor;
                    }

                    if (first.Value)
                    {
                        return Json(new
                        {
                            isdone = true,
                            count = result.Count(),
                            sumDebtor,
                            sumCreditor,
                            sumNotPassed,
                            balance,
                            results = results
                            .Select(b => new
                            {
                                b.AccountDetailId,
                                b.ac_OrderHeader.InvoiceNO,
                                b.ac_OrderHeader.Date,
                                b.ac_Account.Code,
                                title = b.ac_Account.Name,
                                b.Description,
                                b.IsDept,
                                b.Amount,
                                b.ac_OrderHeader.p_Employee.p_Person.Name,
                                b.ac_OrderHeader.p_Employee.p_Person.Family,
                                b.ac_OrderHeader.p_Employee1
                            }).AsEnumerable()
                            .Select(b => new
                            {
                                balance = getBalance(-b.Amount),
                                b.AccountDetailId,
                                b.InvoiceNO,
                                b.Date,
                                b.Code,
                                b.title,
                                b.Description,
                                b.IsDept,
                                Amount = (b.IsDept.Value ? b.Amount : -b.Amount),
                                b.Name,
                                b.Family,
                                confirmer = b.p_Employee1 != null ? (b.p_Employee1.p_Person.Name + " " + b.p_Employee1.p_Person.Family) : "---"
                            })
                        });
                    }
                    else if (isPrint == "daybookPrint")
                    {
                        return Json(new
                        {
                            isdone = true,
                            sumDebtor,
                            sumCreditor,
                            sumNotPassed,
                            balance,
                            results = results
                           .Select(b => new
                           {
                               b.AccountDetailId,
                               b.ac_OrderHeader.InvoiceNO,
                               b.ac_OrderHeader.Date,
                               b.ac_Account.Code,
                               title = b.ac_Account.Name,
                               b.Description,
                               b.IsDept,
                               b.Amount,
                               b.ac_OrderHeader.p_Employee.p_Person.Name,
                               b.ac_OrderHeader.p_Employee.p_Person.Family,
                               b.ac_OrderHeader.p_Employee1
                           }).AsEnumerable()
                            .Select(b => new
                            {
                                balance = getBalance(-b.Amount),
                                b.AccountDetailId,
                                b.InvoiceNO,
                                b.Date,
                                b.Code,
                                b.title,
                                b.Description,
                                b.IsDept,
                                Amount = (b.IsDept.Value ? b.Amount : -b.Amount),
                                b.Name,
                                b.Family,
                                confirmer = b.p_Employee1 != null ? (b.p_Employee1.p_Person.Name + " " + b.p_Employee1.p_Person.Family) : "---"
                            })
                        });
                    }
                    else if (isPrint == "daybookClientPrint")
                    {
                        return Json(new
                        {
                            isdone = true,
                            sumDebtor,
                            sumCreditor,
                            sumNotPassed,
                            balance,
                            results = results
                           .Select(b => new
                           {
                               b.AccountDetailId,
                               b.ac_OrderHeader.InvoiceNO,
                               b.ac_OrderHeader.Date,
                               b.ac_Account.Code,
                               title = b.ac_Account.Name,
                               b.Description,
                               b.IsDept,
                               b.Amount,
                               b.ac_OrderHeader.p_Employee.p_Person.Name,
                               b.ac_OrderHeader.p_Employee.p_Person.Family,
                               b.ac_OrderHeader.p_Employee1
                           }).AsEnumerable()
                            .Select(b => new
                            {
                                balance = getBalance(-b.Amount),
                                b.AccountDetailId,
                                b.InvoiceNO,
                                b.Date,
                                b.Code,
                                b.title,
                                b.Description,
                                b.IsDept,
                                Amount = (b.IsDept.Value ? b.Amount : -b.Amount),
                                b.Name,
                                b.Family,
                                confirmer = b.p_Employee1 != null ? (b.p_Employee1.p_Person.Name + " " + b.p_Employee1.p_Person.Family) : "---"
                            })
                        });
                    }

                }

                else
                {
                    decimal? sumDebtor = 0, sumCreditor = 0, sumNotPassed = 0;
                    int co = result.Count();
                    sumDebtor = result.Where(c => c.IsDept.Value).Sum(a => (decimal?)a.Amount * a.ac_OrderHeader.ac_CurrencyRate.Buy);
                    sumCreditor = -result.Where(c => !c.IsDept.Value).Sum(a => (decimal?)a.Amount * a.ac_OrderHeader.ac_CurrencyRate.Buy);
                    balance = sumDebtor - sumCreditor;
                    //DateTime DateEnd,DateStart;
                    return Json(new
                    {
                        DateNow = System.DateTime.Now,
                        isdone = true,
                        sumDebtor,
                        sumCreditor,
                        sumNotPassed,
                        balance,
                        DateStart = !string.IsNullOrEmpty(AccountingDateStart) ? Convert.ToDateTime(AccountingDateStart) : result.OrderBy(o => o.ac_OrderHeader.Date).FirstOrDefault().ac_OrderHeader.Date,
                        DateEnd = (!string.IsNullOrEmpty(AccountingDateEnd) ? utility.GetDateCulture(AccountingDateEnd) : System.DateTime.Now),
                        results = result
                       .Select(b => new
                       {
                           b.ac_OrderHeader.Description,
                           b.ac_OrderHeader.InvoiceNO,
                           b.ac_OrderHeader.Date,
                           title = b.ac_Account.ac_Account4.ac_Account2.Name + " , " + b.ac_Account.ac_Account4.Name + " , " + b.ac_Account.Name,
                           b.AccountDetailId,
                           b.IsDept,
                           b.Amount,
                           b.ac_Account.Code,
                       }).AsEnumerable()
                        .Select(b => new
                        {
                            b.Description,
                            balance = getBalance(-b.Amount),
                            b.AccountDetailId,
                            b.InvoiceNO,
                            b.Date,
                            b.title,
                            b.IsDept,
                            b.Code,
                            Amount = (b.IsDept.Value ? b.Amount : -b.Amount),
                        }).GroupBy(g => g.InvoiceNO)
                    });
                }

                return Json(new { isdone = false });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
            //finally { ((IDisposable)db).Dispose(); }
        }




        public ActionResult GetAccountInfo(int? AccountDetailId)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                int? OrderHeaderId = null;
                var q = db.ac_AccountDetail.SingleOrDefault(AccDe => AccDe.AccountDetailId == AccountDetailId);
                OrderHeaderId = q.OrderHeaderId;

                var orderHeader = db.ac_OrderHeader.Single(a => a.OrderHeaderId == OrderHeaderId);

                return Json(new
                {
                    isdone = true,
                    orderHeader.Description,
                    orderHeader.InvoiceNO,
                    orderHeader.OrderHeaderId,
                    orderHeader.Date,
                    orderHeader.p_Employee.p_Person.Family,
                    orderHeader.p_Employee.p_Person.Name,
                    orderHeader.ShopId,
                    ShopName = orderHeader.inv_Shop.Name,
                    orderHeader.ConfirmerId,
                    orderDetailes = orderHeader.ac_AccountDetail.Select(b => new
                    {
                        b.AccountDetailId,
                        b.ac_Account.Code,
                        title = b.ac_Account.Name,
                        b.Description,
                        b.IsDept,
                        b.Amount,
                    })
                });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }

        public ActionResult GetAccountInfoSearch2(string InvoiceNumber, int? orderHeaderId)
        {
            if (orderHeaderId != null)
            {
                if (!string.IsNullOrEmpty(InvoiceNumber))
                {
                    var orderDetail = db.ac_AccountDetail.SingleOrDefault(AccDe => AccDe.OrderHeaderId == orderHeaderId
                       && InvoiceNumber == AccDe.ac_OrderHeader.InvoiceNO);
                    if (orderDetail != null)
                    {
                        return Json(new
                        {
                            isdone = true,
                            orderDetail.ac_OrderHeader.Description,
                            orderDetail.ac_OrderHeader.InvoiceNO,
                            orderDetail.ac_OrderHeader.OrderHeaderId,
                            orderDetail.ac_OrderHeader.Date,
                            orderDetail.ac_OrderHeader.p_Person.Family,
                            orderDetail.ac_OrderHeader.p_Person.Name,
                            orderDetail.ac_OrderHeader.ShopId,
                            ShopName = orderDetail.ac_OrderHeader.inv_Shop.Name,
                            orderDetail.ac_OrderHeader.ConfirmerId,
                            orderDetailes = orderDetail.ac_OrderHeader.ac_AccountDetail.Select(b => new
                            {
                                b.AccountDetailId,
                                b.ac_Account.Code,
                                title = b.ac_Account.Name,
                                b.Description,
                                b.IsDept,
                                b.Amount,
                            })
                        });
                    }
                    else
                        return Json(new { isdone = false });
                }
                else
                {
                    var ac_Orderdetail = db.ac_AccountDetail.SingleOrDefault(AccDe => AccDe.OrderHeaderId == orderHeaderId);
                    if (ac_Orderdetail != null)
                    {
                        return Json(new
                        {
                            isdone = true,
                            ac_Orderdetail.ac_OrderHeader.Description,
                            ac_Orderdetail.ac_OrderHeader.InvoiceNO,
                            ac_Orderdetail.ac_OrderHeader.OrderHeaderId,
                            ac_Orderdetail.ac_OrderHeader.Date,
                            ac_Orderdetail.ac_OrderHeader.p_Person.Family,
                            ac_Orderdetail.ac_OrderHeader.p_Person.Name,
                            ac_Orderdetail.ac_OrderHeader.ShopId,
                            ShopName = ac_Orderdetail.ac_OrderHeader.inv_Shop.Name,
                            ac_Orderdetail.ac_OrderHeader.ConfirmerId,
                            orderDetailes = ac_Orderdetail.ac_OrderHeader.ac_AccountDetail.Select(b => new
                            {
                                b.AccountDetailId,
                                b.ac_Account.Code,
                                title = b.ac_Account.Name,
                                b.Description,
                                b.IsDept,
                                b.Amount,
                            })
                        });
                    }
                    else
                        return Json(new { isdone = false });
                }


            }
            else
            {
                if (!string.IsNullOrEmpty(InvoiceNumber))
                {
                    var ac_Orderdetail = db.ac_AccountDetail.Single(AccDe => InvoiceNumber == AccDe.ac_OrderHeader.InvoiceNO);
                    if (ac_Orderdetail != null)
                    {
                        return Json(new
                        {
                            isdone = true,
                            ac_Orderdetail.ac_OrderHeader.Description,
                            ac_Orderdetail.ac_OrderHeader.InvoiceNO,
                            ac_Orderdetail.ac_OrderHeader.OrderHeaderId,
                            ac_Orderdetail.ac_OrderHeader.Date,
                            ac_Orderdetail.ac_OrderHeader.p_Person.Family,
                            ac_Orderdetail.ac_OrderHeader.p_Person.Name,
                            ac_Orderdetail.ac_OrderHeader.ShopId,
                            ShopName = ac_Orderdetail.ac_OrderHeader.inv_Shop.Name,
                            ac_Orderdetail.ac_OrderHeader.ConfirmerId,
                            orderDetailes = ac_Orderdetail.ac_OrderHeader.ac_AccountDetail.Select(b => new
                            {
                                b.AccountDetailId,
                                b.ac_Account.Code,
                                title = b.ac_Account.Name,
                                b.Description,
                                b.IsDept,
                                b.Amount,
                            })
                        });
                    }
                    else
                        return Json(new { isdone = false });
                }
                else
                    return Json(new { isdone = false });
            }
        }

        // bayad orderHeader vorodi az noe 'order' bashad
        public ActionResult AddOtherAccount(string type, ref ac_OrderHeader OrderH, decimal buyDiscountIncome, decimal saleReturnDiscountIncome, decimal vatExpense
               , decimal discountExpense, decimal vatIncome, decimal discountIncome, decimal deliveryExpense, decimal deliveryIncome, int? customerAccountId)
        {
            try
            {

                //OrderH.ac_AccountDetail.Where(a => a.AccountDetailId != a.ac_OrderDetail.AccountDetailId && a.AccountId != OrderH.ClientId);
                // agar sanade kharid bashad 
                // bedehkar <- هزینه مالیات بر ارزش افزوده
                // bestankar <-  درآمد تخفیفات خرید
                if (type == "buy")
                {
                    //هزینه مالیات بر ارزش افزوده
                    if (vatExpense > 0)
                    {
                        int accountId = db.ac_TableAccount.Single(t => t.Table == "vatExpense" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                        var accountDetail = OrderH.ac_AccountDetail.FirstOrDefault(a => a.AccountId == accountId);
                        if (accountDetail != null)
                            accountDetail.Amount = vatExpense;
                        else
                        {
                            ac_AccountDetail AccDetail = new ac_AccountDetail();
                            AccDetail.Amount = vatExpense;
                            AccDetail.IsDept = true;
                            AccDetail.AccountId = db.ac_TableAccount.Single(t => t.Table == "vatExpense" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                            //AccDetail.Description = ;
                            OrderH.ac_AccountDetail.Add(AccDetail);

                            OrderH.Amount += vatExpense;
                            int clientID = OrderH.ClientId.Value;
                            var cus = OrderH.ac_AccountDetail.Single(a => a.AccountId == clientID);
                            cus.Amount += vatExpense;
                        }
                    }

                    //درآمد تخفیفات خرید
                    if (buyDiscountIncome > 0)
                    {
                        int accountId = db.ac_TableAccount.Single(t => t.Table == "buyDiscountIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                        var accountDetail = OrderH.ac_AccountDetail.FirstOrDefault(a => a.AccountId == accountId);
                        if (accountDetail != null)
                            accountDetail.Amount = buyDiscountIncome;
                        else
                        {
                            ac_AccountDetail AccDetail = new ac_AccountDetail();
                            AccDetail.Amount = buyDiscountIncome;
                            AccDetail.IsDept = false;
                            AccDetail.AccountId = db.ac_TableAccount.Single(t => t.Table == "buyDiscountIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                            //AccDetail.Description = ;
                            OrderH.ac_AccountDetail.Add(AccDetail);
                        }
                    }

                    //درآمد تخفیفات خرید
                    if (discountExpense > 0)
                    {
                        int accountId = db.ac_TableAccount.Single(t => t.Table == "discountExpense" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                        var accountDetail = OrderH.ac_AccountDetail.FirstOrDefault(a => a.AccountId == accountId);
                        if (accountDetail != null)
                            accountDetail.Amount = discountExpense;
                        else
                        {
                            ac_AccountDetail AccDetail = new ac_AccountDetail();
                            AccDetail.Amount = discountExpense;
                            AccDetail.IsDept = true;
                            AccDetail.AccountId = db.ac_TableAccount.Single(t => t.Table == "discountExpense" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                            //AccDetail.Description = ;
                            OrderH.ac_AccountDetail.Add(AccDetail);
                        }
                    }
                }

                // agar sanade forosh bashad 
                // bedehkar <- هزینه تخفیف
                // bestankar <- ذخیره مالیات بر ارزش افزوده 
                if (type == "sale")
                {
                    // هزبنه تخفیفات / هزینه تخفیف
                    if (discountExpense > 0)
                    {
                        int accountId = db.ac_TableAccount.Single(t => t.Table == "discountExpense" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                        var accountDetail = OrderH.ac_AccountDetail.FirstOrDefault(a => a.AccountId == accountId);
                        if (accountDetail != null)
                            accountDetail.Amount = discountExpense;
                        else
                        {
                            ac_AccountDetail AccDetail = new ac_AccountDetail();
                            AccDetail.Amount = discountExpense;
                            AccDetail.IsDept = true;
                            AccDetail.AccountId = db.ac_TableAccount.Single(t => t.Table == "discountExpense" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                            //AccDetail.Description = ;
                            OrderH.ac_AccountDetail.Add(AccDetail);
                        }


                    }
                    if (discountIncome > 0)
                    {
                        int accountId = db.ac_TableAccount.Single(t => t.Table == "discountIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                        var accountDetail = OrderH.ac_AccountDetail.FirstOrDefault(a => a.AccountId == accountId);
                        if (accountDetail != null)
                            accountDetail.Amount = discountIncome;
                        else
                        {
                            ac_AccountDetail AccDetail = new ac_AccountDetail();
                            AccDetail.Amount = discountIncome;
                            AccDetail.IsDept = false;
                            AccDetail.AccountId = db.ac_TableAccount.Single(t => t.Table == "discountIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                            //AccDetail.Description = ;
                            OrderH.ac_AccountDetail.Add(AccDetail);
                        }


                    }
                    if (saleReturnDiscountIncome > 0)
                    {
                        int accountId = db.ac_TableAccount.Single(t => t.Table == "saleReturnDiscountIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                        var accountDetail = OrderH.ac_AccountDetail.FirstOrDefault(a => a.AccountId == accountId);
                        if (accountDetail != null)
                            accountDetail.Amount = saleReturnDiscountIncome;
                        else
                        {
                            ac_AccountDetail AccDetail = new ac_AccountDetail();
                            AccDetail.Amount = saleReturnDiscountIncome;
                            AccDetail.IsDept = false;
                            AccDetail.AccountId = db.ac_TableAccount.Single(t => t.Table == "saleReturnDiscountIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                            //AccDetail.Description = ;
                            OrderH.ac_AccountDetail.Add(AccDetail);
                        }


                    }

                    //ذخیره مالیات بر ارزش افزود
                    if (vatIncome > 0)
                    {
                        int accountId = db.ac_TableAccount.Single(t => t.Table == "vatIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                        var accountDetail = OrderH.ac_AccountDetail.FirstOrDefault(a => a.AccountId == accountId);
                        if (accountDetail != null)
                            accountDetail.Amount = vatIncome;
                        else
                        {
                            ac_AccountDetail AccDetail = new ac_AccountDetail();
                            AccDetail.Amount = vatIncome;
                            AccDetail.IsDept = false;
                            AccDetail.AccountId = db.ac_TableAccount.Single(t => t.Table == "vatIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                            //AccDetail.Description = ;
                            OrderH.ac_AccountDetail.Add(AccDetail);

                            OrderH.Amount += vatIncome;
                            int clientID = OrderH.ClientId.Value;
                            var cus = OrderH.ac_AccountDetail.Single(a => a.AccountId == clientID);
                            cus.Amount += vatIncome;
                        }


                    }

                }

                //agar sanad marjoei kharid bashad
                // bedehkar <- هزینه تخفیفات
                // bestankar <- ذخیره مالیات بر ارزش افزوده 
                if (type == "ReturnedShopping")
                {
                    // هزبنه تخفیفات / هزینه تخفیف
                    if (discountExpense > 0)
                    {
                        int accountId = db.ac_TableAccount.Single(t => t.Table == "discountExpense" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                        var accountDetail = OrderH.ac_AccountDetail.FirstOrDefault(a => a.AccountId == accountId);
                        if (accountDetail != null)
                            accountDetail.Amount = discountExpense;
                        else
                        {
                            ac_AccountDetail AccDetail = new ac_AccountDetail();
                            AccDetail.Amount = discountExpense;
                            AccDetail.IsDept = true;
                            AccDetail.AccountId = db.ac_TableAccount.Single(t => t.Table == "discountExpense" && t.aspnet_Applications.ApplicationName == appName).AccountId;

                            //AccDetail.Description = ;
                            OrderH.ac_AccountDetail.Add(AccDetail);
                        }
                    }

                    //ذخیره مالیات بر ارزش افزود
                    if (vatIncome > 0)
                    {
                        int accountId = db.ac_TableAccount.Single(t => t.Table == "vatIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                        var accountDetail = OrderH.ac_AccountDetail.FirstOrDefault(a => a.AccountId == accountId);
                        if (accountDetail != null)
                            accountDetail.Amount = vatIncome;
                        else
                        {
                            ac_AccountDetail AccDetail = new ac_AccountDetail();
                            AccDetail.Amount = vatIncome;
                            AccDetail.IsDept = false;
                            AccDetail.AccountId = db.ac_TableAccount.Single(t => t.Table == "vatIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                            //AccDetail.Description = ;
                            OrderH.ac_AccountDetail.Add(AccDetail);

                            OrderH.Amount += vatIncome;
                            int clientID = OrderH.ClientId.Value;
                            var cus = OrderH.ac_AccountDetail.Single(a => a.AccountId == clientID);
                            cus.Amount += vatIncome;
                        }


                    }

                }

                //agar sanad marjoei forosh kala bashad
                //bedehkar <- هزینه مالیات بر ارزش افزوده  
                //bestankar <- درآمد تخفیف برگشت از فروش 
                if (type == "ReturnedSelling")
                {
                    //هزینه مالیات بر ارزش افزوده
                    if (vatExpense > 0)
                    {
                        int accountId = db.ac_TableAccount.Single(t => t.Table == "vatExpense" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                        var accountDetail = OrderH.ac_AccountDetail.FirstOrDefault(a => a.AccountId == accountId);
                        if (accountDetail != null)
                            accountDetail.Amount = vatExpense;
                        else
                        {
                            ac_AccountDetail AccDetail = new ac_AccountDetail();
                            AccDetail.Amount = vatExpense;
                            AccDetail.IsDept = true;
                            AccDetail.AccountId = db.ac_TableAccount.Single(t => t.Table == "vatExpense" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                            //AccDetail.Description = ;
                            OrderH.ac_AccountDetail.Add(AccDetail);

                            OrderH.Amount += vatExpense;
                            int clientID = OrderH.ClientId.Value;
                            var cus = OrderH.ac_AccountDetail.Single(a => a.AccountId == clientID);
                            cus.Amount += vatExpense;
                        }

                    }

                    //درآمد تخفیف برگشت از فروش
                    if (saleReturnDiscountIncome > 0)
                    {
                        int accountId = db.ac_TableAccount.Single(t => t.Table == "saleReturnDiscountIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                        var accountDetail = OrderH.ac_AccountDetail.FirstOrDefault(a => a.AccountId == accountId);
                        if (accountDetail != null)
                            accountDetail.Amount = saleReturnDiscountIncome;
                        else
                        {
                            ac_AccountDetail AccDetail = new ac_AccountDetail();
                            AccDetail.Amount = saleReturnDiscountIncome;
                            AccDetail.IsDept = false;
                            AccDetail.AccountId = db.ac_TableAccount.Single(t => t.Table == "saleReturnDiscountIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;

                            //AccDetail.Description = ;
                            OrderH.ac_AccountDetail.Add(AccDetail);
                        }
                    }
                }

                // erae khadamat
                // هزینه پیک 
                //bedehkar <- هزینه پیک
                //bestankar <- ذخیره مالیات بر ارزش افزود 
                // bedehkar <- هزبنه تخفیفات / هزینه تخفیف
                if (deliveryExpense > 0)
                {
                    // هزینه پیک 
                    int accountId = db.ac_TableAccount.Single(t => t.Table == "deliveryExpense" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                    var accountDetail = OrderH.ac_AccountDetail.FirstOrDefault(a => a.AccountId == accountId);
                    if (accountDetail != null)
                        accountDetail.Amount = deliveryExpense;
                    else
                    {
                        ac_AccountDetail AccDetail = new ac_AccountDetail();
                        AccDetail.Amount = deliveryExpense;
                        AccDetail.IsDept = true;
                        AccDetail.AccountId = db.ac_TableAccount.Single(t => t.Table == "deliveryExpense" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                        //AccDetail.Description = ;
                        OrderH.ac_AccountDetail.Add(AccDetail);
                    }
                }

                //daryaft khadamat
                //khadamat haml
                if (deliveryIncome > 0)
                {
                    // هزینه حمل 
                    int accountId = db.ac_TableAccount.Single(t => t.Table == "deliveryIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                    var accountDetail = OrderH.ac_AccountDetail.FirstOrDefault(a => a.AccountId == accountId);
                    if (accountDetail != null)
                        accountDetail.Amount = deliveryIncome;
                    else
                    {
                        ac_AccountDetail AccDetail = new ac_AccountDetail();
                        AccDetail.Amount = deliveryIncome;
                        AccDetail.IsDept = false;
                        AccDetail.AccountId = db.ac_TableAccount.Single(t => t.Table == "deliveryIncome" && t.aspnet_Applications.ApplicationName == appName).AccountId;
                        //AccDetail.Description = ;
                        OrderH.ac_AccountDetail.Add(AccDetail);
                    }

                }
                return Json(new { isdone = true });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }


        }
        //mohasebe hazine koli 1 factor
        public decimal CalculateAmountWithOtherAcc(ac_OrderHeader oldOrderHeader, ac_OrderHeader newOrderHeader, decimal newTotalAmount, bool isCustomer)
        {
            try
            {
                decimal totalAmount = 0;
                decimal tamount = 0;
                decimal amount = 0;
                decimal oldAmount = oldOrderHeader.ac_AccountDetail.Where(a => a.ac_OrderDetail != null).Sum(a => a.ac_OrderDetail.ac_AccountDetail1.Amount.Value);

                foreach (ac_AccountDetail item in oldOrderHeader.ac_AccountDetail)
                {
                    var TableAccount = db.ac_TableAccount.SingleOrDefault(t => t.AccountId == item.AccountId);
                    if (TableAccount != null)
                    {
                        string accTable = TableAccount.Table;
                        tamount = (newTotalAmount * item.Amount.Value) / Math.Abs(oldAmount);
                        amount = tamount;
                        totalAmount += amount;
                        //agar factor takhfif dashte bashad bayad mizan takhfif ra ba OrderH.Amount jam kard
                        switch (accTable)
                        {
                            case ("buyDiscountIncome"):
                                {
                                    AddOtherAccount("buy", ref newOrderHeader, 0, 0, 0, Math.Abs(amount), 0, 0, 0, 0, 0);
                                }
                                break;

                            case ("discountExpense"):
                                {
                                    if (isCustomer)
                                        AddOtherAccount("sale", ref newOrderHeader, 0, Math.Abs(amount), 0, 0, 0, 0, 0, 0, 0);
                                    else
                                        AddOtherAccount("buy", ref newOrderHeader, Math.Abs(amount), 0, 0, 0, 0, 0, 0, 0, 0);
                                }
                                break;
                            case ("saleReturnDiscountIncome"):
                                {
                                    AddOtherAccount("sale", ref newOrderHeader, 0, Math.Abs(amount), 0, 0, 0, 0, 0, 0, 0);
                                }
                                break;
                            case ("vatExpense"):
                                {
                                    if (!isCustomer)
                                        AddOtherAccount("ReturnedShopping", ref newOrderHeader, 0, 0, 0, 0, Math.Abs(amount), 0, 0, 0, 0);
                                    else
                                        AddOtherAccount("sale", ref newOrderHeader, 0, 0, 0, 0, Math.Abs(amount), 0, 0, 0, 0);
                                }
                                break;
                            case ("vatIncome"):
                                {
                                    if (!isCustomer)
                                        AddOtherAccount("buy", ref newOrderHeader, 0, 0, Math.Abs(amount), 0, 0, 0, 0, 0, 0);
                                    else
                                        AddOtherAccount("ReturnedSelling", ref newOrderHeader, 0, 0, Math.Abs(amount), 0, 0, 0, 0, 0, 0);
                                }
                                break;
                            case ("deliveryExpense"):
                                {
                                    AddOtherAccount("sale", ref newOrderHeader, 0, 0, 0, 0, 0, Math.Abs(amount), 0, 0, 0);
                                }
                                break;
                            case ("deliveryIncome"):
                                {
                                    AddOtherAccount("sale", ref newOrderHeader, 0, 0, 0, 0, 0, 0, Math.Abs(amount), 0, 0);
                                }
                                break;
                        }
                    }
                }
                return totalAmount;
            }
            catch (Exception ex)
            {
                return -1;
            }
        }

        public ActionResult AddBankAccount(string name)
        {
            try
            {
                var RegistererId = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                var app = db.aspnet_Applications.Single(a => a.ApplicationName == Membership.ApplicationName);
                //ac_account
                var tableAccount = db.ac_TableAccount.Single(a => a.Table == "banks" && a.aspnet_Applications.ApplicationName == appName).AccountId;
                ac_Account account = new ac_Account()
                {
                    //AccountNature = parentAccount.AccountNature,
                    Code = utility.FindAccountCodeByParentId(tableAccount) + 1,
                    //GroupType = parentAccount.GroupType,
                    //Level = Convert.ToByte(parentAccount.Level + 1),
                    Level = 3,
                    Name = name,
                    ParentAccountId = tableAccount,
                    ApplicationId = app.ApplicationId,
                    RegistererId = RegistererId,
                    LedgentId = findLedgentAccId(tableAccount)
                };



                // asnade daryaftani
                var tableAccountRecieved = db.ac_TableAccount.Single(a => a.Table == "bankReceivedDocument" && a.aspnet_Applications.ApplicationName == appName).AccountId;
                ac_Account RecievedDocumentAccount = new ac_Account()
                {
                    //AccountNature = tableAccountRecieved.AccountNature,
                    Code = utility.FindAccountCodeByParentId(tableAccountRecieved) + 2,
                    //GroupType = parentAccount.GroupType,
                    //Level = Convert.ToByte(parentAccount.Level + 1),
                    Level = 3,
                    Name = name + " account Recieveable",
                    ParentAccountId = tableAccountRecieved,
                    ApplicationId = app.ApplicationId,
                    RegistererId = RegistererId,
                    LedgentId = findLedgentAccId(tableAccountRecieved)
                };

                db.ac_Account.AddObject(RecievedDocumentAccount);

                //asnade pardakhti
                var tableAccountPaid = db.ac_TableAccount.Single(a => a.Table == "bankPaidDocument" && a.aspnet_Applications.ApplicationName == appName).AccountId;
                ac_Account PaidDocumentAccount = new ac_Account()
                {
                    //AccountNature = parentAccountPaid.AccountNature,
                    Code = utility.FindAccountCodeByParentId(tableAccountPaid) + 3,
                    //GroupType = parentAccount.GroupType,
                    //Level = Convert.ToByte(parentAccount.Level + 1),
                    Level = 3,
                    Name = name + " account Payable",
                    ParentAccountId = tableAccountPaid,
                    ApplicationId = app.ApplicationId,
                    RegistererId = RegistererId,
                    LedgentId = findLedgentAccId(tableAccountPaid)
                };

                account.ac_Account11.Add(RecievedDocumentAccount);
                account.ac_Account11.Add(PaidDocumentAccount);
                db.ac_Account.AddObject(account);

                db.SaveChanges();

                return Json(new { isdone = true, msg = "oK" });

            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }


        public ActionResult GetBankList()
        {
            try
            {
                int accountIdBank = db.ac_TableAccount.Single(t => t.Table == "banks" && t.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;

                return Json(new
                {
                    results = db.ac_Account.Where(a => a.ParentAccountId == accountIdBank).Select(a => new
                    {
                        a.AccountId,
                        a.Code,
                        a.Name
                    })
                });

            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }

        public ActionResult DeleteBank(int accountId)
        {
            try
            {
                var bankAccount = db.ac_Account.Single(a => a.AccountId == accountId);
                if (bankAccount != null)
                {
                    db.ac_Account.DeleteObject(bankAccount.ac_Account1.First());
                    db.ac_Account.DeleteObject(bankAccount.ac_Account1.Last());
                    db.ac_Account.DeleteObject(bankAccount);
                    db.SaveChanges();
                }
                return Json(new { isDone = true, msg = "delete" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.InnerException.Message });
            }
        }

        public ActionResult UpdateBankAccount(string name, int AccId)
        {
            try
            {
                var bankAcc = db.ac_Account.Single(a => a.AccountId == AccId);
                bankAcc.Name = name;
                bankAcc.ac_Account1.First().Name = name + " account Recieveable";
                bankAcc.ac_Account1.Last().Name = name + " account Payable";
                db.SaveChanges();
                return Json(new { isDone = true, msg = "update" });
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = ex.InnerException.Message });
            }
        }


        public ActionResult GetCompletionPersonCurrentAccount(string q, int limit)
        {
            if (!User.Identity.IsAuthenticated)
            {

                return Json(new { isExpired = true });
            }
            int curPersonAcc = db.ac_TableAccount.Single(a => a.Table == "personCurrentAccount" && a.aspnet_Applications.ApplicationName == appName).AccountId;
            List<int> result = db.GetSubAccountByParent(curPersonAcc).Select(a => a.Value).ToList();
            return Json(db.ac_Account.Where(b => (b.ApplicationId == null || b.aspnet_Applications.ApplicationName == appName)
     && result.Contains(b.AccountId)
     && b.Level == 3 && ((b.Name).Contains(q))).OrderBy(b => b.Name).Take(limit)
 .Select(cc => new
 {
     label = cc.Name,
     value = cc.Code,
     id = cc.AccountId
 }
       ));

            //var qu = getReturnPersonCurrentAccount(new MapiDBEntities(), q, limit, appName, result);
            //return Json(getReturnPersonCurrentAccount(new MapiDBEntities(), q, limit, appName, result));
        }

        public ActionResult GetAccountwithParentId(string q, int limit, string ParentName)
        {
            try
            {
                int accRecievable = db.ac_TableAccount.Single(a => a.Table == ParentName && a.aspnet_Applications.ApplicationName == appName).AccountId;
                return Json(db.ac_Account.Where(a => a.ParentAccountId == accRecievable && a.Name.Contains(q)).OrderBy(a => a.Name).Take(limit).Select(a => new { label = a.Name, id = a.AccountId, value = a.Code }));
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }
        //jostejo parent va childhaiash
        public ActionResult GetAccountNameWithParentId(string ParentName)
        {
            try
            {
                int accRecievable = db.ac_TableAccount.Single(a => a.Table == ParentName && a.aspnet_Applications.ApplicationName == appName).AccountId;
                return Json(db.ac_Account.Where(a => a.ParentAccountId == accRecievable).OrderBy(a => a.Name).Select(a => new { name = a.Name, id = a.AccountId }));
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }

        //jostejo chaildhaie marbot be 1 Tableaccount
        public ActionResult GetChildAccountNameWithParent(string ParentName)
        {
            try
            {
                int accRecievable = db.ac_TableAccount.Single(a => a.Table == ParentName && a.aspnet_Applications.ApplicationName == appName).AccountId;
                var q = (db.ac_Account.Where(a => a.ParentAccountId == accRecievable && a.RelatedAccountId != null).OrderBy(a => a.Name).Select(a => new { name = a.Name, id = a.AccountId }));
                return Json(db.ac_Account.Where(a => a.ParentAccountId == accRecievable && a.RelatedAccountId != null).OrderBy(a => a.Name).Select(a => new { name = a.Name, id = a.AccountId }));
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }
        public ActionResult GetTableAccount()
        {
            try
            {
                return Json(db.ac_TableAccount.Where(a => a.ac_Account.aspnet_Applications.ApplicationName == appName).OrderBy(a => a.Table).Select(a => new { name = a.Table, id = a.AccountId }));
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }

        public ActionResult GetchildAccountNameWithParentName(string ParentName)
        {
            try
            {
                int accRecievable = db.ac_TableAccount.Single(a => a.Table == ParentName && a.aspnet_Applications.ApplicationName == appName).AccountId;
                List<int> parent = (db.ac_Account.Where(a => a.ParentAccountId == accRecievable).OrderBy(a => a.Name).Select(a => a.AccountId)).ToList();
                return Json(db.ac_Account.Where(a => parent.Contains(a.ParentAccountId.Value)).Select(a => new { id = a.AccountId, name = a.Name }));
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }

        //        public static Func<MapiDBEntities, string, int, string,List<int>,object>
        //getReturnPersonCurrentAccount = CompiledQuery.Compile((MapiDBEntities db, string q, int limit, string appName,List<int> result)
        //=> db.ac_Account.Where(b => (b.ApplicationId == null || b.aspnet_Applications.ApplicationName == appName)
        //    && result.Contains(b.AccountId) 
        //    && b.Level == 3 && ((b.Name).Contains(q))).OrderBy(b => b.Name).Take(limit)
        //.Select(cc => new
        //{
        //    label = cc.Name,
        //    value = cc.Code,
        //    id = cc.AccountId
        //}
        //      ));

        public ActionResult addRecievedCheque(int? ShopId, int? CounterId)
        {
            try
            {
                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
                if (!roles.Contains("canReceiveByCheque"))
                {
                    return Json(new { isDone = false, msg = "notAllowedByCheque" });
                }


                int eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;

                //baraie peida kardan accountId cash va cheque
                int? cashAccId = CounterId;
                int chequeAccId = db.ac_TableAccount.Single(a => a.Table == "generalReceive" && a.aspnet_Applications.ApplicationName == appName).ac_Account.AccountId;

                int curId = Convert.ToInt32(Request["ddl_Currency"]);
                var currency = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == curId);
                decimal amount = Convert.ToDecimal(Request["txt_Amount"]) * currency.Buy;

                ac_OrderHeader acc = new ac_OrderHeader();
                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;
                acc.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                acc.InvoiceNO = getInvoiceNumber(db, "transfer", false, false);
                acc.Description = Request["txt_comment"].ToString();
                acc.EmployeeId = eid;
                acc.Date = DateTime.Now;
                acc.ShopId = ShopId;
                acc.CurrencyRateId = currency.CurrencyRateId;
                acc.IsMoney = true;
                acc.ConfirmerId = eid;
                acc.ClientId = Convert.ToInt32(Request["txt_currentAccountPerson"]);
                acc.Table = "payment";
                acc.Amount = amount;


                //check
                ac_Cheque ch = new ac_Cheque();
                ch.CurrencyRateId = currency.CurrencyRateId;
                ch.Bank = Request["ddl_Banks"];
                if (!string.IsNullOrEmpty(Request["txt_serial"]))
                    ch.Serial = Request["txt_serial"];
                ch.Passed = true;
                ch.DueDate = utility.GetDateCulture(Request["txt_checkDate"]);
                ch.IssuerId = Convert.ToInt32(Request["txt_currentAccountPerson"]);

                // account daryaft shode -> bedehkar
                ac_AccountDetail accDetailRecieved = new ac_AccountDetail();
                accDetailRecieved.Amount = amount;
                int accIdGeneralRecieved = db.ac_TableAccount.Single(a => a.Table == "generalReceive" && a.aspnet_Applications.ApplicationName == appName).AccountId;


                //dar sorati ke accountid asnade daryaftani ba accountid asnade daryaftani kol barabar bashad pas status=1 dar gheire in sorat status=2
                //field status baraie moshakhas kardane vazeiate check mibashad be sorate zir :
                // 1 -> daryaftani
                // 2 -> dar jaryan
                // 3 -> vosoli
                // 4 -> vagozarde
                // 5 -> bargashti
                accDetailRecieved.AccountId = Convert.ToInt32(Request["ddl_recievableAccount"]);
                if (accIdGeneralRecieved == accDetailRecieved.AccountId)
                    ch.Status = 1;
                else
                    ch.Status = 2;
                accDetailRecieved.Description = Request["txt_comment"].ToString();
                accDetailRecieved.IsDept = true;
                accDetailRecieved.ac_Cheque.Add(ch);

                //account pardakht konande -> bestankar
                ac_AccountDetail accDetailPaid = new ac_AccountDetail();
                accDetailPaid.Amount = amount;
                accDetailPaid.AccountId = Convert.ToInt32(Request["txt_currentAccountPerson"]);
                accDetailPaid.Description = Request["txt_comment"].ToString();
                accDetailPaid.IsDept = false;
                //accDetailPaid.ac_Cheque = ch;

                acc.ac_AccountDetail.Add(accDetailPaid);
                acc.ac_AccountDetail.Add(accDetailRecieved);

                db.ac_OrderHeader.AddObject(acc);
                db.SaveChanges();
                return Json(new { isdone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }

        }
        public ActionResult GetRecievedcheque(int skip, int take, int currentPage, bool first, string sort, int? shopid, int? CounterId)
        {

            try
            {
                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }
                List<ObjectParameter> ol = new List<ObjectParameter>();
                string dynStr = string.Empty;
                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;

                dynStr += "it.ac_AccountDetail.ac_OrderHeader.p_employee.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName";
                ol.Add(new ObjectParameter("appName", appName));


                dynStr += " AND ";
                dynStr += "it.Status!=6 ";


                dynStr += " AND ";
                dynStr += "it.ac_AccountDetail.ac_OrderHeader.EmployeeId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name).AccountId);


                if (shopid == null && CounterId == null)
                {
                    if (roles.Contains("canSeeAllPaymentes") && shopid == null)
                    {

                    }
                    else
                    {
                        //if (dynStr.Length > 0)
                        //    dynStr += " AND ";
                        //dynStr += "it.ac_AccountDetail.ac_OrderHeader.CounterId in " + utility.getCounterForUser(User.Identity.Name);
                    }
                }
                else if (shopid != null && CounterId == null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.ac_AccountDetail.ac_OrderHeader.CounterID in " + utility.getCounterForUser(User.Identity.Name);
                    dynStr += " AND ";
                    dynStr += "it.ac_AccountDetail.ac_OrderHeader.ShopId =@ShopId";
                    ol.Add(new ObjectParameter("ShopId", shopid));
                }

                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ac_AccountDetail.ac_OrderHeader.FiscalPeriodId =@FiscalPeriodId";
                ol.Add(new ObjectParameter("FiscalPeriodId", appDetails.CurrentFiscalPeriodId));

                //else if ((shopid != null && CounterId != null) || (shopid == null && CounterId != null))
                //{
                //    if (dynStr.Length > 0)
                //        dynStr += " AND ";
                //    dynStr += "it.ac_AccountDetail.ac_OrderHeader.CounterID = @CounterId";
                //    ol.Add(new ObjectParameter("CounterId", CounterId));
                //}
                var result = db.ac_Cheque.Where(dynStr, ol.ToArray());
                return Json(new
                {
                    count = result.Count(),
                    results = result.OrderBy("it." + sort)
                    .Skip(skip).Take(take)
                    .Select(b => new
                    {
                        AccountDetailId = b.ac_AccountDetail.AccountDetailId,
                        DueDate = b.DueDate,
                        Serial = b.Serial,
                        issuer = b.ac_Account.Name,
                        reciever = b.ac_AccountDetail.ac_Account.Name,
                        amount = b.ac_AccountDetail.Amount,
                        Status = b.Status,
                        Description = b.ac_AccountDetail.Description
                    })
                });
            }
            catch (Exception ex)
            { return null; }
        }

        public ActionResult GetPaidcheque(
            int skip, int take, int currentPage, bool first,
            string sort, int? shopid, int? CounterId)
        {

            try
            {
                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }
                List<ObjectParameter> ol = new List<ObjectParameter>();
                string dynStr = string.Empty;

                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;

                dynStr += "it.ac_AccountDetail.ac_OrderHeader.p_employee.p_Person.ac_Account.aspnet_Applications.ApplicationName=@appName";
                ol.Add(new ObjectParameter("appName", appName));

                dynStr += " AND ";
                dynStr += "it.Status=6 ";

                dynStr += " AND ";
                dynStr += "it.ac_AccountDetail.ac_OrderHeader.EmployeeId in " + utility.getHierarchyDataForEmployee(db.p_Person.Single(p => p.Code == User.Identity.Name).AccountId);


                if (shopid == null && CounterId == null)
                {
                    if (roles.Contains("canSeeAllPaymentes") && shopid == null)
                    {

                    }
                    else
                    {
                        //if (dynStr.Length > 0)
                        //    dynStr += " AND ";
                        //dynStr += "it.ac_AccountDetail.ac_OrderHeader.CounterId in " + utility.getCounterForUser(User.Identity.Name);
                    }
                }
                else if (shopid != null && CounterId == null)
                {
                    if (dynStr.Length > 0)
                        dynStr += " AND ";
                    dynStr += "it.ac_AccountDetail.ac_OrderHeader.CounterID in " + utility.getCounterForUser(User.Identity.Name);
                    dynStr += " AND ";
                    dynStr += "it.ac_AccountDetail.ac_OrderHeader.ShopId =@ShopId";
                    ol.Add(new ObjectParameter("ShopId", shopid));
                }

                if (dynStr.Length > 0)
                    dynStr += " AND ";
                dynStr += "it.ac_AccountDetail.ac_OrderHeader.FiscalPeriodId =@FiscalPeriodId";
                ol.Add(new ObjectParameter("FiscalPeriodId", appDetails.CurrentFiscalPeriodId));
                //else if ((shopid != null && CounterId != null) || (shopid == null && CounterId != null))
                //{
                //    if (dynStr.Length > 0)
                //        dynStr += " AND ";
                //    dynStr += "it.ac_AccountDetail.ac_OrderHeader.CounterID = @CounterId";
                //    ol.Add(new ObjectParameter("CounterId", CounterId));
                //}
                var result = db.ac_Cheque.Where(dynStr, ol.ToArray());
                return Json(new
                {
                    count = result.Count(),
                    results = result.OrderBy("it." + sort)
                    .Skip(skip).Take(take)
                    .Select(b => new
                    {
                        AccountDetailId = b.ac_AccountDetail.AccountDetailId,
                        DueDate = b.DueDate,
                        Serial = b.Serial,
                        issuer = b.ac_Account.Name,
                        reciever = b.ac_AccountDetail.ac_Account.Name,
                        amount = b.ac_AccountDetail.Amount,
                        Status = b.Status,
                        pass = b.Passed,
                        Description = b.ac_AccountDetail.Description
                    })
                });
            }
            catch (Exception ex)
            { return null; }
        }

        //taghier cheque be status "dar jaryan/current"
        public ActionResult ChangeChequeStatus(string type, int accdetailId, int? recievableAcc, int? personCode, string description)
        {
            try
            {
                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
                if (!roles.Contains("canReceiveByCheque"))
                {
                    return Json(new { isDone = false, msg = "notAllowedByCheque" });
                }

                int eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;

                var accdetail = db.ac_AccountDetail.Single(a => a.AccountDetailId == accdetailId);
                int currentStatus = accdetail.ac_Cheque.FirstOrDefault().Status.Value;
                if (currentStatus == 3)
                    return Json(new { isDone = false, msg = "not allow" });
                ac_OrderHeader acc = new ac_OrderHeader();
                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;
                acc.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                acc.InvoiceNO = getInvoiceNumber(db, "transfer", false, false);
                acc.Description = description;
                acc.EmployeeId = eid;
                acc.Date = DateTime.Now;
                acc.ShopId = accdetail.ac_OrderHeader.ShopId;
                acc.CurrencyRateId = db.ac_CurrencyRate.Where(c => c.Buy == 1).FirstOrDefault().CurrencyRateId;
                acc.IsMoney = true;
                acc.ConfirmerId = eid;
                acc.Table = "payment";
                acc.Amount = accdetail.Amount.Value;

                //dar sorati ke accountID jarie ashkhas hesabe daryaft konande cheque va ia hesab dahande cheque bashad bayad acc.ClientId=accountId shavad
                int? recievedAccount = accdetail.AccountId;
                var isPerson = db.p_Person.SingleOrDefault(a => a.AccountId == recievedAccount);
                if (isPerson != null)
                    acc.ClientId = recievedAccount;

                //hesabe daryaftani (ke check baraie an sabt shode ast) -> bestankar
                ac_AccountDetail accDetailRecieved = new ac_AccountDetail();
                accDetailRecieved.Amount = accdetail.Amount;
                accDetailRecieved.AccountId = accdetail.AccountId;
                accDetailRecieved.IsDept = false;
                accDetailRecieved.Description = description;

                //enteghale cheque az hesabe daryaftani ghabl be hesabe daryaftanie felli
                var cheque = accdetail.ac_Cheque.FirstOrDefault();
                accdetail.ac_Cheque.Remove(cheque);// = null;
                //ac_Cheque ch = new ac_Cheque();
                //ch.CurrencyRateId = cheque.CurrencyRateId;
                //ch.Bank = cheque.Bank;
                //ch.Serial = cheque.Serial;
                //ch.DueDate = cheque.DueDate;
                //ch.IssuerId = cheque.IssuerId;

                acc.ac_AccountDetail.Add(accDetailRecieved);

                if (type == "current")
                {
                    //hesabe daryafti bank -> bedehkar
                    ac_AccountDetail accDetailBank = new ac_AccountDetail();
                    accDetailBank.Amount = accdetail.Amount;
                    accDetailBank.AccountId = recievableAcc;
                    accDetailBank.IsDept = true;
                    accDetailBank.Description = description;
                    accDetailBank.ac_Cheque.Add(cheque);
                    acc.ac_AccountDetail.Add(accDetailBank);
                    //taghier status be status "dar jaryan"
                    accDetailBank.ac_Cheque.FirstOrDefault().Status = 2;

                }
                else
                    if (type == "pass")
                    {
                        //be hesabe bank ezafe mishavad pas hesab bank -> bedehkar
                        //ia be hesabe counter ezafe mishavad hesabe Counter -> bedehkar

                        if (currentStatus == 4)
                            return Json(new { isDone = false, msg = "not allow" });
                        ac_AccountDetail accDetailBank = new ac_AccountDetail();
                        accDetailBank.Amount = accdetail.Amount;
                        accDetailBank.AccountId = recievableAcc;
                        accDetailBank.IsDept = true;
                        accDetailBank.Description = description;
                        accDetailBank.ac_Cheque.Add(cheque);
                        acc.ac_AccountDetail.Add(accDetailBank);


                        //taghier status be status "vosoli"
                        accDetailBank.ac_Cheque.FirstOrDefault().Status = 3;

                    }
                    else
                        if (type == "give")
                        {

                            //hesabe daryafti person -> bedehkar
                            ac_AccountDetail accDetailper = new ac_AccountDetail();
                            accDetailper.Amount = accdetail.Amount;
                            var perAccId = db.ac_Account.Single(a => a.Code == personCode && a.aspnet_Applications.ApplicationName == appName).AccountId;

                            //jahaie ke 1 tarafe hesab jarie ashkhas mibashad bayad acc.clientId = accountId an shakhs shavad
                            acc.ClientId = perAccId;

                            accDetailper.AccountId = perAccId;
                            accDetailper.IsDept = true;
                            accDetailper.Description = description;
                            accDetailper.ac_Cheque.Add(cheque);
                            acc.ac_AccountDetail.Add(accDetailper);

                            //taghier status be status "vagozarde"
                            accDetailper.ac_Cheque.FirstOrDefault().Status = 4;
                        }
                        else
                            if (type == "return")
                            {
                                //hesabe pardakhtkonande -> bedehkar
                                ac_AccountDetail accDetailissuer = new ac_AccountDetail();
                                accDetailissuer.Amount = accdetail.Amount;
                                accDetailissuer.AccountId = cheque.IssuerId;// accdetail.ac_OrderHeader.ac_AccountDetail.First(a => a.AccountId != accdetail.AccountId && a.ac_Cheque == null).AccountId;
                                accDetailissuer.IsDept = true;
                                accDetailissuer.Description = description;
                                accDetailissuer.ac_Cheque.Add(cheque);
                                acc.ac_AccountDetail.Add(accDetailissuer);
                                acc.ClientId = cheque.IssuerId;
                                acc.Sell = true;
                                //taghier status be status "bargashti"
                                accDetailissuer.ac_Cheque.FirstOrDefault().Status = 5;
                            }
                db.ac_OrderHeader.AddObject(acc);
                db.SaveChanges();

                return Json(new { isdone = true, msg = "oK" });



            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }

        public ActionResult addPaidCheque(int? ShopId, int? CounterId, int? currencyId, int? countRow)
        {
            try
            {

                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
                if (!roles.Contains("canReceiveByCheque"))
                {
                    return Json(new { isDone = false, msg = "notAllowedByCheque" });
                }


                int eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;

                //baraie peida kardan accountId cash va cheque
                int? cashAccId = CounterId;
                int chequeAccId = db.ac_TableAccount.Single(a => a.Table == "generalReceive" && a.aspnet_Applications.ApplicationName == appName).ac_Account.AccountId;
                int bankAccId = Convert.ToInt32(Request["ddl_accountPaidBanks"]);
                //int curId = Convert.ToInt32(Request["ddl_Currency"]);
                //var currency = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == curId);
                //decimal amount = Convert.ToDecimal(Request["txt_Amount"]) * currency.Buy;
                int accDetailId = Convert.ToInt32(Request["hi_SelectedchequeAccDetailId"]);
                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;
                if (accDetailId == 0)
                {
                    ac_OrderHeader acc = new ac_OrderHeader();
                    acc.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                    acc.InvoiceNO = getInvoiceNumber(db, "transfer", false, false);
                    acc.Description = Request["txt_comment"].ToString();
                    acc.EmployeeId = eid;
                    acc.Date = DateTime.Now;
                    acc.ShopId = ShopId;
                    //currency toman
                    acc.CurrencyRateId = currencyId.Value;
                    acc.IsMoney = true;
                    acc.ConfirmerId = eid;
                    acc.Table = "payment";
                    acc.CounterId = CounterId;



                    //check
                    ac_Cheque ch = new ac_Cheque();
                    //currancy toman
                    ch.CurrencyRateId = currencyId.Value;
                    //Request["ddl_accountPaidBanks"] marbot be cheque nemibashad
                    ch.Bank = null;
                    if (!string.IsNullOrEmpty(Request["txt_serial"]))
                        ch.Serial = Request["txt_serial"];
                    ch.Passed = true;
                    ch.DueDate = utility.GetDateCulture(Request["txt_checkDate"]);
                    ch.Status = 6;
                    ch.IssuerId = Convert.ToInt32(Request["ddl_accountPaidBanks"]);
                    //jarie ashkhas -> bedehkar
                    int rowcount = Convert.ToInt32(Request["countRow"]);
                    decimal sum = 0;
                    if (rowcount > 0)
                        rowcount = rowcount + 1;
                    while (rowcount >= 1)
                    {
                        decimal Rowamount = 0;
                        Rowamount = Convert.ToDecimal(!string.IsNullOrEmpty(Request["txt_amount" + rowcount]) ? Request["txt_amount" + rowcount] : "0");
                        if (Rowamount > 0 && !string.IsNullOrEmpty(Request["PersonAccCode" + rowcount]) && !string.IsNullOrEmpty(Request["ddl_Currency" + rowcount]))
                        {
                            int PersonAccCode = Convert.ToInt32(Request["PersonAccCode" + rowcount]);
                            var perAccId = db.ac_Account.Single(a => a.Code == PersonAccCode && a.aspnet_Applications.ApplicationName == appName);
                            ac_AccountDetail accdetailCurrPer = new ac_AccountDetail();

                            int curId = Convert.ToInt32(Request["ddl_Currency" + rowcount]);
                            decimal currRate = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == curId).Buy;

                            accdetailCurrPer.Amount = Rowamount * currRate;

                            accdetailCurrPer.AccountId = perAccId.AccountId;
                            //clientid ra avanit accountid hesabhaie jarye ashkhas midahim
                            if (acc.ClientId == null)
                                acc.ClientId = perAccId.AccountId;

                            accdetailCurrPer.Description = Request["txt_comment" + rowcount].ToString();
                            accdetailCurrPer.IsDept = true;
                            acc.ac_AccountDetail.Add(accdetailCurrPer);
                            sum += Rowamount * currRate;
                            rowcount--;
                        }
                        else
                        {
                            rowcount--;
                        }
                    }
                    //amount orderHeader
                    acc.Amount = sum;

                    bool ispass = false;
                    if (Request["chk_isPassed"] != null)
                    {
                        //agar cheque pass shode bashad : bank -> bestankar
                        ac_AccountDetail accdetailBank = new ac_AccountDetail();

                        //be andaze majmoe mabalegh 
                        accdetailBank.Amount = sum;
                        //peida kardane bank bar asase asnade pardakhtani
                        int? relatedAccSelectedBank = db.ac_Account.Single(a => a.AccountId == bankAccId).RelatedAccountId;
                        accdetailBank.AccountId = relatedAccSelectedBank;
                        accdetailBank.Description = Request["txt_comment"].ToString();
                        accdetailBank.IsDept = false;
                        accdetailBank.ac_Cheque.Add(ch);
                        acc.ac_AccountDetail.Add(accdetailBank);

                        ch.Passed = true;
                    }
                    else
                    {
                        //agar cheque pass nashode bashad : asnade pardakhtani -> bestankar
                        ac_AccountDetail accpaidDocument = new ac_AccountDetail();

                        //be andaze majmoe mabalegh 
                        accpaidDocument.Amount = sum;

                        //asnade pardakhtani bank entekhab shode
                        int paidDocumentAccId = db.ac_TableAccount.Single(a => a.Table == "bankPaidDocument" && a.aspnet_Applications.ApplicationName == appName).AccountId;
                        accpaidDocument.AccountId = bankAccId;

                        accpaidDocument.Description = Request["txt_comment"].ToString();
                        accpaidDocument.ac_Cheque.Add(ch);
                        accpaidDocument.IsDept = false;
                        acc.ac_AccountDetail.Add(accpaidDocument);
                        ch.Passed = false;
                    }


                    db.ac_OrderHeader.AddObject(acc);
                }
                else
                {
                    var accDetail = db.ac_AccountDetail.Single(a => a.AccountDetailId == accDetailId);

                    //update orderHeader
                    accDetail.ac_OrderHeader.CounterId = CounterId;
                    accDetail.ac_OrderHeader.Description = Request["txt_comment"].ToString();
                    accDetail.ac_OrderHeader.ShopId = ShopId;
                    accDetail.ac_OrderHeader.CurrencyRateId = currencyId.Value;
                    accDetail.ac_OrderHeader.ClientId = null;

                    //update accdetails
                    int rowcount = Convert.ToInt32(Request["countRow"]);
                    if (rowcount > 0)
                        rowcount = rowcount + 1;
                    decimal oldSum = 0;
                    decimal sum = 0;
                    while (rowcount >= 1)
                    {

                        decimal Rowamount = 0;
                        Rowamount = Convert.ToDecimal(!string.IsNullOrEmpty(Request["txt_amount" + rowcount]) ? Request["txt_amount" + rowcount] : "0");
                        if (Rowamount > 0 && !string.IsNullOrEmpty(Request["PersonAccCode" + rowcount]) && !string.IsNullOrEmpty(Request["ddl_Currency" + rowcount]))
                        {
                            int accdeId = Convert.ToInt32(Request["hi_AccDetailId" + rowcount]);
                            var accdet = db.ac_AccountDetail.Single(a => a.AccountDetailId == accdeId);

                            int PersonAccCode = Convert.ToInt32(Request["PersonAccCode" + rowcount]);
                            var perAccId = db.ac_Account.Single(a => a.Code == PersonAccCode && a.aspnet_Applications.ApplicationName == appName);

                            int curId = Convert.ToInt32(Request["ddl_Currency" + rowcount]);
                            decimal currRate = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == curId).Buy;
                            oldSum += accdet.Amount.Value;
                            accdet.Amount = Rowamount * currRate;

                            accdet.AccountId = perAccId.AccountId;
                            //clientid ra avalin accountid hesabhaie jarye ashkhas midahim
                            if (accDetail.ac_OrderHeader.ClientId == null)
                                accDetail.ac_OrderHeader.ClientId = perAccId.AccountId;

                            accdet.Description = Request["txt_comment" + rowcount].ToString();
                            accdet.IsDept = true;
                            sum += Rowamount * currRate;
                            rowcount--;
                        }
                        else
                        {
                            rowcount--;
                        }
                    }

                    accDetail.ac_OrderHeader.Amount = accDetail.ac_OrderHeader.Amount - oldSum + sum;
                    accDetail.Amount = sum;

                    if (Request["chk_isPassed"] != null)
                    {
                        //agar cheque pass shode bashad : bank -> bestankar
                        int? relatedAccSelectedBank = db.ac_Account.Single(a => a.AccountId == bankAccId).RelatedAccountId;

                        accDetail.ac_Cheque.FirstOrDefault().Passed = true;

                        // vaghti chek pass mishavad : asnad pardakhtanie bank -> bedehkar , bank -> bestankar
                        ac_OrderHeader acc = new ac_OrderHeader();
                        acc.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                        acc.InvoiceNO = getInvoiceNumber(db, "transfer", false, false);
                        acc.Description = Request["txt_comment"].ToString();
                        acc.EmployeeId = eid;
                        acc.Date = DateTime.Now;
                        acc.ShopId = ShopId;
                        //currency toman
                        acc.CurrencyRateId = currencyId.Value;
                        acc.IsMoney = true;
                        acc.ConfirmerId = eid;
                        acc.Table = "payment";
                        acc.CounterId = CounterId;
                        acc.Amount = accDetail.Amount.Value;

                        ac_AccountDetail accdetailpaidDocbank = new ac_AccountDetail();
                        // bankAccId : asnad pardakhtani bank mibashad
                        accdetailpaidDocbank.AccountId = bankAccId;
                        accdetailpaidDocbank.Amount = accDetail.Amount;
                        accdetailpaidDocbank.IsDept = true;

                        ac_AccountDetail accdetailbank = new ac_AccountDetail();
                        accdetailbank.AccountId = relatedAccSelectedBank;
                        accdetailbank.Amount = accDetail.Amount;
                        accdetailbank.IsDept = false;

                        acc.ac_AccountDetail.Add(accdetailpaidDocbank);
                        acc.ac_AccountDetail.Add(accdetailbank);

                        db.ac_OrderHeader.AddObject(acc);

                    }
                    else
                    {
                        accDetail.ac_Cheque.FirstOrDefault().Passed = false;
                        //asnade pardakhtani bank entekhab shode
                        accDetail.AccountId = bankAccId;
                    }


                    //be andaze majmoe mabalegh 
                    accDetail.Amount = sum;

                    accDetail.Description = Request["txt_comment"].ToString();

                }
                db.SaveChanges();
                return Json(new { isdone = true, msg = "oK" });

            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }

        public ActionResult GetPaidDocumentInfo(int accDetailId)
        {
            try
            {
                int payableAcc;
                var accdetail = db.ac_AccountDetail.Single(a => a.AccountDetailId == accDetailId);
                bool isDept = accdetail.IsDept.Value;
                decimal amount = Math.Abs(accdetail.Amount.Value);
                if (!accdetail.ac_Cheque.FirstOrDefault().Passed)
                {
                    return Json(new
                    {
                        isdone = true,
                        serial = accdetail.ac_Cheque.FirstOrDefault().Serial,
                        DueDate = accdetail.ac_Cheque.FirstOrDefault().DueDate,
                        PayableAcc = accdetail.AccountId,
                        Description = accdetail.Description,
                        passed = accdetail.ac_Cheque.FirstOrDefault().Passed,
                        accdetails = accdetail.ac_OrderHeader.ac_AccountDetail.Where(a => a.AccountDetailId != accDetailId && a.IsDept != isDept).AsEnumerable().Select(a => new
                        {
                            Code = a.ac_Account.Code,
                            Name = a.ac_Account.Name,
                            Description = a.Description,
                            Amount = accdetail.ac_OrderHeader.ac_AccountDetail.Where(w => w.IsDept != isDept).Count() > 1 ? a.Amount : amount,
                            CurrencyRateId = a.ac_OrderHeader.CurrencyRateId,
                            AccountDetailId = a.AccountDetailId
                        })
                    });
                }
                else
                {
                    return Json(new { isdone = false, msg = "cheque is passed" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }

        public ActionResult addAccountOrderType()
        {
            try
            {
                byte? AccountNature = Convert.ToByte(string.IsNullOrEmpty(Request["AccountNature"]) ? "0" : Request["AccountNature"]);
                byte grouptype = Convert.ToByte(string.IsNullOrEmpty(Request["GroupType"]) ? "0" : Request["GroupType"]);
                int level = Convert.ToInt32(Request["Level"]);
                string name = Request["txt_name"].ToString();
                int code = Convert.ToInt32(Request["txt_code"]);
                var appId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;
                string hi_isEdit = Request["hi_isEdit"];
                if (string.IsNullOrEmpty(hi_isEdit) || !Convert.ToBoolean(hi_isEdit))
                {
                    int parentAccId = Convert.ToInt32(string.IsNullOrEmpty(Request["hi_SelectedParentAccId"]) ? "0" : Request["hi_SelectedParentAccId"]);
                    var account = new ac_Account();
                    int? parent = 0;
                    if (parentAccId > 0)
                    {
                        var parents = db.GetParentAccountByID(parentAccId, "").ToList();
                        if (parents.Count() >= 3)
                            account.LedgentId = parents[2].AccountId;
                        else
                            account.LedgentId = null;
                        account.LedgentId = findLedgentAccId(parentAccId);
                        account.ParentAccountId = parentAccId;
                    }
                    //add node to root
                    else
                    {
                        account.LedgentId = null;
                        account.ParentAccountId = null;
                    }
                    var employee = db.p_Person.Single(s => s.Code == User.Identity.Name);



                    if (AccountNature > 0)
                        account.AccountNature = AccountNature;
                    account.Code = utility.FindAccountCodeByParentId(parentAccId) + 1;
                    if (grouptype > 0)
                        account.GroupType = grouptype;
                    if (level > -1)
                        account.Level = Convert.ToByte(level);// Convert.ToByte(parentAccount.Level + 1),

                    if (!string.IsNullOrEmpty(Request["tableAccount"]))
                    {
                        ac_TableAccount acT = new ac_TableAccount();
                        acT.Table = Request["tableAccount"].ToString();
                        acT.ApplicationId = appId;
                        account.ac_TableAccount = acT;
                    }
                    account.Name = name;

                    account.ApplicationId = appId;
                    account.RegistererId = employee.AccountId;
                    account.Code = code;

                    db.ac_Account.AddObject(account);
                    db.SaveChanges();
                    return Json(new { isdone = true, name = account.Name, id = account.AccountId, isEdit = false });
                }


                else
                {
                    int accId = Convert.ToInt32(Request["hi_SelectedParentAccId"]);
                    var acc = db.ac_Account.Single(a => a.AccountId == accId);


                    acc.Name = name;
                    acc.GroupType = grouptype;
                    acc.AccountNature = AccountNature;
                    if (level > -1)
                        acc.Level = Convert.ToByte(level);
                    else
                        acc.Level = null;
                    if (!string.IsNullOrEmpty(Request["tableAccount"]))
                    {
                        if (acc.ac_TableAccount != null)
                            acc.ac_TableAccount.Table = Request["tableAccount"].ToString();
                        else
                        {
                            ac_TableAccount acT = new ac_TableAccount();
                            acT.Table = Request["tableAccount"].ToString();
                            acT.ApplicationId = appId;
                            acc.ac_TableAccount = acT;
                        }

                    }
                    else
                    {
                        var acT = db.ac_TableAccount.SingleOrDefault(a => a.AccountId == accId);
                        if (acT != null)
                        {
                            db.ac_TableAccount.DeleteObject(acT);
                            acc.ParentAccountId = null;
                        }
                    }
                    db.SaveChanges();
                    return Json(new { isdone = true, name = acc.Name, id = acc.AccountId, isEdit = true, msg = "ok" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }


        public ActionResult addorEditPropertyInfo()
        {
            try
            {
                string name = Request["txt_name"].ToString();
                string description = Request["txt_translated"].ToString();
                string showInMenu = !string.IsNullOrEmpty(Request["chk_ShowInMenu"]) ? Request["chk_ShowInMenu"].ToString() : "";
                string showInFilter = !string.IsNullOrEmpty(Request["chk_ShowInFilter"]) ? Request["chk_ShowInFilter"].ToString() : "";
                string showInProperty = !string.IsNullOrEmpty(Request["chk_ShowInProperty"]) ? Request["chk_ShowInProperty"].ToString() : "";
                var appId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;
                string hi_isEdit = Request["hi_isEdit"];
                if (!Convert.ToBoolean(hi_isEdit))
                {
                    int parentId = Convert.ToInt32(string.IsNullOrEmpty(Request["hi_SelectedParentCatId"]) ? "0" : Request["hi_SelectedParentCatId"]);
                    int? parent = parentId > 0 ? (int?)parentId : null;


                    var category = new inv_Property();

                    category.Property = name;
                    category.TranslatedProperty = description;
                    category.ShowInMenu = !(string.IsNullOrEmpty(showInMenu)) ? true : false;
                    category.ShowInFilter = !(string.IsNullOrEmpty(showInFilter)) ? true : false;
                    category.ShowInProperty = !(string.IsNullOrEmpty(showInProperty)) ? true : false;
                    category.ApplicationId = appId;
                    category.Priority = null;
                    category.ParentId = parent != null ? parent : null;

                    db.inv_Property.AddObject(category);
                    db.SaveChanges();
                    return Json(new { isdone = true, name = category.Property, id = category.PropertyId, isCheck = category.ShowInMenu, isEdit = false });
                }
                else
                {
                    int selectedCategoryId = Convert.ToInt32(string.IsNullOrEmpty(Request["hi_SelectedParentCatId"]) ? "0" : Request["hi_SelectedParentCatId"]);
                    var cat = db.inv_Property.FirstOrDefault(c => c.PropertyId == selectedCategoryId);
                    cat.Property = name;
                    cat.ShowInMenu = !(string.IsNullOrEmpty(showInMenu)) ? true : false;
                    cat.ShowInFilter = !(string.IsNullOrEmpty(showInFilter)) ? true : false;
                    cat.ShowInProperty = !(string.IsNullOrEmpty(showInProperty)) ? true : false;
                    cat.TranslatedProperty = description;
                    db.SaveChanges();
                    return Json(new { isdone = true, name = cat.Property, id = cat.PropertyId, isCheck = cat.ShowInMenu, isEdit = true, msg = "ok" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }

        public ActionResult addorEditCategoryInfo()
        {
            try
            {
                int quantity = Convert.ToInt32(Request["txt_quantity"]);
                string name = Request["txt_name"].ToString();
                string description = Request["txt_description"].ToString();
                string showOnline = !string.IsNullOrEmpty(Request["chk_ShowCategory"]) ? Request["chk_ShowCategory"].ToString() : "";
                var appId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;
                string hi_isEdit = Request["hi_isEdit"];
                if (string.IsNullOrEmpty(hi_isEdit) || !Convert.ToBoolean(hi_isEdit))
                {
                    int parentId = Convert.ToInt32(string.IsNullOrEmpty(Request["hi_SelectedParentCatId"]) ? "0" : Request["hi_SelectedParentCatId"]);
                    int? parent = parentId > 0 ? (int?)parentId : null;


                    var category = new inv_Category();

                    category.Category = name;
                    category.Description = description;
                    category.ShowOnline = !(string.IsNullOrEmpty(showOnline)) ? true : false;
                    category.Quantity = quantity;
                    category.ApplicationId = appId;
                    category.Priority = null;
                    category.ParentCategoryId = parent != null ? parent : null;

                    db.inv_Category.AddObject(category);
                    db.SaveChanges();
                    return Json(new { isdone = true, name = category.Category, id = category.CategoryId, isCheck = category.ShowOnline, isEdit = false });
                }
                else
                {
                    int selectedCategoryId = Convert.ToInt32(string.IsNullOrEmpty(Request["hi_SelectedParentCatId"]) ? "0" : Request["hi_SelectedParentCatId"]);
                    var cat = db.inv_Category.FirstOrDefault(c => c.CategoryId == selectedCategoryId);
                    cat.Category = name;
                    cat.ShowOnline = !(string.IsNullOrEmpty(showOnline)) ? true : false;
                    cat.Description = description;
                    cat.Quantity = quantity;
                    db.SaveChanges();
                    return Json(new { isdone = true, name = cat.Category, id = cat.CategoryId, isCheck = cat.ShowOnline, isEdit = true, msg = "ok" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }

        public ActionResult ChangeshowTreeNodeRec(string tableName, int Id, bool show)
        {
            try
            {
                if (tableName == "category")
                {
                    var cat = db.inv_Category.Single(c => c.CategoryId == Id);
                    cat.ShowOnline = show;
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "OK" });
                }
                else
                    if (tableName == "property")
                    {
                        var cat = db.inv_Property.Single(c => c.PropertyId == Id);
                        cat.ShowInMenu = show;
                        db.SaveChanges();
                        return Json(new { isdone = true, msg = "OK" });
                    }
                    else
                        if (tableName == "onlineMenu")
                        {
                            XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Menu.xml"));
                            var content = xmlDoc.Element("root").Descendants("Content").Single(t => t.Attribute("Id").Value == Id.ToString());
                            content.SetAttributeValue("show", show);
                            bool isRoot = content.Parent.Name == "root" ? true : false;
                            if (!show && isRoot)
                            {
                                //set "show" property for child
                                var q = content.Descendants("Content");
                                foreach (var item in q)
                                {
                                    item.SetAttributeValue("show", show);
                                }
                            }
                            xmlDoc.Save(Server.MapPath("~/Data/Menu.xml"));
                            return Json(new { isdone = true, msg = "OK" });
                        }
                        else
                            return Json(new { isdone = false, msg = "OK" });

            }
            catch (Exception ex)
            {
                return Json(new { isdone = false });
            }
        }


        public ActionResult DeleteTree(string TableName, int id)
        {
            try
            {
                if (TableName == "Account")
                {
                    //remove childs
                    var accChilds = db.ac_Account.Where(a => a.ParentAccountId == id);
                    foreach (var item in accChilds)
                    {
                        db.ac_Account.DeleteObject(item);
                    }
                    //remove parents
                    var acc = db.ac_Account.Single(a => a.AccountId == id);
                    db.ac_Account.DeleteObject(acc);
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "deleted" });
                }
                else
                    if (TableName == "category")
                    {
                        //remove childs
                        var cat = db.inv_Category.Single(a => a.CategoryId == id);
                        db.inv_Category.DeleteObject(cat);
                        db.SaveChanges();
                        return Json(new { isdone = true, msg = "deleted" });
                    }
                    else if (TableName == "property")
                    {
                        //remove childs
                        var cat = db.inv_Property.Single(a => a.PropertyId == id);
                        db.inv_Property.DeleteObject(cat);
                        db.SaveChanges();
                        return Json(new { isdone = true, msg = "deleted" });
                    }
                    else
                        if (TableName == "onlineMenu")
                        {
                            XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Menu.xml"));
                            xmlDoc.Element("root").Descendants("Content").Single(t => t.Attribute("Id").Value == id.ToString()).Remove();
                            xmlDoc.Save(Server.MapPath("~/Data/Menu.xml"));
                            return Json(new { isdone = true, msg = "deleted" });
                        }
                        else
                            return Json(new { isdone = false });

            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = "invalid" });
            }
        }

        public ActionResult TreeDaragDrop(string TableName, int? TargetId, List<int> treeNodes, List<int?> children)
        {
            try
            {
                if (TableName == "Account")
                {

                    var acc = db.ac_Account.Where(a => treeNodes.Contains(a.AccountId));

                    foreach (var item in acc)
                    {
                        item.ParentAccountId = TargetId;

                        var parents = db.GetParentAccountByID(TargetId, "").ToList();
                        if (parents.Count() >= 3)
                            item.LedgentId = parents[2].AccountId;
                        else
                            item.LedgentId = null;

                    }

                    db.SaveChanges();
                }
                if (TableName == "category")
                {
                    var q = db.inv_Category.Where(c => treeNodes.Contains(c.CategoryId));
                    foreach (var item in q)
                    {
                        item.ParentCategoryId = TargetId;
                    }
                    //sort
                    int p = 1;
                    foreach (var item in children)
                    {
                        db.inv_Category.Single(c => c.CategoryId == item).Priority = p++;
                    }

                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "OK" });
                }
                if (TableName == "property")
                {
                    var q = db.inv_Property.Where(c => treeNodes.Contains(c.PropertyId));
                    foreach (var item in q)
                    {
                        item.ParentId = TargetId;
                    }
                    //sort
                    int p = 1;
                    foreach (var item in children)
                    {
                        db.inv_Property.Single(c => c.PropertyId == item).Priority = p++;
                    }

                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "OK" });
                }
                else
                    if (TableName == "onlineMenu")
                    {
                        XDocument xmlDoc = XDocument.Load(Server.MapPath("~/Data/Menu.xml"));
                        var content = xmlDoc.Element("root").Descendants("Content").Where(t => treeNodes.Contains(Convert.ToInt32(t.Attribute("Id").Value))).ToList();
                        var target = TargetId == null ? xmlDoc.Element("root") : xmlDoc.Element("root").Descendants("Content").Single(t => t.Attribute("Id").Value == TargetId.ToString());
                        content.Remove();
                        target.Add(content);
                        xmlDoc.Save(Server.MapPath("~/Data/Menu.xml"));
                        //sort
                        int p = 1;
                        foreach (var item in children)
                        {
                            xmlDoc.Element("root").Descendants("Content").Single(t => t.Attribute("Id").Value == item.ToString()).SetAttributeValue("order", p++);
                        }
                        xmlDoc.Save(Server.MapPath("~/Data/Menu.xml"));

                        return Json(new { isdone = true, msg = "OK" });
                    }
                    else
                        return Json(new { isdone = false });

            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = "invalid" });
            }
        }



        public object GetRelatedAcc(ac_Account acc)
        {

            List<string> relatedAcc = new List<string>();
            foreach (var item in acc.ac_Account11)
            {
                string str = "";
                var results = db.GetParentAccountByID(item.AccountId, "").Select(a => new
                {
                    a.AccountId,
                    a.Name,
                    a.Code,
                    a.GroupType,
                    a.AccountNature
                });
                int accid = 0;
                foreach (var item2 in results)
                {

                    if (item2.AccountId == item.AccountId)
                    {
                        accid = item2.AccountId;
                        str += " > " + item2.Code + " " + item2.Name;
                    }
                    else
                        str += " > " + item2.Name;
                }
                relatedAcc.Add(accid + " " + str);

            }

            return relatedAcc;
        }

        public ActionResult addRelatedAcc(int parentAccId, int relatedAccId)
        {
            try
            {
                var parent = db.ac_Account.Single(a => a.AccountId == parentAccId);
                var related = db.ac_Account.Single(a => a.AccountId == relatedAccId);
                parent.ac_Account11.Add(related);
                db.SaveChanges();
                return Json(new { isdone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }
        public ActionResult deleteRelatedAcc(int parentAccId, int relatedAccId)
        {
            try
            {
                var parent = db.ac_Account.Single(a => a.AccountId == parentAccId);
                var related = db.ac_Account.Single(a => a.AccountId == relatedAccId);
                parent.ac_Account11.Remove(related);
                db.SaveChanges();
                return Json(new { isdone = true, msg = "oK" });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }



        public ActionResult GetAccountwithlevel(int level)
        {
            try
            {
                return Json(new
                {
                    isdone = true,
                    results = db.ac_Account.Where(a => a.Level == level && a.aspnet_Applications.ApplicationName == appName).Take(10).Select(a => new
                    {
                        Code = a.Code,
                        Name = a.Name,
                        AccountId = a.AccountId

                    })
                });
            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }



        public ActionResult AddOpeninigAccountItems()
        {
            try
            {

                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }

                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);

                if (!roles.Contains("canSale"))
                {
                    return Json(new { isDone = false, msg = "notInRole" });
                }
                int eid = db.p_Person.Single(p => p.Code == User.Identity.Name && p.ac_Account.aspnet_Applications.ApplicationName == appName).AccountId;
                int currencyId = Convert.ToInt32(Request["CurrencyRateId"]);
                int curid = db.ac_CurrencyRate.OrderByDescending(c => c.Date).FirstOrDefault(c => c.CurrencyId == currencyId).CurrencyRateId;
                ac_OrderHeader orderheader = new ac_OrderHeader();
                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;
                orderheader.FiscalPeriodId = appDetails.CurrentFiscalPeriodId;
                orderheader.ShopId = Convert.ToInt32(Request["ShopId"]);
                orderheader.CurrencyRateId = curid;
                if (!string.IsNullOrEmpty(Request["Description"]))
                    orderheader.Description = Request["Description"];
                if (!string.IsNullOrEmpty(Request["txt_InvoiceNum"]))
                {
                    orderheader.InvoiceNO = Request["txt_InvoiceNum"];
                }
                orderheader.CounterId = Convert.ToInt32(Request["CounterId"]);
                orderheader.EmployeeId = eid;
                orderheader.Date = utility.GetDateTimeCulture(Request["Date"]);
                orderheader.Sell = true;
                orderheader.IsMoney = true;
                //orderheader.ClientId = eid;
                orderheader.Table = "payment";
                //permanent => employeeId else null
                if (!string.IsNullOrEmpty(Request["isper"]) && Convert.ToBoolean(Request["isper"]))
                    orderheader.ConfirmerId = eid;

                decimal totalamount = 0;
                int count = 0;
                int rowcount = Convert.ToInt32(Request["hi_cRow"]);

                while (rowcount > 0)
                {
                    var accId = Request["hi_AccountId" + rowcount] != null ? Convert.ToInt32(Request["hi_AccountId" + rowcount]) : 0;
                    var deptor = Convert.ToDecimal(!string.IsNullOrEmpty(Request["txt_deptor" + rowcount]) ? Request["txt_deptor" + rowcount] : "0");
                    var creditor = Convert.ToDecimal(!string.IsNullOrEmpty(Request["txt_creditor" + rowcount]) ? Request["txt_creditor" + rowcount] : "0");
                    if (accId > 0 && (deptor > 0 || creditor > 0))
                    {
                        ac_AccountDetail AccDetail = new ac_AccountDetail();
                        int code = Convert.ToInt32(Request["txt_code" + rowcount]);
                        var acc = db.ac_Account.Single(a => a.Code == code && a.aspnet_Applications.ApplicationName == appName);
                        //bedehkar
                        if (deptor > 0)
                        {
                            // dar sorati ke baraie kala tedad va gheimat vared karde bashad
                            if (!string.IsNullOrEmpty(Request["txt_Amount" + rowcount]))
                            {
                                int ShopId = Convert.ToInt32(Request["ddl_Branch" + rowcount]);
                                var inv_itemlocation = acc.inv_ItemDetail.inv_ItemLocation.Single(a => a.ShopId == ShopId);
                                inv_itemlocation.Quantity = Convert.ToInt32(Request["txt_Amount" + rowcount]);
                            }

                            AccDetail.Amount = Convert.ToDecimal(Request["txt_deptor" + rowcount]);
                            AccDetail.IsDept = true;
                            totalamount += Convert.ToDecimal(Request["txt_deptor" + rowcount]);
                        }
                        //bestankar
                        else
                        {
                            AccDetail.Amount = Convert.ToDecimal(Request["txt_creditor" + rowcount]);
                            AccDetail.IsDept = false;
                            totalamount += Convert.ToDecimal(Request["txt_creditor" + rowcount]);
                        }
                        AccDetail.AccountId = acc.AccountId;
                        AccDetail.Description = Request["txt_description" + (rowcount + 1)];
                        AccDetail.AccountId = accId;
                        orderheader.ac_AccountDetail.Add(AccDetail);
                        count++;
                    }
                    rowcount--;
                }

                orderheader.Amount = totalamount;
                if (count > 0)
                {
                    db.ac_OrderHeader.AddObject(orderheader);
                    db.SaveChanges();
                    return Json(new { isDone = true, msg = "اطلاعات ذخیره شد.", orderHeaderId = orderheader.OrderHeaderId });

                }
                else
                {
                    return Json(new { isDone = false, msg = "لطفا اطلاعات را وارد نمایید." });
                }
            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = "." + "اطلاعات ذخیره نشد /n" + ex.InnerException.Message });
            }
        }


        //public class ProfitAndloseItem
        //{
        //    public int GroupType { get; set; }
        //    public int AccountId { get; set; }
        //    public string Name { get; set; }
        //    public decimal balance { get; set; }
        //}
        //public class pAndLitems
        //{
        //    public List<ProfitAndloseItem> profitlose=new List<ProfitAndloseItem>(){get
        //}


        public ActionResult GetProfitAndLoss(int id)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }
                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;
                var appId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;

                //hesabhaie kol
                if (id == 1)
                {

                    var result = db.ac_Account.Where(a => a.ApplicationId == appId && a.ac_Account2.Level == 0 && (a.ac_Account2.GroupType == 2 || a.ac_Account2.GroupType == 3 || a.ac_Account2.GroupType == 4 || a.ac_Account2.GroupType == 5)).Select(a => new
                       {
                           a.ac_Account2.GroupType,
                           a.Name,
                           a.AccountId,
                           a.Level,
                           a.ac_AccountDetail,
                           a.Code,

                       }).AsEnumerable().Select(a => new

                       {
                           a.GroupType,
                           a.Name,
                           a.AccountId,
                           balance = (a.Level != 3 ? (db.GetSubAccountBalanceByParent(a.AccountId, appDetails.CurrentFiscalPeriodId, null).Sum(ss => ss.Value)) : a.ac_AccountDetail.Where(ac => ac.ac_OrderHeader.FiscalPeriodId == appDetails.CurrentFiscalPeriodId).Sum(d => d.Amount)),
                           a.Code

                       });


                    decimal? totalAmount = 0;
                    //forosh va daramad -> maheiat bedehkar
                    //hazine va gheimate tamam shode ->maheiat bestankar
                    foreach (var item in result)
                    {
                        decimal? balance = item.balance > 0 ? item.balance : (-1 * item.balance);
                        if (item.GroupType == 2 || item.GroupType == 3)
                        {
                            if (item.balance < 0)
                                totalAmount += balance;
                            else
                                totalAmount -= balance;
                        }
                        else
                        {
                            if (item.balance > 0)
                                totalAmount -= balance;
                            else
                                totalAmount += balance;
                        }
                    }

                    var r = result.ToList();
                    r.Add(new { GroupType = (byte?)0, Name = "سود و زیان", AccountId = -1, balance = (decimal?)totalAmount, Code = 0 });
                    return Json(new
                    {
                        isdone = true,
                        result = r.AsEnumerable(),
                        endDate = appDetails.ac_FiscalPeriod.EndingDate,
                        Date = utility.GetstrDateCulture(System.DateTime.Now),

                    });


                }
                else
                    //hesabhaie moein
                    if (id == 2)
                    {
                        var result = db.ac_Account.Where(a => a.ApplicationId == appId && a.ac_Account2.ac_Account2.Level == 0 && (a.ac_Account2.ac_Account2.GroupType == 2 || a.ac_Account2.ac_Account2.GroupType == 3 || a.ac_Account2.ac_Account2.GroupType == 4 || a.ac_Account2.ac_Account2.GroupType == 5)).Select(a => new
                           {
                               a.ac_Account2.ac_Account2.GroupType,
                               a.Name,
                               a.AccountId,
                               a.Level,
                               a.ac_AccountDetail,
                               a.Code
                           }).AsEnumerable().Select(a => new

                           {

                               a.GroupType,
                               a.Name,
                               a.AccountId,
                               balance = (a.Level != 3 ? (db.GetSubAccountBalanceByParent(a.AccountId, appDetails.CurrentFiscalPeriodId, null).Sum(ss => ss.Value)) : a.ac_AccountDetail.Where(ac => ac.ac_OrderHeader.FiscalPeriodId == appDetails.CurrentFiscalPeriodId).Sum(d => d.Amount)),
                               a.Code
                           });


                        decimal? totalAmount = 0;
                        //forosh va daramad -> maheiat bedehkar
                        //hazine va gheimate tamam shode ->maheiat bestankar
                        foreach (var item in result)
                        {
                            decimal? balance = item.balance > 0 ? item.balance : (-1 * item.balance);
                            if (item.GroupType == 2 || item.GroupType == 3)
                            {
                                if (item.balance < 0)
                                    totalAmount += balance;
                                else
                                    totalAmount -= balance;
                            }
                            else
                            {
                                if (item.balance > 0)
                                    totalAmount -= balance;
                                else
                                    totalAmount += balance;
                            }
                        }


                        var r = result.ToList();
                        r.Add(new { GroupType = (byte?)0, Name = "سود و زیان", AccountId = -1, balance = (decimal?)totalAmount, Code = 0 });
                        return Json(new
                        {
                            isdone = true,
                            result = r.AsEnumerable(),
                            endDate = appDetails.ac_FiscalPeriod.EndingDate,
                            Date = utility.GetstrDateCulture(System.DateTime.Now),
                        });

                    }
                    else
                        //hesabhaie tafsili
                        if (id == 3)
                        {
                            var result = db.ac_Account.Where(a => a.Level == 0 && (a.GroupType == 2 || a.GroupType == 3 || a.GroupType == 4 || a.GroupType == 5)).Select(a => new
                                 {
                                     a.GroupType,
                                     a.AccountId
                                 }).AsEnumerable().Select(aa => new
                                 {
                                     aa.GroupType,
                                     subAaccounts = db.GetSubAccountByParent(aa.AccountId).AsEnumerable(),
                                 }).AsEnumerable().Select(a => new
                                 {
                                     a.GroupType,
                                     subAccount = db.ac_Account.Where(aa => a.subAaccounts.Contains(aa.AccountId) && aa.Level == 3)
                                 }).AsEnumerable().Select(a => new
                                 {
                                     result = a.subAccount.Select(aa => new { GroupType = a.GroupType, aa.Name, aa.AccountId, balance = aa.ac_AccountDetail.Sum(d => d.Amount) })
                                 });
                            decimal? totalAmount = 0;
                            //forosh va daramad -> maheiat bedehkar
                            //hazine va gheimate tamam shode ->maheiat bestankar
                            List<object> items = new List<object>();
                            foreach (var item1 in result)
                            {
                                foreach (var item2 in item1.result)
                                {
                                    items.Add(new { Name = item2.Name, GroupType = item2.GroupType, AccountId = item2.AccountId, balance = item2.balance });
                                    decimal? balance = item2.balance > 0 ? item2.balance : (-1 * item2.balance);
                                    if (item2.GroupType == 2 || item2.GroupType == 3)
                                    {
                                        if (item2.balance < 0)
                                            totalAmount += balance;
                                        else
                                            totalAmount -= balance;
                                    }
                                    else
                                    {
                                        if (item2.balance > 0)
                                            totalAmount -= balance;
                                        else
                                            totalAmount += balance;
                                    }
                                }
                            }

                            items.Add(new { GroupType = 0, Name = "سود و زیان", AccountId = -1, balance = totalAmount });

                            return Json(new
                            {
                                result = items
                            });
                        }
                        else
                            return Json(new { isdone = false });
            }
            catch (Exception ex) { return Json(new { isdone = false }); };
        }


        public decimal calculateTotalBalance()
        {
            var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;
            var appId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;

            var result = db.ac_Account.Where(a => a.ac_Account2.Level == 0 && (a.ac_Account2.GroupType == 2 || a.ac_Account2.GroupType == 3 || a.ac_Account2.GroupType == 4 || a.ac_Account2.GroupType == 5)).Select(a => new
            {

                a.AccountId,
                a.ac_Account2.GroupType
            }).AsEnumerable();
            decimal balance = (-1 * db.GetSubAccountBalanceByParent(result.Single(s => s.GroupType == 3).AccountId, appDetails.CurrentFiscalPeriodId, null).Sum(s => s.Value)) + (-1 * db.GetSubAccountBalanceByParent(result.Single(s => s.GroupType == 2).AccountId, appDetails.CurrentFiscalPeriodId, null).Sum(s => s.Value)) - db.GetSubAccountBalanceByParent(result.Single(s => s.GroupType == 5).AccountId, appDetails.CurrentFiscalPeriodId, null).Sum(s => s.Value) - db.GetSubAccountBalanceByParent(result.Single(s => s.GroupType == 4).AccountId, appDetails.CurrentFiscalPeriodId, null).Sum(s => s.Value);
            return balance;
        }

        public ActionResult GetBalanceSheet(int id)
        {
            try
            {
                if (!User.Identity.IsAuthenticated)
                {
                    return Json(new { isExpired = true });
                }
                var appDetails = db.aspnet_Applications.Single(aa => aa.ApplicationName == appName).ApplicationDetail;
                var appId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;

                //hesabhaie kol
                if (id == 1)
                {
                    // darayi bedehi va sarmaye nabashad vali taraznameyi bashad (jari ashkhas)
                    var resultOtherAccount = db.GetBalanceSheetGeneral(appId);
                    // darayi va taraznameyi
                    var resultFinance = db.ac_Account.Where(a => a.ApplicationId == appId && a.ac_Account2.Level == 0 && (a.ac_Account2.AccountNature == 4) && a.ac_Account2.GroupType == 6).Select(a => new
                    {
                        a.ac_AccountDetail,
                        a.Level,
                        a.Name,
                        a.GroupType,
                        a.AccountId,
                        a.AccountNature
                    }).AsEnumerable().Select(a => new
                    {

                        a.Name,
                        a.GroupType,
                        a.AccountId,
                        a.AccountNature,
                        balance = (a.Level != 3 ? (db.GetSubAccountBalanceByParent(a.AccountId, appDetails.CurrentFiscalPeriodId, null).Sum(ss => ss.Value)) : a.ac_AccountDetail.Where(ac => ac.ac_OrderHeader.FiscalPeriodId == appDetails.CurrentFiscalPeriodId).Sum(d => d.Amount)),
                    }).Select(a => new
                    {
                        a.Name,
                        a.GroupType,
                        a.AccountId,
                        balance = ((a.AccountNature == 1) && a.balance > 0) ? a.balance.Value : ((a.AccountNature == 1) && a.balance < 0) ? a.balance.Value : (((a.AccountNature == 2) && a.balance < 0) ? -a.balance : a.balance.Value)
                    });

                    var r1 = resultFinance.ToList();

                    //bedehi va sarmaye , taraznameyi
                    var resultDebtAndFund = db.ac_Account.Where(a => a.ApplicationId == appId && a.ac_Account2.Level == 0 && a.ac_Account2.GroupType == 6 && (a.ac_Account2.AccountNature == 5 || a.ac_Account2.AccountNature == 6)).Select(a => new
                    {
                        a.ac_AccountDetail,
                        a.Level,
                        a.Name,
                        a.ac_Account2.GroupType,
                        a.AccountId,
                        a.AccountNature
                    }).AsEnumerable().Select(a => new
                    {
                        a.Name,
                        a.GroupType,
                        a.AccountId,
                        a.AccountNature,
                        balance = (a.Level != 3 ? (db.GetSubAccountBalanceByParent(a.AccountId, appDetails.CurrentFiscalPeriodId, null).Sum(ss => ss.Value)) : a.ac_AccountDetail.Where(ac => ac.ac_OrderHeader.FiscalPeriodId == appDetails.CurrentFiscalPeriodId).Sum(d => d.Amount))
                    }).Select(a => new
                    {
                        a.Name,
                        a.GroupType,
                        a.AccountId,
                        balance = ((a.AccountNature == 1) && a.balance > 0) ? a.balance.Value : ((a.AccountNature == 1) && a.balance < 0) ? a.balance.Value : (((a.AccountNature == 2) && a.balance < 0) ? -a.balance : a.balance.Value)
                    });

                    // ezafe kardane sood va zian be table bedehi va sarmaye
                    var r2 = resultDebtAndFund.ToList();
                    r2.Add(new { Name = "سود و زیان", GroupType = (byte?)1, AccountId = -1, balance = (decimal?)(calculateTotalBalance()) });

                    foreach (var item in resultOtherAccount)
                    {
                        if (item.balance > 0)
                        {
                            r1.Add(new { Name = item.Name, GroupType = (byte?)0, AccountId = 0, balance = (decimal?)item.balance });
                        }
                        else
                        {
                            r2.Add(new { Name = item.Name, GroupType = (byte?)0, AccountId = 0, balance = (decimal?)-item.balance });
                        }
                    }
                    // total darayi
                    r1.Add(new { Name = "جمع داراییها", GroupType = (byte?)0, AccountId = 0, balance = (decimal?)r1.Sum(s => s.balance) });
                    // total dept & asset
                    r2.Add(new { Name = "جمع بدهیها و حقوق صاحبان سهام", GroupType = (byte?)0, AccountId = 0, balance = (decimal?)r2.Sum(s => s.balance) });
                    return Json(new { isdone = true, resultFinance = r1, resultDebtAndFund = r2, endDate = appDetails.ac_FiscalPeriod.EndingDate });
                }
                else
                    //hesabhaie moein
                    if (id == 2)
                    {
                        // baraie hesabhaie mesle jarye ashkhas 
                        var resultOtherAccount = db.GetBalanceSheetLegend(appId);
                        var resultFinance = db.ac_Account.Where(a => a.ApplicationId == appId && a.ac_Account2.ac_Account2.Level == 0 && (a.ac_Account2.ac_Account2.AccountNature == 4) && a.ac_Account2.ac_Account2.GroupType == 6).Select(a => new
                        {
                            a.ac_AccountDetail,
                            a.Level,
                            Name = a.Name + ", " + a.ac_Account2.Name,
                            a.GroupType,
                            a.AccountId,
                            a.ac_Account2.AccountNature
                        }).AsEnumerable().Select(a => new
                        {
                            a.AccountNature,
                            a.Name,
                            a.GroupType,
                            a.AccountId,
                            balance = (a.Level != 3 ? (db.GetSubAccountBalanceByParent(a.AccountId, appDetails.CurrentFiscalPeriodId, null).Sum(ss => ss.Value)) : a.ac_AccountDetail.Where(ac => ac.ac_OrderHeader.FiscalPeriodId == appDetails.CurrentFiscalPeriodId).Sum(d => d.Amount)),
                        }).Select(a => new
                        {
                            a.Name,
                            a.GroupType,
                            a.AccountId,
                            balance = ((a.AccountNature == 1) && a.balance > 0) ? a.balance.Value : ((a.AccountNature == 1) && a.balance < 0) ? a.balance.Value : (((a.AccountNature == 2) && a.balance < 0) ? -a.balance : a.balance.Value)
                        });
                        var r1 = resultFinance.ToList();

                        var resultDebtAndFund = db.ac_Account.Where(a => a.ApplicationId == appId && a.ac_Account2.ac_Account2.Level == 0 && a.ac_Account2.ac_Account2.GroupType == 6 && (a.ac_Account2.ac_Account2.AccountNature == 5 || a.ac_Account2.ac_Account2.AccountNature == 6)).Select(a => new
                        {
                            a.ac_AccountDetail,
                            a.Level,
                            Name = a.Name + ", " + a.ac_Account2.Name,
                            a.GroupType,
                            a.AccountId,
                            a.ac_Account2.AccountNature
                        }).AsEnumerable().Select(a => new
                        {
                            a.AccountNature,
                            a.Name,
                            a.GroupType,
                            a.AccountId,
                            balance = (a.Level != 3 ? (db.GetSubAccountBalanceByParent(a.AccountId, appDetails.CurrentFiscalPeriodId, null).Sum(ss => ss.Value)) : a.ac_AccountDetail.Where(ac => ac.ac_OrderHeader.FiscalPeriodId == appDetails.CurrentFiscalPeriodId).Sum(d => d.Amount))
                        }).Select(a => new
                        {
                            a.Name,
                            a.GroupType,
                            a.AccountId,
                            balance = ((a.AccountNature == 1) && a.balance > 0) ? a.balance.Value : ((a.AccountNature == 1) && a.balance < 0) ? a.balance.Value : (((a.AccountNature == 2) && a.balance < 0) ? -a.balance : a.balance.Value)
                        }); ;

                        var r2 = resultDebtAndFund.ToList();
                        r2.Add(new { Name = "سود و زیان", GroupType = (byte?)0, AccountId = -1, balance = (decimal?)(calculateTotalBalance()) });


                        foreach (var item in resultOtherAccount)
                        {
                            if (item.balance > 0)
                            {
                                r1.Add(new { Name = item.Name, GroupType = (byte?)0, AccountId = 0, balance = (decimal?)item.balance });
                            }
                            else
                            {
                                r2.Add(new { Name = item.Name, GroupType = (byte?)0, AccountId = 0, balance = (decimal?)-item.balance });
                            }
                        }
                        r1.Add(new { Name = "جمع داراییها", GroupType = (byte?)0, AccountId = 0, balance = (decimal?)r1.Sum(s => s.balance) });
                        r2.Add(new { Name = "جمع بدهیها و حقوق صاحبان سهام", GroupType = (byte?)0, AccountId = 0, balance = (decimal?)r2.Sum(s => s.balance) });
                        return Json(new { isdone = true, resultFinance = r1, resultDebtAndFund = r2, endDate = appDetails.ac_FiscalPeriod.EndingDate });
                    }
                    else
                        //hesabhaie tafsili
                        if (id == 3)
                        {
                            // baraie hesabhaie mesle jarye ashkhas 
                            var resultOtherAccount = db.GetBalanceSheetDetail(appId);
                            var resultFinance = db.ac_Account.Where(a => a.ApplicationId == appId && a.Level == 3 && (a.ac_Account4.ac_Account2.ac_Account2.AccountNature == 4) && a.ac_Account4.ac_Account2.ac_Account2.GroupType == 6).Select(a => new
                            {
                                a.ac_AccountDetail,
                                a.Level,
                                Name = a.Name + ", " + a.ac_Account2.Name,
                                a.GroupType,
                                a.AccountId,
                                a.ac_Account2.AccountNature
                            }).AsEnumerable().Select(a => new
                            {
                                a.AccountNature,
                                a.Name,
                                a.GroupType,
                                a.AccountId,
                                balance = (a.Level != 3 ? (db.GetSubAccountBalanceByParent(a.AccountId, appDetails.CurrentFiscalPeriodId, null).Sum(ss => ss.Value)) : a.ac_AccountDetail.Where(ac => ac.ac_OrderHeader.FiscalPeriodId == appDetails.CurrentFiscalPeriodId).Sum(d => d.Amount)),
                            }).Select(a => new
                            {
                                a.Name,
                                a.GroupType,
                                a.AccountId,
                                balance = ((a.AccountNature == 1) && a.balance > 0) ? a.balance.Value : ((a.AccountNature == 1) && a.balance < 0) ? a.balance.Value : (((a.AccountNature == 2) && a.balance < 0) ? -a.balance : a.balance.Value)
                            });
                            var r1 = resultFinance.ToList();

                            var resultDebtAndFund = db.ac_Account.Where(a => a.ApplicationId == appId && a.Level ==3 && a.ac_Account4.ac_Account2.ac_Account2.GroupType == 6 && (a.ac_Account4.ac_Account2.ac_Account2.AccountNature == 5 || a.ac_Account4.ac_Account2.ac_Account2.AccountNature == 6)).Select(a => new
                            {
                                a.ac_AccountDetail,
                                a.Level,
                                Name = a.Name + ", " + a.ac_Account2.Name,
                                a.GroupType,
                                a.AccountId,
                                a.ac_Account2.AccountNature
                            }).AsEnumerable().Select(a => new
                            {
                                a.AccountNature,
                                a.Name,
                                a.GroupType,
                                a.AccountId,
                                balance = (a.Level != 3 ? (db.GetSubAccountBalanceByParent(a.AccountId, appDetails.CurrentFiscalPeriodId, null).Sum(ss => ss.Value)) : a.ac_AccountDetail.Where(ac => ac.ac_OrderHeader.FiscalPeriodId == appDetails.CurrentFiscalPeriodId).Sum(d => d.Amount))
                            }).Select(a => new
                            {
                                a.Name,
                                a.GroupType,
                                a.AccountId,
                                balance = ((a.AccountNature == 1) && a.balance > 0) ? a.balance.Value : ((a.AccountNature == 1) && a.balance < 0) ? a.balance.Value : (((a.AccountNature == 2) && a.balance < 0) ? -a.balance : a.balance.Value)
                            }); ;

                            var r2 = resultDebtAndFund.ToList();
                            r2.Add(new { Name = "سود و زیان", GroupType = (byte?)0, AccountId = -1, balance = (decimal?)(calculateTotalBalance()) });


                            foreach (var item in resultOtherAccount)
                            {
                                if (item.balance > 0)
                                {
                                    r1.Add(new { Name = item.Name, GroupType = (byte?)0, AccountId = 0, balance = (decimal?)item.balance });
                                }
                                else
                                {
                                    r2.Add(new { Name = item.Name, GroupType = (byte?)0, AccountId = 0, balance = (decimal?)-item.balance });
                                }
                            }
                               
                              
                            r1.Add(new { Name = "جمع داراییها", GroupType = (byte?)0, AccountId = 0, balance = (decimal?)r1.Sum(s => s.balance) });
                            r2.Add(new { Name = "جمع بدهیها و حقوق صاحبان سهام", GroupType = (byte?)0, AccountId = 0, balance = (decimal?)r2.Sum(s => s.balance) });
                            return Json(new { isdone = true, resultFinance = r1, resultDebtAndFund = r2, endDate = appDetails.ac_FiscalPeriod.EndingDate });
                        }
                        else
                            return Json(null);
            }
            catch (Exception ex) { return Json(null); };
        }

        public ActionResult addFiscalPeriod()
        {
            try
            {
                var roles = utility.GetUserRoles(db, User.Identity.Name, appName);
                if (!roles.Contains("canReceiveByCheque"))
                {
                    return Json(new { isDone = false, msg = "notAllowedByCheque" });
                }
                var appId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId;
                int selectedId = Convert.ToInt32(!string.IsNullOrEmpty(Request["hi_SelectedFiscalPeriodId"]) ? Request["hi_SelectedFiscalPeriodId"] : "0");
                var lastFiscalPeriod = db.ac_FiscalPeriod.Where(f => f.FiscalPeriodId != selectedId).OrderByDescending(f => new { f.EndingDate }).FirstOrDefault();
                if (lastFiscalPeriod != null)
                    if (lastFiscalPeriod.EndingDate > utility.GetDateTimeCulture(Request["txt_dateStart"]))
                        return Json(new { isDone = false, msg = "تاریخ شروع را تغییر دهید" });
                if (selectedId == 0)
                {
                    ac_FiscalPeriod fiscalP = new ac_FiscalPeriod();
                    fiscalP.ApplicationId = appId;
                    fiscalP.ClosingDate = utility.GetDateTimeCulture(Request["txt_ClosingDate"]);
                    fiscalP.EndingDate = utility.GetDateTimeCulture(Request["txt_endingDate"]);
                    fiscalP.Name = Request["txt_FiscalPeriodName"];
                    fiscalP.StartingDate = utility.GetDateTimeCulture(Request["txt_dateStart"]);
                    db.ac_FiscalPeriod.AddObject(fiscalP);
                    db.SaveChanges();
                    return Json(new { isDone = true, msg = "ok" });
                }
                else
                {
                    int? id = Convert.ToInt32(Request["hi_SelectedFiscalPeriodId"]);
                    var fiscalP = db.ac_FiscalPeriod.Single(a => a.FiscalPeriodId == id);
                    fiscalP.ApplicationId = appId;
                    fiscalP.ClosingDate = utility.GetDateTimeCulture(Request["txt_ClosingDate"]);
                    fiscalP.EndingDate = utility.GetDateTimeCulture(Request["txt_endingDate"]);
                    fiscalP.Name = Request["txt_FiscalPeriodName"];
                    fiscalP.StartingDate = utility.GetDateTimeCulture(Request["txt_dateStart"]);
                    db.SaveChanges();
                    return Json(new { isDone = true, msg = "ok" });
                }

            }
            catch (Exception ex)
            {
                return Json(new { isDone = false, msg = "." + "اطلاعات ذخیره نشد /n" + ex.InnerException.Message });
            }
        }

        public ActionResult GetFiscalPeriodList()
        {
            try
            {

                return Json(new
                {
                    results = db.ac_FiscalPeriod.Select(f => new
                    {
                        f.Name,
                        f.StartingDate,
                        f.EndingDate,
                        f.ClosingDate,
                        f.FiscalPeriodId
                    })
                });

            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }

        public ActionResult RemoveFiscalPeriod(int fiscalPeriodId)
        {
            try
            {
                var fiscalP = db.ac_FiscalPeriod.Single(f => f.FiscalPeriodId == fiscalPeriodId);
                db.ac_FiscalPeriod.DeleteObject(fiscalP);
                db.SaveChanges();
                return Json(new { isdone = true, msg = "OK" });

            }
            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });

            }
        }


        public ActionResult getOrderHeaderAccountInfo(int orderHeaderId)
        {
            try
            {
                var orderHeader = db.ac_OrderHeader.Single(a => a.OrderHeaderId == orderHeaderId);
                var result = db.ac_OrderDetail.Where(a => a.ac_AccountDetail.ac_OrderHeader.OrderHeaderId == orderHeaderId);

                var r = result.Select(s => s.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode);


                return Json(new
                {
                    person = orderHeader.p_Person.Name + " " + orderHeader.p_Person.Family,
                    code = orderHeader.p_Person.Code,
                    result = result.Select(b => new
              {
                  barcodeid = b.ac_AccountDetail.ac_Account.inv_ItemDetail.BarcodeId,
                  colorId = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Color,
                  sizeId = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Size,
                  name = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Name,
                  code = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.ItemCode,
                  barcode = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.Barcode,
                  status = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.AvailabilityId,
                  price = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.inv_Price.OrderByDescending(p => p.Date).Select(s => new { basePrice = s.Regular, wholesalePrice = s.Wholesale, friendPrice = s.Freinds, onlinePrice = s.Online }).FirstOrDefault(),
                  b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.inv_MeasureUnit.UnitType,

                  //    colors = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.inv_ItemDetail.Where(d => d.inv_Color.Count > 0 && d.inv_ItemLocation.Sum(s => s.Quantity) > 0)
                  //.Select(a => new
                  //{
                  //    id = a.inv_Color.FirstOrDefault().ColorId,
                  //    name = a.inv_Color.FirstOrDefault().Color,
                  //}).Distinct(),

                  //size=b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.inv_ItemDetail.Where(d=>d.inv_Size.Count>0 && d.inv_Color.Count<1 && d.inv_ItemLocation.Where(s=>s.Quantity!=null).Sum(s=>s.Quantity)>0).Select(a=>new{
                  //id=a.inv_Size.FirstOrDefault().SizeId,
                  //name=a.inv_Size.FirstOrDefault().Size
                  //}).Distinct(),

                  measureUnits = b.ac_AccountDetail.ac_Account.inv_ItemDetail.inv_Barcode.inv_BarcodeMeasureUnit.Select(m => new { id = m.Quantity, discount = m.DiscountPercentage, name = m.inv_MeasureUnit.UnitType })
              }).AsEnumerable().Select(a => new { a.sizeId, a.colorId })


                });
            }

            catch (Exception ex)
            {
                return Json(new { isdone = false, msg = ex.InnerException.Message });
            }
        }


        public ActionResult GetColorSystem()
        {
            System.Drawing.KnownColor[] colors = (System.Drawing.KnownColor[])System.Enum.GetValues(typeof(System.Drawing.KnownColor));
            return Json(colors
                .Select(a => new
                {
                    id = a.ToString(),
                    name = a.ToString()
                }));
        }

        public ActionResult GetPaternSizeList()
        {
            return Json(db.inv_Size.Where(s => s.ParentSizeId == null && (s.ApplicationId == null || s.aspnet_Applications.ApplicationName == appName))
                .Select(a => new
                {
                    id = a.SizeId,
                    name = a.Size,
                }));
        }


        public ActionResult AddSize(string size, int parentsizeid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canAddColorNSize"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }

            try
            {
                if (!string.IsNullOrEmpty(size))
                {
                    db.inv_Size.AddObject(new inv_Size() { Size = size, ParentSizeId = parentsizeid, ApplicationId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId });
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "ok" });
                }
                return Json(new { isdone = false, msg = "sizeIsEmpty" });
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult EditSize(int sizeid, string size, int parentsizeid)
        {
            var userRoles = utility.GetUserRoles(db, User.Identity.Name, appName);
            if (!userRoles.Contains("canAddColorNSize") && !userRoles.Contains("canDeleteColorNSize"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }

            try
            {
                if (!string.IsNullOrEmpty(size))
                {
                    inv_Size siz = db.inv_Size.Single(s => s.SizeId == sizeid);
                    siz.Size = size;
                    siz.ParentSizeId = parentsizeid;
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "ok" });
                }
                return Json(new { isdone = false, msg = "sizeIsEmpty" });
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult DeleteSize(int sizeid)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canDeleteColorNSize"))
            {
                return Json("notInRole");
            }
            try
            {
                db.inv_Size.DeleteObject(db.inv_Size.Single(c => c.SizeId == sizeid));
                db.SaveChanges();
                return Json("ok");
            }
            catch (Exception ex) { return Json(ex.Message); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult AddParentSize(string size)
        {
            try
            {
                if (!string.IsNullOrEmpty(size))
                {
                    db.inv_Size.AddObject(new inv_Size() { Size = size, ApplicationId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId });
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "ok" });
                }
                else
                    return Json(new { isdone = false, msg = "sizeIsEmpty" });
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult GetListColor()
        {
            return Json(db.inv_Color.Where(s => s.ApplicationId == null || s.aspnet_Applications.ApplicationName == appName)
                .Select(a => new
                {
                    a.ColorId,
                    a.Color,
                    a.ColorTranslate
                }));
        }

        public ActionResult AddColor(string color, string translate)
        {
            if (!utility.isInRole(db, User.Identity.Name, appName, "canAddColorNSize"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }

            try
            {
                if (!string.IsNullOrEmpty(color))
                {
                    db.inv_Color.AddObject(new inv_Color() { Color = color, ColorTranslate = translate, ApplicationId = db.aspnet_Applications.Single(a => a.ApplicationName == appName).ApplicationId });
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "ok" });
                }
                else
                    return Json(new { isdone = false, msg = "colorIsEmpty" });
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult EditColor(int colorid, string color, string translate)
        {
            var userRoles = utility.GetUserRoles(db, User.Identity.Name, appName);
            if (!userRoles.Contains("canAddColorNSize") && !userRoles.Contains("canDeleteColorNSize"))
            {
                return Json(new { isdone = false, msg = "notInRole" });
            }

            try
            {
                if (!string.IsNullOrEmpty(color))
                {
                    inv_Color co = db.inv_Color.Single(c => c.ColorId == colorid);
                    co.Color = color;
                    co.ColorTranslate = translate;
                    db.SaveChanges();
                    return Json(new { isdone = true, msg = "ok" });
                }
                else
                    return Json(new { isdone = false, msg = "colorIsEmpty" });
            }
            catch (Exception ex) { return Json(new { isdone = false, msg = ex.Message }); }
            finally { ((IDisposable)db).Dispose(); }
        }

        public ActionResult GetListSize()
        {
            return Json(db.inv_Size.Where(s => s.ApplicationId == null || s.aspnet_Applications.ApplicationName == appName)
                .Select(a => new
                {
                    a.SizeId,
                    a.Size,
                    ParentSizeId = a.inv_Size2.SizeId == null ? 0 : a.inv_Size2.SizeId,
                    ParentSize = a.inv_Size2.Size
                }).OrderBy(c => c.SizeId));
        }

        #endregion

        //accounting end
    }
}


