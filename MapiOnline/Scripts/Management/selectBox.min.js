(function (a) { a.fn.addOption = function () { var a = function (a, b, c, d) { var e = document.createElement("option"); e.value = b, e.text = c; var f = a.options; var g = f.length; if (!a.cache) { a.cache = {}; for (var h = 0; h < g; h++) { a.cache[f[h].value] = h } } if (typeof a.cache[b] == "undefined") a.cache[b] = g; a.options[a.cache[b]] = e; if (d) { e.selected = true } }; var b = arguments; if (b.length == 0) return this; var c = true; var d = false; var e, f, g; if (typeof b[0] == "object") { d = true; e = b[0] } if (b.length >= 2) { if (typeof b[1] == "boolean") c = b[1]; else if (typeof b[2] == "boolean") c = b[2]; if (!d) { f = b[0]; g = b[1] } } this.each(function () { if (this.nodeName.toLowerCase() != "select") return; if (d) { for (var b in e) { a(this, b, e[b], c) } } else { a(this, f, g, c) } }); return this }; a.fn.ajaxAddOption = function (b, c, d, e, f) { if (typeof b != "string") return this; if (typeof c != "object") c = {}; if (typeof d != "boolean") d = true; this.each(function () { var g = this; a.getJSON(b, c, function (b) { a(g).addOption(b, d); if (typeof e == "function") { if (typeof f == "object") { e.apply(g, f) } else { e.call(g) } } }) }); return this }; a.fn.removeOption = function () { var a = arguments; if (a.length == 0) return this; var b = typeof a[0]; var c, d; if (b == "string" || b == "object" || b == "function") { c = a[0]; if (c.constructor == Array) { var e = c.length; for (var f = 0; f < e; f++) { this.removeOption(c[f], a[1]) } return this } } else if (b == "number") d = a[0]; else return this; this.each(function () { if (this.nodeName.toLowerCase() != "select") return; if (this.cache) this.cache = null; var b = false; var e = this.options; if (!!c) { var f = e.length; for (var g = f - 1; g >= 0; g--) { if (c.constructor == RegExp) { if (e[g].value.match(c)) { b = true } } else if (e[g].value == c) { b = true } if (b && a[1] === true) b = e[g].selected; if (b) { e[g] = null } b = false } } else { if (a[1] === true) { b = e[d].selected } else { b = true } if (b) { this.remove(d) } } }); return this }; a.fn.sortOptions = function (b) { var c = a(this).selectedValues(); var d = typeof b == "undefined" ? true : !!b; this.each(function () { if (this.nodeName.toLowerCase() != "select") return; var a = this.options; var b = a.length; var c = []; for (var e = 0; e < b; e++) { c[e] = { v: a[e].value, t: a[e].text} } c.sort(function (a, b) { o1t = a.t.toLowerCase(), o2t = b.t.toLowerCase(); if (o1t == o2t) return 0; if (d) { return o1t < o2t ? -1 : 1 } else { return o1t > o2t ? -1 : 1 } }); for (var e = 0; e < b; e++) { a[e].text = c[e].t; a[e].value = c[e].v } }).selectOptions(c, true); return this }; a.fn.selectOptions = function (b, c) { var d = b; var e = typeof b; if (e == "object" && d.constructor == Array) { var f = this; a.each(d, function () { f.selectOptions(this, c) }) } var g = c || false; if (e != "string" && e != "function" && e != "object") return this; this.each(function () { if (this.nodeName.toLowerCase() != "select") return this; var a = this.options; var b = a.length; for (var c = 0; c < b; c++) { if (d.constructor == RegExp) { if (a[c].value.match(d)) { a[c].selected = true } else if (g) { a[c].selected = false } } else { if (a[c].value == d) { a[c].selected = true } else if (g) { a[c].selected = false } } } }); return this }; a.fn.copyOptions = function (b, c) { var d = c || "selected"; if (a(b).size() == 0) return this; this.each(function () { if (this.nodeName.toLowerCase() != "select") return this; var c = this.options; var e = c.length; for (var f = 0; f < e; f++) { if (d == "all" || d == "selected" && c[f].selected) { a(b).addOption(c[f].value, c[f].text) } } }); return this }; a.fn.containsOption = function (a, b) { var c = false; var d = a; var e = typeof d; var f = typeof b; if (e != "string" && e != "function" && e != "object") return f == "function" ? this : c; this.each(function () { if (this.nodeName.toLowerCase() != "select") return this; if (c && f != "function") return false; var a = this.options; var e = a.length; for (var g = 0; g < e; g++) { if (d.constructor == RegExp) { if (a[g].value.match(d)) { c = true; if (f == "function") b.call(a[g], g) } } else { if (a[g].value == d) { c = true; if (f == "function") b.call(a[g], g) } } } }); return f == "function" ? this : c }; a.fn.selectedValues = function () { var a = []; this.selectedOptions().each(function () { a[a.length] = this.value }); return a }; a.fn.selectedTexts = function () { var a = []; this.selectedOptions().each(function () { a[a.length] = this.text }); return a }; a.fn.selectedOptions = function () { return this.find("option:selected") } })(jQuery)