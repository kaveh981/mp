function resetApp() { $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", type: "Post", url: getPath("Services/Login.asmx/resetApp"), success: function (e) { }, error: function (e) { alert(e.responseText) } }) } function loginPasswordForgot() { var e = { username: $("#forgot_password_user_name").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(e), type: "Post", url: getPath("Services/Login.asmx/loginPasswordForgot"), success: function (e) { $("#forgot-form").toggle(); $("#signin-form").toggle() }, error: function (e) { alert(e.responseText) } }) } function getHelp() { var e = $("#mainTab").find(".top-nav").find(".ui-tabs-active").find("a").attr("mainTab"); var t = $("[aria-expanded='true']").find("[subTab]").find(".ui-tabs-active").find("a").attr("id"); if (t == undefined && (e == "a_FullAcountReport" || e == "a_Accounting")) t = "store"; else if (t == undefined && (e != "a_FullAcountReport" || e != "a_Accounting")) return alert("زیر منو انتخاب نشده است"); var n = { mainTab: e, subTab: t, lang: $lang.val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(n), type: "Post", url: getPath("Services/Menu.asmx/getHelp"), success: function (e) { if (e.d.canEdit) { $("#dialogHelp").find("#help").html("<textarea class='editor' name='text1'>" + (e.d.isDone ? e.d.result : "") + "</textarea></n><button id='btnSaveHelp'>save</button>"); $(".editor").tinymce({ script_url: "jscripts/tiny_mce/tiny_mce.js", width: "100%", height: "500px", directionality: "rtl", theme: "advanced", verify_html: false, plugins: "pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,wordcount,advlist,autosave", theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,styleselect,formatselect,fontselect,fontsizeselect", theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor", theme_advanced_buttons3: "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen", theme_advanced_buttons4: "insertlayer,moveforward,movebackward,absolute,|,styleprops,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,pagebreak,restoredraft,codehighlighting,netadvimage", theme_advanced_toolbar_location: "top", theme_advanced_toolbar_align: "right", theme_advanced_statusbar_location: "bottom", theme_advanced_resizing: false, save_onsavecallback: function () { AddHelp() }, content_css: "../../Scripts/tinymce/css/content.css", convert_urls: false }); $("#btnSaveHelp").button().unbind("click").bind("click", function () { AddHelp() }) } else { $("#dialogHelp").html(e.d.isDone ? "<div style='padding-left:5em;'>" + e.d.result + "</div>" : "") } $("#dialogHelp").dialog({ width: 800, height: 500 }).dialog("open") }, error: function (e) { alert(e.responseText) } }) } function AddHelp() { var e = $("#mainTab").find(".top-nav").find(".ui-tabs-active").find("a").attr("mainTab"); var t = $("div:not([class='invisible'])").find("[subTab]").find("[tabIndex='0']").find("a:visible:first").attr("id"); if (t == undefined && (e == "a_FullAcountReport" || e == "a_Accounting")) t = "store"; var n = { mainTab: e, subTab: t, help: $("[name='text1']").val(), lang: $lang.val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(n), type: "Post", url: getPath("Services/Menu.asmx/addHelp"), success: function (e) { translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function masterLocalize() { $.each($("[mllk]"), function () { var e = $(this); if (e.find(".ui-button-text").length > 0) e.find(".ui-button-text").text(langs[e.attr("mllk")][$("#ddl_m_Language").val()]); else { if (langs[e.attr("mllk")] != undefined) e.text(langs[e.attr("mllk")][$("#ddl_m_Language").val()]) } }) } function localize() { var e = $("[aria-expanded='true']:visible").first(); $lang = $("#ddl_m_Language"); if ($lang.val() == "pr") { $("[dir=ltr]").prop("dir", "rtl"); $("#divDashboardChart,#Div_SaleChart").prop("dir", "ltr"); document.getElementById("leftStyle").disabled = true; dir = "rtl"; $.each(e.find(".dateLong"), function () { var e = $(this); e.html(ToPersianDateLong(e.attr("date"))) }); $.each(e.find(".date"), function () { var e = $(this); e.html(ToPersianDate(e.attr("date"))) }); $.each(e.find(".dateString"), function () { var e = $(this); e.html(ToShortPersianDate(e.attr("date"))) }) } else { $("[dir=rtl]").prop("dir", "ltr"); $.each(e.find(".date"), function () { var e = $(this); var t = /-?\d+/; var n = t.exec(e.attr("date")); var r = new Date(parseInt(n[0])); e.html(r.toDateString()) }); $.each(e.find(".dateLong"), function () { var e = $(this); var t = /-?\d+/; var n = t.exec(e.attr("date")); var r = new Date(parseInt(n[0])); e.html(r.toLocaleString()) }); $.each(e.find(".dateString"), function () { var e = $(this); e.html(e.attr("date")) }); dir = "ltr"; document.getElementById("leftStyle").removeAttribute("disabled"); document.getElementById("leftStyle").disabled = false } e.find("[placeholder]").each(function () { var e = $(this); var t = $.trim(e.attr("placeholder")); if (e.attr("pml") == undefined) e.attr("pml", t); if (langs[e.attr("pml")] != undefined) e.attr("placeholder", langs[e.attr("pml")][$("#ddl_m_Language").val()]) }); $(".ui-dialog").find("[placeholder]").each(function () { var e = $(this); var t = $.trim(e.attr("placeholder")); if (e.attr("pml") == undefined) e.attr("pml", t); if (langs[e.attr("pml")] != undefined) e.attr("placeholder", langs[e.attr("pml")][$("#ddl_m_Language").val()]) }); $.each(e.find("td span,span:not(:has(*)),a:not(:has(*)),label,option,h4:not(:has(*)),thead td:not(:has(*))"), function () { var e = $(this); e.each(function () { var e = $(this); var t = e.html().split(" "); var n = ""; $.each(t, function () { var t = $.trim(this); if (textin != "" && t != "unit") { n += langs[t] == undefined ? t : e.html(e.html().replace(t, "<span mll='" + t + "' ></span>")) } }) }) }); $.each(e.find("[mll]"), function () { var e = $(this); if (e.find(".ui-button-text").length > 0) e.find(".ui-button-text").text(langs[e.attr("mll")][$("#ddl_m_Language").val()]); else { if (langs[e.attr("mll")] != undefined) e.text(langs[e.attr("mll")][$("#ddl_m_Language").val()]) } }); $.each($(".ui-dialog").find("span:not(:has(*)),a:not(:has(*)),label,option,h4:not(:has(*)),thead td:not(:has(*))"), function () { var e = $(this); e.each(function () { var e = $(this); var t = e.html().split(" "); var n = ""; $.each(t, function () { var t = $.trim(this); if (textin != "" && t != "unit") { n += langs[t] == undefined ? t : e.html(e.html().replace(t, "<span mll='" + t + "' ></span>")) } }) }) }); $.each($(".ui-dialog").find("[mll]"), function () { var e = $(this); if (e.find(".ui-button-text").length > 0) e.find(".ui-button-text").text(langs[e.attr("mll")][$("#ddl_m_Language").val()]); else { if (langs[e.attr("mll")] != undefined) e.text(langs[e.attr("mll")][$("#ddl_m_Language").val()]) } }) } function translate(e) { alert(langs[e] == undefined ? e : langs[e][$("#ddl_m_Language").val()]) } function getPageOptions(e) { if (e.container != "") var t = $("#" + e.container + e.pagingContainer); else var t = $("#" + e.pagingContainer); var n = { callback: e.callBackName }; t.find("input:text").each(function () { n[this.name] = this.className.match(/numeric/) ? parseInt(this.value) : this.value }); n.prev_show_always = false; n.next_show_always = false; if (e.count < t.find("#PageSize").val()) t.find("#PageSize").css("display", "none"); else { t.find("#PageSize").css("display", "inline") } n.items_per_page = t.find("#PageSize").val(); n.prev_text = "<<-قبلی"; n.next_text = "بعدی->>"; n.container = e; return n } function isAuthenticated(e) { if (e.d != null && e.d.isExpired) { $("#loginBox").dialog({ modal: true, autoOpen: false, buttons: { "ورود": function () { userLogin("loginBox") } } }).dialog("open"); return false } return true } function pageselectCallback(e, t, n) { var r = $("#" + n.pagingContainer); if (n.first) { n["params"] = t } if (n.noPaging == undefined) { if (n.container != "") var i = $("#" + n.container + n.pagingContainer); else var i = r; if (e > 0) { n.first = false } else if (n.first) { n["params"] = t; if (i.find("#PageSize").val() != undefined) i.find("#PageSize").off().on("change", function () { n.params.callbackmethod(n.pagingContainer, t) }); else r.find("#PageSize").off().on("change", function () { n.params.callbackmethod(n.pagingContainer, t) }) } var s = n.params.DTO; if (i.find("#PageSize").val() != undefined) var o = i.find("#PageSize").val(); else var o = r.find("#PageSize").val(); var u = ""; var a = o; var f = e == 0 ? 0 : e * a; s["skip"] = f; s["take"] = a; s["currentPage"] = e; s["first"] = n.first } if (n.params.selectCase != undefined) { s["selectData"] = n.params.selectCase } if (n.params.print != undefined) { if (n.params.print) s["selectData"] = "PrintItemList" } $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(n.params.DTO), type: "Post", url: getPath("Services/" + n.params.servicename + ".asmx/" + n.params.methodname), success: function (t) { if (!isAuthenticated(t)) return; if (n.params.print) { n.params.build(t, n); return } if (t.d.count == 1 && n.isOrder == true && n.container != "") { n.fname(null, n.pagingContainer, t.d.results[0].Barcode, n.isChangeQuantity) } else { if (e < 1 && n.first && !n.noPaging) { var r = getPageOptions({ params: n.params, count: t.d.count, container: n.container, fname: n.fname, pagingContainer: n.pagingContainer, callBackName: pageselectCallback }); i.find("#paging").pagination(t.d.count, r); n.params.build(t, n); if (n.container != "") i.dialog({ width: 650 }).dialog("open") } else n.params.build(t, n); newSort(n.params.callbackmethod, n.pagingContainer, n.params) } }, error: function (e) { translate(e.responseText) } }) } function newSort(e, t, n) { if (t != undefined && n.container != "dialog") $con = $("#" + t); if (n.container != undefined && n.container == "dialog") $con = $("#" + n.container + t); $con.find("a[rel=sort]").off("click").on("click", function () { $con.find("a[rel=sort]").removeClass("sorted"); $(this).addClass("sorted"); if (this.id == sortid.split(" ")[0].toString()) { if (sortid.split(" ")[1] == "DESC") sortid = this.id + " ASC"; else sortid = this.id + " DESC" } else { sortid = this.id + " DESC" } e(t, n) }) } function Sort(e, t, n) { if (t.container == undefined) $con = $("#" + t); else if (t.container != undefined && t.pagingContainer != undefined) $con = $("#" + t.container + t.pagingContainer); else $con = $("#" + t.container); $con.find("a[rel=sort]").off("click").on("click", function () { $con.find("a[rel=sort]").removeClass("sorted"); $(this).addClass("sorted"); if (this.id == sortid.split(" ")[0].toString()) { if (sortid.split(" ")[1] == "DESC") sortid = this.id + " ASC"; else sortid = this.id + " DESC" } else { sortid = this.id + " DESC" } e(t, n) }) } function getfocusOnEnter(e) { if (event.keyCode == 13) document.getElementById(e).focus() } function bindItemsForSelectCombo(options, data) { var $select = $("#" + options.container).find("#" + options.id); var async = true; if (options.async != undefined) async = options.async; ajDropDown = $.ajax({ type: "POST", url: getPath("Services/" + options.servicename + ".asmx/" + options.methodname), contentType: "application/json; charset=utf-8", data: data, async: async, success: function (response) { if (!isAuthenticated(response)) return; if (response.d != null && response.d.isdone == false) { return } var Details = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; bindComboData(options, Details) } }) } function bindComboData(e, t) { var n = $("#" + e.container).find("#" + e.id); var r = true; if (e.async != undefined) r = e.async; if (t != null) { if (t.length > 0) n.prop("disabled", ""); else return; if (e.headertext != undefined) n.removeOption(/./).addOption("", e.headertext); for (var i = 0; i < t.length; i++) { var s = t[0, i]; if (e.setcolor) n.append("<option style='background-color:" + s.name + ";' value=" + s.id + " >" + s.name + "</option>"); else { if (e.isMeasureUnit) { n.append("<option  value=" + s.id + "_" + s.discount + " >" + s.name + "_" + s.id + "</option>") } else n.append("<option  value=" + s.id + " >" + s.name + "</option>") } } } if (e.selectedvalue != undefined) n.val(e.selectedvalue); if (e.selectedindex != undefined) n.val(n.find("option")[e.selectedindex].value) } function getRadioSelectedValue(e, t) { var n = $("#" + t); if (t != undefined) return n.find("input:radio[name=" + e + "]:checked").length > 0 ? n.find("input[name=" + e + "]:checked").val() : 0; else return $("input:radio[name=" + e + "]:checked").length > 0 ? $("input[name=" + e + "]:checked").val() : 0 } function setRadioValue(e, t, n) { if (t == null) t = 0; if (n != undefined) $("#" + n).find("#" + e).find("input:radio[name='" + e + "'][value='" + t.toString() + "']").prop("checked", "checked").trigger("click"); else $("#" + e).find("input:radio[name='" + e + "'][value='" + t.toString() + "']").prop("checked", "checked").trigger("click") } function userLogin(e) { var t = $("#" + e); var n = { userName: t.find("#username").val(), password: t.find("#password").val() }; $.ajax({ type: "POST", url: getPath("Services/Login.asmx/UserLogin"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (n) { if (n.d.logged && e == "loginBox") { $(".fixed_elem").css("background-color", "#E4FFCC"); if ($("#loginBox").dialog().dialog("isOpen")) $("#loginBox").dialog("close"); if ($("#empCode").val() != n.d.code) { $("#signin-form").hide(); $("#userDefault").removeClass("hidden"); $("#lbl_d_UserName").html(n.d.name + " " + n.d.family); var r = $("#userDefault").find("#ddl_s_Branch"); document.title = n.d.name + " " + n.d.family; if (!n.d.isAdmin) { bindItemsForSelectCombo({ servicename: "Shop", methodname: "getShopNameByUser", headertext: "انتخاب شعبه", id: "ddl_s_Branch", container: "userDefault", selectedindex: 1, async: false }); r.change(function () { if ($(this).val() != "") bindItemsForSelectCombo({ servicename: "Counter", methodname: "getCounterNameByUser", headertext: "انتخاب صندوق", id: "ddl_m_Counter", container: "userDefault" }, "{ arg:'" + r.val() + "'}") }); bindItemsForSelectCombo({ servicename: "Counter", methodname: "getCounterNameByUser", headertext: "انتخاب صندوق", id: "ddl_m_Counter", container: "userDefault", selectedindex: 1 }, "{ arg:'" + r.val() + "'}"); bindItemsForSelectCombo({ servicename: "Currency", methodname: "getCurrencyName", headertext: "انتخاب ارز", id: "ddl_m_Currency", container: "userDefault", selectedindex: 1 }); t.find("#username").val(""); t.find("#password").val("") } location.reload(true) } return } if (n.d.logged) { $(".fixed_elem").css("background-color", "#E4FFCC"); $("#container").html(""); $("body").remove("#container"); $("#signin-form,#heading").hide(); $("#signin").css("background", "none"); $("#userDefault").removeClass("hidden"); $("#empCode").val(n.d.code); $("#lbl_d_UserName").html(n.d.name + " " + n.d.family); var r = $("#userDefault").find("#ddl_s_Branch"); document.title = n.d.name + " " + n.d.family; if (!n.d.isAdmin) { bindItemsForSelectCombo({ servicename: "Shop", methodname: "getShopNameByUser", headertext: "انتخاب شعبه", id: "ddl_s_Branch", container: "userDefault", selectedindex: 1, async: false }); r.change(function () { if ($(this).val() != "") bindItemsForSelectCombo({ servicename: "Counter", methodname: "getCounterNameByUser", headertext: "انتخاب صندوق", id: "ddl_m_Counter", container: "userDefault" }, "{ arg:'" + r.val() + "'}") }); bindItemsForSelectCombo({ servicename: "Counter", methodname: "getCounterNameByUser", headertext: "انتخاب صندوق", id: "ddl_m_Counter", container: "userDefault", selectedindex: 1 }, "{ arg:'" + r.val() + "'}"); bindItemsForSelectCombo({ servicename: "Currency", methodname: "getCurrencyName", headertext: "انتخاب ارز", id: "ddl_m_Currency", container: "userDefault", selectedindex: 1 }) } GetMenuItems(); GetSubMenuItems(); SetHeight(); jQuery.fn.center = function () { this.css("top", 24 + "px"); this.animate({ left: ($(window).width() - this.outerWidth()) / 2 + $(window).scrollLeft() + "px" }, 100); return this }; $("#userDefault").find("#an_m_SignOut").off("click").on("click", function (t) { userSignOut(e) }) } else { if (n.d.isSignout) return; alert(n.d.errorMessage) } } }) } function userSignOut(e) { var t = $("#" + e); $.ajax({ type: "POST", url: getPath("Services/Login.asmx/UserSignOut"), contentType: "application/json; charset=utf-8", success: function (e) { $("#signin-form").show(); $("#userDefault").addClass("hidden"); $("#lbl_d_UserName").html(""); $("#lbl_d_UserName").html(""); t.find("#password").val(""); $("#mainTab").tabs("destroy").html(""); $("#rightMenuAccordion").html(""); location.reload(true) }, error: function (e) { alert(e.responseText) } }) } function tableStyle() { $(".tablescroll").addClass("red"); $("tbody tr").addClass("ui-state-default"); $("tbody tr").mouseover(function () { $(this).addClass("ui-state-hover") }); $("tbody tr").mouseout(function () { $(this).removeClass("ui-state-hover") }) } function SetHeight() { $(".mainbody").css("min-height", $(window).height() - 50) } function replaceNull() { $("table").find('td:contains("null")').each(function () { var e = $(this); e.html(e.html().replace("null", "-")) }) } function getPath(e) { var t; t = top.location.host + "/" + e; var n = top.location.protocol + "//" + t; return n } function getParameterByName(e) { e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"); var t = "[\\?&]" + e + "=([^&#]*)"; var n = new RegExp(t); var r = n.exec(window.location.href); if (r == null) return ""; else return decodeURIComponent(r[1].replace(/\+/g, " ")) } function windowResize() { clearTimeout(resizeTimer); resizeTimer = setTimeout(setModalInfoHeight, 600) } function sliderClick(e) { var t = $("#pdToggleImage").attr("src") == "App_Themes/Default/Images/shevron_expand.gif" ? "App_Themes/Default/Images/shevron_collapse.gif" : "App_Themes/Default/Images/shevron_expand.gif"; $("#pdToggleImage").attr("src", t); $("#" + e).slideToggle("fast") } function ChangeNameOfComboBox(e, t, n) { var r = $("#" + e); if (n != undefined) r = $("#" + n).find("#" + e); r.find("input[name='" + t + "']").each(function () { this.name = e }) } function onRowClick(e) { $('tr[id*="tr"]').removeClass("rowOnClick"); e.addClass("rowOnClick") } function getCurrentProfile() { $.ajax({ type: "POST", url: getPath("Services/MemberShip.asmx/getprofileForRole"), contentType: "application/json; charset=utf-8", success: function (response) { profile = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d }, error: function (e) { } }) } function getProfileForRole(e) { if (profile != null) { $.each(profile, function () { if (this.roleName == e) currentprofile = this }) } } function ChangeRadioName(e, t) { $("#" + t).find("#" + e).prop("id", e + t); e = e + t; $("#" + t).find("#" + e).find("input").each(function () { if (this.name != undefined) this.name = this.name + t; if (this.id != undefined) this.id = this.id + t }); $("#" + t).find("#" + e).find("label").each(function () { if ($(this).prop("for") != undefined) $(this).prop("for", $(this).prop("for") + t) }); $("#" + t).find("#" + e).buttonset({ disabled: true }) } function ChangeCheckBoxGroupName(e, t) { $("#" + t).find("#" + e).prop("id", e + t); e = e + t; $("#" + t).find("#" + e).find("input").each(function () { if (this.id != undefined) this.id = this.id + t; if (this.name != undefined) this.name = this.name + t }); $("#" + t).find("#" + e).find("label").each(function () { if ($(this).prop("for") != undefined) $(this).prop("for", $(this).prop("for") + t) }); $("#" + t).find("#" + e).buttonset() } function ChangeCheckBoxName(e, t) { $("#" + t).find("#" + e).prop("id", e + t).next("label").prop("for", e + t); $("#" + t).find("#" + e + t).button() } function setvalid(e) { $("[name='" + e + "']").off(); $("[name='" + e + "']").on({ focusout: function () { myFocusOut($(this)) }, click: function () { myClick($(this)) } }) } function validateAll(e) { var t = 0; e.find('[class*="validate"]').each(function () { if (myFocusOut($(this)) == false) t += 1 }); return t > 0 ? false : true } function selectRadioButton(e) { $("[name=" + e.attr("name") + "]").each(function () { var e = $("#" + this.id); if (e.is(":checked")) { e.parent().parent().removeClass().addClass("radioOn") } else { e.parent().parent().removeClass().addClass("radioOff") } }) } function selectCheckBoxShippingAddress(e) { var t = e.parent(); var n = e.children(); if (n.is(":checkbox")) { if (n.is(":checked")) { e.removeClass(); e.addClass("labelCheck checked") } else { e.removeClass(); e.addClass("labelCheck unchecked") } } } function selectBoxCheck(e) { var t = e.parent(); if (e.is(":checkbox")) { if (e.is(":checked")) { t.removeClass(); t.addClass("labelCheck checked") } else { t.removeClass(); t.addClass("labelCheck unchecked") } } else { $("[name=" + e.attr("name") + "]").each(function () { var e = $(this); if (e.is(":checked")) { e.parent().removeClass().addClass("labelRadio radioOn") } else { e.parent().removeClass().addClass("labelRadio radioOff") } }) } } function myFocusOut(e) { if (!e.hasClass("required") && !e.hasClass("validate")) return; var t = e.parent(); e.removeClass("ui-state-error"); e.next("#val" + e.attr("id")).remove(); e.after("<span id='val" + e.attr("id") + "'></span>"); var n = e.attr("name"); t.find(".inputTip.tipHelp." + n).css({ display: "none", visibility: "hidden", opacity: "0" }); var r = "  <span style='display:inline' class='inputTip tipWarn String'><span class='tips ui-icon ui-icon-notice'></span>" + "<span class='advice required' style='display: inline;' >" + langs[e.attr("req") == undefined ? "requiredField" : e.attr("req")][$("#ddl_m_Language").val()] + "</span></span>"; var i = " <span style='display:inline' class='inputTip tipWarn String'><span class='tips ui-icon ui-icon-notice'></span>" + "<span class='advice validate' style='display: inline;'>" + langs[e.attr("req") == undefined ? "notValid" : e.attr("req")][$("#ddl_m_Language").val()] + "</span></span>"; var s = "<span class=' tipOk Digit'><span class='tips ui-icon ui-icon-check'></span></span>"; if (e.attr("name") == "comboDiv") { if (!checkValidation(e.attr("name"))) e.next("#val" + e.attr("id")).html(r); else e.next("#val" + e.attr("id")).html(s) } else if (e.hasClass("required") && e.val() == "") { e.addClass("ui-state-error"); e.next("#val" + e.attr("id")).html(r); return false } else if (!e.hasClass("required") && e.val() == "") { e.removeClass("ui-state-error"); e.next("#val" + e.attr("id")).html(s); return true } else if (checkValidation(e.attr("name"), e)) { e.removeClass("ui-state-error"); e.next("#val" + e.attr("id")).html(s); return true } else { e.addClass("ui-state-error"); e.next("#val" + e.attr("id")).html(i); return false } } function myClick(e) { e.next("#val" + e.attr("id")).remove(); e.parent().find(".inputTip.tipHelp." + e.attr("name")).css({ display: "inline", visibility: "visible", opacity: "1" }) } function checkValidation(e, t) { var n = t.val(); switch (e) { case "email": return (new RegExp("^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$")).test(n); break; case "ComboDiv": if (t.hasClass("required")) { if (t.nextAll(".resultBar").html() == "") return false; else return true } else return true; break; case "fileInput": return (new RegExp(/^[a-zA-Z0-9-اآبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیءّئءأإؤي\s _.:\\]+$/)).test(n); break; case "Combo": if (n == "" || n == "-") return false; else return true; break; case "ComboBool": if (n == "false" || n == "true") return true; else return false; break; case "LongString": return (new RegExp(/^[a-zA-Z0-9-اآبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیءّئءأإؤي\s _]+$/)).test(n); break; case "String": return (new RegExp(/^([a-zA-Zاآبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیءّئءأإؤي]+[\s ]?[a-zA-Zاآبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیءّئءأإؤي]*)$/)).test(n); break; case "Digit": return (new RegExp(/[1-9](?:\d{0,2})(?:,\d{3})*(?:\.\d*[1-9])?|0?\.\d*[1-9]|0/)).test(n); break; case "Date": return true; break; case "Mobile": return (new RegExp(/^((091)[0-9]\d{7}$)|^((093)[0-9]\d{7}$)/)).test(n); break; case "Phone": return (new RegExp(/^((0)[1-9]\d{9}$)/)).test(n); break; case "Email": return (new RegExp(/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/)).test(n); break; case "password": case "newPassword": case "ctrlPassword": return $.trim(n).length >= 1 ? true : false; break; case "passwordConfirm": return n == t.parents("ul").find("[name=password]").val() && n != "" ? true : false; break; case "emailConfirm": return n == $("#newEmail").val() && n != "" ? true : false; break; default: return "" } } function chkPhone(e, t) { var n = new RegExp("^[0-9]{11}$"); if (n.test(e)) { document.getElementById("er0" + t).style.visibility = "hidden"; document.getElementById("ok0" + t).style.visibility = "visible" } else { document.getElementById("ok0" + t).style.visibility = "hidden"; document.getElementById("er0" + t).style.visibility = "visible" } } function chkMail(e) { var t = new RegExp("^[0-9a-zA-Z]+@[0-9a-zA-Z]+[.]{1}[0-9a-zA-Z]+[.]?[0-9a-zA-Z]+$"); var n = t.test(e); if (n) { document.getElementById("er01").style.visibility = "hidden"; document.getElementById("ok01").style.visibility = "visible" } else { document.getElementById("ok01").style.visibility = "hidden"; document.getElementById("er01").style.visibility = "visible" } return n } function chkPass(e, t) { if (t == "1") { pass1 = e; if (e != "") { document.getElementById("er02").style.visibility = "hidden"; document.getElementById("ok02").style.visibility = "visible" } else if (e == "") { document.getElementById("ok02").style.visibility = "hidden"; document.getElementById("er02").style.visibility = "visible" } } else if (t == "2") { if (e == pass1 && pass1 != "") { document.getElementById("er03").style.visibility = "hidden"; document.getElementById("ok03").style.visibility = "visible" } else { document.getElementById("ok03").style.visibility = "hidden"; document.getElementById("er03").style.visibility = "visible" } } } function chkLen(e, t) { if (e != "") { document.getElementById("er" + t).style.visibility = "hidden"; document.getElementById("ok" + t).style.visibility = "visible" } else if (e == "") { document.getElementById("ok" + t).style.visibility = "hidden"; document.getElementById("er" + t).style.visibility = "visible" } } function tip(e, t) { if (e == "show") { document.getElementById("tip" + t).style.visibility = "visible" } else if (e == "hide") { document.getElementById("tip" + t).style.visibility = "hidden" } } function loadAccountDetails(e, t, n) { AccountDetails(e, t) } function AccountDetails(e, t) { var n = $("#" + t); n.find("#clearSale").html("خرید خالص"); n.find("#clearAmount").html("مبلغ برداشتی خالص"); n.find("#countSale").html("تعداد خرید"); n.find("#sumSale").html("جمع خرید"); n.find("#btnNewVoucher").button().unbind("click").click(function () { AddVoucher(e, t) }); DTO = { shopid: $("#userDefault").find("#ddl_s_Branch").val(), Scoup: "", clientid: e, employeeid: "", dateFrom: "", dateTo: "", isSale: "", clientCode: "" }; $.ajax({ type: "POST", url: getPath("Services/AccountDetails.asmx/GetAccountDetailsShop"), contentType: "application/json; charset=utf-8", data: JSON.stringify(DTO), success: function (e) { if (!isAuthenticated(e)) return; n.find("#txt_d_Sale").val(e.d.BuyAmount * 1 - e.d.SellAmount * 1); n.find("#txt_d_PaymentSale").val(e.d.ReceivedCash * 1 + e.d.ReceivedCheque * 1 + e.d.ReceivedVoucher * 1 - (e.d.PaidCash * 1 + e.d.PaidCheque * 1 + e.d.paidVoucher * 1)); n.find("#txt_d_BalanceTotal").val(e.d.BuyAmount * 1 - e.d.SellAmount * 1 - (e.d.ReceivedCash * 1 + e.d.ReceivedCheque * 1 + e.d.ReceivedVoucher * 1 - (e.d.PaidCash * 1 + e.d.PaidCheque * 1 + e.d.paidVoucher * 1))); n.find("#txt_d_SaleTotal").val(e.d.BuyAmount); n.find("#txt_d_Return").val(e.d.SellAmount); n.find("#txt_d_TotalPayment").val(e.d.PaidCash * 1 + e.d.PaidCheque * 1 + e.d.paidVoucher * 1); n.find("#txt_d_TotalReceive").val(e.d.ReceivedCash * 1 + e.d.ReceivedCheque * 1 + e.d.ReceivedVoucher * 1); n.find("#txt_d_ChequePeyment").val(e.d.PaidCheque); n.find("#txt_d_ChequeReceive").val(e.d.ReceivedCheque); n.find("#txt_d_CashPayment").val(e.d.PaidCash); n.find("#txt_d_CashReceive").val(e.d.ReceivedCash); n.find("#txt_d_TotalOff").val(e.d.OffSale * 1 - e.d.BuyAmount * 1); n.find("#txt_d_BuyQuantity").val(e.d.BuyQuantity); n.find("#txt_d_SellQuantity").val(e.d.SellQuantity); n.find("#txt_d_NetQuantity").val(e.d.BuyQuantity * 1 - e.d.SellQuantity * 1) }, error: function (e) { alert(e.responseText) } }) } function loadAccountDetailsSupplier(e, t, n) { AccountDetailsSupplier(e, t) } function AccountDetailsSupplier(e, t) { var n = $("#" + t); DTO = { shopid: $("#userDefault").find("#ddl_s_Branch").val(), Scoup: "", clientid: e, employeeid: "", dateFrom: "", dateTo: "", isSale: "", clientCode: "" }; $.ajax({ type: "POST", url: getPath("Services/AccountDetails.asmx/GetAccountDetailsShop"), contentType: "application/json; charset=utf-8", data: JSON.stringify(DTO), success: function (e) { if (!isAuthenticated(e)) return; n.find("#txt_d_Sale").val(e.d.SellAmount * 1 - e.d.BuyAmount * 1); n.find("#txt_d_PaymentSale").val(e.d.PaidCash * 1 + e.d.PaidCheque * 1 + e.d.paidVoucher * 1 - (e.d.ReceivedCash * 1 + e.d.ReceivedCheque * 1 + e.d.ReceivedVoucher * 1)); n.find("#txt_d_BalanceTotal").val(e.d.SellAmount * 1 - e.d.BuyAmount * 1 - (e.d.PaidCash * 1 + e.d.PaidCheque * 1 + e.d.paidVoucher * 1 - (e.d.ReceivedCash * 1 + e.d.ReceivedCheque * 1 + e.d.ReceivedVoucher * 1))); n.find("#txt_d_SaleTotal").val(e.d.SellAmount); n.find("#txt_d_Return").val(e.d.BuyAmount); n.find("#txt_d_TotalPayment").val(e.d.PaidCash * 1 + e.d.PaidCheque * 1 + e.d.paidVoucher * 1); n.find("#txt_d_TotalReceive").val(e.d.ReceivedCash * 1 + e.d.ReceivedCheque * 1 + e.d.ReceivedVoucher * 1); n.find("#txt_d_ChequePeyment").val(e.d.PaidCheque); n.find("#txt_d_ChequeReceive").val(e.d.ReceivedCheque); n.find("#txt_d_CashPayment").val(e.d.PaidCash); n.find("#txt_d_CashReceive").val(e.d.ReceivedCash); n.find("#txt_d_TotalOff").val(e.d.OffBuy * 1 - e.d.SellAmount * 1); n.find("#txt_d_profit").val(e.d.profit); n.find("#txt_d_BuyQuantity").val(e.d.BuyQuantity); n.find("#txt_d_SellQuantity").val(e.d.SellQuantity); n.find("#txt_d_NetQuantity").val(e.d.BuyQuantity * 1 - e.d.SellQuantity * 1) }, error: function (e) { alert(e.responseText) } }) } function loadSupplierInvoiceList(e, t, n) { var r = $("#" + t); if (n) { r.find("#blCode").remove(); r.find("#hd_d_PersonId").val(e); r.find("#hd_d_IsClient").val(false); AccountFullAcc(t, n, { print: false, selectCase: "GetItemList", onLoad: true }) } } function loadCustomerInvoiceList(e, t, n) { var r = $("#" + t); if (n) { r.find("#blCode").remove(); r.find("#hd_d_PersonId").val(e); r.find("#hd_d_IsClient").val(true); AccountFullAcc(t, n, { print: false, selectCase: "GetItemList", onLoad: true }) } } function loadCustomerAccounting(e, t) { var n = $("#" + e); if (t) { n.find("#hd_d_IsClient").val(true); aComplete({ methodname: "GetCompletionListByCustomerName", servicename: "AtuoComplete", id: "txt_customer", container: e, minlength: 2, autofocus: false, limit: 20, boxId: "txt_customer", fname: customerOnSelect }); AccountFullAcc(e, t, { print: false, selectCase: "GetItemList" }) } } function loadSupplierAccounting(e, t) { var n = $("#" + e); if (t) { n.find("#hd_d_IsClient").val(false); n.find("#lblClient").html("supplier"); aComplete({ methodname: "GetCompletionListBySupplierName", servicename: "AtuoComplete", id: "txt_customer", container: e, minlength: 2, autofocus: false, limit: 20, boxId: "txt_customer", fname: customerOnSelect }); AccountFullAcc(e, t, { print: false, selectCase: "GetItemList" }) } } function loadCustomerOrderProfit(e, t) { var n = $("#" + e); if (t) { n.find("#hd_d_IsClient").val(true); aComplete({ methodname: "GetCompletionListByCustomerName", servicename: "AtuoComplete", id: "txt_customer", container: e, minlength: 2, autofocus: false, limit: 20, boxId: "txt_customer", fname: customerOnSelect }); AccountFullAcc(e, t, { print: false, selectCase: "GetProfitList" }) } } function getInvoiceList(e) { var t = $("#" + e); var n = true; var r = t.find("#PageSize").val(); var i = 0; var s = 0; var o = "", u = "", a = "", f = "", l = "", c = "", h = "", p = "", d = "", v = "", m = "", g = "", y = "", b = "", w = ""; var E = t.find("#ddl_d_SearchBy1").val(); if (t.find("#moreFilter").is(":visible")) { if (E != "") { if (E == "Code") { u = t.find("#txtSearch1").val() } if (E == "Name") { o = t.find("#txtSearch1").val() } if (E == "EmployeeId") { a = t.find("#txtSearch1").val() } if (E == "EmployeeName") { f = t.find("#txtSearch1").val() } if (E == "Shop") { l = t.find("#txtSearch1").val() } } if (t.find("#txt_s_PriceFrom").length > 0) v = t.find("#txt_s_PriceFrom").val(); if (t.find("#txt_s_PriceTo").length > 0) m = t.find("#txt_s_PriceTo").val(); if (t.find("#Checkbox1" + e).prop("checked") && t.find("#Checkbox2" + e).prop("checked")) y = ""; else if (!t.find("#Checkbox1" + e).prop("checked") && t.find("#Checkbox2" + e).prop("checked")) y = false; else if (t.find("#Checkbox1" + e).prop("checked") && !t.find("#Checkbox2" + e).prop("checked")) y = true; if (t.find("#Checkbox3" + e).length > 0) b = t.find("#Checkbox3" + e).prop("checked"); if (t.find("#Checkbox4" + e).length > 0) w = t.find("#Checkbox4" + e).prop("checked") } var E = t.find("#ddl_d_SearchBy2").val(); if (E != "") { if (E == "InvoiceId") { c = t.find("#txtSearch2").val() } if (E == "ProductId") { h = t.find("#txtSearch2").val() } if (E == "ProductName") { p = t.find("#txtSearch2").val() } if (E == "Barcode") { d = t.find("#txtSearch2").val() } } g = getHierarchySelectedValue("hr_s_Category", e); var S = { skip: i, take: r, currentPage: s, first: n, sort: sortid, supplierid: t.find("#hd_d_PersonId").val(), IsClient: t.find("#hd_d_IsClient").val(), SupplierName: o, code: u, EmployeeId: a, EmployeeName: f, Shop: l, InvoiceId: c, ProductId: h, ProductName: p, InvoiceDateStart: t.find("#txt_s_InvoiceDateStart").length > 0 ? t.find("#txt_s_InvoiceDateStart").val() : "", Barcode: d, InvoiceDateEnd: t.find("#txt_s_InvoiceDateEnd").length > 0 ? t.find("#txt_s_InvoiceDateEnd").val() : "", PriceFrom: v, PriceTo: m, Order: y, PreOrder: b, Broken: w, CategoryId: g, shopid: $("#userDefault").find("#ddl_s_Branch").val(), counterid: $("#userDefault").find("#ddl_m_Counter").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(S), type: "Post", url: getPath("Services/Invoice.asmx/GetInvoiceList"), success: function (r) { if (!isAuthenticated(r)) return; var i = InvoicegetOptionsFrom(r.d.count, e); t.find("#paging").pagination(r.d.count, i); InvoicepageselectCallback(0, r, e, n) }, error: function (e) { alert(e.responseText) } }) } function InvoicegetOptionsFrom(e, t) { var n = $("#" + t); var r = { callback: InvoicepageselectCallback }; n.find("input:text").each(function () { r[this.name] = this.className.match(/numeric/) ? parseInt(this.value) : this.value }); r.prev_show_always = false; r.next_show_always = false; if (e < n.find("#PageSize").val()) n.find("#PageSize").css("display", "none"); else { n.find("#PageSize").css("display", "inline") } r.items_per_page = n.find("#PageSize").val(); r.prev_text = "قبلی"; r.next_text = "بعدی"; r.container = t; return r } function buildInvoiceList(jq, container) { var $con = $("#" + container); jq = jq.d.results; var condialog = "dialog" + container; var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var str = ""; if ($con.find("#hd_d_iscustomer").val() == "false") { str = val.Sell == false ? "خرید" : "مرجوعی" } else { str = val.Sell == true ? "فروش" : "مرجوعی" } ItemList += "<tr id='tr" + val.OrderHeaderId + "'>" + "<td width='14%' id='td" + val.OrderHeaderId + "' name='InvoiceNO' >" + val.InvoiceNO + "</td>" + "<td width='10%' name='Date' >" + val.Date + "</td>" + "<td width='10%' name='Shop' id='" + val.ShopId + "'>" + val.ShopName + "</td> " + "<td width='12%' name='Employee' id='" + val.EmployeeId + "'>" + val.EmployeeName + " " + val.EmployeeFamily + "</td> " + "<td width='12%' name='Clinet' id='" + val.Code + "'><div id='Name'>" + val.ClientName + " " + val.ClientFamily + "</div></td> " + "<td width='13%' name='Amount'><div id='Price'>" + val.Amount + " " + val.Currency + "</div></td> " + "<td width='9%' name='Sell'>" + str + "</td>" + "<td width='9%' name='PreOrder'>" + (val.PreOrder == false ? "فاکتور" : "<a id='a_PreOrder' href='javascript:SetInvoice(" + val.OrderHeaderId + ',"' + container + "\");'>پیش فاکتور </a>") + "</td>" + "<td width='11%' name='detail' id='" + val.OrderHeaderId + "'><div id='Detail'><button id='a_ButtonEdit'>ویرایش</button><button id='a_ButtonPrint'>چاپ</button><button id='a_Button' >جزئیات فاکتور</button></div></td>" + "</tr>" } $con.find("#InvoiceList").html(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("[id=a_Button]").button({ icons: { primary: "ui-icon-plus" }, text: false }).click(function () { SelectDetailInvoice($(this).parents("td").prop("id"), condialog) }); $con.find("[id=a_ButtonEdit]").button({ icons: { primary: "ui-icon-pencil" }, text: false }).click(function () { ClickInvoice($(this).parents("tr").first(), container) }); $con.find("[id=a_ButtonPrint]").button({ icons: { primary: "ui-icon-print" }, text: false }).click(function () { getDataPrint($(this).parents("td").prop("id"), container) }) } function ClickInvoice(e, t) { var n = $("#" + t); onRowClick(e); if (e.hasClass("rowOnClick") && e.find("td[name=Amount] input").length < 1) { e.find("td[name=Amount]").append("<input type='text' class='inputText inputW136 ' value='" + e.find("td[name=Amount] div").html().split(" ")[0] + "'/><Label>" + e.find("td[name=Amount] div").html().split(" ")[1] + "</Label>"); e.find("div[id=Price]").addClass("invisible"); e.find("td[name=Clinet]").append("<input type='text' class='inputText inputW136 ' id='CustomerIntroducerCode' value='" + e.find("td[name=Clinet]").prop("id") + "'/><a id='a_IntroducerCode' href='#' ><span id='search' class='searchText'></span></a>"); e.find("div[id=Name]").addClass("invisible"); e.find("div[id=Detail]").addClass("invisible"); e.find("td[name=detail]").append("<div id='Edit'><button id='Edit_Button' >بروز</button></div>"); e.find("#Edit_Button").click(function () { EditHeaderInvoice(e, t) }).button(); n.find("#divdialogCustomer").dialog({ autoOpen: false }).dialog({ width: 600 }); n.find("#a_IntroducerCode").off().on("click", function () { opendialog({ container: "divdialogCustomer", containerpage: t }) }); $.each(n.find("tr[id*=tr]"), function () { if (!$(this).hasClass("rowOnClick")) { $(this).find("a[id=a_CustomerIntroducerCode]").remove(); $(this).find("input").remove(); $(this).find("span[id=search]").remove(); $(this).find("Label").remove(); $(this).find("div[id=Edit]").remove(); $(this).find("div").removeClass("invisible") } }) } else { e.find("a[id=a_CustomerIntroducerCode]").remove(); e.find("input").remove(); e.find("span[id=search]").remove(); e.find("Label").remove(); e.find("div[id=Edit]").remove(); e.find("div").removeClass("invisible") } } function EditHeaderInvoice(e, t) { var n = $("#" + t); $.ajax({ type: "POST", url: getPath("Services/Invoice.asmx/EditHeaderInvoice"), contentType: "application/json; charset=utf-8", data: "{OrderHeaderId: '" + e.prop("id").replace("tr", "") + "',Code: '" + e.find("td[name=Clinet] input").val() + "',Amount: '" + e.find("td[name=Amount] input").val() + "'}", success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isDone) { e.find("a[id=a_CustomerIntroducerCode]").remove(); e.find("span[id=search]").remove(); e.find("div[id=Edit]").remove(); e.find("div[id=Price]").html(e.find("td[name=Amount] input").val() + " " + e.find("td[name=Amount] Label").html()); e.find("div[id=Name]").html(t.d.msg); e.find("input").remove(); e.find("Label").remove(); e.find("div").removeClass("invisible") } else translate(t.d.msg) } }) } function InvoicepageselectCallback(e, t, n, r) { var i = $("#" + n); if (r) { buildInvoiceList(t, n) } else { r = false; var s = i.find("#PageSize").val(); var o = ""; var u = s; var a = e == 0 ? 0 : e * u; var f = "", l = "", c = "", h = "", p = "", d = "", v = "", m = "", g = ""; var y = i.find("#ddl_d_SearchBy1").val(); if (y != "") { if (y == "Code") { l = i.find("#txtSearch1").val() } if (y == "Name") { f = i.find("#txtSearch1").val() } if (y == "EmployeeId") { c = i.find("#txtSearch1").val() } if (y == "EmployeeName") { h = i.find("#txtSearch1").val() } if (y == "Shop") { p = i.find("#txtSearch1").val() } } var y = i.find("#ddl_d_SearchBy2").val(); if (y != "") { if (y == "InvoiceId") { d = i.find("#txtSearch2").val() } if (y == "ProductId") { v = i.find("#txtSearch2").val() } if (y == "ProductName") { m = i.find("#txtSearch2").val() } if (y == "Barcode") { g = i.find("#txtSearch2").val() } } var b = ""; if (i.find("#Checkbox1" + n).prop("checked") && i.find("#Checkbox2" + n).prop("checked")) b = ""; else if (!i.find("#Checkbox1" + n).prop("checked") && i.find("#Checkbox2" + n).prop("checked")) b = false; else if (i.find("#Checkbox1" + n).prop("checked") && !i.find("#Checkbox2" + n).prop("checked")) b = true; var w = { skip: a, take: u, currentPage: e, first: r, sort: sortid, supplierid: i.find("#hd_d_PersonId").val(), IsClient: i.find("#hd_d_IsClient").val(), SupplierName: f, code: l, EmployeeId: c, EmployeeName: h, Shop: p, InvoiceId: d, ProductId: v, ProductName: m, InvoiceDateStart: i.find("#txt_s_InvoiceDateStart").length > 0 ? i.find("#txt_s_InvoiceDateStart").val() : "", Barcode: g, InvoiceDateEnd: i.find("#txt_s_InvoiceDateEnd").length > 0 ? i.find("#txt_s_InvoiceDateEnd").val() : "", PriceFrom: i.find("#txt_s_PriceFrom").length > 0 ? i.find("#txt_s_PriceFrom").val() : "", PriceTo: i.find("#txt_s_PriceTo").length > 0 ? i.find("#txt_s_PriceTo").val() : "", Order: b, PreOrder: i.find("#Checkbox3" + n).length > 0 ? i.find("#Checkbox3" + n).prop("checked") : "", Broken: i.find("#Checkbox4" + n).length > 0 ? i.find("#Checkbox4" + n).prop("checked") : "", CategoryId: getHierarchySelectedValue("hr_s_Category", n), shopid: $("#userDefault").find("#ddl_s_Branch").val(), counterid: $("#userDefault").find("#ddl_m_Counter").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(w), type: "Post", url: getPath("Services/Invoice.asmx/GetInvoiceList"), success: function (e) { if (!isAuthenticated(e)) return; buildInvoiceList(e, n) }, error: function (e) { alert(e.responseText) } }); return false } Sort(getInvoiceList, n) } function SetInvoice(e, t) { $.ajax({ type: "POST", url: getPath("Services/Order.asmx/preOrderChange"), contentType: "application/json; charset=utf-8", data: "{orderHeaderId: '" + e + "'}", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isdone) getInvoiceList(t) } }) } function SelectDetailInvoice(id, container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/Invoice.asmx/GetDetailInvoice"), contentType: "application/json; charset=utf-8", data: "{id: '" + id + "'}", success: function (response) { if (!isAuthenticated(response)) return; jq = response.d; var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.OrderDetailId + "'>" + "<td name='name' id='" + val.BarcodeId + "' width='17%'><span class='cursor' name='subTab' menuName='a_InventoryList' id='" + val.BarcodeId + "'>" + (val.Barcode == null ? "" : val.Barcode + "_") + (val.Name == null ? "" : val.Name) + (val.Description == null ? "" : "_" + val.Description) + (val.ItemCode == null ? "" : "_" + val.ItemCode) + "</span></td>" + "<td name='Color' width='10%'><div id='Color'>" + (val.Color == null ? "" : val.Color) + "</div></td>" + "<td name='Size' width='10%'><div id='Size'>" + (val.Size == null ? "" : val.Size) + "</div></td>" + "<td name='Quantity' width='7%'><div id='Quantity'>" + (val.Quantity == null ? "" : val.Quantity) + "  " + (val.UnitType == null ? "" : val.UnitType) + "</div></td>" + "<td name='Price' width='10%'><div id='Price'>" + (val.Price == null ? "" : val.Price) + "</div></td>" + "<td name='TotalPrice' width='10%'><div id='TotalPrice'>" + val.Quantity * val.Price + "</div></td>" + "<td name='Serial' width='10%'><div id='Serial'>" + (val.Serial == null ? "" : val.Serial) + "</div></td>" + "<td name='Broken' width='16%'><div id='Broken'><input type='text' class='inputText inputW50' id='txt_m_QuantityReturn'  value='" + (val.Quantity == null ? "" : val.Quantity) + "'/>" + "<input type='checkbox' id='CheckboxBroken_" + val.OrderDetailId + "' /><label for='CheckboxBroken_" + val.OrderDetailId + "' style='width:50px; font-size:x-small; margin-left:2px;'>خراب</label>" + "<input type='checkbox' id='CheckboxReturn_" + val.OrderDetailId + "' /><label for='CheckboxReturn_" + val.OrderDetailId + "' style='width:50px;font-size:x-small;'>مرجوع</label></div></td>" + "<td id='delete' width='10%'><div class='unit' id='" + val.OrderDetailId + "' ><button id='btn_edit' >ویرایش</button><button id='btn_delete'  >حذف</button></div></td></tr>" } $con.find("#DetailListInvoice").html(ItemList).parent().tableScroll({ height: 380, width: 980, flush: false }); $con.find("[name=subTab]").unbind().click(function () { var e = $(this); createSubTab({ name: e.attr("menuName"), tabName: e.html(), id: e.attr("id") }) }); $con.find("[id=btn_delete]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveItemDetailInvoice($(this).parent().prop("id"), container); else return }); $con.find("[id=btn_edit]").button({ icons: { primary: "ui-icon-pencil" }, text: false }).click(function () { ClickDetailInvoice($(this).parents("tr").first(), container); $(this).parent("div").addClass("invisible") }); $con.find("[id=btn_Return]").unbind("click").click(function () { AddReturnInvoice(container) }).button(); $con.dialog({ width: 1e3 }) }, error: function (e) { alert(e.responseText) } }) } function ClickDetailInvoice(e, t) { var n = $("#" + t); onRowClick(e); trid = e.prop("id"); if (e.hasClass("rowOnClick") && e.find("input:text").length < 2) { e.find("td[name=Color]").append("<select   id='ddl_m_Color_" + trid + "' disabled='disabled' class='inputDiv selectSmall required validate-address' ></select>"); e.find("div[id=Color]").addClass("invisible"); e.find("td[name=Size]").append("<select   id='ddl_m_Size_" + trid + "' disabled='disabled' class='inputDiv selectSmall required validate-address' ></select>"); e.find("div[id=Size]").addClass("invisible"); e.find("td[name=Quantity]").append("<input type='text' class='inputText inputW50 ' value='" + e.find("div[id=Quantity]").html().split(" ")[0] + "'/><Label id='Label'>" + e.find("div[id=Quantity]").html().split(" ")[1] + "</Label>"); e.find("div[id=Quantity]").addClass("invisible"); e.find("td[name=Price]").append("<input type='text' class='inputText inputW50 ' value='" + e.find("div[id=Price]").html() + "'/>"); e.find("div[id=Price]").addClass("invisible"); e.find("td[name=TotalPrice]").append("<input type='text' class='inputText inputW50 ' value='" + e.find("div[id=TotalPrice]").html() + "'/>"); e.find("div[id=TotalPrice]").addClass("invisible"); e.find("td[name=Serial]").append("<input type='text' class='inputText inputW50 ' value='" + e.find("div[id=Serial]").html() + "'/>"); e.find("div[id=Serial]").addClass("invisible"); e.find("div[id=delete]").addClass("invisible"); e.find("td[id=delete]").append("<div id='Edit'><a id='Edit_Button' href='#'>بروز </a></div>"); e.find("div[id=Broken]").addClass("invisible"); e.find("td[name=Quantity] input,td[name=Price] input").change(function () { SumPriceDetail(e) }); e.find("[id=Edit_Button]").click(function () { EditDetailInvoice(e, t) }).button(); bindItemsForSelectCombo({ methodname: "GetColorListForEdit", servicename: "InventorySetting", id: "ddl_m_Color_" + trid, container: trid, headertext: " رنگ", setcolor: true }, "{ barcodeid:'" + e.find("td[name=name]").prop("id") + "',orderDetailid:'" + trid.replace("tr", "") + "'}"); e.find("#ddl_m_Color_" + trid).change(function () { SelectColorForOrderEdit(trid, e.find("td[name=name]").prop("id")) }); ajDropDown.done(function () { if (e.find("#ddl_m_Color_" + trid + " option").length < 1) bindItemsForSelectCombo({ methodname: "GetSizeListByBarcodeIdColorIdForEdit", servicename: "InventorySetting", id: "ddl_m_Size_" + trid, container: trid, headertext: " جزئیات" }, "{ barcodeid:'" + e.find("td[name=name]").prop("id") + "',orderDetailid:'" + trid.replace("tr", "") + "',colorid:'" + "" + "'}") }); $.each(n.find("tr[id*=tr]"), function () { if (!$(this).hasClass("rowOnClick")) { $(this).find("input:text[id!=txt_m_QuantityReturn]").remove(); $(this).find("select").remove(); $(this).find("Label[id=Label]").remove(); $(this).find("#Edit").remove(); $(this).find("div[id=Broken]").removeClass("invisible"); $(this).find("div").removeClass("invisible") } }) } else { e.find("input:text[id!=txt_m_QuantityReturn]").remove(); e.find("select").remove(); e.find("Label[id=Label]").remove(); e.find("#Edit").remove(); e.find("div").removeClass("invisible") } } function SumPriceDetail(e) { e.find("td[name=TotalPrice] input").val(e.find("td[name=Quantity] input").val() * e.find("td[name=Price] input").val()) } function SelectColorForOrderEdit(e, t) { bindItemsForSelectCombo({ methodname: "GetSizeListByBarcodeIdColorIdForEdit", servicename: "InventorySetting", id: "ddl_m_Size_" + e, container: e, headertext: " جزئیات" }, "{ barcodeid:'" + t + "',orderDetailid:'" + e.replace("tr", "") + "',colorid:'" + $("#" + e).find("#ddl_m_Color_" + e).val() + "'}") } function EditDetailInvoice(e, t) { var n = $("#" + t); $.ajax({ type: "POST", url: getPath("Services/Invoice.asmx/EditDetailInvoice"), contentType: "application/json; charset=utf-8", data: "{OrderDetailId: '" + e.prop("id").replace("tr", "") + "',ColorId: '" + (e.find("td[name=Color] select").val() != null ? e.find("td[name=Color] select").val() : "") + "',SizeId: '" + (e.find("td[name=Size] select").val() != null ? e.find("td[name=Size] select").val() : "") + "',Quantity: '" + e.find("td[name=Quantity] input").val() + "',Amount: '" + e.find("td[name=Price] input").val() + "',Serial: '" + e.find("td[name=Serial] input").val() + "'}", success: function (e) { if (!isAuthenticated(e)) return; SelectDetailInvoice(e.d, t) } }) } function AddReturnInvoice(e) { var t = []; var n = true; $.each($("#" + e).find("tr[id*=tr]"), function () { var e = {}; if (($(this).find("input[id*=CheckboxReturn_]").prop("checked") || $(this).find("input[id*=CheckboxBroken_]").prop("checked")) && $(this).find("#txt_m_QuantityReturn").val() != "" && $(this).find("#txt_m_QuantityReturn").val() != "0") { e["orderDetailId"] = this.id.replace("tr", ""); e["isBroken"] = $(this).find("input[id*=CheckboxBroken_]").prop("checked"); e["quantity"] = $(this).find("#txt_m_QuantityReturn").val(); t.push(e); n = false } }); if (n) { alert("ابتدا تعداد کالا را نوشته، گزینه مرجوعی یا خراب را تیک زده سپس 'ثبت مرجوعی' را کلیک کنید."); return } DTO = { returnItems: t, shopId: $("#userDefault").find("#ddl_s_Branch").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), date: $("#userDefault").find("#txt_s_Date").val() }, $.ajax({ type: "POST", url: getPath("Services/Order.asmx/ReturnOrder"), contentType: "application/json; charset=utf-8", data: JSON.stringify(DTO), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function RemoveItemDetailInvoice(e, t) { var n = $("#" + t); $.ajax({ type: "POST", url: getPath("Services/Invoice.asmx/DeleteDetailInvoice"), contentType: "application/json; charset=utf-8", data: "{id: '" + e + "'}", success: function (t) { if (!isAuthenticated(t)) return; translate(t.d.msg); if (t.d.isdone) n.find("#tr" + e).remove() }, error: function (e) { alert(e.responseText) } }) } function loadOrder(e, t, n, r, i, s, o) { sortid = "BarcodeId Desc"; if (s) { var u = $("#" + t); u.find("#moreFilter").slideUp("fast"); u.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); u.find("#moreFilter").removeClass("invisible"); u.find("#moreFilter").slideToggle(function () { }) }); if ($("#txt_customer").val() != "" && t == "dialogAddAccounting") { u.find("#txt_s_Person").val($("#txt_customer").val()); u.find("#customerOnSelect").html($("#customerOnSelect").html()) } u.find("#Div_Print").load("Report/PrintInvoice.htm", function () { }); $("#dialog" + t).remove(); u.find("#dialog").attr("id", "dialog" + t); bindItemsForSelectCombo({ methodname: "getAvailablity", servicename: "Inventory", id: "ddl_m_Availability", container: t, headertext: "وضعیت کالا", selectedindex: 1 }); u.find("#txt_s_ProductCode,#txt_s_ProductBarcode").bind("keydown", function (e) { if (e.keyCode == 13 || e.keyCode == 9) { getBarcodeListOrder(t, { container: "dialog", callbackmethod: getBarcodeListOrder, fname: n, page_index: 0, build: buildBarcodeListOrder, servicename: "Inventory", methodname: "GetItemsList" }) } }); if (o != undefined && o.isChangeQuantity != undefined && o.isChangeQuantity == true) { u.append("<input type='checkbox' id='cbIsChangeQuantity' class='hidden' checked />") } u.find("#txt_m_PaymentAmount").dblclick(function () { u.find("#txt_m_PaymentAmount").val(u.find("#txt_m_TotalPrice").val()) }); if (r) { u.find("#simpleOrder").remove() } else { u.find("#wholesaleOrder").remove() } ChangeCheckBoxName("cb_d_PreOrder", t); ChangeCheckBoxName("cb_d_Sale", t); if (i) { u.find("#cb_d_Sale" + t).unbind("change").change(function () { if (this.checked) $(this).button("option", "label", "فروش"); else $(this).button("option", "label", "مرجوعی") }) } else { u.find("#cb_d_Sale" + t).prop("checked", "checked").trigger("change").unbind("change").change(function () { if (this.checked) $(this).button("option", "label", "مرجوعی"); else $(this).button("option", "label", "خرید") }) } u.find("#cb_d_PreOrder" + t).unbind("change").change(function () { if (this.checked) $(this).button("option", "label", "فاکتور"); else $(this).button("option", "label", "پیش فاکتور") }); u.find("#dialog_ItemQuantity").dialog({ autoOpen: false }); bindHierarchyData({ id: "hr_s_Category", table: "category", container: t }); u.find("#btn_SearchProduct").button({ icons: { primary: "ui-icon-search"} }).unbind().bind("click", function () { sortid = "BarcodeId Desc"; getBarcodeListOrder(t, { container: "dialog", callbackmethod: getBarcodeListOrder, fname: n, page_index: 0, build: buildBarcodeListOrder, servicename: "Inventory", methodname: "GetItemsList" }) }).button(); u.find("#btn_AddOrder").off().on("click", function () { if (validateAll(u)) { if (r) { AddOrderWholesale(e, t) } else { AddOrder(e, t) } } }).button({ icons: { primary: "ui-icon-disk" }, text: true }); u.find("#btn_Print").off().on("click", function () { Popup(u.find("#Div_Print").html()) }).button().addClass("invisible"); aComplete({ methodname: "GetCompletionListByItemName", servicename: "AtuoComplete", id: "txt_s_ProductCode", container: t, minlength: 2, autofocus: false, limit: 10, boxId: "txt_s_ProductCode" }, { Status: "ddl_m_Availability" }); if (o != undefined && o.isfastorder == true) { if (o != undefined && o.isChangeQuantity != undefined && o.isChangeQuantity == true) { aComplete({ methodname: "GetCompletionListBySupplierName", servicename: "AtuoComplete", id: "txt_s_Person", container: t, minlength: 2, autofocus: false, limit: 20, boxId: "txt_s_Person", fname: customerOnSelect }) } else aComplete({ methodname: "GetCompletionListByCustomerName", servicename: "AtuoComplete", id: "txt_s_Person", container: t, minlength: 2, autofocus: false, limit: 20, boxId: "txt_s_Person", fname: customerOnSelect }) } } } function customerOnSelect(e, t, n) { var r = $("#" + n); r.find("#customerOnSelect").html(t.item.label).addClass("ui-state-highlight") } function getDataPrint(e, t) { var n = $("#" + t); var r = { id: e }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(r), type: "Post", url: getPath("Services/Invoice.asmx/GetInvoiceById"), success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isdone) { SetInvoiceData(t, e); Popup(n.find("#Div_Print").html()) } else alert("noData") }, error: function (e) { alert(e.responseText) } }) } function SetInvoiceData(container, response) { var $con = $("#" + container); var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemList = ""; for (var i = 0; i < List.detail.length; i++) { var val = List.detail[i]; ItemList += "<tr><td align='Center'>" + (i * 1 + 1) + "</td>" + "<td align='Right'  nowrap='nowrap'><h6>" + val.Name + "</h6></td>" + "<td align='Center' nowrap='nowrap'><h6>" + val.Quantity + "</h6></td>" + "<td align='Center' nowrap='nowrap'>" + val.Price + "</td>" + "<td align='Center' nowrap='nowrap'>" + val.Price * val.Quantity + "</td></tr>" } $con.find("#LShop").html(List.ShopName); if (List.PreOrder) $con.find("#LInvoice").html("پیش فاکتور"); else $con.find("#LInvoice").html(List.Sell ? " فاکتور فروش " : " فاکتور مرجوعی "); $con.find("#LInvoiceNo").html(List.InvoiceNO); $con.find("#LClinet").html((List.Gender ? "خانم " : "آقای ") + " " + List.Family); $con.find("#LCustomer").html((List.ClientGender ? "خانم " : "آقای ") + " " + List.ClientFamily); $con.find("#LDate").html(List.Date); $con.find("#LAmount").html(List.Amount); $con.find("#LCurrency").html(List.Currency); $con.find("#DetailInvoiceList").html(ItemList) } function Popup(e) { var t = window.open("", "Div_Print"); t.document.write("<html><head><title>my div</title>"); t.document.write('<link rel="stylesheet" href="App_Themes/Default/StylePrint.css" type="text/css" />'); t.document.write("</head><body dir='rtl'>"); t.document.write(e); t.document.write("</body></html>"); t.document.close(); t.print(); return true } function loadSupplierOrder(e, t, n) { loadOrder(e, t, GetItemOrder, false, false, n) } function loadCustomerOrder(e, t, n) { loadOrder(e, t, GetItemOrder, false, true, n) } function loadCustomerFastOrder(e, t) { loadOrder(0, e, GetItemOrder, false, true, t, { isfastorder: true }) } function loadEditQuantityOrder(e, t) { var n = $("#" + e); if (t) { n.find("[name='changeQuantity']").remove(); n.find("[name='setPayment']").removeClass("invisible"); n.find("#spClient").html("supplier"); n.find("#txt_s_Person").attr("placeholder", "supplier"); n.find("#cbSetPayment").unbind("change").change(function () { if (this.checked) $(this).button("option", "label", "setPayment"); else $(this).button("option", "label", "noPayment"); localize() }).button(); loadOrder(0, e, GetItemOrder, false, true, t, { isfastorder: true, isChangeQuantity: true }) } } function AddOrder(e, t) { var n = $("#" + t); var r = []; var i = {}; $.each($("#" + t).find("#OrderList").find("tr[id*=tr]"), function () { var e = {}; var t = $(this); var i = t.find("#ddl_m_Color_" + this.id).val(); var s = t.find("#ddl_m_Size_" + this.id).val(); e["barcodeid"] = this.id.split("_")[2]; e["colorid"] = i == null ? "" : i; e["sizeid"] = s == null ? "" : s; e["quantity"] = t.find("#txt_m_TotalQuantity").val(); e["price"] = t.find("#txt_m_Price").val(); e["description"] = ""; e["serial"] = t.find("#txt_m_Serial").val(); e["broken"] = false; if (n.find("#cbIsChangeQuantity").prop("checked")) { e["status"] = t.find("#ddl_m_Availability").val(); e["broken"] = t.find("#cb_d_Broken_" + this.id).prop("checked") } r.push(e) }); i["shopid"] = $("#userDefault").find("#ddl_s_Branch").val(); i["date"] = $("#userDefault").find("#txt_s_Date").val(); i["currenyid"] = $("#userDefault").find("#ddl_m_Currency").val(); if (n.find("#cbIsChangeQuantity").length < 1) { i["totalamount"] = n.find("#txt_m_TotalPrice").val().replace(/,/g, ""); i["PaymentAmount"] = n.find("#txt_m_PaymentAmount").val().replace(/,/g, "") } else { i["setPayment"] = n.find("#cbSetPayment").prop("checked") } i["description"] = n.find("#txt_m_Description").val(); i["invoicenumber"] = n.find("#txt_m_InvoiceNumber").val(); i["clientCode"] = n.find("#txt_s_Person").val(); i["customerid"] = e; i["issell"] = !n.find("#cb_d_Sale" + t).prop("checked"); i["ispreorder"] = n.find("#cb_d_PreOrder" + t).prop("checked"); var s = { header: i, itemDetails: r, counterId: $("#userDefault").find("#ddl_m_Counter").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(s), type: "Post", url: n.find("#cbIsChangeQuantity").length > 0 ? getPath("Services/Order.asmx/ChangeQuantity") : getPath("Services/Order.asmx/AddOrder"), success: function (e) { if (!isAuthenticated(e)) return; if (e.d.alert != undefined) { SetInvoiceData(t, e); translate(e.d.alert); if (e.d.InvoiceNO != undefined) { n.find("#OrderList").html(""); n.find("#btn_Print").removeClass("invisible"); n.find("#btn_AddOrder").addClass("invisible"); n.find("#txt_m_InvoiceNumber").val(e.d.InvoiceNO) } } else translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function GetItemOrder($dis, container, barcode, isChangeQuantity) { if (barcode == undefined) barcode = $dis.find("[name=barcode]").html(); var $con = $("#" + container); var ItemList = ""; var isReturn = false; if ($con.find("#cb_d_Sale" + container).prop("checked") != undefined) isReturn = $con.find("#cb_d_Sale" + container).prop("checked"); var isChangeQuantity = false; if ($con.find("#cbIsChangeQuantity").prop("checked") != undefined) { isChangeQuantity = $con.find("#cbIsChangeQuantity").prop("checked"); isReturn = true } var DTO = { barcode: barcode, shopId: $("#userDefault").find("#ddl_s_Branch").val(), isReturn: isReturn }; $.ajax({ type: "POST", data: JSON.stringify(DTO), url: getPath("Services/Order.asmx/GetProductForOrderByBarcode"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; $con.find("#txt_s_ProductBarcode").val(""); if (response.d.length < 1) return; if ($con.find("#OrderList").html() == "") { $con.find("#txt_m_InvoiceNumber").val(""); $con.find("#txt_m_PaymentAmount").val("") } var count = $con.find("tr[id*='tr_" + container + "']").length; var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemList = ""; var val = List[0, 0]; var trid = "tr_" + container + "_" + val.barcodeid + "_" + count; var priceType = ""; obj = val.price; for (var name in obj) { var value = obj[name]; var p = 0; if (value == null) p = val.price.basePrice; else p = value; priceType += "<option value='" + p + "'>" + p + " " + name + "</option>" } ItemList += "<tr id='" + trid + "'>" + "<td width='3%' id='rownumber'></td>" + "<td width='20%'><a href='javascript:showQuantity(\"" + container + '","' + val.barcode + "\");'>" + val.name + " " + val.code + " " + val.barcode + "</a></td>" + "<td width='6%' id='Color_'>" + " <select   id='ddl_m_Color_" + trid + "' disabled='disabled' class='select55 ' ></select>" + "</td>" + "<td width='6%' id='Color_'>" + "<select   id='ddl_m_Size_" + trid + "' disabled='disabled' class='select55 '></select>" + "</td>" + "<td width='6%' id='Color_'>" + " <select   id='ddl_m_measureunit_" + trid + "' disabled='disabled' class='select55 '></select>" + "</td>" + "<td width='10%' id='Color_'> <select   id='ddl_m_priceType_" + trid + "'  class='select95'>" + priceType + "</select></td>" + "<td width='7%'><input type='text'  id='txt_m_Quantity' VALUE='1' class='inputW34 fontSize15'  /></td>" + "<td width='11.5%'><input type='text'  id='txt_m_Price' class='inputW80 fontSize15' value='" + val.price.basePrice + "' /></td>" + "<td width='7%'><input type='text' id='txt_m_TotalQuantity' class='inputW50 fontSize15'   disabled='disabled'/></td>" + "<td width='9%'><input  class='inputW80 fontSize15 digit' type='text' id='txt_m_TotalItemPrice' disabled='disabled'/></td>" + "<td width='11%' id='Color_'>" + (isChangeQuantity ? "<select class=' selectsmall1 ' id='ddl_m_Availability'></select>" : " <input class='inputW100 fontSize15' type='text' id='txt_m_Serial' />") + "</td>" + "<td width='2.5%' id='delete'><span title='حذف' name='deleteOrder' class='cursor ui-icon ui-icon-closethick'></span></td></tr>"; $con.find("#OrderList").append(ItemList).parent().tableScroll({ height: 380, width: $con.width() - 85, flush: false }); $con.find("#btn_Print").addClass("invisible"); $con.find("#btn_AddOrder").removeClass("invisible"); if (isChangeQuantity) { $con.find("#tdSerial").html("itemStatus"); bindItemsForSelectCombo({ methodname: "getAvailablity", servicename: "Inventory", id: "ddl_m_Availability", container: trid, headertext: "وضعیت کالا", selectedindex: val.status }); $con.find("#cb_d_Broken_" + trid).button().prop("checked", "checked").trigger("change").unbind("change").change(function () { if (this.checked) { $(this).button("option", "label", "سالم") } else { $(this).button("option", "label", "خراب") } }) } $con.find("[name=deleteOrder]").unbind().click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveItemOrderElement($(this).parents("tr").first().prop("id"), container); else return }); $("#" + trid).find("[id=txt_m_Quantity]").spinner({ change: function () { SumPrice($(this).parents("tr").attr("id"), container) }, stop: function () { SumPrice($(this).parents("tr").attr("id"), container) } }); $("#" + trid).find("[id=txt_m_Price]").spinner({ step: 1e3, change: function () { SumPrice($(this).parents("tr").attr("id"), container) }, stop: function () { SumPrice($(this).parents("tr").attr("id"), container) } }); $con.find("#Footer").removeClass("invisible"); $("#" + trid).find("#txt_m_Price").unbind("keydown").bind("keydown", function (e) { if (e.keyCode == 40) { $(this).parent().parent().next().find("#txt_m_Price").focus().focus(function () { this.select() }) } if (e.keyCode == 38) { $(this).parent().parent().prev().find("#txt_m_Price").focus().focus(function () { this.select() }) } }); $("#" + trid).find("#txt_m_Quantity").unbind("keydown").bind("keydown", function (e) { if (e.keyCode == 40) { $("#" + trid).next().find("#txt_m_Quantity").focus().focus(function () { this.select() }) } if (e.keyCode == 38) { $("#" + trid).prev().find("#txt_m_Quantity").focus().focus(function () { this.select() }) } }); bindComboData({ id: "ddl_m_measureunit_" + trid, container: trid, isMeasureUnit: true }, val.measureUnits); $("#ddl_m_measureunit_" + trid).change(function () { SumPrice(trid, container) }); bindComboData({ id: "ddl_m_Color_" + trid, container: trid, headertext: " رنگ", setcolor: true }, val.colors); $("#ddl_m_Color_" + trid).change(function () { SelectColorForOrder(trid, this, val.barcodeid, isReturn) }); $("#ddl_m_priceType_" + trid).change(function () { $("#" + trid).find("#txt_m_Price").val($(this).val()); SumPrice(trid, container) }); ajDropDown.done(function () { if ($con.find("#ddl_m_Color_" + trid + " option").length < 1) bindItemsForSelectCombo({ methodname: "GetSizeListByBarcodeIdColorId", servicename: "InventorySetting", id: "ddl_m_Size_" + trid, container: trid, headertext: " جزئیات" }, "{ arg:'" + trid.split("_")[2] + "',sarg:'" + $("#userDefault").find("#ddl_s_Branch").val() + "',targ:'" + "" + "',isReturn:'" + isReturn + "'}") }); SumPrice(trid, container) }, error: function (e) { alert(e.responseText) } }) } function SelectColorForOrder(e, t, n, r) { var i = $("#" + e); bindItemsForSelectCombo({ methodname: "GetSizeListByBarcodeIdColorId", servicename: "InventorySetting", id: "ddl_m_Size_" + e, container: e, headertext: " جزئیات" }, "{ arg:'" + n + "',sarg:'" + $("#userDefault").find("#ddl_s_Branch").val() + "',targ:'" + $(t).val() + "',isReturn:'" + r + "'}") } function showQuantity(e, t) { buildColorSizeTable(t, $("#userDefault").find("#ddl_s_Branch").val(), true, "GetItemDetailsByBarcodeAndShopID", "dialog_ItemQuantity"); $("#dialog_ItemQuantity").dialog().dialog("open") } function RemoveItemOrderElement(e, t) { $("#" + e).remove(); SumPrice(e, t) } function aComplete(e, t) { var n = $("#" + e.container); var r = "#" + e.id; n.find(r).autocomplete({ source: function (r, i) { var s = { q: r.term, limit: e.limit }; if (t != undefined) s["Status"] = n.find("#ddl_m_Availability").val(); if (e.data != undefined) { var o; var u = e.data; for (o in u) { s[o] = u[o] } } $.ajax({ url: getPath("Services/" + e.servicename + ".asmx/" + e.methodname), data: JSON.stringify(s), dataType: "json", type: "POST", contentType: "application/json; charset=utf-8", success: function (e) { if (e.d.length > 0) i(e.d) } }) }, focus: function (t, r) { n.find("#" + e.boxId).val(r.item.value); return false }, select: function (t, r) { n.find("#" + e.boxId).val(e.selectBarcode != undefined && e.selectBarcode ? r.item.Barcode : r.item.value); if (e.fname != undefined) e.fname(t, r, e.container); return false }, minLength: e.minlength, autoFocus: e.autofocus }) } function SumPrice(e, t) { $("#" + e).find("input[id=txt_m_TotalQuantity]").val($("#" + e).find("input[id=txt_m_Quantity]").val() * ($("#" + e).find("[id*=ddl_m_measureunit]").val() != null ? $("#" + e).find("[id*=ddl_m_measureunit]").val().split("_")[0] : 1)); var n = $("#" + e).find("input[id=txt_m_TotalQuantity]").val() * $("#" + e).find("input[id=txt_m_Price]").val(); $("#" + e).find("input[id=txt_m_TotalItemPrice]").val(n); $("#" + e).find("input[id=txt_m_TotalItemPrice]").attr("price", n); var r = 0; var i = 0; $.each($("#" + t).find("tr[id*=tr]"), function () { r += $(this).find("input[id=txt_m_TotalItemPrice]").attr("price") * 1; i++; $(this).find("[id=rownumber]").html(i) }); if (i <= 0) { $("#" + t).find("#Footer").addClass("invisible"); $("#" + t).find("#header").addClass("invisible") } else { $("#" + t).find("#Footer").removeClass("invisible"); $("#" + t).find("#header").removeClass("invisible") } $("#" + t).find("input[id=txt_m_TotalPrice]").val(r); if (!$.browser.msie) { $(".digit").digits() } } function loadAcountReport(e, t) { sortid = "Date desc"; var n = $("#" + e); if (t) { n.find("#moreFilter").slideUp("fast"); n.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); n.find("#moreFilter").slideToggle(function () { }) }); bindItemsForSelectCombo({ methodname: "GetComboItems", servicename: "XmlDropDown", headertext: "انتخاب بانک", id: "ddlBank", container: e }, "{ path:'Counter/BankTitle'}"); ChangeCheckBoxGroupName("Check", e); n.find("#txtInvoiceDateStart" + e).datepicker({ changeMonth: true, changeYear: true, onSelect: function (t, n) { $("#txtInvoiceDateEnd" + e).datepicker("option", "minDate", new JalaliDate(n["selectedYear"], n["selectedMonth"], n["selectedDay"])) } }); n.find("#txtInvoiceDateEnd" + e).datepicker({ changeMonth: true, changeYear: true }); n.find("#btnPrint").off().on("click", function () { getAcountList(e, { container: e, callbackmethod: getAcountList, fname: "", page_index: 0, build: buildAcountList, servicename: "Invoice", methodname: "GetInvoiceStatement", print: true }) }).button({ icons: { primary: "ui-icon-print" }, text: true }); n.find("#txtDueDateFrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#txtDueDateTo").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#txtDueDateTo").datepicker({ changeMonth: true, changeYear: true }); bindHierarchyData({ id: "hr_s_Category", table: "category", container: e }); n.find("[id=btnSearch]").button({ icons: { primary: "ui-icon-search"} }).unbind("click").click(function () { sortid = "date desc"; getAcountList(e, { container: e, callbackmethod: getAcountList, fname: "", page_index: 0, build: buildAcountList, servicename: "Invoice", methodname: "GetInvoiceStatement", print: false }) }) } getAcountList(e, { container: e, callbackmethod: getAcountList, fname: "", page_index: 0, build: buildAcountList, servicename: "Invoice", methodname: "GetInvoiceStatement", print: false }); n.find("#PageSize").off().on("change", function () { getAcountList(e, { container: e, callbackmethod: getAcountList, fname: "", page_index: 0, build: buildAcountList, servicename: "Invoice", methodname: "GetInvoiceStatement", print: false }) }); n.find("#DetailPaymentList").dialog({ autoOpen: false }).dialog({ width: 750 }); n.find("#dialog").attr("id", "dialog" + e) } function AccountFullAcc(e, t, n) { sortid = "Date desc"; var r = $("#" + e); if (t) { r.find("#txtInvoiceDateStart").attr("id", "txtInvoiceDateStart" + e); r.find("#txtInvoiceDateEnd").attr("id", "txtInvoiceDateEnd" + e); r.find("[id=btnSearch]").button({ icons: { primary: "ui-icon-search"} }).unbind("click").click(function () { sortid = "date desc"; getFullAcountList(e, { container: e, callbackmethod: getFullAcountList, fname: "", page_index: 0, build: buildFullAcountList, servicename: "Order", methodname: "GetFullOrderStatement", print: n.print, selectCase: n.selectCase }) }); if (n.onLoad) { sortid = "date desc"; getFullAcountList(e, { container: e, callbackmethod: getFullAcountList, fname: "", page_index: 0, build: buildFullAcountList, servicename: "Order", methodname: "GetFullOrderStatement", print: n.print, selectCase: n.selectCase }) } bindHierarchyData({ id: "hr_s_Category", table: "category", container: e, styleclass: "PagingSelect " }); r.find("#moreFilter").slideUp("fast"); r.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); r.find("#moreFilter").slideToggle(function () { }) }); r.find(".icon_clear").unbind("click").click(function () { r.find("#customerOnSelect").html("") }); ChangeCheckBoxGroupName("Check", e); r.find("#txtInvoiceDateStart" + e).datepicker({ changeMonth: true, changeYear: true, onSelect: function (t, n) { $("#txtInvoiceDateEnd" + e).datepicker("option", "minDate", new JalaliDate(n["selectedYear"], n["selectedMonth"], n["selectedDay"])) } }); r.find("#btnPrint").off().on("click", function () { getFullAcountList(e, { container: e, callbackmethod: getFullAcountList, fname: "", page_index: 0, build: buildFullAcountList, servicename: "Order", methodname: "GetFullOrderStatement", print: true }) }).button({ icons: { primary: "ui-icon-print" }, text: true }); r.find("#txtInvoiceDateEnd" + e).datepicker({ changeMonth: true, changeYear: true }); r.find("#DetailPaymentList" + e).dialog({ autoOpen: false }).dialog({ width: 750 }); r.find("#DetailPaymentList").attr("id", "DetailPaymentList" + e); r.find("#transferMoney").attr("id", "transferMoney" + e); r.find("#dialog").attr("id", "dialog" + e); r.find("#voucherDetailsList").attr("id", "voucherDetailsList" + e); r.find("#voucherDetailsList" + e).dialog({ autoOpen: false }).dialog({ width: 750 }); r.find("#DialogEditVoucherAmount").attr("id", "editvoucher" + e); r.find("#expense").attr("id", "expense" + e); r.find("#DialogEditAccount").attr("id", "editOrder" + e); r.find("#dialogAddExpense").attr("id", "editExpense" + e); r.find("#dialogAddSalary").attr("id", "editSalary" + e); r.find("#dialogAddSocial").attr("id", "editSocial" + e); r.find("#dialogAdd").attr("id", "dialogAdd" + e) } } function loadAccounting(e, t) { var n = $("#" + e); if (t) { bindItemsForSelectCombo({ async: false, methodname: "getAccountType", servicename: "Order", id: "ddl_AccountType", container: e, headertext: "انتخاب کارمند" }) } AccountFullAcc(e, t, { print: false, selectCase: "Accounting" }) } function loadFullAcountReport(e, t) { AccountFullAcc(e, t, { print: false, selectCase: "GetItemList" }); if (t) { aComplete({ methodname: "GetCompletionListByCustomerName", servicename: "AtuoComplete", id: "txt_customer", container: e, minlength: 2, autofocus: false, limit: 20, boxId: "txt_customer", fname: customerOnSelect }) } } function getAcountList(e, t) { var n = $("#" + e); if (t.page_index > 0) { t.first = false } var r = "", i = "", s = "", o = "", u = "", a = "", f = "", l = "", c = "", h = "", p = "", d = "", v = "", m = "", g = "", y = "", b = "", w = "", E = "", S = "", x = ""; T = n.find("#ddlSearchBy2").val(); if (T != "") { if (T == "InvoiceId") { a = n.find("#txtSearch2").val() } if (T == "ProductId") { f = n.find("#txtSearch2").val() } if (T == "ProductName") { l = n.find("#txtSearch2").val() } if (T == "Barcode") { c = n.find("#txtSearch2").val() } } if (n.find("#Checkbox1" + e).prop("checked") && n.find("#Checkbox2" + e).prop("checked")) m = ""; else if (!n.find("#Checkbox1" + e).prop("checked") && n.find("#Checkbox2" + e).prop("checked")) m = false; else if (n.find("#Checkbox1" + e).prop("checked") && !n.find("#Checkbox2" + e).prop("checked")) m = true; if (n.find("#Checkbox3" + e).length > 0) g = n.find("#Checkbox3" + e).prop("checked"); if (n.find("#Checkbox4" + e).length > 0) y = n.find("#Checkbox4" + e).prop("checked"); var T = n.find("#ddlSearchBy1").val(); if (n.find("#moreFilter").is(":visible")) { alert("here"); d = getHierarchySelectedValue("hr_s_Category", e); if (T != "") { if (T == "Code") { i = n.find("#txtSearch1").val() } if (T == "Name") { r = n.find("#txtSearch1").val() } if (T == "EmployeeId") { s = n.find("#txtSearch1").val() } if (T == "EmployeeName") { o = n.find("#txtSearch1").val() } } E = n.find("#ddlBank").val(); v = n.find("#txtSerial").val(); b = n.find("#txtInvoiceDateStart" + e).val(); w = n.find("#txtInvoiceDateEnd" + e).val(); S = n.find("#txtDueDateFrom").val(); x = n.find("#txtDueDateTo").val(); h = n.find("#txt_s_PriceFrom").val(); p = n.find("#txt_s_PriceTo").val() } var N = { sort: sortid, supplierid: n.find("#hd_d_PersonId").val(), IsClient: n.find("#hd_d_IsClient").val(), SupplierName: r, code: i, EmployeeId: s, EmployeeName: o, Shop: u, InvoiceId: a, ProductId: f, ProductName: l, Barcode: c, InvoiceDateStart: b, InvoiceDateEnd: w, PriceFrom: h, PriceTo: p, Order: m, PreOrder: g, Broken: y, CategoryId: d, shopid: $("#userDefault").find("#ddl_s_Branch").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), BankName: E, Serial: v, dueDateFrom: S, dueDateTo: x, pay: n.find("#Checkbox5" + e).length > 0 ? n.find("#Checkbox5" + e).prop("checked") : "", receive: n.find("#Checkbox6" + e).length > 0 ? n.find("#Checkbox6" + e).prop("checked") : "", cash: n.find("#Checkbox7" + e).length > 0 ? n.find("#Checkbox7" + e).prop("checked") : "", cheque: n.find("#Checkbox8" + e).length > 0 ? n.find("#Checkbox8" + e).prop("checked") : "", voucher: n.find("#Checkbox9" + e).length > 0 ? n.find("#Checkbox9" + e).prop("checked") : "", passed: n.find("#Checkbox10" + e).length > 0 ? n.find("#Checkbox10" + e).prop("checked") : "", notpass: n.find("#Checkbox11" + e).length > 0 ? n.find("#Checkbox11" + e).prop("checked") : "" }; t["DTO"] = N; pageselectCallback(0, t, { container: "", fname: t.fname, pagingContainer: e, first: true, isOrder: true }) } function getFullAcountList(e, t) { var n = $("#" + e); if (t.page_index > 0) t.first = false; var r = "", i = "", s = "", o = "", u = "", a = "", f = "", l = "", c = "", h = "", p = "", d = "", v = "", m = "", g = "", y = "", b = "", w = "", E = ""; s = n.find("#txt_customer").length > 0 ? n.find("#txt_customer").val() : ""; search = n.find("#ddlSearchBy2").val(); if (search != "") { if (search == "EmployeeCode") { o = n.find("#txtSearch2").val() } if (search == "EmployeeName") { u = n.find("#txtSearch2").val() } if (search == "confirmerCode") { h = n.find("#txtSearch2").val() } if (search == "confirmerName") { p = n.find("#txtSearch2").val() } if (search == "InvoiceNumber") { f = n.find("#txtSearch2").val() } } g = n.find("#txtInvoiceDateStart" + e).val(); y = n.find("#txtInvoiceDateEnd" + e).val(); if (n.find("#moreFilter").is(":visible")) { l = n.find("#txt_s_PriceFrom").val(); c = n.find("#txt_s_PriceTo").val(); b = n.find("#selectStatus").val(); w = n.find("#selectAmountStatus").val(); E = n.find("#ddl_AccountType").length > 0 ? n.find("#ddl_AccountType").val() : ""; d = getHierarchySelectedValue("hr_s_Category", e); v = n.find("#txt_s_ProductCode").val() } var S = { sort: sortid, supplierid: n.find("#hd_d_PersonId").val(), IsClient: n.find("#hd_d_IsClient").val(), SupplierName: r, code: s, customerName: i, EmployeeId: o, EmployeeName: u, Shop: a, InvoiceId: f, InvoiceDateStart: g, InvoiceDateEnd: y, PriceFrom: l, PriceTo: c, Order: n.find("#Checkbox7" + e).length > 0 ? n.find("#Checkbox7" + e).prop("checked") : "", shopid: $("#userDefault").find("#ddl_s_Branch").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), sell: n.find("#Checkbox1" + e).length > 0 ? n.find("#Checkbox1" + e).prop("checked") : "", buy: n.find("#Checkbox2" + e).length > 0 ? n.find("#Checkbox2" + e).prop("checked") : "", voucher: n.find("#Checkbox5" + e).length > 0 ? n.find("#Checkbox5" + e).prop("checked") : "", payment: n.find("#Checkbox3" + e).length > 0 ? n.find("#Checkbox3" + e).prop("checked") : "", transfer: n.find("#Checkbox4" + e).length > 0 ? n.find("#Checkbox4" + e).prop("checked") : "", notTransfer: n.find("#Checkbox12" + e).length > 0 ? n.find("#Checkbox12" + e).prop("checked") : "", expense: n.find("#Checkbox6" + e).length > 0 ? n.find("#Checkbox6" + e).prop("checked") : "", passed: n.find("#Checkbox10" + e).length > 0 ? n.find("#Checkbox10" + e).prop("checked") : "", notPassed: n.find("#Checkbox11" + e).length > 0 ? n.find("#Checkbox11" + e).prop("checked") : "", confirmed: n.find("#Checkbox8" + e).length > 0 ? n.find("#Checkbox8" + e).prop("checked") : "", notConfirmed: n.find("#Checkbox9" + e).length > 0 ? n.find("#Checkbox9" + e).prop("checked") : "", isDebtor: w, categoryId: d, barcode: v, accountType: E }; t["DTO"] = S; pageselectCallback(0, t, { container: "", fname: t.fname, pagingContainer: e, first: true, isOrder: true }) } function buildAcountList(jq, container) { var $con = $("#" + container.pagingContainer); var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "employee", sort: "p_person.Family", width: "10%" }); lsth.push({ title: "customer", sort: "p_person1.Family", width: "10%" }); lsth.push({ title: "date", sort: "Date", width: "10%" }); lsth.push({ title: "accountDescription", width: "10%" }); lsth.push({ title: "debtor", sort: "Amount", footer: jq.d.sumDebtor, width: "10%" }); lsth.push({ title: "creditor", sort: "Amount", footer: jq.d.sumCreditor, width: "10%" }); lsth.push({ title: "balanceAmount", footer: jq.d.sumDebtor * 1 - jq.d.sumCreditor * 1, width: "10%" }); lsth.push({ title: "store", sort: "inv_Shop.Name", width: "10%" }); lsth.push({ title: "counter", sort: "counterid", width: "10%" }); if (!container.params.print) lsth.push({ title: "details", width: "10%" }); var List = typeof jq.d.results == "string" ? eval("(" + jq.d.results + ")") : jq.d.results; var ItemList = ""; if (List != null) for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; if (!container.params.print) trBody[0] = { trId: val.id }; trBody[1] = { name: "employee", html: val.employee, width: "10%" }; trBody[2] = { name: "customer", html: val.client, width: "10%" }; trBody[3] = { name: "date", html: val.date, width: "10%" }; trBody[4] = { name: "description", html: val.inOrderOf, width: "10%" }; trBody[5] = { name: "Debtor", html: val.isSell == true ? val.amount : "", width: "10%" }; trBody[6] = { name: "Creditor", html: val.isSell == true ? "" : val.amount, width: "10%" }; trBody[7] = { name: "balance", html: val.balance, width: "10%" }; trBody[8] = { name: "shop", html: val.shopName, width: "10%" }; trBody[9] = { name: "counter", html: val.counterCode, width: "10%" }; lstb.push(trBody) } if (container.params.print) { table = { header: lsth, body: lstb, details: { detailsFunction: AcountDetails }, heigth: 300, container: container.pagingContainer, divName: "Div_Print", hasFooter: true }; buildPrintTable(table); container.params.print = false } else { table = { header: lsth, body: lstb, details: { detailsFunction: AcountDetails }, heigth: 300, container: container.pagingContainer, divName: "acountReportlist", hasFooter: true }; buildTable(table) } } function buildFullAcountList(jq, container) { var $con = $("#" + container.pagingContainer); $con.find("#divFooter").removeClass("invisible"); var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "employee", sort: "p_person.Family", width: "7%" }); lsth.push({ title: "customer", sort: "p_person1.Family", width: "7%" }); lsth.push({ title: "date", sort: "Date", width: "8%" }); lsth.push({ title: "accountDescription", width: "7%" }); lsth.push({ title: "debtor", sort: "Amount", width: "10%" }); lsth.push({ title: "creditor", sort: "Amount", width: "10%" }); lsth.push({ title: "balanceAmount", width: "12%" }); lsth.push({ title: "invoiceNumber", sort: "InvoiceNO", width: "8%" }); lsth.push({ title: "confirm", sort: "p_Employee.p_Person.Family", width: "7%" }); lsth.push({ title: "store", sort: "inv_Shop.Name", width: "6%" }); lsth.push({ title: "counter", sort: "counterid", width: "6%" }); if (!container.params.print) { lsth.push({ title: "print", width: "4%" }); lsth.push({ title: "edit", width: "4%" }); lsth.push({ title: "details", width: "4%" }) } var List = typeof jq.d.results == "string" ? eval("(" + jq.d.results + ")") : jq.d.results; var ItemList = ""; if (List != null) for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; if (!container.params.print) trBody[0] = { trId: val.id, trName: val.detail }; trBody[1] = { name: "employee", html: val.employee, width: "7%" }; trBody[2] = { name: "customer", html: " <span class='cursor' name='subTab'  menuName='a_CustomerList' id='" + val.ClientId + "'>" + val.client + "</span>" + " <input type='hidden' id='hd_code' value='" + val.clientCode + "'/><input type='hidden' id='hd_clientId' value='" + val.ClientId + "'/>", width: "7%" }; trBody[3] = { props: { datedigit: ToPersianDateDigit(val.date), date: val.date, name: "date", width: "8%", klass: "dateLong" }, html: val.date }; trBody[4] = { name: "description", html: "<span>" + val.inOrderOf + "</span>" + " <input type='hidden' id='hd_categoryId' value='" + val.categoryId + "'/><input type='hidden' id='hd_description' value='" + val.Description + "'/><input type='hidden' id='hd_salaryFromDate' value='" + val.salaryFromDate + "'/><input type='hidden' id='hd_salaryToDate' value='" + val.salaryToDate + "'/><input type='hidden' id='hd_monthId' value='" + val.Month + "'/><input type='hidden' id='hd_fixSalary' value='" + val.fixSalary + "'/><input type='hidden' id='hd_commission' value='" + val.commission + "'/>", width: "7%" }; trBody[5] = { html: val.isSell == true ? val.amount : "", props: { name: "Debtor", klass: "digit", style: "font-size:1em;", width: "10%"} }; trBody[6] = { html: val.isSell == true ? "" : "<span>" + val.amount + "</span>" + " <input type='hidden' id='hd_commission' value='" + val.commission + "'/>", props: { name: "Creditor", style: "font-size:1em;", klass: "digit", width: "10%"} }; trBody[7] = { name: "balance", html: val.balance, width: "12%" }; trBody[8] = { name: "InvoiceNO", html: val.InvoiceNO, width: "8%" }; trBody[9] = { name: "confirmer", html: val.ConfirmerId == null ? "<button id='btnConfirm'>تایید</button>" : val.confirmer, width: "7%" }; trBody[10] = { name: "shop", html: val.shopName, width: "6%" }; trBody[11] = { name: "counter", html: val.counterCode, width: "6%" }; lstb.push(trBody) } $con.find("#spDeptor").html(jq.d.sumDebtor); $con.find("#spCreditor").html(jq.d.sumCreditor); $con.find("#spBalance").html(Math.round(jq.d.sumDebtor * 1 - jq.d.sumCreditor * 1, 1)); $con.find("#spNotPassedCheque").html(jq.d.sumNotPassed); $con.find("#spNetBalance").html(Math.round(jq.d.sumDebtor * 1 - jq.d.sumCreditor * 1 - jq.d.sumNotPassed * 1, 1)); if (container.params.print) { table = { header: lsth, body: lstb, heigth: 300, container: container.pagingContainer, divName: "Div_Print", hasFooter: false }; buildPrintTable(table); container.params.print = false } else { table = { header: lsth, body: lstb, details: { detailsFunction: FullAcountDetails, editFunction: EditFullAccount, confirmFunction: ConfirmFullAccount, printFunction: PrintFullAccount }, heigth: 300, container: container.pagingContainer, divName: "acountReportlist", hasFooter: false }; buildTable(table) } } function PrintFullAccount(e, t) { if ($con.find("#Div_Print").html().length < 10) { $con.find("#Div_Print").load("Report/PrintInvoice.htm", function () { getDataPrint($(e).parents("tr").prop("id").replace("tr", ""), t) }) } else getDataPrint($(e).parents("tr").prop("id").replace("tr", ""), t) } function ConfirmFullAccount(e, t) { $con = $("#" + t); $dis = $(e); var n = { orderHeaderId: $dis.parents("tr").prop("id").replace("tr", "") }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/ConfirmFullAccount"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (e) { if (!isAuthenticated(e)) return; if (e.d != null && e.d.isdone == true) { getFullAcountList(t, { container: t, callbackmethod: getFullAcountList, fname: "", page_index: 0, build: buildFullAcountList, servicename: "Order", methodname: "GetFullOrderStatement", print: false }) } }, error: function (e) { alert(e.responseText) } }) } function EditFullAccount(e, t) { $con = $("#" + t); $dis = $(e); $("#edit" + t, "#editExpense" + t, "#editSalary" + t, "#editSocial" + t).dialog().dialog("close"); if ($dis.parents("tr").attr("name") == "payment") EditPaymentFullAccount($dis, t); else if ($dis.parents("tr").attr("name") == "order") EditOrderFullAccount($dis, t); else if ($dis.parents("tr").attr("name") == "voucher") EditVoucherFullAccount($dis, t); else if ($dis.parents("tr").attr("name") == "expense") EditExpenseFullAccount($dis, t); if ($dis.parents("tr").attr("name") == "salary") EditSalaryFullAccount($dis, t); if ($dis.parents("tr").attr("name") == "social") EditSocialFullAccount($dis, t) } function EditVoucherFullAccount(e, t) { var n = $("#" + t); var r = $(e); var i = $("#editvoucher" + t); i.find("#txt_voucherAmount").val(r.parents("tr").find("[name=Debtor]").html() != "" ? r.parents("tr").find("[name=Debtor]").html().replace(/,/g, "") : r.parents("tr").find("[name=Creditor]").html().replace(/,/g, "")); i.find("#btn_editVoucherAmount").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (UpdateVoucherAmount(r.parents("tr").prop("id").replace("tr", ""), t)) { } }); i.dialog(open).dialog({ width: 400, modal: true }); localize() } function EditOrderFullAccount(e, t) { var n = $("#" + t); var r = $(e); var i = $("#editOrder" + t); i.find("#txtAmount").val(r.parents("tr").find("[name=Debtor]").html() != "" ? r.parents("tr").find("[name=Debtor]").html().replace(/,/g, "") : r.parents("tr").find("[name=Creditor]").html().replace(/,/g, "")).parent("li").removeClass("hidden"); i.find("#txtDate").val(r.parents("tr").find("[name=date]").attr("datedigit")).datepicker(); i.find("#btnEditAccount").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (UpdateOrderFullAccount(r.parents("tr").prop("id").replace("tr", ""), t)) { } }); i.dialog(open).dialog({ width: 400, modal: true }); localize() } function EditPaymentFullAccount(e, t) { var n = $("#" + t); var r = $(e); var i = $("#editOrder" + t); i.find("#txtAmount").parent("li").addClass("hidden"); i.find("#txtDate").val(r.parents("tr").find("[name=date]").attr("datedigit")).datepicker(); i.find("#btnEditAccount").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (UpdatePaymentFullAccount(r.parents("tr").prop("id").replace("tr", ""), t)) { } }); i.dialog(open).dialog({ width: 400, modal: true }); localize() } function EditExpenseFullAccount(e, t) { var n = $(e).parents("tr"); var r = n.find("#hd_categoryId").val(); var i = $("#" + t); var s = $("#editExpense" + t); s.find("#divExpenseCategoryAdd").html(""); i.find("#btn_saveExpense").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll(i.find("#dialogAddExpense"))) EditExpense(n.prop("id").replace("tr", ""), s.prop("id")) }); s.find("#divExpenseCategoryAdd").html(""); bindHierarchyData({ id: "divExpenseCategoryAdd", container: "editExpense" + t, table: "ExpenseCategory", canmodify: true, parentid: r, css: "selectsmall1 required validate" }); s.find("#txt_m_amount_add").val(n.find("[name=Debtor]").html().replace(/,/g, "")); s.find("#txt_m_description_add").val(n.find("#hd_description").val()); s.dialog({ autoOpen: true }) } function EditSalaryFullAccount(e, t) { var n = $(e).parents("tr"); var r = $("#editSalary" + t); r.find("#btn_save").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll($con.find("#editSalary" + t))) EditEmployeeSalary($dis.parents("tr").prop("id").replace("tr", ""), "editSalary" + t) }); bindItemsForSelectCombo({ async: false, methodname: "getEmployees", servicename: "EmployeeService", id: "ddl_m_employee_add", container: "editSalary" + t, headertext: "انتخاب کارمند" }); r.find("#ddl_m_employee_add").val(n.find("#hd_clientId").val()); r.find("#txt_m_fromDate_add").val(n.find("#hd_salaryFromDate").val()); r.find("#txt_m_toDate_add").val(n.find("#hd_salaryToDate").val()); r.find("#txt_m_fixSalary_add").val(n.find("#hd_fixSalary").val()); r.find("#txt_m_commission_add").val(n.find("#hd_commission").val()); r.find("#txt_salary_description_add").val(n.find("#hd_description").val()); r.find("#txt_m_fromDate_add").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#txt_m_toDate_add").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); r.dialog(open).dialog({ width: 500 }) } function EditSocialFullAccount(e, t) { var n = $(e).parents("tr"); var r = $("#editSocial" + t); r.find("#btn_saveSocial").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll($con.find("#editSocial" + t))) EditSocialSecurity($dis.parents("tr").prop("id").replace("tr", ""), "editSocial" + t) }); bindItemsForSelectCombo({ async: false, methodname: "getEmployees", servicename: "EmployeeService", id: "ddl_social_employee_add", container: "editSocial" + t, headertext: "انتخاب کارمند" }); if ($("#Month_Name_Add").html() == "") bindXmlDropDownData({ async: false, id: "Month_Name_Add", container: "editSocial" + t, path: "Counter/MonthTitle", canmodify: true, istext: false, headertext: "انتخاب ماه" }); r.find("#ddl_social_employee_add").val(n.find("#hd_clientId").val()); r.find("#txt_social_amount_add").val(n.find("[name=Debtor]").html().replace(/,/g, "")); r.find("#Month_Name_Add select").val(n.find("#hd_monthId").val()); r.find("#txt_social_description_add").val(n.find("#hd_description").val()); r.dialog(open).dialog({ width: 500 }) } function UpdateVoucherAmount(e, t) { $con = $("#editvoucher" + t); var n = { orderHeaderId: e, amount: $con.find("#txt_voucherAmount").val() }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/EditOrderFullAcount"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (e) { if (!isAuthenticated(e)) return; return e.d.isdone }, error: function (e) { alert(e.responseText) } }) } function UpdateOrderFullAccount(e, t) { $con = $("#editOrder" + t); var n = { orderHeaderId: e, amount: $con.find("#txtAmount").val(), date: $con.find("#txtDate").val() }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/EditOrderFullAcount"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (e) { if (!isAuthenticated(e)) return; alert(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function UpdatePaymentFullAccount(e, t) { $con = $("#editOrder" + t); var n = { orderHeaderId: e, date: $con.find("#txtDate").val() }; $.ajax({ type: "POST", url: getPath("Services/Payment.asmx/EditPaymentFullAcount"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (e) { if (!isAuthenticated(e)) return; alert(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function UpdateExpenseFullAccount(e, t) { $con = $("#edit" + t); var n = { orderHeaderId: orderHeaderID, expenseCategory: getHierarchySelectedValue("divExpenseCategoryAdd", t), amount: $con.find("#txt_m_amount_add").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), currencyId: $("#userDefault").find("#ddl_m_Currency").val(), description: $con.find("#txt_m_description_add").val(), shopId: $("#userDefault").find("#ddl_s_Branch").val() }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/EditExpenseFullAcount"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (e) { if (!isAuthenticated(e)) return; alert(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function ExpenseDetailsFullAccount(e, t) { var n = $("#" + t); var r = $("#expense" + t); var i = ""; var s = $(e).parents("tr"); i += "<tr id='" + s.prop("id") + "'>" + "<td name='description' width='90%'>" + "مبلغ " + s.find("[name=Debtor]").html().replace(/,/g, "") + " تومان " + s.find("[name=description]").find("span").html() + "</td>" + "<td name='delete' width='10%'><button id='a_Button' >حذف</button></td>" + "</tr>"; r.find("#expenseDetailList").html(i).parent().tableScroll({ height: 380, width: 750, flush: false }); r.find("[id=a_Button]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) if (DeleteExpense($(this), t)) $(e).parents("tr").remove(); else return }); r.dialog({ width: 800 }).dialog("open") } function VoucherDetailsFullAccount(orderHeaderId, container) { $con = $("#" + container); var $dialog = $("#voucherDetailsList" + container); $.ajax({ type: "POST", url: getPath("Services/Order.asmx/GetVoucherDetailsFullAccount"), contentType: "application/json; charset=utf-8", data: "{orderHeaderId: '" + orderHeaderId + "'}", success: function (response) { if (!isAuthenticated(response)) return; jq = response.d; if (jq.msg != undefined && jq.msg == "empty") { $dialog.find("#DetailListVoucher").html(""); $dialog.dialog("close"); return } var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.OrderHeaderId + "'>" + "<td name='number' width='25%'>" + val.Number + "</td>" + "<td name='IsValid' width='20%'>" + "<span id='voucherStatus'>" + val.IsValid + "</span>&nbsp;&nbsp;&nbsp;<button id='btnConfirm'>تغییر وضعیت</button></td>" + "<td name='ExpieryDate' width='20%'><div id='ExpieryDate'>" + val.ExpieryDate + "</div></td>" + "<td name='Amount' width='20%'><div id='Amount'>" + val.Amount + "</div></td>" + "<td name='Edit' width='8%'><div><button id='btn_edit' >ویرایش</button></div></td>" + "<td name='Delete' width='7%'><div><button id='btn_delete' >حذف</button></div></td>" + "</tr>" } $dialog.find("#DetailListVoucher").html(ItemList).parent().tableScroll({ height: 380, width: 750, flush: false }); $dialog.find("[id=btnConfirm]").button({ icons: { primary: "ui-icon-check" }, text: false }).click(function () { ChangeVoucherStatus(this, container) }); $dialog.find("[id=btn_delete]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) DeleteVoucher(this, container); else return }); $dialog.find("[id=btn_edit]").button({ icons: { primary: "ui-icon-pencil" }, text: false }).click(function () { ClickDetailVoucher($(this).parents("tr").first(), container); $(this).parent("div").addClass("invisible") }); $dialog.dialog({ width: 800 }).dialog("open") }, error: function (e) { alert(e.responseText) } }) } function ClickDetailVoucher(e, t) { var n = $("#" + t); var r = $("#voucherDetailsList" + t); onRowClick(e); trid = e.prop("id"); if (e.hasClass("rowOnClick") && e.find("input:text").length < 2) { e.find("td[name=Amount]").append("<input type='text' id='Amount' class='inputText inputW100 ' value='" + e.find("div[id=Amount]").html() + "'/>"); e.find("div[id=Amount]").addClass("invisible"); e.find("td[name=ExpieryDate]").append("<input type='text' id='ExpieryDate' class='inputText inputW100 ' value='" + e.find("div[id=ExpieryDate]").html() + "'/>"); e.find("div[id=ExpieryDate]").addClass("invisible"); e.find("div[id=delete]").addClass("invisible"); e.find("td[name=Edit]").append("<div id='Edit'><a id='Edit_Button' href='#'>بروز </a></div>"); e.find("[id=Edit_Button]").click(function () { EditDetailVoucher(e, t) }).button(); $.each(r.find("tr[id*=tr]"), function () { if (!$(this).hasClass("rowOnClick")) { $(this).find("input[id=Amount]").remove(); $(this).find("input[id=ExpieryDate]").remove(); $(this).find("#Edit").remove(); $(this).find("div[id=delete]").removeClass("invisible"); $(this).find("div").removeClass("invisible") } }) } else { e.find("input:text[id!=txt_m_QuantityReturn]").remove(); e.find("select").remove(); e.find("Label[id=Label]").remove(); e.find("#Edit").remove(); e.find("div").removeClass("invisible") } } function EditDetailVoucher(e, t) { var n = $("#" + t); var r = { voucherNumber: e.find("td[name=number]").html(), amount: e.find("input[id=Amount]").val(), expieryDate: e.find("input[id=ExpieryDate]").val() }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/EditVoucherFullAccount"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isdone) { e.find("div[id=Amount]").html(e.find("input[id=Amount]").val()); e.find("div[id=ExpieryDate]").html(e.find("input[id=ExpieryDate]").val()) } e.find("input[id=Amount]").remove(); e.find("input[id=ExpieryDate]").remove(); e.find("#Edit").remove(); e.find("div[id=delete]").removeClass("invisible"); e.find("div").removeClass("invisible"); alert(t.d.msg) } }) } function EditAccount(e, t) { $con = $("#" + t); $dis = $(e) } function AcountDetails(e, t) { $con = $("#" + t); $dis = $(e); if ($dis.parents("tr").find("[name=counter]").html() != "") ListDetailPayment($dis.parents("tr").prop("id").replace("tr", ""), t); else SelectDetailInvoice($dis.parents("tr").prop("id").replace("tr", ""), "dialog" + t) } function FullAcountDetails(e, t) { $con = $("#" + t); $dis = $(e); $("#voucherDetailsList" + t + "," + "#DetailPaymentList" + t + "," + "#dialog" + t + "," + "#expense" + t).dialog().dialog("close"); if ($dis.parents("tr").attr("name") == "payment") ListDetailPayment($dis.parents("tr").prop("id").replace("tr", ""), t); else if ($dis.parents("tr").attr("name") == "order") SelectDetailInvoice($dis.parents("tr").prop("id").replace("tr", ""), "dialog" + t); else if ($dis.parents("tr").attr("name") == "voucher") VoucherDetailsFullAccount($dis.parents("tr").prop("id").replace("tr", ""), t); else if ($dis.parents("tr").attr("name") == "expense" || $dis.parents("tr").attr("name") == "salary" || $dis.parents("tr").attr("name") == "social") ExpenseDetailsFullAccount($dis, t) } function loadCustomerAcountReport(e, t, n) { sortid = "Date desc"; var r = $("#" + t); r.find("#hd_d_PersonId").val(e); if (n) { r.find("#moreFilter").slideUp("fast"); r.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); r.find("#moreFilter").slideToggle(function () { }) }); bindItemsForSelectCombo({ methodname: "GetComboItems", servicename: "XmlDropDown", headertext: "انتخاب بانک", id: "ddlBank", container: t }, "{ path:'Counter/BankTitle'}"); ChangeCheckBoxGroupName("Check", t); r.find("#txtInvoiceDateStart").attr("id", "txtInvoiceDateStart" + t); r.find("#txtInvoiceDateEnd").attr("id", "txtInvoiceDateEnd" + t); r.find("#txtInvoiceDateStart" + t).datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, n) { $("#txtInvoiceDateEnd" + t).datepicker("option", "minDate", new JalaliDate(n["selectedYear"], n["selectedMonth"], n["selectedDay"])) } }); r.find("#txtInvoiceDateEnd" + t).datepicker({ changeMonth: true, changeYear: true }); r.find("#btnPrint").off().on("click", function () { getAcountList(t, { container: t, callbackmethod: getAcountList, fname: "", page_index: 0, build: buildAcountList, servicename: "Invoice", methodname: "GetInvoiceStatement", print: true }) }).button({ icons: { primary: "ui-icon-print" }, text: true }); r.find("#txtDueDateFrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#txtDueDateTo").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); r.find("#txtDueDateTo").datepicker({ changeMonth: true, changeYear: true }); bindHierarchyData({ id: "hr_s_Category", table: "category", container: t }); r.find("[id=btnSearch]").button({ icons: { primary: "ui-icon-search"} }).unbind("click").click(function () { sortid = "date desc"; getAcountList(t, { container: t, callbackmethod: getAcountList, fname: "", page_index: 0, build: buildAcountList, servicename: "Invoice", methodname: "GetInvoiceStatement", print: false }) }) } getAcountList(t, { container: t, callbackmethod: getAcountList, fname: "", page_index: 0, build: buildAcountList, servicename: "Invoice", methodname: "GetInvoiceStatement", print: false }); r.find("#PageSize").off().on("change", function () { getAcountList(t, { container: t, callbackmethod: getAcountList, fname: "", page_index: 0, build: buildAcountList, servicename: "Invoice", methodname: "GetInvoiceStatement", print: false }) }); r.find("#DetailPaymentList").dialog({ autoOpen: false }).dialog({ width: 750 }); r.find("#dialog").attr("id", "dialog" + t); r.find("#ddlSearchBy1 option[value='Code']").remove(); r.find("#ddlSearchBy1 option[value='Name']").remove() } function loadVoucherList(e, t) { sortid = "OrderHeaderId desc"; var n = $("#" + e); if (t) { n.find("#moreFilter").slideUp("fast"); n.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); n.find("#moreFilter").slideToggle(function () { }) }); n.find("#VoucherFromValidationDate").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#VoucherToValidationDate").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#VoucherToValidationDate").datepicker({ changeMonth: true, changeYear: true }); n.find("#VoucherRegDateFrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#VoucherRegDateTo").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#VoucherRegDateTo").datepicker({ changeMonth: true, changeYear: true }); n.find("#VoucherPayDateFrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#VoucherPayDateTo").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#VoucherPayDateTo").datepicker({ changeMonth: true, changeYear: true }); n.find("#btnSearchVoucher").button({ icons: { primary: "ui-icon-search"} }).unbind("click").click(function () { sortid = "OrderHeaderId desc"; getVoucherList(e, { container: e, callbackmethod: getVoucherList, fname: "", page_index: 0, build: buildVoucherList, servicename: "Order", methodname: "GetVoucherList", print: false }) }); n.find("#PageSize").off().on("change", function () { getVoucherList(e, { container: e, callbackmethod: getVoucherList, fname: "", page_index: 0, build: buildVoucherList, servicename: "Order", methodname: "GetVoucherList", print: false }) }); getVoucherList(e, { container: e, callbackmethod: getVoucherList, fname: "", page_index: 0, build: buildVoucherList, servicename: "Order", methodname: "GetVoucherList", print: false }) } n.find("#voucherDetailsDialog").attr("id", "dialog" + e); n.find("#dialog" + e).dialog({ autoOpen: false }).dialog({ width: 800 }) } function getVoucherList(e, t) { var n = $("#" + e); if (t.page_index > 0) { t.first = false } var r = "", i = "", s = "", o = "", u = "", a = "", f = "", l = "", c = "", h = "", p = "", d = ""; var v = n.find("#SearchBy").val(); if (v != "") { if (v == "registerer") { r = n.find("#voucherTxtSearch").val() } if (v == "customer") { i = n.find("#voucherTxtSearch").val() } if (v == "number") { s = n.find("#voucherTxtSearch").val() } if (v == "payer") { o = n.find("#voucherTxtSearch").val() } } if (n.find("#moreFilter").is(":visible")) { p = n.find("#VoucherAmountFrom").val(); d = n.find("#VoucherAmountTo").val(); c = n.find("#VoucherBuyAmountFrom").val(); h = n.find("#VoucherBuyAmountTo").val(); u = n.find("#VoucherRegDateFrom").val(); a = n.find("#VoucherRegDateTo").val(); f = n.find("#VoucherPayDateFrom").val(); l = n.find("#VoucherPayDateTo").val() } var m = { sort: sortid, customerId: n.find("#hd_d_PersonId").val(), registerer: r, customer: i, number: s, payer: o, FromValidationDate: n.find("#VoucherFromValidationDate").val(), ToValidationDate: n.find("#VoucherToValidationDate").val(), voucherStatus: n.find("#voucherStatus").val(), amountFrom: p, amountTo: d, buyAmountFrom: c, buyAmountTo: h, regDateFrom: u, regDateTo: a, payDateFrom: f, payDateTo: l }; t["DTO"] = m; pageselectCallback(0, t, { container: "", fname: t.fname, pagingContainer: e, first: true, isOrder: false }) } function buildVoucherList(jq, container) { var $con = $("#" + container.pagingContainer); var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "کارمند (صادر کننده)", sort: "ac_OrderHeader1.p_Person.Family", width: "10%" }); lsth.push({ title: "مشتری (واریز کننده)", sort: "ac_OrderHeader1.p_Person1.Family", width: "10%" }); lsth.push({ title: "issueDate", sort: "ac_OrderHeader1.Date", width: "13%" }); lsth.push({ title: "buyPrice", sort: "ac_OrderHeader1.Amount", width: "9%" }); lsth.push({ title: "ارزش کارت", sort: "Amount", footer: jq.d.sumDebtor, width: "9%" }); lsth.push({ title: "شماره کارت", sort: "Number", footer: jq.d.sumCreditor, width: "10%" }); lsth.push({ title: "expieryDate", sort: "ExpieryDate", width: "13%" }); lsth.push({ title: "Shop", sort: "ac_OrderHeader1.inv_Shop.Name", width: "10%" }); lsth.push({ title: "status", sort: "IsValid", width: "8%" }); lsth.push({ title: "deleteKey", width: "4%" }); lsth.push({ title: "details", width: "4%" }); var List = typeof jq.d.results == "string" ? eval("(" + jq.d.results + ")") : jq.d.results; var ItemList = ""; if (List != null) for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; if (!container.params.print) trBody[0] = { trId: val.OrderHeaderId }; trBody[1] = { name: "employee", html: val.registerer, width: "10%" }; trBody[2] = { name: "customer", html: val.customer, width: "10%" }; trBody[3] = { html: val.Date, props: { name: "date", date: val.Date, width: "13%", klass: "date"} }; trBody[4] = { name: "payAmount", html: val.buyAmount, width: "9%" }; trBody[5] = { name: "amount", html: val.Amount, width: "9%" }; trBody[6] = { name: "number", html: val.Number, width: "10%" }; trBody[7] = { html: val.ExpieryDate, props: { name: "validationDate", date: val.ExpieryDate, width: "13%", klass: "date"} }; trBody[8] = { name: "shop", html: val.shop, width: "10%" }; trBody[9] = { name: "status", html: "<span id='voucherStatus'>" + (val.IsValid == true ? "معتبر" : "نامعتبر") + "</span>&nbsp;&nbsp;&nbsp;<button id='btnConfirm'>تغییر وضعیت</button>", width: "8%" }; lstb.push(trBody) } var details = { deleteFunction: DeleteVoucher, confirmFunction: ChangeVoucherStatus, detailsFunction: VoucherDetails }; table = { header: lsth, body: lstb, details: details, heigth: 300, container: container.pagingContainer, divName: "VoucherList", hasFooter: true }; buildTable(table) } function DeleteVoucher(e, t) { var n = $("#" + t); var r = $("#tr" + e); var i = { voucherNumber: r.find("[name=number]").html() }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/DeleteVoucher"), contentType: "application/json; charset=utf-8", data: JSON.stringify(i), success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isdone == false) { alert(e.d.msg); return } if (e.d != null && e.d.isdone == true) r.remove() }, error: function (e) { alert(e.responseText) } }) } function ChangeVoucherStatus(e, t) { var n = $("#" + t); var r = $(e); var i = { voucherNumber: r.parents("tr").find("[name=number]").html() }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/ChangeVoucherStatus"), contentType: "application/json; charset=utf-8", data: JSON.stringify(i), success: function (e) { if (!isAuthenticated(e)) return; if (e.d != null && e.d.isdone == false) { alert(e.d.msg); return } if (e.d != null && e.d.isdone == true) { var t = r.parent(); if (e.d.status) t.find("#voucherStatus").html("معتبر"); else t.find("#voucherStatus").html("نامعتبر") } }, error: function (e) { alert(e.responseText) } }) } function VoucherDetails(e, t) { var n = $("#" + t); var r = $(e); var i = $("#dialog" + t); $.ajax({ type: "POST", url: getPath("Services/Order.asmx/GetVoucherDetails"), contentType: "application/json; charset=utf-8", data: "{voucherNumber: '" + r.parents("tr").find("[name=number]").html() + "'}", success: function (e) { if (!isAuthenticated(e)) return; jq = e.d; if (jq.OrderHeaderId == undefined) { alert("کارت هدیه خرج نشده است."); return } if (jq.msg != undefined && jq.msg == "empty") { i.find("#VoucherDetailList").html(""); i.dialog("close"); return } var t = ""; t += "<tr id='tr" + jq.OrderHeaderId + "'>" + "<td name='customer' width='20%'>" + jq.employer + "</td>" + "<td name='payer' width='20%'>" + jq.payer + "</td>" + "<td name='Date' width='20%'>" + jq.Date + "</td>" + "<td name='shop' width='20%'>" + jq.shop + "</td>" + "<td name='counter' width='20%'>" + jq.counter + "</td>" + "</tr>"; i.find("#VoucherDetailList").html(t).parent().tableScroll({ height: 380, width: 750, flush: false }); i.dialog({ width: 800 }).dialog("open") }, error: function (e) { alert(e.responseText) } }) } function AddVoucher(e, t) { var n = $("#" + t.pagingContainer); var r = { customerId: e, voucherAmount: 1e5, minimumBuy: 200, currencyId: $("#userDefault").find("#ddl_m_Currency").val(), shopId: $("#userDefault").find("#ddl_s_Branch").val(), expieryDate: "1391/10/30" }; $.ajax({ url: getPath("Services/Customer.asmx/AddVoucher"), data: JSON.stringify(r), dataType: "json", type: "POST", contentType: "application/json; charset=utf-8", success: function (e) { }, error: function (e) { alert(e.responseText) } }) } function loadCustomerVoucherList(e, t, n) { sortid = "OrderHeaderId desc"; var r = $("#" + t); r.find("#hd_d_PersonId").val(e); if (n) { r.find("#moreFilter").slideUp("fast"); r.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); r.find("#moreFilter").slideToggle(function () { }) }); r.find("#txtFromValidationDate").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#txtToValidationDate").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); r.find("#txtToValidationDate").datepicker({ changeMonth: true, changeYear: true }); r.find("#VoucherRegDateFrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#VoucherRegDateTo").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); r.find("#VoucherRegDateTo").datepicker({ changeMonth: true, changeYear: true }); r.find("#VoucherPayDateFrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#VoucherPayDateTo").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); r.find("#VoucherPayDateTo").datepicker({ changeMonth: true, changeYear: true }); r.find("#btnSearchVoucher").button({ icons: { primary: "ui-icon-search"} }).unbind("click").click(function () { sortid = "OrderHeaderId desc"; getVoucherList(t, { container: t, callbackmethod: getVoucherList, fname: "", page_index: 0, build: buildVoucherList, servicename: "Order", methodname: "GetVoucherList", print: false }) }); r.find("#PageSize").off().on("change", function () { getVoucherList(t, { container: t, callbackmethod: getVoucherList, fname: "", page_index: 0, build: buildVoucherList, servicename: "Order", methodname: "GetVoucherList", print: false }) }); getVoucherList(t, { container: t, callbackmethod: getVoucherList, fname: "", page_index: 0, build: buildVoucherList, servicename: "Order", methodname: "GetVoucherList", print: false }); r.find("#SearchBy option[value='customer']").remove() } r.find("#voucherDetailsDialog").attr("id", "dialog" + t); r.find("#dialog" + t).dialog({ autoOpen: false }).dialog({ width: 750 }) } function getCustomerVoucherList(e, t) { var n = $("#" + e); if (n.find("#txt_payer").val() == "" && n.find("#hd_d_PersonId").val() == "") { alert("کد مشتری را انتخاب کنید."); return } if (t.page_index > 0) { t.first = false } var r = { sort: sortid, customerId: n.find("#hd_d_PersonId").val(), customerCode: n.find("#txt_payer").val() }; t["DTO"] = r; pageselectCallback(0, t, { container: "dialog", fname: t.fname, pagingContainer: e, first: true, isOrder: false }) } function VoucherRowClick(e, t) { var n = $("#" + t); n.find("#txtVoucherNumber").val(e.find("[name=number]").html()); GetVoucherItem(true, t) } function GetVoucherItem(e, t) { var n = $("#" + t); var r = $("#" + t); var i = ""; var s = false; var o = { voucherNumber: n.find("#txtVoucherNumber").val() }; $.ajax({ url: getPath("Services/Order.asmx/GetVoucherItem"), data: JSON.stringify(o), dataType: "json", type: "POST", contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.msg == undefined) { n.find("#divslider2").removeClass("invisible"); n.find("#table_voucher").removeClass("invisible"); buildPayVoucherItem(e, t) } }, error: function (e) { alert(e.responseText) } }) } function buildPayVoucherList(jq, pageoption) { var $con = $("#" + pageoption.container); jq = jq.d.results; var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "voucherOwner", width: "12%" }); lsth.push({ title: "number", sort: "Number", width: "35%" }); lsth.push({ title: "cost", sort: "Amount", width: "14%" }); lsth.push({ title: "expieryDate", sort: "ExpieryDate", width: "10%" }); lsth.push({ title: "buyAmount", sort: "buyAmount", width: "15%" }); lsth.push({ title: "registerer", width: "14%" }); var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; trBody[0] = { trId: val.OrderHeaderId }; trBody[1] = { name: "customer", html: val.customer, width: "12%" }; trBody[2] = { name: "number", html: val.Number, width: "35%" }; trBody[3] = { name: "Amount", html: val.Amount, width: "14%" }; trBody[4] = { name: "ExpieryDate", html: val.ExpieryDate, width: "10%" }; trBody[5] = { name: "buyAmount", html: val.buyAmount, width: "15%" }; trBody[6] = { name: "registerer", html: val.registerer, width: "14%" }; lstb.push(trBody) } details = { rowClick: pageoption.fname }; table = { header: lsth, body: lstb, details: details, heigth: 300, width: 620, container: pageoption.container + pageoption.pagingContainer, divName: "VoucherList", rowClickParams: { fname: VoucherRowClick} }; buildTable(table) } function buildPayVoucherItem(e, t) { var n = $("#" + t); var r = 0; e = e.d; n.find("#VoucherItem").find("td[name=voucherNumber]").each(function () { if ($(this).html() == e.Number) r++ }); if (r == 0) { var i = "voucher_" + e.OrderHeaderId; var s = ""; s += "<tr id= '" + i + "'>" + "<td width='12%'>" + e.customer + "</td>" + "<td name='voucherNumber' width='10%'>" + e.Number + "</td>" + "<td name='voucherAmount' width='13%'>" + e.Amount + "</td>" + "<td width='10%'>" + e.ExpieryDate + "</td>" + "<td width='13%'>" + e.buyAmount + "</td>" + "<td width='12%'>" + e.registerer + "</td>" + "<td width='10%'>" + e.Date + "</td>" + "<td width='14%'>" + e.shop + "</td>" + "<td id='delete' width='6%'><button name='btn_Delete' ></button></td></tr>"; "</tr >"; n.find("#VoucherItem").append(s).parent().tableScroll({ height: 380, width: n.width() - 85, flush: false }); tableStyle(); SumPayment(t); n.find("[name=btn_Delete]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).unbind().click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveItemVoucherElement($(this).parents("tr").attr("id"), t); else return }) } } function RemoveItemVoucherElement(e, t) { var n = $("#" + t); n.find("#" + e).remove(); SumPayment(t) } function loadSellVoucher(e, t) { var n = $("#" + e); if ($("#txt_customer").val() != "") n.find("#txt_payer").val($("#txt_customer").val()); n.find("#btn_newVoucher").button({ icons: { primary: "ui-icon-plus" }, text: true }).click(function () { BuildVoucherItem(e) }); n.find("#btn_Add_Voucher").button({ icons: { primary: "ui-icon-disk" }, text: true }).click(function () { if (validateAll(n)) AddSellVoucher(n.find("#txt_payer").val(), e) }); aComplete({ methodname: "GetCompletionListByCustomerName", servicename: "AtuoComplete", id: "txt_payer", container: e, minlength: 2, autofocus: false, limit: 20, boxId: "txt_payer", fname: customerOnSelect }); n.find("#txt_PaymentAmount").dblclick(function () { n.find("#txt_PaymentAmount").val(n.find("#txt_TotalAmount").val()) }) } function BuildVoucherItem(e) { var t = $("#" + e); t.find("#table_voucher").removeClass("invisible"); var n = ""; n += "<tr name='sellVoucher'>" + "<td width='45%'><input type='text' class=' inputText inputW136 required validate' name='Digit' id='txt_amount' onchange='return SumVoucherAmount(\"" + e + "\");'/></td>" + "<td width='45%'><input type='text' class=' inputText inputW136 required validate' name='Date' id='txt_date'/></td>" + "<td width='10%'><button id='btn_delete'>حذف</button></td>" + "</tr>"; t.find("#table_voucher").append(n).parent().tableScroll({ height: 380, width: 600, flush: false }); SumVoucherAmount(e); t.find("[id=btn_delete]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { $(this).parents("tr").remove(); SumVoucherAmount(e) }) } function SumVoucherAmount(e) { var t = $("#" + e); var n = 0; t.find("tr[name=sellVoucher]").each(function () { n += $(this).find("#txt_amount").val() * 1 }); t.find("#txt_TotalAmount").val(n) } function AddSellVoucher(e, t) { var n = $("#" + t); var r = []; n.find("tr[name=sellVoucher]").each(function () { var e = {}; e["ExpieryDate"] = $(this).find("#txt_date").val(); e["Amount"] = $(this).find("#txt_amount").val(); r.push(e) }); var i = { customerCode: e, currencyId: $("#userDefault").find("#ddl_m_Currency").val(), shopId: $("#userDefault").find("#ddl_s_Branch").val(), vouchers: r, counterId: $("#userDefault").find("#ddl_m_Counter").val(), amount: n.find("#txt_TotalAmount").val(), payAmount: n.find("#txt_PaymentAmount").val(), description: n.find("#txt_description").val() }; $.ajax({ url: getPath("Services/Customer.asmx/AddSellVoucher"), data: JSON.stringify(i), dataType: "json", type: "POST", contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function loadOnlineProfile(e, t, n) { var r = $("#" + t); if (n) { r.find("#hvCustomerId").val(e); GetOnlineProfile(e, t); bindRawDropDownData({ id: "divRestriction", container: t, path: "restriction", canmodify: true, istext: false, headertext: "انتخاب گروه ", css: "selectsmall " }); r.find("#btnEditProfile").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll($("#" + t))) UpdateOnlineProfile(e, t) }); getCustomerRestrictionList(t, { container: t, callbackmethod: getCustomerRestrictionList, fname: "", page_index: 0, build: buildCustomerRestrictionList, servicename: "Customer", methodname: "GetCustomerRestrictionList", print: false, customerId: e }); r.find("#btnAddRestriction").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll($("#RestrictionList"))) AddCustomerRestriction(e, t) }) } } function getCustomerRestrictionList(e, t) { var n = $("#" + e); if (t.page_index > 0) { t.first = false } var r = { customerId: t.customerId }; t["DTO"] = r; pageselectCallback(0, t, { container: "", fname: t.fname, pagingContainer: e, first: true, isOrder: false }) } function buildCustomerRestrictionList(jq, container) { var $con = $("#" + container.pagingContainer); var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "restriction", width: "80%" }); var List = typeof jq.d.results == "string" ? eval("(" + jq.d.results + ")") : jq.d.results; var ItemList = ""; if (List != null) for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; if (!container.params.print) trBody[0] = { trId: val.RestrictionId }; trBody[1] = { name: "restriction", html: val.Restriction, width: "80%" }; lstb.push(trBody) } var details = { deleteFunction: DeleteCustomerRestriction }; table = { header: lsth, body: lstb, details: details, heigth: 300, container: container.pagingContainer, divName: "restrictionList", hasFooter: true }; buildTable(table) } function DeleteCustomerRestriction(e, t) { var n = $("#" + t); var r = $("#tr" + e); var i = { customerId: n.find("#hvCustomerId").val(), restrictionId: e }; $.ajax({ type: "POST", url: getPath("Services/Customer.asmx/DeleteCustomerRestriction"), contentType: "application/json; charset=utf-8", data: JSON.stringify(i), success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isDone == false) { alert(e.d.msg); return } if (e.d != null && e.d.isDone == true) r.remove() }, error: function (e) { alert(e.responseText) } }) } function AddCustomerRestriction(e, t) { var n = $("#" + t); var r = { customerId: e, restrictionId: n.find("#divRestriction option:selected").val() }; $.ajax({ type: "POST", url: getPath("Services/Customer.asmx/AddCustomerRestriction"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (n) { if (!isAuthenticated(n)) return; if (n.d.isDone == false) { alert(n.d.msg); return } if (n.d != null && n.d.isDone == true) getCustomerRestrictionList(t, { container: t, callbackmethod: getCustomerRestrictionList, fname: "", page_index: 0, build: buildCustomerRestrictionList, servicename: "Customer", methodname: "GetCustomerRestrictionList", print: false, customerId: e }) }, error: function (e) { alert(e.responseText) } }) } function GetOnlineProfile(e, t) { var n = $("#" + t); var r = { customerId: e }; $.ajax({ type: "POST", url: getPath("Services/Customer.asmx/GetOnlineProfile"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isDone) { n.find("#txtEmail").val(e.d.email); n.find("#cbIsWholesaleBuyer").prop("checked", e.d.isWholesaleBuyer); n.find("#cbCanGetCredit").prop("checked", e.d.canGetCredit); n.find("#cbIsFriend").prop("checked", e.d.isFriend) } }, error: function (e) { alert(e.responseText) } }) } function UpdateOnlineProfile(e, t) { var n = $("#" + t); var r = { customerId: e, email: n.find("#txtEmail").val(), isWholesaleBuyer: n.find("#cbIsWholesaleBuyer").prop("checked"), canGetCredit: n.find("#cbCanGetCredit").prop("checked"), isFriend: n.find("#cbIsFriend").prop("checked") }; $.ajax({ type: "POST", url: getPath("Services/Customer.asmx/UpdateOnlineProfile"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function loadNewSalary(e, t) { var n = $("#" + e); n.find("#dialogAddSalary").removeClass("invisible"); bindItemsForSelectCombo({ async: false, methodname: "getEmployees", servicename: "EmployeeService", id: "ddl_m_employee_add", container: e, headertext: "انتخاب کارمند" }); n.find("#btn_save").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll($("#" + e))) AddEmployeeSalary("dialogAddAccounting") }); n.find("#txt_m_fromDate_add").attr("id", e + "txt_m_fromDate_add"); n.find("#txt_m_toDate_add").attr("id", e + "txt_m_toDate_add"); n.find("#" + e + "txt_m_fromDate_add").datepicker({ changeMonth: true, changeYear: true, onClose: function () { validateAll($("#" + e)) }, onSelect: function (t, n) { $("#" + e + "txt_m_toDate_add").datepicker("option", "minDate", new JalaliDate(n["selectedYear"], n["selectedMonth"], n["selectedDay"])) } }); n.find("#" + e + "txt_m_toDate_add").datepicker({ changeMonth: true, changeYear: true, onClose: function () { validateAll($("#" + e)) } }) } function loadNewSocialSecurity(e, t) { var n = $("#" + e); n.find("#dialogAddSocial").removeClass("invisible"); bindItemsForSelectCombo({ async: false, methodname: "getEmployees", servicename: "EmployeeService", id: "ddl_social_employee_add", container: e, headertext: "انتخاب کارمند" }); bindXmlDropDownData({ async: false, id: "Month_Name_Add", container: e, path: "Counter/MonthTitle", canmodify: true, istext: false, headertext: "انتخاب ماه", css: "selectsmall required validate" }); n.find("#btn_save").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll(n)) AddSocialSecurity("dialogAddSocial") }) } function loadNewExpense(e, t) { var n = $("#" + e); n.find("#dialogAddExpense").removeClass("invisible"); bindHierarchyData({ id: "divExpenseCategoryAdd", container: "dialogAddExpense", table: "ExpenseCategory", canmodify: true, css: "selectsmall1 required validate" }); n.find("#btn_save").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll($("#dialogAddExpense"))) AddExpense("dialogAddExpense") }) } function loadSupplierWholesaleOrder(e, t, n) { loadOrder(e, t, GetItemOrderWholesale, true, false, n) } function loadCustomerWholesaleOrder(e, t, n) { loadOrder(e, t, GetItemOrderWholesale, true, true, n) } function AddOrderWholesale(e, t) { var n = $("#" + t); var r = []; var i = {}; $.each($("#" + t).find("tr[id*=tr]"), function () { var e = {}; e["barcodeid"] = this.id.split("_")[2]; var t = $(this); var n = []; $(this).find("input[name=quantity]").each(function () { if (this.value != "") { var e = {}; var r = {}; e = this.id.split("-"); r["ColorID"] = e[0]; r["SizeID"] = e[1]; r["Quantity"] = this.value * (t.find("[id*=ddl_m_measureunit]").val() != null ? t.find("[id*=ddl_m_measureunit]").val().split("_")[0] : 1); n.push(r) } }); if ($(this).find("#txt_m_TotalQuantity").val() == "0" || $(this).find("#txt_m_TotalQuantity").val() == undefined) return; e["quantity"] = $(this).find("#txt_m_TotalQuantity").val(); e["price"] = $(this).find("#txt_m_Price").val(); e["description"] = ""; e["serial"] = ""; e["broken"] = false; e["itemDetails"] = n; r.push(e) }); i["shopid"] = $("#userDefault").find("#ddl_s_Branch").val(); i["currenyid"] = $("#userDefault").find("#ddl_m_Currency").val(); i["date"] = $("#userDefault").find("#txt_s_Date").val(); i["totalamount"] = n.find("#txt_m_TotalPrice").val().replace(/,/g, ""); i["description"] = n.find("#txt_m_Description").val(); i["invoicenumber"] = n.find("#txt_m_InvoiceNumber").val(); i["PaymentAmount"] = n.find("#txt_m_PaymentAmount").val().replace(/,/g, ""); i["customerid"] = e; i["issell"] = !n.find("#cb_d_Sale" + t).prop("checked"); i["ispreorder"] = n.find("#cb_d_PreOrder" + t).prop("checked"); if (r != "") { var s = { header: i, itemDetails: r, counterId: $("#userDefault").find("#ddl_m_Counter").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(s), type: "Post", url: getPath("Services/Order.asmx/AddOrderWholeSale"), success: function (e) { if (!isAuthenticated(e)) return; if (e.d.alert != undefined) { SetInvoiceData(t, e); translate(e.d.alert); if (e.d.InvoiceNO != undefined) { n.find("#OrderList").html(""); n.find("#btn_Print").removeClass("invisible"); n.find("#btn_AddOrder").addClass("invisible"); n.find("#txt_m_InvoiceNumber").val(e.d.InvoiceNO) } } else translate(e.d) }, error: function (e) { alert(e.responseText) } }) } } function GetItemOrderWholesale($dis, container, barcode) { if (barcode == undefined) barcode = $dis.find("[name=barcode]").html(); var $con = $("#" + container.replace("dialog", "")); var ItemList = ""; $.ajax({ type: "POST", data: "{barcode: '" + barcode + "'}", url: getPath("Services/Order.asmx/GetProduct"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; $con.find("#txt_s_ProductBarcode").val(""); if (response.d.length < 1) return; var count = $con.find("tr[id*='tr_" + container + "']").length; var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemList = ""; var val = List[0, 0]; var trid = "tr_" + container + "_" + val.barcodeid + "_" + count; ItemList += "<tr id='" + trid + "'>" + "<td width='3%' id='rownumber'></td>" + "<td width='11%'><a href='javascript:showQuantity(\"" + container + '","' + val.barcode + "\");'>" + val.name + " " + val.code + " " + val.barcode + "</a></td>" + "<td id='mesureunit' width='8%'>" + " <select   id='ddl_m_measureunit_" + trid + "' disabled='disabled' class='select95'></select>" + "</td>" + "<td id='Div_Product_Quantity_" + trid + "' width='43%' dir='rtl'></td>" + "<td width='11%'><input type='text'  class=' inputText inputW100 fontSize15' id='txt_m_Price' value='" + val.price + "'/></td>" + "<td width='6%'><input type='text'  class=' inputText inputW50 fontSize15' id='txt_m_TotalQuantity'  disabled='disabled' value='0'/></td>" + "<td width='13%'><input type='text'  class=' inputText inputW136 fontSize15 digit' id='txt_m_TotalItemPrice' disabled='disabled' /></td>" + "<td width='5%' id='delete'><button name='btn_Delete' >حذف</button></td></tr>"; $con.find("#OrderList").append(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("#btn_Print").addClass("invisible"); $con.find("#btn_AddOrder").removeClass("invisible"); $con.find("[name=btn_Delete]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).unbind().click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveItemOrderElementWholesale($(this).parents("tr").attr("id"), container); else return }); if ($con.find("#wholeOrderList").html() == "") { $("#" + container).find("#Footer").addClass("invisible"); $("#" + container).find("#header").addClass("invisible") } else { $("#" + container).find("#Footer").removeClass("invisible"); $("#" + container).find("#header").removeClass("invisible") } var rownumber = 0; $.each($("#" + container).find("#OrderList").find("tr[id*=tr_]"), function () { rownumber++; $(this).find("[id=rownumber]").html(rownumber) }); $con.find("[id=txt_m_Price]").spinner({ step: 1e3, change: function () { SumWholesale(container) }, stop: function () { SumWholesale(container) } }); $("#" + trid).find("#txt_m_Price").bind("keydown", function (e) { if (e.keyCode == 40) { $("#" + trid).next().find("#txt_m_Price").focus().focus(function () { this.select() }) } if (e.keyCode == 38) { $("#" + trid).prev().find("#txt_m_Price").focus().focus(function () { this.select() }) } }); bindComboData({ id: "ddl_m_measureunit_" + trid, container: trid, isMeasureUnit: true }, val.measureUnits); $("#ddl_m_measureunit_" + trid).change(function () { SumWholesale(container) }); buildColorSizeTable(barcode, $("#userDefault").find("#ddl_s_Branch").val(), false, "GetItemDetailsByBarcodeAndShopIDNoQuantity", "Div_Product_Quantity_" + trid, trid); $con.find("#Footer").removeClass("invisible") }, error: function (e) { alert(e.responseText) } }) } function RemoveItemOrderElementWholesale(e, t) { $("#" + e).remove(); SumWholesale(e.split("_")[1]) } function getBarcodeListOrder(e, t) { var n = $("#" + e); var r = $("#" + t.container + e); var i = n.find("#txt_s_ProductBarcode").val(); if (i != "" && i != undefined) { t.fname(null, e, i); return } if (t.page_index > 0) { t.first = false } var s = { sort: sortid, barcode: n.find("#txt_s_ProductBarcode").val() == undefined ? "" : n.find("#txt_s_ProductBarcode").val(), name: n.find("#txt_s_ProductCode").val() == undefined ? "" : n.find("#txt_s_ProductCode").val(), code: "", price: "", categoryid: getHierarchySelectedValue("hr_s_Category", e), status: n.find("#ddl_m_Availability").val() == undefined ? "" : n.find("#ddl_m_Availability").val(), quantityfrom: "", quantityto: "", regdatefrom: "", regdateto: "", shopid: $("#userDefault").find("#ddl_s_Branch").val(), showOnline: n.find("#ddl_s_ShowOnline").val() == undefined ? "" : n.find("#ddl_s_ShowOnline").val(), selectData: "GetItemsList" }; t["DTO"] = s; pageselectCallback(0, t, { container: "dialog", fname: t.fname, pagingContainer: e, first: true, isOrder: true, isChangeQuantity: true }) } function buildBarcodeListOrder(jq, pageoption) { var $con = $("#" + pageoption.container); jq = jq.d.results; var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "category", width: "12%" }); lsth.push({ title: "itemName", sort: "Name", width: "35%" }); lsth.push({ title: "itemCode", sort: "ItemCode", width: "14%" }); lsth.push({ title: "count", sort: "Quantity", width: "10%" }); lsth.push({ title: "price", sort: "Regular", width: "15%" }); lsth.push({ title: "barcode", sort: "Barcode", width: "14%" }); var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; trBody[0] = { trId: val.BarcodeId }; trBody[1] = { html: val.Category, width: "12%" }; trBody[2] = { name: "name", html: val.Name, width: "35%" }; trBody[3] = { name: "code", html: val.ItemCode, width: "14%" }; trBody[4] = { name: "quantity", html: val.Quantity + " " + val.UnitType, width: "10%" }; trBody[5] = { html: val.Regular, props: { name: "price", klass: "digit", width: "15%"} }; trBody[6] = { name: "barcode", html: val.Barcode, width: "14%" }; lstb.push(trBody) } details = { rowClick: pageoption.fname }; table = { header: lsth, body: lstb, details: details, heigth: 300, width: 620, container: pageoption.container + pageoption.pagingContainer, divName: "BarcodeList", rowClickParams: { fname: GetItemOrder} }; buildTable(table) } function SelectBarcodeWholesale(e, t, n) { n.fname($(e).find("td[name=barcode]").html(), t) } function SumWholesale(e) { var t = 0; var n = $("#" + e); var r = 0; $.each(n.find("tr[id*=tr]"), function () { $(this).find("#txt_m_TotalQuantity").val(getTotalQuantity($(this).find("td[id*=Div_Product_Quantity_]").prop("id"), $(this).prop("id")) * ($(this).find("[id*=ddl_m_measureunit]").val() != null ? $(this).find("[id*=ddl_m_measureunit]").val().split("_")[0] : 1)); var e = $(this).find("#txt_m_TotalQuantity").val() * $(this).find("#txt_m_Price").val(); $(this).find("#txt_m_TotalItemPrice").val(e); $(this).find("#txt_m_TotalItemPrice").attr("price", e); t += $(this).find("#txt_m_TotalItemPrice").attr("price") * 1; r++; $(this).find("[id=rownumber]").html(r) }); if (r <= 0) { $("#" + e).find("#Footer").addClass("invisible"); $("#" + e).find("#header").addClass("invisible") } else { $("#" + e).find("#Footer").removeClass("invisible"); $("#" + e).find("#header").removeClass("invisible") } n.find("#txt_m_TotalPrice").val(t); if (!$.browser.msie) { $(".digit").digits() } } function loadSupplierPayment(e, t, n) { if (n) { var r = $("#" + t); r.find("#div_customer").addClass("invisible"); r.find("#txt_payer").removeClass("required"); r.find("#ddl_CounterTo").addClass("invisible"); r.find("#lbl_CounterTo").addClass("hidden"); r.find("#lbl_payer").addClass("hidden"); ChangeCheckBoxGroupName("radio", t); setRadioValue("radio" + t, "true", t); r.find("#radio" + t).buttonset(); r.find("#btn_Cash").off().on("click", function () { GetItemCash(t) }).button({ icons: { primary: "ui-icon-plus" }, text: true }); r.find("#btn_Cheque").off().on("click", function () { if (n) { r.find("#divslider2").removeClass("invisible"); r.find("#table_cheque").removeClass("invisible") } GetItemCheque(t) }).button({ icons: { primary: "ui-icon-plus" }, text: true }); r.find("#btn_Add_Payment").off().on("click", function () { if (validateAll(r) && r.find("#txt_SumPeyment").val() != "0") AddPayment(e, t) }).button({ icons: { primary: "ui-icon-disk" }, text: true }); GetItemCash(t) } } function loadPayment(e, t) { var n = $("#" + e); if ($("#txt_customer").val() != "") n.find("#txt_payer").val($("#txt_customer").val()); n.find("#div_counterTo").addClass("invisible"); aComplete({ methodname: "GetCompletionListByCustomerName", servicename: "AtuoComplete", id: "txt_payer", container: e, minlength: 2, autofocus: false, limit: 20, boxId: "txt_payer", fname: customerOnSelect }); loadCustomerPayment(null, e, t) } function loadCounterPayment(e, t) { var n = $("#" + e); n.find("#voucherDiv").addClass("invisible"); n.find("#div_customer").addClass("invisible"); n.find("#txt_payer").removeClass("required"); n.find("#div_counterTo").addClass("invisible"); n.find("#div_voucherTxt").addClass("hidden"); n.find("#spanVoucher").addClass("invisible"); loadCustomerPayment(null, e, t) } function loadTransferMoney(e, t) { var n = $("#" + e); n.find("#radio").addClass("invisible"); n.find("#voucherDiv").addClass("invisible"); n.find("#div_customer").addClass("invisible"); n.find("#txt_payer").removeClass("required"); n.find("#div_voucherTxt").addClass("hidden"); n.find("#spanVoucher").addClass("invisible"); bindItemsForSelectCombo({ methodname: "getCounterName", servicename: "Counter", headertext: "انتخاب صندوق", id: "ddl_CounterTo", container: e }); loadCustomerPayment(null, e, t) } function loadCustomerPayment(e, t, n) { sortid = "OrderHeaderId desc"; var r = $("#" + t); if (n) { if (e != null) { r.find("#div_counterTo").addClass("invisible"); r.find("#div_customer").addClass("invisible"); r.find("#txt_payer").removeClass("required") } ChangeCheckBoxGroupName("radio", t); r.find("#hd_d_PersonId").val(e); setRadioValue("radio" + t, "false", t); r.find("#radio" + t).buttonset(); $("#dialog" + t).remove(); r.find("#dialog").attr("id", "dialog" + t); r.find("#btn_Cash").off().on("click", function () { GetItemCash(t); tableStyle() }).button({ icons: { primary: "ui-icon-plus" }, text: true }); r.find("#btn_Cheque").off().on("click", function () { if (n) { r.find("#divslider2").removeClass("invisible"); r.find("#table_cheque").removeClass("invisible") } GetItemCheque(t) }).button({ icons: { primary: "ui-icon-plus" }, text: true }); r.find("#txtVoucherNumber").bind("keydown", function (e) { if (e.keyCode == 13 || e.keyCode == 9) { GetVoucherItem(n, t) } }); r.find("#btn_voucher").off().on("click", function () { sortid = "OrderHeaderId Desc"; getCustomerVoucherList(t, { container: "dialog", callbackmethod: getCustomerVoucherList, fname: VoucherRowClick, page_index: 0, build: buildPayVoucherList, servicename: "Order", methodname: "getCustomerVoucherList" }) }); r.find("#btn_Add_Payment").off().on("click", function () { if (validateAll(r)) AddPayment(e, t) }).button({ icons: { primary: "ui-icon-disk" }, text: true }); localize() } } function AddPayment(e, t) { var n = $("#" + t); if (n.find("#txt_SumPeyment").val() == "0") return; var r = []; var i = []; var s = []; if (n.find("#ddl_CounterTo").val() == $("#userDefault").find("#ddl_m_Counter").val()) { alert("صندوق مبدا و مقصد یکسان است."); return } $.each($("#" + t).find("tr[id*=Cash_]"), function () { var e = {}; e["CurrencyId"] = $("#ddl_m_Currency_" + this.id).val(); e["Amount"] = $(this).find("#txt_m_Amount").val(); e["Type"] = getRadioSelectedValue("radioPayment" + this.id); r.push(e) }); $.each($("#" + t).find("tr[id*=Cheque_]"), function () { var e = {}; if ($(this).find("#ddl_m_Bank_" + this.id).val() == "" || $(this).find("#txt_m_Serial").val() == "" || $(this).find("[name='txt_m_DueDate']").val() == "" || $(this).find("#txt_m_Amount").val() == "") return; e["Bank"] = $(this).find("#ddl_m_Bank_" + this.id).val(); e["Serial"] = $(this).find("#txt_m_Serial").val(); e["DueDate"] = $(this).find("[name='txt_m_DueDate']").val(); e["CurrencyId"] = $("#ddl_m_Currency_" + this.id).val(); e["Amount"] = $(this).find("#txt_m_Amount").val(); i.push(e) }); $.each($("#" + t).find("tr[id*=voucher_]"), function () { s.push($(this).find("[name=voucherNumber]").html()) }); var o = { cash: r, cheque: i, voucher: s, supplierid: e, payerCode: n.find("#txt_payer").val(), counterid: $("#userDefault").find("#ddl_m_Counter").val(), pay: getRadioSelectedValue("radio" + t, t), tocounterid: n.find("#ddl_CounterTo").val(), description: n.find("#txt_description").val(), date: $("#userDefault").find("#txt_s_Date").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(o), type: "Post", url: getPath("Services/Payment.asmx/AddPayment"), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function GetItemCash(e) { var t = $("#" + e); var n = ""; var r = "Cash_" + cout_tr + "_" + e; cout_tr += 1; n += "<tr id= '" + r + "'>" + "<td id='Currency'>" + " <select class='selectLarg' id='ddl_m_Currency_" + r + "'></select>" + "</td>" + "<td><input type='text' class=' inputText  ' id='txt_m_Amount' placeholder='amount' onchange='return SumPayment(\"" + e + "\");'/></td>" + "<td>" + "<div id='radioPayment" + r + "'>" + "<input type='radio' id='radio1" + r + "' name='radioPayment" + r + "' checked='checked' value='نقدی'/><label for='radio1" + r + "'>cash</label>" + "<input type='radio' id='radio2" + r + "' name='radioPayment" + r + "'  value='کارت' /><label for='radio2" + r + "'>creditCard</label>" + "<input type='radio' id='radio3" + r + "' name='radioPayment" + r + "' value='حواله' /><label for='radio3" + r + "'>remittance</label>" + "</div></td>" + "<td id='delete'><button name='btn_Delete' >حذف</button></td></tr>"; t.find("#CashList").append(n).parent().tableScroll({ height: 380, width: t.width() - 130, flush: false }); t.find("[name=btn_Delete]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).unbind().click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveItemCashElement($(this).parents("tr").attr("id"), e); else return }); localize(); tableStyle(); $("#" + r).find("#radioPayment" + r).buttonset(); t.find("#ddl_m_Currency_" + r).html($("#userDefault").find("#ddl_m_Currency").html()).find("option:eq(1)").prop("selected", "selected") } function RemoveItemCashElement(e, t) { var n = $("#" + t); n.find("#" + e).remove(); SumPayment(t) } function GetItemCheque(e) { var t = $("#" + e); var n = ""; var r = "Cheque_" + cout_tr + "_" + e; cout_tr += 1; n += "<tr id= '" + r + "'>" + "<td id='Currency'>" + " <select class='selectLarg' id='ddl_m_Currency_" + r + "'></select>" + "</td>" + "<td><input type='text'  class=' inputText  ' id='txt_m_Amount' placeholder='chequeAmount' onchange='return SumPayment(\"" + e + "\");'/></td>" + "<td><input type='text'  class=' inputText  ' id='txt_m_Serial' placeholder='chequeSerial' /></td>" + "<td id='Bank'>" + " <select class='selectLarg' id='ddl_m_Bank_" + r + "'>" + "</select>" + "</td>" + "<td><input type='text'  class=' inputText  id='" + cout_tr + "_txt_m_DueDate'  name='txt_m_DueDate' placeholder='chequeDate'/></td>" + "<td id='delete'><button name='btn_Delete' >حذف</button></td></tr>"; t.find("#ChequeList").append(n).parent().tableScroll({ height: 380, width: t.width() - 85, flush: false }); $("[name='txt_m_DueDate']").datepicker({ changeMonth: true, changeYear: true }); localize(); tableStyle(); t.find("[name=btn_Delete]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).unbind().click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveItemCashElement($(this).parents("tr").attr("id"), e); else return }); if (t.find("select[id*=ddl_m_Bank_]").length > 1) t.find("#ddl_m_Bank_" + r).html(t.find("select[id*=ddl_m_Bank_]").first().html()).val(""); else bindItemsForSelectCombo({ methodname: "GetComboItems", servicename: "XmlDropDown", headertext: "انتخاب بانک", id: "ddl_m_Bank_" + r, container: e }, "{ path:'Counter/BankTitle'}"); t.find("#ddl_m_Currency_" + r).html($("#userDefault").find("#ddl_m_Currency").html()).find("option:eq(1)").prop("selected", "selected") } function SumPayment(e) { var t = $("#" + e); var n = 0; $.each(t.find("tr[id*=Cheque_]"), function () { n += $(this).find("#txt_m_Amount").val() * 1 }); t.find("#txt_m_SumCheque").val(n); n = 0; $.each(t.find("tr[id*=Cash_]"), function () { n += $(this).find("#txt_m_Amount").val() * 1 }); t.find("#txt_m_SumCash").val(n); n = 0; $.each(t.find("tr[id*=voucher_]"), function () { n += $(this).find("[name=voucherAmount]").html() * 1 }); t.find("#txt_m_SumVoucher").val(n); $("#" + e).find("#txt_SumPeyment").val($("#" + e).find("#txt_m_SumCheque").val() * 1 + $("#" + e).find("#txt_m_SumCash").val() * 1 + $("#" + e).find("#txt_m_SumVoucher").val() * 1) } function getPaymentList(e) { var t = $("#" + e); var n = true; var r = t.find("#PageSize").val(); var i = 0; var s = 0; var o = "", u = "", a = "", f = "", l = "", c = "", h = "", p = "", d = "", v = "", m = "", g = "", y = ""; if (t.find("#moreFilter").is(":visible")) { var b = t.find("#ddl_d_SearchBy1").val(); if (b != "") { if (b == "Code") { u = t.find("#txtSearch1").val() } if (b == "Name") { o = t.find("#txtSearch1").val() } if (b == "EmployeeId") { a = t.find("#txtSearch1").val() } if (b == "EmployeeName") { f = t.find("#txtSearch1").val() } if (b == "Counter") { l = t.find("#txtSearch1").val() } } c = t.find("#ddlBank").val(); h = t.find("#txtSerial").val(); if (t.find("#txt_s_InvoiceDateStart").length > 0) p = t.find("#txt_s_InvoiceDateStart").val(); if (t.find("#txt_s_InvoiceDateEnd").length > 0) d = t.find("#txt_s_InvoiceDateEnd").val(); if (t.find("#txt_s_PaymentDateStart").length > 0) v = t.find("#txt_s_PaymentDateStart").val(); if (t.find("#txt_s_PaymentDateEnd").length > 0) m = t.find("#txt_s_PaymentDateEnd").val(); if (t.find("#txt_s_PriceFrom").length > 0) g = t.find("#txt_s_PriceFrom").val(); if (t.find("#txt_s_PriceTo").length > 0) y = t.find("#txt_s_PriceTo").val() } var w = { skip: i, take: r, currentPage: s, first: n, sort: sortid, supplierid: t.find("#hd_d_PersonId").val(), IsClient: t.find("#hd_d_IsClient").val(), SupplierName: o, code: u, EmployeeId: a, EmployeeName: f, Counter: l, BankName: c, Serial: h, InvoiceDateStart: p, InvoiceDateEnd: d, PaymentDateStart: v, PaymentDateEnd: m, PriceFrom: g, PriceTo: y, pay: t.find("#Checkbox1" + e).length > 0 ? t.find("#Checkbox1" + e).prop("checked") : "", receive: t.find("#Checkbox2" + e).length > 0 ? t.find("#Checkbox2" + e).prop("checked") : "", cash: t.find("#Checkbox3" + e).length > 0 ? t.find("#Checkbox3" + e).prop("checked") : "", cheque: t.find("#Checkbox4" + e).length > 0 ? t.find("#Checkbox4" + e).prop("checked") : "", voucher: t.find("#Checkbox5" + e).length > 0 ? t.find("#Checkbox5" + e).prop("checked") : "", passed: t.find("#Checkbox6" + e).length > 0 ? t.find("#Checkbox6" + e).prop("checked") : "", notpass: t.find("#Checkbox7" + e).length > 0 ? t.find("#Checkbox7" + e).prop("checked") : "", shopid: $("#userDefault").find("#ddl_s_Branch").val(), counterid: $("#userDefault").find("#ddl_m_Counter").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(w), type: "Post", url: getPath("Services/Payment.asmx/GetPaymentList"), success: function (r) { if (!isAuthenticated(r)) return; var i = PaymentgetOptionsFrom(r.d.count, e); t.find("#paging").pagination(r.d.count, i); PaymentpageselectCallback(0, r, e, n) }, error: function (e) { alert(e.responseText) } }) } function PaymentgetOptionsFrom(e, t) { var n = $("#" + t); var r = { callback: PaymentpageselectCallback }; n.find("input:text").each(function () { r[this.name] = this.className.match(/numeric/) ? parseInt(this.value) : this.value }); r.prev_show_always = false; r.next_show_always = false; if (e < n.find("#PageSize").val()) n.find("#PageSize").css("display", "none"); else { n.find("#PageSize").css("display", "inline") } r.items_per_page = n.find("#PageSize").val(); r.prev_text = "قبلی"; r.next_text = "بعدی"; r.container = t; return r } function buildPaymentList(jq, container) { var $con = $("#" + container); jq = jq.d.results; var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; if (List != null) { for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.OrderHeaderId + "'>" + "<td width='15%' name='Clinet' id='" + val.ClientId + "'>" + val.ClientName + " " + val.ClientFamily + "</td> " + "<td width='15%' name='PaymentNO' >" + val.Name + " " + val.Family + "</td>" + "<td width='15%' name='Date' >" + val.Date + "</td>" + "<td width='15%' name='Pay'>" + (val.Sell == false ? "واریز" : "برداشت") + "</td>" + "<td width='15%' name='Code' >" + val.Code + "</td> " + "<td width='15%' name='Price'>" + val.Price + "</td> " + "<td width='10%'name='detail'><button id='a_Button' >جزئیات فاکتور</button></td>"; "</tr>" } } $con.find("#PaymentList").html(ItemList); $con.find("#PaymentList").parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("[id=a_Button]").button({ icons: { primary: "ui-icon-plus" }, text: false }).click(function () { ListDetailPayment($(this).parents("tr").prop("id").replace("tr", ""), container) }) } function PaymentpageselectCallback(e, t, n, r) { var i = $("#" + n); if (r) { buildPaymentList(t, n) } else { r = false; var s = i.find("#PageSize").val(); var o = ""; var u = s; var a = e == 0 ? 0 : e * u; var f = "", l = "", c = "", h = "", p = "", d = "", v = ""; var m = i.find("#ddl_d_SearchBy1").val(); if (m != "") { if (m == "Code") { l = i.find("#txtSearch1").val() } if (m == "Name") { f = i.find("#txtSearch1").val() } if (m == "EmployeeId") { c = i.find("#txtSearch1").val() } if (m == "EmployeeName") { h = i.find("#txtSearch1").val() } if (m == "Counter") { p = i.find("#txtSearch1").val() } } var m = i.find("#ddl_d_SearchBy2").val(); if (m != "") { if (m == "BankName") { d = i.find("#txtSearch2").val() } if (m == "Serial") { v = i.find("#txtSearch2").val() } } var g = { skip: a, take: u, currentPage: e, first: r, sort: sortid, supplierid: i.find("#hd_d_PersonId").val(), IsClient: i.find("#hd_d_IsClient").val(), SupplierName: f, code: l, EmployeeId: c, EmployeeName: h, Counter: p, BankName: d, Serial: v, InvoiceDateStart: i.find("#txt_s_InvoiceDateStart").length > 0 ? i.find("#txt_s_InvoiceDateStart").val() : "", InvoiceDateEnd: i.find("#txt_s_InvoiceDateEnd").length > 0 ? i.find("#txt_s_InvoiceDateEnd").val() : "", PaymentDateStart: i.find("#txt_s_PaymentDateStart").length > 0 ? i.find("#txt_s_PaymentDateStart").val() : "", PaymentDateEnd: i.find("#txt_s_PaymentDateEnd").length > 0 ? i.find("#txt_s_PaymentDateEnd").val() : "", PriceFrom: i.find("#txt_s_PriceFrom").length > 0 ? i.find("#txt_s_PriceFrom").val() : "", PriceTo: i.find("#txt_s_PriceTo").length > 0 ? i.find("#txt_s_PriceTo").val() : "", pay: i.find("#Checkbox1" + n).length > 0 ? i.find("#Checkbox1" + n).prop("checked") : "", receive: i.find("#Checkbox2" + n).length > 0 ? i.find("#Checkbox2" + n).prop("checked") : "", cash: i.find("#Checkbox3" + n).length > 0 ? i.find("#Checkbox3" + n).prop("checked") : "", cheque: i.find("#Checkbox4" + n).length > 0 ? i.find("#Checkbox4" + n).prop("checked") : "", voucher: i.find("#Checkbox5" + n).length > 0 ? i.find("#Checkbox5" + n).prop("checked") : "", passed: i.find("#Checkbox6" + n).length > 0 ? i.find("#Checkbox6" + n).prop("checked") : "", notpass: i.find("#Checkbox7" + n).length > 0 ? i.find("#Checkbox7" + n).prop("checked") : "", shopid: $("#userDefault").find("#ddl_s_Branch").val(), counterid: $("#userDefault").find("#ddl_m_Counter").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(g), type: "Post", url: getPath("Services/Payment.asmx/GetPaymentList"), success: function (e) { if (!isAuthenticated(e)) return; buildPaymentList(e, n) }, error: function (e) { alert(e.responseText) } }); return false } Sort(getPaymentList, n) } function ListDetailPayment(id, container) { var $con = $("#" + container); $("#DetailPaymentList").attr("id", "DetailPaymentList" + container); $DetailPaymentList = $("#DetailPaymentList" + container); var DTO = { OrderHeaderId: id }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(DTO), type: "Post", url: getPath("Services/Payment.asmx/GetDetailPaymentList"), success: function (response) { if (!isAuthenticated(response)) return; var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemCash = ""; for (var i = 0; i < List.cash.length; i++) { var val = List.cash[0, i]; ItemCash += "<tr id='tr" + val.CashId + "'>" + "<td width='50%' name='PaymentNO' >" + val.Amount + "  " + val.Currency + "</td>" + "<td width='40%'>" + val.Type + "</td>" + "<td width='10%' id='delete'><button id='deleteCash'>حذف</button></td></tr>" } $DetailPaymentList.find("#CashList").html(ItemCash).parent().tableScroll({ height: 380, width: 500, flush: false }); if (ItemCash != "") { $DetailPaymentList.find("#tablecash").removeClass("invisible"); $DetailPaymentList.find("[id=deleteCash]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveItemDetailCash($(this).parents("tr").prop("id").replace("tr", "")); else return }) } else { $DetailPaymentList.find("#tablecash").addClass("invisible") } ItemCheque = ""; for (var i = 0; i < List.cheque.length; i++) { var val = List.cheque[0, i]; ItemCheque += "<tr id='tr" + val.ChequeId + "'>" + "<td name='PaymentNO' width='18%'>" + val.Amount + "  " + val.Currency + "</td>" + "<td  width='18%'>" + val.Bank + "</td>" + "<td  width='20%'><input style='width:100px; height:20px;' name='serial' value='" + val.Serial + "'/></td>" + "<td id='status'  width='15%'>" + (val.Passed == "پاس شده" ? val.Passed : "<button id='btn_pass'>تایید</button>") + "</td>" + "<td   width='15%'><input style='width:70px; height:20px;' name='date' value='" + ToPersianDateDigit(val.Date) + "'/></td>" + "<td id='delete' width='7%'><button id='deleteCheque'>delete</button></td><td width='7%'><button id='editCheque'>edit</button></td></tr>" } $DetailPaymentList.find("#ChequeList").html(ItemCheque).parent().tableScroll({ height: 380, width: 600, flush: false }); $DetailPaymentList.find("[name='date']").datepicker(); if (ItemCheque != "") { $DetailPaymentList.find("#tablecheque").removeClass("invisible"); $DetailPaymentList.find("[id=deleteCheque]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveItemDetailCheque($(this).parents("tr").prop("id").replace("tr", "")); else return }); $DetailPaymentList.find("[id=editCheque]").button({ icons: { primary: "ui-icon-pencil" }, text: false }).click(function () { editItemDetailCheque($(this).parents("tr").prop("id").replace("tr", ""), $(this).parents("tr").find("[name='date']").val(), $(this).parents("tr").find("[name='serial']").val()) }); $DetailPaymentList.find("[id=btn_pass]").button({ text: true }).click(function () { ChequePassed($(this).parents("tr").prop("id").replace("tr", ""), this) }) } else { $DetailPaymentList.find("#tablecheque").addClass("invisible") } $DetailPaymentList.dialog("open").dialog({ width: 650 }) }, error: function (e) { alert(e.responseText) } }) } function ChequePassed(e, t) { $.ajax({ type: "POST", data: "{id: '" + e + "'}", url: getPath("Services/Payment.asmx/ChequePassed"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isdone) $(t).parents("td").html("پاس شده"); else translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function RemoveItemDetailCash(e) { var t = $("#tr" + e); $.ajax({ type: "POST", url: getPath("Services/Payment.asmx/DeleteCash"), contentType: "application/json; charset=utf-8", data: "{id: '" + e + "'}", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg); if (e.d.isDone) t.remove() }, error: function (e) { alert(e.responseText) } }) } function RemoveItemDetailCheque(e) { var t = $("#tr" + e); $.ajax({ type: "POST", url: getPath("Services/Payment.asmx/DeleteCheque"), contentType: "application/json; charset=utf-8", data: "{id: '" + e + "'}", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg); if (e.d.isDone) t.remove() }, error: function (e) { alert(e.responseText) } }) } function editItemDetailCheque(e, t, n) { var r = $("#tr" + e); var i = { id: e, date: t, serial: n }; $.ajax({ type: "POST", url: getPath("Services/Payment.asmx/EditCheque"), contentType: "application/json; charset=utf-8", data: JSON.stringify(i), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function loadCustomerAdd(e, t) { customerAdd(e, t) } function loadCustomerAddToolbar(e, t) { customerAdd(e, t) } function customerAdd(e, t) { var n = $("#" + e); if (t) { aComplete({ methodname: "GetCompletionListByCustomerName", servicename: "AtuoComplete", id: "CustomerIntroducerCode", container: e, minlength: 2, autofocus: false, limit: 20, boxId: "CustomerIntroducerCode" }); bindHierarchyData({ id: "divCustomerAddress", container: e, table: "address", canmodify: true }); bindXmlDropDownData({ id: "CustomerJob", container: e, path: "Customer/jobTitle", canmodify: true, istext: false, headertext: "انتخاب شغل" }); n.find("#divdialogCustomer").dialog({ autoOpen: false }).dialog({ width: 600 }); n.find("#AddCustomer").button({ icons: { primary: "ui-icon-disk"} }).unbind("click").click(function () { if (validateAll($("#" + e))) addCustomer(e) }) } } function loadCustomerEdit(e, t, n) { if (n) { var r = $("#" + t); aComplete({ methodname: "GetCompletionListByCustomerName", servicename: "AtuoComplete", id: "CustomerIntroducerCode", container: t, minlength: 2, autofocus: false, limit: 20, boxId: "CustomerIntroducerCode" }); bindXmlDropDownData({ id: "CustomerJobEdit", container: t, path: "Customer/jobTitle", canmodify: true, istext: true, headertext: "انتخاب شغل" }); r.find("#divdialogCustomer").dialog({ autoOpen: false }).dialog({ width: 600 }); r.find("#EditCustomer").off().on("click", function () { if (validateAll($("#" + t))) EditCustomer(e, t) }).button({ icons: { primary: "ui-icon-disk" }, text: true }); r.find("#a_CustomerIntroducerCode").off().on("click", function () { opendialog({ container: "divdialogCustomer", containerpage: t }) }); getCustomer(e, t) } } function loadCustomerList(e, t) { sortid = "PersonId desc"; var n = $("#" + e); if (t) { n.find("#moreFilter").slideUp("fast"); n.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); n.find("#simpleSearch").toggleClass("hidden"); n.find("#moreFilter").removeClass("invisible"); n.find("#moreFilter").slideToggle(function () { }) }); $container = n.find("#customerContent"); n.find("#SearchBy").val("Name"); getCustomerList(e, { container: e, callbackmethod: getCustomerList, fname: "", page_index: 0, build: buildCustomerList, servicename: "Customer", methodname: "GetCustomerList", print: false }); n.find("#CustomerSearchRegDateStart").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { n.find("#CustomerSearchRegDateEnd").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#CustomerSearchRegDateEnd").datepicker({ changeMonth: true, changeYear: true }); n.find("#divdialogCustomer").dialog({ autoOpen: false }).dialog({ width: 600 }); n.find("#PageSize").off().on("change", function () { getCustomerList(e, { container: e, callbackmethod: getCustomerList, fname: "", page_index: 0, build: buildCustomerList, servicename: "Customer", methodname: "GetCustomerList", print: false }) }); n.find("#divslider").unbind("click").click(function () { sliderClick("divCustomersearch"); sliderClick("CustomerAdvanceSearch") }); n.find("#btnSearchCustomer").button({ icons: { primary: "ui-icon-search" }, text: true }).unbind("click").click(function () { sortid = "PersonId desc"; getCustomerList(e, { container: e, callbackmethod: getCustomerList, fname: "", page_index: 0, build: buildCustomerList, servicename: "Customer", methodname: "GetCustomerList", print: false }) }) } n.find("#CustomertxtSearch").val("").focus() } function loadListCustomerSelect(e, t) { sortid = "PersonId desc"; if (t) { var n = $("#" + e); n.find("#PageSize").off().on("change", function () { getCustomerList(e, { container: e, callbackmethod: getCustomerList, fname: "", page_index: 0, build: buildCustomerList, servicename: "Customer", methodname: "GetCustomerList", print: false }) }); n.find("#btnSearchCustomer").unbind("click").click(function () { getCustomerList(e, { container: e, callbackmethod: getCustomerList, fname: "", page_index: 0, build: buildCustomerList, servicename: "Customer", methodname: "GetCustomerList", print: false }) }); n.find("#CustomertxtSearch").focus() } } function loadCustomerAddressEdit(e, t, n) { var r = $("#" + t); if (n) { getCustomerAddress(e, t); r.find("#EditAddress").off().on("click", function () { EditAddressCustomer(e, t) }).button({ icons: { primary: "ui-icon-disk" }, text: true }) } } function loadCustomerPhoneEdit(e, t, n) { if (n) { var r = $("#" + t); getCustomerPhone(e, t); r.find("#EditPhone").unbind().bind("click", function () { AddPhoneCustomer(e, t) }).button({ icons: { primary: "ui-icon-disk" }, text: true }) } } function addCustomer(e) { var t = $("#" + e); var n = { name: t.find("#CustomerName").val(), family: t.find("#CustomerFamily").val(), age: t.find("#CustomerAge").val(), gender: t.find("#ddl_m_Gender").val(), job: t.find("#CustomerJob option:selected").text(), mobile: t.find("#CustomerMobile").val(), phone: t.find("#Customerphone").val(), addressid: getHierarchySelectedValue("divCustomerAddress", e), address: t.find("#CustomerFullAddressEdit").val(), intoducercode: t.find("#CustomerIntroducerCode").val(), date: $("#userDefault").find("#txt_s_Date").val() }; $.ajax({ type: "POST", url: getPath("Services/Customer.asmx/AddCustomer"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (t) { if (!isAuthenticated(t)) return; if (t.d.count > 0) { ResetPage(e); $("#tabFullAcountReport").find("#txt_customer").val(t.d.code) } translate(t.d.alert) }, error: function (e) { alert(e.responseText) } }) } function EditCustomer(e, t) { var n = $("#" + t); var r = { personid: e, code: n.find("#CustomerCodeEdit").val(), name: n.find("#CustomerNameEdit").val(), family: n.find("#CustomerFamilyEdit").val(), age: n.find("#CustomerAgeEdit").val(), gender: n.find("#ddl_m_Gender").val(), job: n.find("#CustomerJobEdit option:selected").text(), introducercode: n.find("#CustomerIntroducerCode").val() }; $.ajax({ type: "POST", url: getPath("Services/Customer.asmx/EditCustomer"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function getCustomerList(e, t) { var n = $("#" + t.container); var r = true; var i = n.find("#PageSize").val(); var s = 0; var o = 0; var u = []; var a = "", f = "", l = "", c = "", h = "", p = "", d = ""; if (!n.find("#moreFilter").is(":visible")) { var v = n.find("#SearchBy").val(); if (v == "Code") { a = n.find("#CustomertxtSearch").val() } if (v == "Name") { f = n.find("#CustomertxtSearch").val() } if (v == "RegName") { l = n.find("#CustomertxtSearch").val() } if (v == "IntroducerName") { c = n.find("#CustomertxtSearch").val() } if (v == "Mobile") { p = n.find("#CustomertxtSearch").val() } if (v == "Phone") { h = n.find("#CustomertxtSearch").val() } if (v == "Email") { d = n.find("#CustomertxtSearch").val() } if (t.container == "divdialogCustomer") { f = n.find("#selectCustomerName").val(); l = n.find("#selectCustomerRegisterer").val() } u = { skip: s, take: i, currentPage: o, first: r, sort: sortid, namefamily: f, introducer: c, registerername: l, agefrom: "", ageto: "", regdatefrom: "", regdateto: "", mobile: p, phone: h, email: d} } else { u = { skip: s, take: i, currentPage: o, first: r, sort: sortid, namefamily: n.find("#CustomerSearchName").val(), introducer: n.find("#CustomerIntroducerCode").val(), registerername: n.find("#CustomerSearchRegName").val(), agefrom: n.find("#CustomerSearchAgeStart").val(), ageto: n.find("#CustomerSearchAgeEnd").val(), regdatefrom: n.find("#CustomerSearchRegDateStart").val(), regdateto: n.find("#CustomerSearchRegDateEnd").val(), mobile: p, phone: h, email: d} } t["DTO"] = u; pageselectCallback(0, t, { container: "", fname: t.fname, pagingContainer: e, first: true, isOrder: false }) } function buildCustomerList(jq, pageoption) { var $con = $("#" + pageoption.pagingContainer); jq = jq.d.results; var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "usernameCode", sort: "p_Person.Code", width: "8%" }); lsth.push({ title: "nameAndFamily", sort: "p_Person.Family", width: "21%" }); lsth.push({ title: "introducer", sort: "p_Customer2.p_Person.Family", width: "14%" }); if (pageoption.pagingContainer != "divdialogCustomer") { lsth.push({ title: "email", sort: "aspnet_Membership.Email", width: "20%" }); lsth.push({ title: "age", sort: "p_Person.DateOfBirth", width: "4%" }); lsth.push({ title: "dateOfRegistration", sort: "p_Person.RegDate", width: "10%" }); lsth.push({ title: "gender", sort: "p_Person.Gender", width: "5%" }); lsth.push({ title: "registrator", sort: "p_Person1.Family", width: "14%" }); lsth.push({ title: "deleteKey", width: "4%" }) } var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; trBody[0] = { trId: val.PersonId }; trBody[1] = { name: "code", html: val.Code, width: "8%" }; trBody[2] = { name: "name", html: val.Name + "  " + val.Family, width: "21%" }; trBody[3] = { html: val.introducerName + "  " + val.introducerFamily, width: "14%" }; if (pageoption.pagingContainer != "divdialogCustomer") { trBody[4] = { html: val.email == 0 ? "__" : val.email, width: "20%" }; trBody[5] = { html: val.age == 0 ? "__" : val.age, width: "4%" }; trBody[6] = { html: val.regdate, props: { date: val.regdate, width: "10%", klass: "date"} }; trBody[7] = { html: val.Gender == true ? "مرد" : "زن", width: "5%" }; trBody[8] = { html: val.regName + "  " + val.regFamily, width: "14%"} } lstb.push(trBody) } table = { header: lsth, body: lstb, details: { rowClick: ClickCustomer }, heigth: 300, width: 500, container: pageoption.pagingContainer, divName: "CustomerList", rowClickParams: { textboxId: "CustomerIntroducerCode"} }; if (pageoption.pagingContainer != "divdialogCustomer") { details = { deleteFunction: RemoveCustomerElement, rowClick: ClickCustomerList }; table = { header: lsth, body: lstb, details: details, heigth: 300, container: pageoption.pagingContainer, divName: "CustomerList"} } buildTable(table); if (pageoption.pagingContainer == "divdialogCustomer") $con.dialog("open") } function ClickCustomer(e, t, n) { var r = $("#" + t); $("#" + n.textboxId).val($("#" + e.prop("id")).children("td[name='code']").html()); r.dialog("close") } function ClickCustomerList(e, t, n, r) { var i = $("#" + t); if (n != undefined) $("#" + textin).val(n); else $("#" + textin).val($("#" + e.prop("id")).children("td[name='code']").html()); if (r != undefined) createSubTab({ name: "a_CustomerList", id: r, row: e }); else { createSubTab({ name: "a_CustomerList", row: e }) } onRowClick(e) } function RemoveCustomerElement(e, t) { var n = $("#" + t); $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: "{personid: '" + e + "'}", type: "Post", url: getPath("Services/Customer.asmx/DeleteCustomer"), success: function (t) { if (!isAuthenticated(t)) return; if (!t.d.isdone) { alert(t.d.msg); return } else if (t.d.isdone) $("#tr" + e).remove() }, error: function (e) { alert(e.responseText) } }) } function getCustomer(customerid, container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/Customer.asmx/GetCustomerById"), contentType: "application/json; charset=utf-8", data: "{customerid: '" + customerid + "' }", success: function (response) { if (!isAuthenticated(response)) return; var Customer = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var cusval = Customer[0]; var $con = $("#" + container); $con.find("#CustomerCodeEdit").val(cusval.Code); $con.find("#CustomerNameEdit").val(cusval.Name); $con.find("#CustomerFamilyEdit").val(cusval.Family); $con.find("#CustomerAgeEdit").val(cusval.Age == 0 ? "" : cusval.Age); $con.find("#CustomerIntroducerCodeEdit").val(cusval.IntroducerCode); $con.find("#CustomerJobEdit select").val("" + cusval.Job + ""); $con.find("#ddl_m_Gender").val("" + cusval.Gender + "") }, error: function (e) { alert(e.responseText) } }) } function evente(e, t) { var n = $("#" + t); if (n.find("#SearchBy").val() == "IntroducerName") { n.find("#a_CustomertxtSearch").addClass("searchText") } else n.find("#a_CustomertxtSearch").removeClass("searchText") } function getCustomerAddress(customerid, container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/Customer.asmx/GetAddressById"), contentType: "application/json; charset=utf-8", data: "{customerid: '" + customerid + "' }", success: function (response) { if (!isAuthenticated(response)) return; var Customer = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var cusval = Customer[0]; bindHierarchyData({ id: "divCustomerAddressEdit", table: "address", container: container, parentid: cusval.AddressId }); $con.find("#CustomerFullAddressEdit").val(cusval.Address) }, error: function (e) { alert(e.responseText) } }) } function EditAddressCustomer(e, t) { var n = $("#" + t); $.ajax({ type: "POST", url: getPath("Services/Customer.asmx/EditAddressCustomer"), contentType: "application/json; charset=utf-8", data: "{personid: '" + e + "',addressid: '" + getHierarchySelectedValue("divCustomerAddressEdit", t) + "',address: '" + n.find("#CustomerFullAddressEdit").val() + "' }", success: function (n) { if (!isAuthenticated(n)) return; translate(n.d.msg); loadCustomerAddressEdit(e, t) }, error: function (e) { alert(e.responseText) } }) } function getCustomerPhone(customerid, container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/Customer.asmx/GetPhoneById"), contentType: "application/json; charset=utf-8", data: "{personid: '" + customerid + "'}", success: function (response) { if (!isAuthenticated(response)) return; jq = response.d; var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.PhoneId + "'>" + "<td width='40%' name='number'>" + val.Number + "</td>" + "<td width='40%' name='cell'>" + (val.Cell == true ? "موبایل" : "تـلفن") + "</td>" + "<td width='20%' id='delete'><button id='a_Button'>حذف</button></td></tr>" } $con.find("#CustomerPhoneList").html(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("[id=a_Button]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveCustomerPhone($(this).parents("tr").prop("id").replace("tr", ""), customerid, container); else return }); $con.find("tr[id*=tr]").find("td:not([id=delete])").click(function () { ClickCustomerPhone($(this).parent("tr"), customerid, container) }).addClass("cursor") }, error: function (e) { alert(e.responseText) } }) } function ClickCustomerPhone(e, t, n) { var r = $("#" + n); r.find("#text_CustomerNumber").val(r.find("#" + e.prop("id")).children("td[name='number']").html()); r.find("#ddl_m_CellType").val(r.find("#" + e.prop("id")).children("td[name='cell']").html() == "تـلفن" ? "false" : "true"); r.find("#EditPhone").button().unbind("click").click(function () { EditPhoneCustomer(e.prop("id").replace("tr", ""), t, n) }) } function RemoveCustomerPhone(e, t, n) { $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: "{phoneid: '" + e + "'}", type: "Post", url: getPath("Services/Customer.asmx/DeleteCustomerPhone"), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg); if (e.d.isDone) getCustomerPhone(t, n) }, error: function (e) { alert(e.responseText) } }) } function AddPhoneCustomer(e, t) { var n = $("#" + t); $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: "{personid: '" + e + "',number: '" + n.find("#text_CustomerNumber").val() + "',cell: '" + n.find("#ddl_m_CellType").val() + "'}", type: "Post", url: getPath("Services/Customer.asmx/AddCustomerPhone"), success: function (n) { if (!isAuthenticated(n)) return; translate(n.d.msg); if (n.d.isDone) getCustomerPhone(e, t) }, error: function (e) { alert(e.responseText) } }) } function EditPhoneCustomer(e, t, n) { var r = $("#" + n); $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: "{phoneid: '" + e + "',personid: '" + t + "',number: '" + r.find("#text_CustomerNumber").val() + "',cell: '" + r.find("#ddl_m_CellType").val() + "'}", type: "Post", url: getPath("Services/Customer.asmx/EditCustomerPhone"), success: function (e) { if (!isAuthenticated(e)) return; getCustomerPhone(t, n); r.find("#text_CustomerNumber").val(""); r.find("#ddl_m_CellType").val("true"); r.find("#EditPhone").button().unbind("click").click(function () { if (validateAll($("#" + n))) { AddPhoneCustomer(t, n) } }); translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function opendialog(e) { var t = $("#" + e.container); sortid = "PersonId desc"; t.find("#PageSize").off().on("change", function () { sortid = "PersonId"; getCustomerList(e.container, { container: e.container, callbackmethod: getCustomerList, fname: "", page_index: 0, build: buildCustomerList, servicename: "Customer", methodname: "GetCustomerList", print: false }) }); t.find("#btn_searchCustomer").unbind().bind("click", function () { sortid = "PersonId"; getCustomerList(e) }); getCustomerList(e.container, { container: e.container, callbackmethod: getCustomerList, fname: "", page_index: 0, build: buildCustomerList, servicename: "Customer", methodname: "GetCustomerList", print: false }) } function loadSupplierAdd(e, t) { if (t) { var n = $("#" + e); bindHierarchyData({ id: "divSupplierAddress", container: e, table: "address", canmodify: true }); n.find("#AddSupplier").off().on("click", function () { if (validateAll($("#" + e))) addSupplier(e) }).button({ icons: { primary: "ui-icon-disk" }, text: true }) } } function loadSupplierEdit(e, t, n) { var r = $("#" + t); if (n) { getSupplier(e, t); r.find("#EditSupplier").off().on("click", function () { if (validateAll($("#" + t))) EditSupplier(e, t) }).button({ icons: { primary: "ui-icon-disk" }, text: true }) } } function loadSupplierList(e, t) { var n = $("#" + e); if (t) { n.find("#moreFilter").slideUp("fast"); n.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); n.find("#divBasic").toggleClass("hidden"); n.find("#moreFilter").removeClass("invisible"); n.find("#moreFilter").slideToggle(function () { }) }); sortid = "PersonId desc"; n.find("#SearchBy").val("Name"); getSupplierList(e, { container: e, callbackmethod: getSupplierList, fname: "", page_index: 0, build: buildSupplierList, servicename: "Supplier", methodname: "GetSupplierList", print: false }); n.find("#SupplierSearchRegDateStart").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#SupplierSearchRegDateEnd").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#SupplierSearchRegDateEnd").datepicker({ changeMonth: true, changeYear: true }); n.find("#DialogBarcode").dialog({ autoOpen: false }).dialog({ width: 750 }); n.find("#btnSearchSupplier").unbind("click").click(function () { getSupplierList(e, { container: e, callbackmethod: getSupplierList, fname: "", page_index: 0, build: buildSupplierList, servicename: "Supplier", methodname: "GetSupplierList", print: false }) }).button({ icons: { primary: "ui-icon-search"} }); n.find("#SupplierAdvanceSearchbt").unbind("click").click(function () { getSupplierList(e) }).button() } } function loadListSupplierSelect(e) { var t = $("#" + e); sortid = "PersonId desc"; t.find("#btnSearchSupplier").unbind("click").click(function () { getSupplierList() }) } function addSupplier(e) { var t = $("#" + e); var n = { name: t.find("#SupplierName").val(), family: t.find("#SupplierFamily").val(), age: t.find("#SupplierAge").val(), gender: t.find("#ddl_m_Gender").val(), fax: t.find("#SupplierFax").val(), mobile: t.find("#SupplierMobile").val(), phone: t.find("#Supplierphone").val(), addressid: getHierarchySelectedValue("divSupplierAddress", e), email: t.find("#SupplierEmail").val(), date: $("#userDefault").find("#txt_s_Date").val() }; $.ajax({ type: "POST", url: getPath("Services/Supplier.asmx/AddSupplier"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (t) { if (!isAuthenticated(t)) return; if (t.d.count > 0) ResetPage(e); translate(t.d.alert) }, error: function (e) { alert(e.responseText) } }) } function EditSupplier(e, t) { var n = $("#" + t); var r = { personid: e, code: n.find("#SupplierCodeEdit").val(), name: n.find("#SupplierNameEdit").val(), family: n.find("#SupplierFamilyEdit").val(), age: n.find("#SupplierAgeEdit").val(), gender: n.find("#ddl_m_Gender").val(), fax: n.find("#SupplierFaxEdit").val(), email: n.find("#SupplierEmailEdit").val() }; $.ajax({ type: "POST", url: getPath("Services/Supplier.asmx/EditSupplier"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.alert) }, error: function (e) { alert(e.responseText) } }) } function getSupplierList(e, t) { var n = $("#" + e); var r = true; var i = n.find("#PageSize").val(); var s = 0; var o = 0; var u = "", a = "", f = "", l = ""; var c = []; if (!n.find("#moreFilter").is(":visible")) { var h = n.find("#SearchBy").val(); if (h == "Code") { u = n.find("#SuppliertxtSearch").val() } if (h == "Name") { a = n.find("#SuppliertxtSearch").val() } if (h == "RegName") { f = n.find("#SuppliertxtSearch").val() } if (e == "selectSupplierContent") { a = n("#selectSupplierName").val(); f = n("#selectSupplierRegisterer").val() } c = { skip: s, take: i, currentPage: o, first: r, sort: sortid, code: u, namefamily: a, registerername: f, agefrom: "", ageto: "", regdatefrom: "", regdateto: ""} } else { c = { skip: s, take: i, currentPage: o, first: r, sort: sortid, code: n.find("#SupplierSearchCode").val(), namefamily: n.find("#SupplierSearchName").val(), registerername: n.find("#SupplierSearchRegName").val(), agefrom: n.find("#SupplierSearchAgeStart").val(), ageto: n.find("#SupplierSearchAgeEnd").val(), regdatefrom: n.find("#SupplierSearchRegDateStart").val(), regdateto: n.find("#SupplierSearchRegDateEnd").val()} } t["DTO"] = c; pageselectCallback(0, t, { container: "", fname: t.fname, pagingContainer: e, first: true, isOrder: false }) } function buildSupplierList(jq, params) { var $con = $("#" + params.pagingContainer); jq = jq.d.results; var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "usernameCode", sort: "p_Person.Code", width: "8%" }); lsth.push({ title: "nameAndFamily", sort: "p_Person.Family", width: "21%" }); if (container != "divdialogCustomer") { lsth.push({ title: "age", sort: "p_Person.DateOfBirth", width: "4%" }); lsth.push({ title: "dateOfRegistration", sort: "p_Person.RegDate", width: "10%" }); lsth.push({ title: "gender", sort: "p_Person.Gender", width: "5%" }); lsth.push({ title: "registrator", sort: "p_Person1.Family", width: "14%" }); lsth.push({ title: "deleteKey", width: "4%" }) } var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; trBody[0] = { trId: val.PersonId }; trBody[1] = { name: "code", html: val.Code, width: "8%" }; trBody[2] = { name: "name", html: val.Name + "  " + val.Family, width: "21%" }; if (container != "divdialogCustomer") { trBody[3] = { html: val.age == 0 ? "__" : val.age, width: "4%" }; trBody[4] = { html: val.regdate, props: { date: val.regdate, width: "10%", klass: "date"} }; trBody[5] = { html: val.Gender == true ? "مرد" : "زن", width: "5%" }; trBody[6] = { html: val.regName + "  " + val.regFamily, width: "14%"} } lstb.push(trBody) } table = { header: lsth, body: lstb, details: { rowClick: ClickSupplier }, heigth: 300, width: 500, container: params.pagingContainer, divName: "SupplierList", rowClickParams: { textboxId: "CustomerIntroducerCode"} }; if (params.pagingContainer != "divdialogCustomer") { details = { deleteFunction: RemoveSupplierElement, rowClick: ClickSupplier }; table = { header: lsth, body: lstb, details: details, heigth: 300, container: params.pagingContainer, divName: "SupplierList"} } buildTable(table); if (params.pagingContainer == "divdialogCustomer") $con.dialog("open") } function ClickSupplier(e, t) { var n = $("#" + t); if (t == "diva_selectSupplierList") { n("#SupplierContent").find("#SuppliertxtSearch").val(n.find("#" + e.prop("id")).children("td[name='code']").html()); n("#SupplierContent").find("#SupplierSearchIndtroducerName").val(n.find("#" + e.prop("id")).children("td[name='code']").html()) } else { createSubTab({ row: e, name: "a_SupplierList" }); onRowClick(e) } } function RemoveSupplierElement(e, t) { var n = $("#" + t); $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: "{personid: '" + e + "'}", type: "Post", url: getPath("Services/Supplier.asmx/DeleteSupplier"), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg); getSupplierList(t) }, error: function (e) { alert(e.responseText) } }) } function getSupplier(Supplierid, container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/Supplier.asmx/GetSupplierById"), contentType: "application/json; charset=utf-8", data: "{Supplierid: '" + Supplierid + "' }", success: function (response) { if (!isAuthenticated(response)) return; var Supplier = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var cusval = Supplier[0]; $con.find("#SupplierCodeEdit").val(cusval.Code); $con.find("#SupplierNameEdit").val(cusval.Name); $con.find("#SupplierFamilyEdit").val(cusval.Family); $con.find("#SupplierAgeEdit").val(cusval.Age == 0 ? "" : cusval.Age); $con.find("#SupplierFaxEdit").val(cusval.fax); $con.find("#SupplierEmailEdit").val(cusval.Email); bindHierarchyData({ id: "divSupplierAddressEdit", container: container, table: "address", canmodify: true, parentid: cusval.AddressId }); $con.find("#ddl_m_Gender").val("" + cusval.Gender + "") }, error: function (e) { alert(e.responseText) } }) } function sevente(e, t) { var n = $("#" + t); if (n.find("#SearchBy").val() == "IntroducerName") { n.find("#a_SuppliertxtSearch").addClass("searchText") } else n.find("#a_SuppliertxtSearch").removeClass("searchText") } function loadInventoryHelp(e, t) { var n = $("#" + e); if (t) { n.find("#newItem").unbind("click").bind("click", function () { $("[id='a_InventoryAdd']").trigger("click") }); n.find("#management").unbind("click").bind("click", function () { $("[id='a_InventoryList']").trigger("click") }); n.find("#cardex").unbind("click").bind("click", function () { $("[id='a_InventoryReportList']").trigger("click") }); n.find("#setting").unbind("click").bind("click", function () { $("[id='a_InventorySetting']").trigger("click") }) } } function loadItemHelp(e, t, n) { var r = $("#" + t); if (n) { r.find("#edit").unbind("click").bind("click", function () { r.parent().find("[id='a_InventoryEdit']").trigger("click") }); r.find("#detailList").unbind("click").bind("click", function () { r.parent().find("[id='a_ListColorSize']").trigger("click") }); r.find("#newDetail").unbind("click").bind("click", function () { r.parent().find("[id='a_ColorSize']").trigger("click") }); r.find("#category").unbind("click").bind("click", function () { r.parent().find("[id='a_InventoryCategory']").trigger("click") }); r.find("#averagePrice").unbind("click").bind("click", function () { r.parent().find("[id='a_ItemAccountingDetails']").trigger("click") }); r.find("#periodicPrice").unbind("click").bind("click", function () { r.parent().find("[id='a_InventoryPrice']").trigger("click") }); r.find("#MeasureUnit").unbind("click").bind("click", function () { r.parent().find("[id='a_InventoryUnit']").trigger("click") }) } } function loadCustomerHelp(e, t) { var n = $("#" + e); if (t) { n.find("#newCustomer").unbind("click").bind("click", function () { $("[id='a_CustomerAdd']").trigger("click") }); n.find("#management").unbind("click").bind("click", function () { $("[id='a_CustomerList']").trigger("click") }); n.find("#accountDetail").unbind("click").bind("click", function () { $("[id='a_CustomerAccounting']").trigger("click") }); n.find("#invoiceProfit").unbind("click").bind("click", function () { $("[id='a_CustomerOrderProfit']").trigger("click") }) } } function loadSubCustomerHelp(e, t, n) { var r = $("#" + t); if (n) { r.find("#submitInvoice").unbind("click").bind("click", function () { r.parent().find("[id='a_CustomerOrder']").trigger("click") }); r.find("#submitWholesaleInvoice").unbind("click").bind("click", function () { r.parent().find("[id='a_CustomerWholesaleOrder']").trigger("click") }); r.find("#edit").unbind("click").bind("click", function () { r.parent().find("[id='a_CustomerEdit']").trigger("click") }); r.find("#editPhone").unbind("click").bind("click", function () { r.parent().find("[id='a_CustomerPhoneEdit']").trigger("click") }); r.find("#customerPayment").unbind("click").bind("click", function () { r.parent().find("[id='a_CustomerPayment']").trigger("click") }); r.find("#management").unbind("click").bind("click", function () { r.parent().find("[id='a_CustomerInvoiceList']").trigger("click") }); r.find("#accountDetail").unbind("click").bind("click", function () { r.parent().find("[id='a_AccountDetails']").trigger("click") }); r.find("#chart").unbind("click").bind("click", function () { r.parent().find("[id='a_CustomerChart']").trigger("click") }) } } function loadSupplierHelp(e, t) { var n = $("#" + e); if (t) { n.find("#newSupplier").unbind("click").bind("click", function () { $("[id='a_SupplierAdd']").trigger("click") }); n.find("#management").unbind("click").bind("click", function () { $("[id='a_SupplierList']").trigger("click") }); n.find("#accountDetail").unbind("click").bind("click", function () { $("[id='a_SupplierAccounting']").trigger("click") }); n.find("#changeQuantity").unbind("click").bind("click", function () { $("[id='a_EditQuantityOrder']").trigger("click") }) } } function loadSubSupplierHelp(e, t, n) { var r = $("#" + t); if (n) { r.find("#submitInvoice").unbind("click").bind("click", function () { r.parent().find("[id='a_SupplierOrder']").trigger("click") }); r.find("#submitWholesaleInvoice").unbind("click").bind("click", function () { r.parent().find("[id='a_SupplierWholesaleOrder']").trigger("click") }); r.find("#edit").unbind("click").bind("click", function () { r.parent().find("[id='a_SupplierEdit']").trigger("click") }); r.find("#editPhone").unbind("click").bind("click", function () { r.parent().find("[id='a_CustomerPhoneEdit']").trigger("click") }); r.find("#supplierPayment").unbind("click").bind("click", function () { r.parent().find("[id='a_SupplierPayment']").trigger("click") }); r.find("#management").unbind("click").bind("click", function () { r.parent().find("[id='a_SupplierInvoiceList']").trigger("click") }); r.find("#accountDetail").unbind("click").bind("click", function () { r.parent().find("[id='a_AccountDetailsSupplier']").trigger("click") }) } } function loadCounterHelp(e, t) { var n = $("#" + e); if (t) { n.find("#newCounter").unbind("click").bind("click", function () { n.parent().find("[id='a_CounterAdd']").trigger("click") }); n.find("#banks").unbind("click").bind("click", function () { n.parent().find("[id='a_Bank']").trigger("click") }); n.find("#management").unbind("click").bind("click", function () { n.parent().find("[id='a_CounterList']").trigger("click") }) } } function loadEmployeeHelp(e, t) { var n = $("#" + e); if (t) { n.find("#newEmployee").unbind("click").bind("click", function () { $("[id='a_EmployeeAdd']").trigger("click") }); n.find("#management").unbind("click").bind("click", function () { $("[id='a_EmployeeList']").trigger("click") }) } } function loadSubEmployeeHelp(e, t, n) { var r = $("#" + t); if (n) { r.find("#edit").unbind("click").bind("click", function () { r.parent().find("[id='a_EmployeeEdit']").trigger("click") }); r.find("#accessDetail").unbind("click").bind("click", function () { r.parent().find("[id='a_EmployeeAccessDetails']").trigger("click") }); r.find("#roles").unbind("click").bind("click", function () { r.parent().find("[id='a_EmployeeRole']").trigger("click") }); r.find("#branches").unbind("click").bind("click", function () { r.parent().find("[id='a_EmployeeShop']").trigger("click") }); r.find("#counters").unbind("click").bind("click", function () { r.parent().find("[id='a_EmployeeCounter']").trigger("click") }) } } function loadShopHelp(e, t) { var n = $("#" + e); if (t) { n.find("#newBranch").unbind("click").bind("click", function () { $("[id='a_ShopAdd']").trigger("click") }); n.find("#management").unbind("click").bind("click", function () { $("[id='a_ShopList']").trigger("click") }) } } function loadCurrencyHelp(e, t) { var n = $("#" + e); if (t) { n.find("#newCurrency").unbind("click").bind("click", function () { $("[id='a_CurrencyNameList']").trigger("click") }); n.find("#newRate").unbind("click").bind("click", function () { $("[id='a_CurrencyList']").trigger("click") }) } } function loadInventoryAdd(e, t) { if (t) { var n = $("#" + e); bindHierarchyData({ id: "hr_m_Category", container: e, canmodify: true, table: "category" }); bindItemsForSelectCombo({ methodname: "getMeasureUnit", servicename: "Inventory", id: "ddl_m_MeasureUnit", container: e, headertext: " واحد کالا", selectedindex: 1 }); bindItemsForSelectCombo({ methodname: "getAvailablity", servicename: "Inventory", id: "ddl_m_Availability", container: e, headertext: "وضعیت کالا", selectedindex: 1 }); n.find("#btn_Submit").off().on("click", function () { if (validateAll($("#" + e))) AddBarcode(e) }).button({ icons: { primary: "ui-icon-disk" }, text: true }) } } function loadEditQuantity(e, t) { var n = GetItemEditQuantity; sortid = "BarcodeId Desc"; if (t) { var r = $("#" + e); r.find("#dialog").attr("id", "dialog" + e); bindItemsForSelectCombo({ methodname: "getAvailablity", servicename: "Inventory", id: "ddl_m_Availability", container: e, headertext: "وضعیت کالا", selectedindex: 1 }); r.find("#txt_s_ProductCode,#txt_s_ProductBarcode").bind("keydown", function (t) { if (t.keyCode == 13 || t.keyCode == 9) { getBarcodeListOrder(e, { container: "dialog", callbackmethod: getBarcodeListOrder, fname: n, page_index: 0, build: buildBarcodeListOrder, servicename: "Inventory", methodname: "GetItemsList" }) } }); aComplete({ methodname: "GetCompletionListByItemName", servicename: "AtuoComplete", id: "txt_s_ProductCode", container: e, minlength: 2, autofocus: false, limit: 10, boxId: "txt_s_ProductCode" }, { Status: "ddl_m_Availability" }); r.find("#DialogBarcode").dialog({ autoOpen: false }).dialog({ width: 750 }); r.find("#dialog_ItemQuantity").dialog({ autoOpen: false }); bindHierarchyData({ id: "hr_s_Category", table: "category", container: e }); r.find("#btn_SearchProduct").off().on("click", function () { sortid = "BarcodeId Desc"; getBarcodeListOrder(e, { container: "dialog", callbackmethod: getBarcodeListOrder, fname: n, page_index: 0, build: buildBarcodeListOrder, servicename: "Inventory", methodname: "GetItemsList" }) }).button({ icons: { primary: "ui-icon-search"} }); r.find("#btn_AddOrder").off().on("click", function () { EditQuantityItems(e) }).button({ icons: { primary: "ui-icon-disk" }, text: true }); r.find("#OrderList").parent().tableScroll({ height: 380, width: contentwidth, flush: false }) } } function GetItemEditQuantity($dis, container, barcode) { if (barcode == undefined) barcode = $dis.find("[name=barcode]").html(); var $con = $("#" + container); var ItemList = ""; $.ajax({ type: "POST", data: "{barcode: '" + barcode + "'}", url: getPath("Services/Order.asmx/GetProduct"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; $con.find("#txt_s_ProductBarcode").val(""); var count = $con.find("tr[id*='tr_" + container + "']").length; var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemList = ""; var val = List[0, 0]; var trid = "tr_" + container + "_" + val.barcodeid + "_" + count; ItemList += "<tr id='" + trid + "'>" + "<td width='15%'>" + val.name + " " + val.code + " " + val.barcode + "</td>" + "<td width='10%'><input type='checkbox' id='cb_d_Broken_" + trid + "' /><label for='cb_d_Broken_" + trid + "'>سالم</label></td>" + "<td width='10%'><select class=' selectsmall1 ' id='ddl_m_Availability'></select></td>" + "<td  width='30%'id='Quantity_" + trid + "'>" + "</td>" + "<td width='30%' id='Div_Product_Quantity_" + trid + "' dir='rtl'></td>" + "<td width='5%' id='delete'><button id='btn_deleteProduct'>حذف</button></td></tr>"; $con.find("#OrderList").append(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("[id=btn_deleteProduct]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).unbind().bind("click", function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveItemOrderElementWholesale($(this).parents("tr").attr("id"), container); else return }); $("#" + trid).find("#txt_m_Price").bind("keydown", function (e) { if (e.keyCode == 40) { $("#" + trid).next().find("#txt_m_Price").focus().focus(function () { this.select() }) } if (e.keyCode == 38) { $("#" + trid).prev().find("#txt_m_Price").focus().focus(function () { this.select() }) } }); $con.find("#cb_d_Broken_" + trid).button().prop("checked", "checked").trigger("change").unbind("change").change(function () { if (this.checked) { buildColorSizeTable(barcode, $("#userDefault").find("#ddl_s_Branch").val(), true, "GetItemDetailsByBarcodeAndShopID", "Quantity_" + trid, trid); $(this).button("option", "label", "سالم") } else { buildColorSizeTable(barcode, $("#userDefault").find("#ddl_s_Branch").val(), true, "GetBrokenItemDetailsByBarcodeAndShopID", "Quantity_" + trid, trid); $(this).button("option", "label", "خراب") } }); buildColorSizeTable(barcode, $("#userDefault").find("#ddl_s_Branch").val(), false, "GetAllItemDetailsByBarcodeAndShopIDNoQuantity", "Div_Product_Quantity_" + trid, trid); buildColorSizeTable(barcode, $("#userDefault").find("#ddl_s_Branch").val(), true, "GetItemDetailsByBarcodeAndShopID", "Quantity_" + trid, trid); bindItemsForSelectCombo({ methodname: "getAvailablity", servicename: "Inventory", id: "ddl_m_Availability", container: trid, headertext: "وضعیت کالا", selectedindex: val.status }); $con.find("#Footer").removeClass("invisible") }, error: function (e) { alert(e.responseText) } }) } function EditQuantityItems(e) { var t = $("#" + e); var n = []; $.each($("#" + e).find("tr[id*=tr]"), function () { var e = []; var t = {}; t["barcodeid"] = this.id.split("_")[2]; t["status"] = $(this).find("#ddl_m_Availability").val(); t["broken"] = $(this).find("#cb_d_Broken_" + this.id).prop("checked"); $(this).find("#Div_Product_Quantity_" + this.id).find("input[name=quantity]").each(function () { if (this.value != "") { var t = {}; var n = {}; n = this.id.split("-"); t["ColorID"] = n[0]; t["SizeID"] = n[1]; t["Quantity"] = this.value; e.push(t) } }); t["itemDetails"] = e; n.push(t) }); var r = { Details: n, ShopId: $("#userDefault").find("#ddl_s_Branch").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(r), type: "Post", url: getPath("Services/Inventory.asmx/EditQuantityItems"), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function loadInventoryReportList(e, t) { sortid = "BarcodeId desc"; if (t) { var n = $("#" + e); bindHierarchyData({ id: "hr_s_Category", table: "category", container: e, styleclass: "PagingSelect " }); bindItemsForSelectCombo({ methodname: "getAvailablity", servicename: "Inventory", id: "ddl_s_Availability", container: e, headertext: "وضعیت کالا" }); getBarcodeReportList(e); n.find("#divslider").unbind("click").click(function () { sliderClick("divInventorysearch"); sliderClick("InventoryAdvanceSearch") }); n.find("#btnSearchInventory").unbind("click").click(function () { getBarcodeReportList(e) }).button({ icons: { primary: "ui-icon-search"} }); n.find("#PageSize").unbind("change").change(function () { getBarcodeReportList(e) }); n.find("#InventoryAdvanceSearchbt").unbind("click").click(function () { getBarcodeReportList(e) }).button(); n.find("#regdateFrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#regdateTo").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#regdateTo").datepicker({ changeMonth: true, changeYear: true }) } } function loadInventoryReport(e, t, n) { var r = $("#" + t); if (n) { getBarcodeStatement(t, { container: t, callbackmethod: getBarcodeStatement, fname: "", page_index: 0, build: buildBarcodeStatement, servicename: "Inventory", methodname: "getBarcodeStatement", print: false, barcodeId: e }); r.find("[id=btnSearchVisitorStatistic]").button({ icons: { primary: "ui-icon-search"} }).unbind("click").click(function () { getBarcodeStatement(t, { container: t, callbackmethod: getBarcodeStatement, fname: "", page_index: 0, build: buildBarcodeStatement, servicename: "Inventory", methodname: "getBarcodeStatement", print: false, barcodeId: e }) }) } } function getBarcodeStatement(e, t) { var n = $("#" + e); if (t.page_index > 0) { t.first = false } var r = { barcodeId: t.barcodeId, shopId: $("#userDefault").find("#ddl_s_Branch").val() }; t["DTO"] = r; pageselectCallback(0, t, { container: "", fname: t.fname, pagingContainer: e, first: true, isOrder: false }) } function buildBarcodeStatement(jq, container) { var $con = $("#" + container.pagingContainer); var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "name", width: "10%" }); lsth.push({ title: "color", width: "5%" }); lsth.push({ title: "size", width: "5%" }); lsth.push({ title: "date", width: "12%" }); lsth.push({ title: "description", width: "13%" }); lsth.push({ title: "employee", width: "15%" }); lsth.push({ title: "shop", width: "10%" }); lsth.push({ title: "add", footer: jq.d.sumDebtor, width: "10%" }); lsth.push({ title: "drop", footer: jq.d.sumCreditor, width: "10%" }); lsth.push({ title: "balanceAmount", footer: Math.round(jq.d.sumDebtor * 1 - jq.d.sumCreditor * 1, 1), width: "10%" }); var List = typeof jq.d.results == "string" ? eval("(" + jq.d.results + ")") : jq.d.results; var ItemList = ""; if (List != null) for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; trBody[0] = { trId: val.id }; trBody[1] = { name: "name", html: val.Barcode, width: "10%" }; trBody[2] = { name: "color", html: val.color, width: "5%" }; trBody[3] = { name: "size", html: val.size, width: "5%" }; trBody[4] = { name: "date", props: { date: val.Date, width: "12%", klass: "dateLong"} }; trBody[5] = { name: "description", html: "<span>" + val.description + "</span>", width: "13%" }; trBody[6] = { name: "employee", html: val.EmployeeName + " " + val.EmployeeFamily, width: "15%" }; trBody[7] = { name: "shop", html: val.shopName, width: "10%" }; trBody[8] = { name: "add", html: val.isDecrease == false ? val.Quantity : "", width: "10%" }; trBody[9] = { name: "drop", html: val.isDecrease == true ? val.Quantity : "", width: "10%" }; trBody[10] = { name: "balanceAmount", html: val.balance, width: "10%" }; lstb.push(trBody) } table = { header: lsth, details: {}, body: lstb, container: container.pagingContainer, divName: "statementList", hasFooter: true }; buildTable(table) } function loadInventoryList(e, t) { sortid = "BarcodeId desc"; if (t) { var n = $("#" + e); bindHierarchyData({ id: "hr_s_Category", table: "category", container: e, styleclass: "PagingSelect " }); bindItemsForSelectCombo({ methodname: "getAvailablity", servicename: "Inventory", id: "ddl_s_Availability", container: e, headertext: "وضعیت کالا" }); getBarcodeList(e, { container: e, callbackmethod: getBarcodeList, fname: "", page_index: 0, build: buildBarcodeList, servicename: "Inventory", methodname: "GetItemsList", print: false }); n.find("#btnPrint").off().on("click", function () { GetProductList(e, false) }).button({ icons: { primary: "ui-icon-print" }, text: true }); n.find("#btnPrintBarcode").unbind().bind("click", function () { GetProductList(e, true) }).button({ icons: { primary: "ui-icon-print" }, text: true }); n.find("#btnSearchInventory").unbind("click").click(function () { getBarcodeList(e, { container: e, callbackmethod: getBarcodeList, fname: "", page_index: 0, build: buildBarcodeList, servicename: "Inventory", methodname: "GetItemsList", print: false }) }).button({ icons: { primary: "ui-icon-search"} }); n.find("#regdateFrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#regdateTo").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#regdateTo").datepicker({ changeMonth: true, changeYear: true }) } } function loadInventoryEdit(e, t, n) { if (n) { var r = $("#" + t); bindItemsForSelectCombo({ methodname: "getAvailablity", servicename: "Inventory", id: "ddl_m_Availability", container: t, headertext: "وضعیت کالا" }); ajDropDown.done(GetSingelBarcode(e, t)); r.find("#btn_Submit").off().on("click", function () { if (validateAll($("#" + t))) EditBarcode(e, t) }).button({ icons: { primary: "ui-icon-disk" }, text: true }) } } function loadColorSize(e, t, n) { if (n) { var r = $("#" + t); getColor(t); getSize(t); r.find("#btn_Submit").off().on("click", function () { if (validateAll($("#" + t))) addSizeColor(e, t) }).button({ icons: { primary: "ui-icon-disk" }, text: true }) } } function loadInventorySetting(e, t) { if (t) { var n = $("#" + e); var r = true; var i = true; n.find("#divInventoryAccordion").accordion({ heightStyle: "content", collapsible: true, active: false, activate: function (t, s) { if (s.newPanel.prop("id") == "Color" && n.find("#ddl_m_Color option").length < 1) { bindItemsForSelectCombo({ methodname: "GetColorSystem", servicename: "InventorySetting", id: "ddl_m_Color", container: e, headertext: "انتخاب رنگ ", setcolor: true }); getListColorSystem(e); n.find("#btn_SubmitColor").button({ icons: { primary: "ui-icon-disk" }, text: true }).off().on("click", function () { if (validateAll(n.find("#Color"))) addColor(e) }); n.find("#btn_EditColor").button({ icons: { primary: "ui-icon-disk" }, text: true }).off().on("click", function () { if (validateAll(n.find("#Color")) && n.find("#selectedColorId").val() != "") editColor(n.find("#selectedColorId").val(), e) }) } if (s.newPanel.prop("id") == "Measure" && r) { bindHierarchyData({ id: "hr_m_MeasureUnit", container: e, canmodify: true, table: "MeasureUnit", css: "selectsmall1" }); r = false } if (s.newPanel.prop("id") == "Size" && i) { getListSize(e); bindItemsForSelectCombo({ methodname: "GetPaternSizeList", servicename: "InventorySetting", id: "ddl_m_Size", container: e, headertext: "انتخاب جزئیات " }); n.find("#btn_AddPaternSize_Submit").button({ icons: { primary: "ui-icon-disk" }, text: true }).unbind("click").bind("click", function () { if (validateAll(n.find("#ParentSizeDiv"))) AddPaternSize(e) }); n.find("#btn_AddSize_Submit").button({ icons: { primary: "ui-icon-disk" }, text: true }).unbind("click").bind("click", function () { if (validateAll(n.find("#divAdvanceSize"))) AddSize(e) }); n.find("#btn_EditSize_Submit").button({ icons: { primary: "ui-icon-pencil" }, text: true }).unbind("click").bind("click", function () { if (validateAll(n.find("#divAdvanceSize")) && n.find("#selectedSizeId").val() != "") editSize(n.find("#selectedSizeId").val(), e) }); i = false } } }); localize() } } function loadListColorSize(e, t, n) { getListColor_Size(e, t); if (n) { var r = $("#" + t); bindItemsForSelectCombo({ methodname: "GetColorList", servicename: "InventorySetting", id: "ddl_m_Color", container: t, headertext: "انتخاب رنگ" }); bindItemsForSelectCombo({ methodname: "GetSizeList", servicename: "InventorySetting", id: "ddl_m_Size", container: t, headertext: "انتخاب جزئیات" }); r.find("#btn_Submit").off().on("click", function () { if (validateAll($("#" + t))) EditColor_Size(e, t) }).button({ icons: { primary: "ui-icon-disk" }, text: true }) } } function loadInventoryPrice(e, t, n) { if (n) { var r = $("#" + t); getListPrice(e, t); r.find("#txt_m_Date").datepicker({ changeMonth: true, changeYear: true }); r.find("#btn_Submit").button().unbind("click").click(function () { if (validateAll($("#" + t))) AddPrice(e, t) }) } } function loadInventoryCategory(e, t, n) { if (n) { var r = $("#" + t); getListCategory(e, t, n); r.find("#btn_Submit").button().unbind("click").click(function () { if (validateAll($("#" + t))) AddCategory(e, t) }) } } function AddBarcode(e) { var t = $("#" + e); var n = { barcode: t.find("#txt_m_Barcode").val(), name: t.find("#txt_m_Name").val(), itemcode: t.find("#txt_m_ItemCode").val(), availibilityid: t.find("#ddl_m_Availability").val(), measureunitid: t.find("#ddl_m_MeasureUnit").val(), categoryid: getHierarchySelectedValue("hr_m_Category", e), regularprice: t.find("#txt_m_RegularPrice").val(), frinendsprice: t.find("#txt_m_FrinendsPrice").val(), wholesaleprice: t.find("#txt_m_WholesalePrice").val(), onlineprice: t.find("#txt_m_OnlinePrice").val(), weight: t.find("#txt_m_Weight").val(), setColorSize: t.find("#cb_d_SizeColor").prop("checked"), showOnline: t.find("#ddl_m_ShowOnline").val(), date: $("#userDefault").find("#txt_s_Date").val() }; $.ajax({ type: "POST", url: getPath("Services/Inventory.asmx/AddBarcode"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isDone) { alert(t.d.barcode); ResetPage(e) } }, error: function (e) { alert(e.responseText) } }) } function EditBarcode(e, t) { var n = $("#" + t); var r = { barcodeid: e, barcode: n.find("#txt_m_Barcode").val(), name: n.find("#txt_m_Name").val(), itemcode: n.find("#txt_m_ItemCode").val(), availibilityid: n.find("#ddl_m_Availability").val(), weight: n.find("#txt_m_Weight").val() }; $.ajax({ type: "POST", url: getPath("Services/Inventory.asmx/EditBarcode"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d) }, error: function (e) { alert(e.responseText) } }) } function RemoveBarcodeElement(e, t) { $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: "{barcodeid: '" + e + "'}", type: "Post", url: getPath("Services/Inventory.asmx/DeleteBarcode"), success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isDone) getBarcodeList(t, { container: t, callbackmethod: getBarcodeList, fname: "", page_index: 0, build: buildBarcodeList, servicename: "Inventory", methodname: "GetItemsList", print: false }); translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function GetSingelBarcode(barcodeid, container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/Inventory.asmx/GetSingleBarcode"), contentType: "application/json; charset=utf-8", data: "{barcodeid: '" + barcodeid + "' }", success: function (response) { if (!isAuthenticated(response)) return; var ItemVal = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var item = ItemVal[0]; $con.find("#txt_m_Barcode").val(item.Barcode); $con.find("#txt_m_Name").val(item.Name); $con.find("#txt_m_ItemCode").val(item.ItemCode); $con.find("#ddl_m_Availability").val(item.AvailablityId); $con.find("#ddl_m_ShowOnline").val("" + item.ShowOnline + ""); $con.find("#ddl_m_IsNew").val("" + item.IsNew + ""); $con.find("#ddl_m_IsSale").val("" + item.IsSale + ""); $con.find("#ddl_m_IsOffer").val("" + item.IsOffer + ""); $con.find("#txt_m_Weight").val(item.Weight); $con.find("#txt_m_Description").val(item.Description) }, error: function (e) { alert(e.responseText) } }) } function GetProductList(e, t) { var n = $("#" + e); var r = "", i = "", s = "", o = ""; if (n.find("#divBarcodesearch").is(":visible")) { var u = n.find("#ddl_d_SearchBy").val(); if (u == "Barcode") { r = n.find("#txt_s_Inventory").val() } if (u == "Name") { i = n.find("#txt_s_Inventory").val() } if (u == "Code") { s = n.find("#txt_s_Inventory").val() } if (u == "Price") { o = n.find("#txt_s_Inventory").val() } var a = { skip: 0, take: 0, currentPage: 0, first: false, sort: sortid, barcode: r, name: i, code: s, price: o, categoryid: getHierarchySelectedValue("hr_s_Category", e), status: n.find("#ddl_s_Availability").val(), quantityfrom: "", quantityto: "", regdatefrom: "", regdateto: "", shopid: $("#userDefault").find("#ddl_s_Branch").val(), showOnline: n.find("#ddl_s_ShowOnline").val() == undefined ? "" : n.find("#ddl_s_ShowOnline").val(), selectData: "GetProductList"} } else { var a = { skip: 0, take: 0, currentPage: 0, first: false, sort: sortid, barcode: r, name: i, code: s, price: o, categoryid: getHierarchySelectedValue("hr_s_Category", e), status: n.find("#ddl_s_Availability").val(), quantityfrom: "", quantityto: "", regdatefrom: "", regdateto: "", shopid: $("#userDefault").find("#ddl_s_Branch").val(), showOnline: n.find("#ddl_s_ShowOnline").val() == undefined ? "" : n.find("#ddl_s_ShowOnline").val(), selectData: "GetProductList"} } $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(a), type: "Post", url: getPath("Services/Inventory.asmx/GetItemsList"), success: function (n) { if (!isAuthenticated(n)) return; if (!t) buildProductList(n.d, e); if (t) buildPrintBarcode({ result: n.d.results, container: e }) }, error: function (e) { alert(e.responseText) } }) } function buildPrintBarcode(options) { var $con = $("#" + options.container); jq = options.result; var ul = ""; var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; var c = 0; for (var i = 0; i < List.length; i++) { if (c == 24) c = 0; var val = List[0, i]; if (options.hasQuantity != undefined && options.hasQuantity) for (var Q = 0; Q < val.Quantity; Q++) { if (c == 24) c = 0; ul += "<div dir='rtl' style=' width:24%; margin:4px; float:left; text-align: center;'><div  name='barcode' id=" + val.Barcode + "></div>"; ul += val.Name + "</br>" + (val.ItemCode == null ? "" : val.ItemCode) + "</br>" + val.Regular + " تومان"; ul += "</div>"; if (c == 23) ul += "<div style='page-break-after:always;'>---------------------</div>"; c++ } else { ul += "<div dir='rtl' style=' width:24%; margin:4px; float:left; text-align: center;'><div  name='barcode' id=" + val.Barcode + "></div>"; ul += val.Name + "</br>" + (val.ItemCode == null ? "" : val.ItemCode) + "</br>" + val.Regular + " تومان"; ul += "</div>"; if (c == 23) ul += "<div style='page-break-after:always;'>-----------------------</div>"; c++ } } $con.append("<div id='divPrintBarcode' class='invisible'></div>"); $con.find("#divPrintBarcode").html(ul); $con.find("#divPrintBarcode").find("[name='barcode']").each(function () { var e = $(this); e.barcode(e.attr("id"), "code39", { showHRI: true, barWidth: 1, barHeight: 20 }) }); Popup($con.find("#divPrintBarcode").html()) } function buildProductList(jq, container) { var $con = $("#" + container); var table = {}; var lstb = []; var lsth = []; jq = jq.results; lsth.push({ title: "itemName", sort: "Name" }); lsth.push({ title: "itemCode", sort: "ItemCode" }); lsth.push({ title: "barcode", sort: "Barcode" }); lsth.push({ title: "barcode", sort: "Barcode" }); lsth.push({ title: "status" }); lsth.push({ title: "category" }); lsth.push({ title: "count" }); lsth.push({ title: "price" }); var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; trBody[0] = { name: "name", html: val.Name }; trBody[1] = { name: "code", html: val.ItemCode }; trBody[2] = { name: "barcodeDigit", html: val.Barcode }; trBody[3] = { name: "barcode", html: val.Barcode }; trBody[4] = { name: "status", html: val.Status }; trBody[5] = { name: "Category", html: val.Category }; trBody[6] = { name: "quantity", html: val.Quantity + " " + val.UnitType }; trBody[7] = { name: "Regular", html: "<span>" + val.Regular + "</span>" }; lstb.push(trBody) } table = { header: lsth, body: lstb, container: container, hasFooter: false, divName: "Div_Print" }; buildPrintTable(table) } function getBarcodeList(e, t) { var n = $("#" + e); var r = true; var i = n.find("#PageSize").val(); var s = 0; var o = 0; var u = "", a = "", f = "", l = ""; var c = []; if (n.find("#divBarcodesearch").is(":visible")) { var h = n.find("#ddl_d_SearchBy").val(); if (h == "Barcode") { u = n.find("#txt_s_Inventory").val() } if (h == "Name") { a = n.find("#txt_s_Inventory").val() } if (h == "Code") { f = n.find("#txt_s_Inventory").val() } if (h == "Price") { l = n.find("#txt_s_Inventory").val() } c = { skip: s, take: i, currentPage: o, first: r, sort: sortid, barcode: u, name: a, code: f, price: l, categoryid: getHierarchySelectedValue("hr_s_Category", e), status: n.find("#ddl_s_Availability").val(), quantityfrom: n.find("#quantityFrom").val(), quantityto: n.find("#quantityTo").val(), regdatefrom: n.find("#regdateFrom").val(), regdateto: n.find("#regdateTo").val(), shopid: $("#userDefault").find("#ddl_s_Branch").val(), showOnline: n.find("#ddl_s_ShowOnline").val() == undefined ? "" : n.find("#ddl_s_ShowOnline").val(), selectData: "GetItemsList"} } else { c = { skip: s, take: i, currentPage: o, first: r, sort: sortid, barcode: u, name: a, code: f, price: l, categoryid: getHierarchySelectedValue("hr_s_Category", e), status: n.find("#ddl_s_Availability").val(), quantityfrom: n.find("#quantityFrom").val(), quantityto: n.find("#quantityTo").val(), regdatefrom: n.find("#regdateFrom").val(), regdateto: n.find("#regdateTo").val(), shopid: $("#userDefault").find("#ddl_s_Branch").val(), showOnline: n.find("#ddl_s_ShowOnline").val() == undefined ? "" : n.find("#ddl_s_ShowOnline").val(), selectData: "GetItemsList"} } t["DTO"] = c; pageselectCallback(0, t, { container: "", fname: t.fname, pagingContainer: e, first: true, isOrder: false }) } function buildBarcodeList(jq, pageoption) { var $con = $("#" + pageoption.pagingContainer); $con.find("#divFooter").removeClass("invisible"); var appName = jq.d.appName; var onlineHost = jq.d.onlineHost; var sumPrice = jq.d.sumPrice; var sumQuantity = jq.d.sumQuantity; var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "barcode", sort: "Barcode", width: "10%" }); lsth.push({ title: "itemCode", sort: "ItemCode", width: "10%" }); lsth.push({ title: "itemName", sort: "Name", width: "16%" }); lsth.push({ title: "price", sort: "Regular", width: "10%" }); lsth.push({ title: "status", sort: "AvailablityId", width: "10%" }); lsth.push({ title: "category", sort: "Category", width: "10%" }); lsth.push({ title: "count", sort: "Quantity", width: "6%" }); lsth.push({ title: "registerDate", sort: "EnteryDate", width: "12%" }); lsth.push({ title: "image", width: "10%" }); lsth.push({ title: "deleteKey", width: "4%" }); jq = jq.d.results; var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; trBody[0] = { trId: val.BarcodeId }; trBody[1] = { name: "barcode", html: val.Barcode, width: "10%" }; trBody[2] = { name: "code", html: val.ItemCode, width: "10%" }; trBody[3] = { name: "name", html: val.Name, width: "16%" }; trBody[4] = { html: val.Regular, props: { name: "price", klass: "digit", width: "10%"} }; trBody[5] = { html: val.Status, width: "10%" }; trBody[6] = { html: val.Category, props: { width: "10%"} }; trBody[7] = { html: val.Quantity + " " + val.UnitType, props: { width: "6%"} }; trBody[8] = { html: val.EnteryDate, props: { date: val.EnteryDate, width: "12%", klass: "date"} }; trBody[9] = { html: "<img class='imagefortable' src='" + onlineHost + "Data/" + appName + "Photos/" + val.Barcode + "/tiny_1.jpg'>", props: { width: "10%"} }; lstb.push(trBody) } $con.find("#spTotalValue").html(sumPrice); $con.find("#spTotalQuantity").html(sumQuantity); table = { header: lsth, body: lstb, details: { rowClick: ClickBarcode }, heigth: 300, width: 500, container: pageoption.pagingContainer, divName: "BarcodeList", hasFooter: false, rowClickParams: { textboxId: "CustomerIntroducerCode"} }; if (pageoption.pagingContainer != "divdialogCustomer") { details = { deleteFunction: RemoveBarcodeElement, rowClick: ClickBarcode }; table = { header: lsth, body: lstb, details: details, heigth: 300, container: pageoption.pagingContainer, hasFooter: false, divName: "BarcodeList"} } buildTable(table); if (pageoption.pagingContainer == "divdialogCustomer") $con.dialog("open") } function ClickBarcode(e, t) { createSubTab({ row: e, name: "a_InventoryList" }); onRowClick(e) } function ClickKardex(e, t) { createSubTab({ row: e, name: "a_InventoryReportList" }); onRowClick(e) } function getBarcodeReportList(e) { var t = $("#" + e); var n = true; var r = t.find("#PageSize").val(); var i = 0; var s = 0; var o = "", u = "", a = "", f = ""; if (t.find("#divBarcodesearch").is(":visible")) { var l = t.find("#ddl_d_SearchBy").val(); if (l == "Barcode") { o = t.find("#txt_s_Inventory").val() } if (l == "Name") { u = t.find("#txt_s_Inventory").val() } if (l == "Code") { a = t.find("#txt_s_Inventory").val() } if (l == "Price") { f = t.find("#txt_s_Inventory").val() } var c = { skip: i, take: r, currentPage: s, first: n, sort: sortid, barcode: o, name: u, code: a, price: f, categoryid: getHierarchySelectedValue("hr_s_Category", e), status: t.find("#ddl_s_Availability").val(), quantityfrom: t.find("#quantityFrom").val(), quantityto: t.find("#quantityTo").val(), regdatefrom: t.find("#regdateFrom").val(), regdateto: t.find("#regdateTo").val(), shopid: $("#userDefault").find("#ddl_s_Branch").val(), showOnline: t.find("#ddl_s_ShowOnline").val() == undefined ? "" : t.find("#ddl_s_ShowOnline").val(), selectData: "getBarcodeReportList"} } else { var c = { skip: i, take: r, currentPage: s, first: n, sort: sortid, barcode: o, name: u, code: a, price: f, categoryid: getHierarchySelectedValue("hr_s_Category", e), status: t.find("#ddl_s_Availability").val(), quantityfrom: t.find("#quantityFrom").val(), quantityto: t.find("#quantityTo").val(), regdatefrom: t.find("#regdateFrom").val(), regdateto: t.find("#regdateTo").val(), shopid: $("#userDefault").find("#ddl_s_Branch").val(), showOnline: t.find("#ddl_s_ShowOnline").val() == undefined ? "" : t.find("#ddl_s_ShowOnline").val(), selectData: "getBarcodeReportList"} } $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(c), type: "Post", url: getPath("Services/Inventory.asmx/GetItemsList"), success: function (r) { if (!isAuthenticated(r)) return; var i = InventoryReportgetOptionsFrom(r.d.count, e); t.find("#paging").pagination(r.d.count, i); InventoryReportpageselectCallback(0, r, e, n) }, error: function (e) { alert(e.responseText) } }) } function buildBarcodeReportList(jq, container) { var $con = $("#" + container); if (jq.d.results != undefined) { var sumQuantity = jq.d.sumQuantity; var sumPrice = jq.d.sumPrice; jq = jq.d.results; var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.BarcodeId + "'>" + "<td name='barcode' width='7%'>" + val.Barcode + "</td>" + "<td name='code' width='5%'>" + val.ItemCode + "</td>" + "<td name='name' width='7%'>" + val.Name + "</td> " + "<td name='price' width='5%'>" + val.Regular + "</td> " + "<td width='5%'>" + val.Status + "</td>" + "<td width='5%'>" + val.Category + "</td>" + "<td width='5%'>" + val.BuyQuantity + " " + val.UnitType + "</td>" + "<td width='5%'>" + val.AverageBuyPrice + "</td>" + "<td width='6%'>" + val.SellQuantity + " " + val.UnitType + "</td>" + "<td width='5%'>" + val.AverageSellPrice + "</td>" + "<td width='5%'>" + val.TotalAvailableQuantity + " " + val.UnitType + "</td>" + "<td width='5%'>" + val.TotalBrokenQuantity + " " + val.UnitType + "</td>" + "<td width='6%'>" + Math.round(val.BuyQuantity * val.AverageBuyPrice * 100) / 100 + "</td>" + "<td width='6%'>" + Math.round(val.SellQuantity * val.AverageSellPrice * 100) / 100 + "</td>" + "<td width='6%'>" + Math.round((val.SellQuantity * val.AverageSellPrice - val.BuyQuantity * val.AverageBuyPrice) * 100) / 100 + "</td>" + "<td width='5%'>" + (val.SellQuantity > 0 ? Math.round((val.AverageSellPrice - val.AverageBuyPrice) * 1 * 100) / 100 : 0) + "</td>" + "<td width='5%'>" + (val.SellQuantity > 0 ? Math.round((val.AverageSellPrice - val.AverageBuyPrice) / val.AverageBuyPrice * 100 * 100) / 100 : 0) + "</td>" + "<td width='7%'>" + "سود روز:" + "<br/>" + (val.SellQuantity > 0 ? Math.round(val.AveSellPerDay * 100 - (val.AverageSellPrice - val.AverageBuyPrice)) / 100 : 0) + "<br/>" + "فروش روز:" + "<br/>" + Math.round(val.AveSellPerDay * 100) / 100 + "<br/>" + "تاریخ اتمام:" + "<br/>" + (val.SellQuantity > 0 ? val.ItemFinishDate : "<span>unknown</span>") + "<br/>" + "</td>" + "</tr>" } if (sumQuantity != undefined) { $con.find("#divFooter").removeClass("invisible") } $con.find("#spTotalValue").html(sumPrice); $con.find("#spTotalQuantity").html(sumQuantity); $con.find("#BarcodeList").html(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("tr[id*=tr]").find("td").click(function () { ClickKardex($(this).parent("tr"), container) }).addClass("cursor") } else $con.find("#BarcodeList").parent().tableScroll({ height: 380, width: contentwidth, flush: false }) } function InventoryReportgetOptionsFrom(e, t) { var n = $("#" + t); var r = { callback: InventoryReportpageselectCallback }; n.find("input:text").each(function () { r[this.name] = this.className.match(/numeric/) ? parseInt(this.value) : this.value }); r.prev_show_always = false; r.next_show_always = false; if (e < n.find("#PageSize").val()) n.find("#PageSize").css("display", "none"); else { n.find("#PageSize").css("display", "inline") } r.items_per_page = n.find("#PageSize").val(); r.prev_text = "قبلی"; r.next_text = "بعدی"; r.container = t; return r } function InventoryReportpageselectCallback(e, t, n, r) { var i = $("#" + n); var s = "", o = "", u = "", a = ""; if (r) { buildBarcodeReportList(t, n) } else { r = false; var f = i.find("#PageSize").val(); var l = ""; var c = f; var h = e == 0 ? 0 : e * c; if (i.find("#divBarcodesearch").is(":visible")) { var p = i.find("#ddl_d_SearchBy").val(); if (p == "Barcode") { s = i.find("#txt_s_Inventory").val() } if (p == "Name") { o = i.find("#txt_s_Inventory").val() } if (p == "Code") { u = i.find("#txt_s_Inventory").val() } if (p == "Price") { a = i.find("#txt_s_Inventory").val() } var d = { skip: h, take: c, currentPage: e, first: r, sort: sortid, barcode: s, name: o, code: u, price: a, categoryid: getHierarchySelectedValue("hr_s_Category", n), status: i.find("#ddl_s_Availability").val(), quantityfrom: "", quantityto: "", regdatefrom: "", regdateto: "", shopid: $("#userDefault").find("#ddl_s_Branch").val(), showOnline: i.find("#ddl_s_ShowOnline").val() == undefined ? "" : i.find("#ddl_s_ShowOnline").val(), selectData: "getBarcodeReportList"} } else { var d = { skip: h, take: c, currentPage: e, first: r, sort: sortid, barcode: s, name: o, code: u, price: a, categoryid: getHierarchySelectedValue("hr_s_Category", n), status: i.find("#ddl_s_Availability").val(), quantityfrom: "", quantityto: "", regdatefrom: "", regdateto: "", shopid: $("#userDefault").find("#ddl_s_Branch").val(), showOnline: i.find("#ddl_s_ShowOnline").val() == undefined ? "" : i.find("#ddl_s_ShowOnline").val(), selectData: "getBarcodeReportList"} } $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(d), type: "Post", url: getPath("Services/Inventory.asmx/GetItemsList"), success: function (e) { if (!isAuthenticated(e)) return; buildBarcodeReportList(e, n) }, error: function (e) { alert(e.responseText) } }); return false } Sort(getBarcodeReportList, n) } function getColor(container) { var $con = $("#" + container); var ItemList = ""; $.ajax({ type: "POST", url: getPath("Services/InventorySetting.asmx/GetColorList"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<div class='unit CheckBox' style='background-color:" + val.name + ";'><input name='cd_Color' id='" + val.id + "' type='checkbox' id='cb_d_SizeColor' value='" + val.id + "'   /></div>" } $con.find("#divColor").html(ItemList) }, error: function (e) { alert(e.responseText) } }) } function getSize(container) { var $con = $("#" + container); var ItemList = ""; $.ajax({ type: "POST", url: getPath("Services/InventorySetting.asmx/GetSizeParent"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += " <h3><a href='#' >" + val.Size + "</a></h3><div id='div_" + val.SizeId + "'></div>" } $con.find("#divSizeAccordion").html(ItemList); $con.find("#divSizeAccordion").accordion({ heightStyle: "content", collapsible: true, active: false, activate: function (e, t) { if (t.newPanel.length > 0 && t.newPanel.html().length < 1) getSizeChild(t.newPanel.prop("id").replace("div_", ""), container) } }) }, error: function (e) { alert(e.responseText) } }) } function getSizeChild(sizeid, container) { var $con = $("#" + container); var ItemList = ""; $.ajax({ type: "POST", url: getPath("Services/InventorySetting.asmx/GetSizeChild"), data: "{parentid: '" + sizeid + "'}", contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemList = "<div id='divSizeContent'>"; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<div class='unit CheckBox' ><label for='size' class=' unit label label75'>" + val.Size + "</label><input name='cd_Size' id='" + val.SizeId + "' type='checkbox' id='cb_d_SizeColor' value='" + val.SizeId + "'  class='unit' /></div>" } ItemList += "</div>"; $con.find("#div_" + sizeid).html(ItemList); $con.find("#divSizeAccordion").accordion({ collapsible: true, heightStyle: "content" }) }, error: function (e) { alert(e.responseText) } }) } function addSizeColor(e, t) { var n = $("#" + t); var r = []; var i = []; $.each(n.find("input:checkbox[name=cd_Color]"), function () { if (this.checked) i.push(this.value) }); $.each(n.find("input:checkbox[name=cd_Size]"), function () { if (this.checked) r.push(this.value) }); var s = { barcodeid: e, colorlist: i, sizelist: r, price: n.find("#txt_Price").val(), noColorSize: n.find("input:checkbox[id=cb_d_SizeColor]").is(":checked") }; $.ajax({ type: "POST", data: JSON.stringify(s), url: getPath("Services/Inventory.asmx/AddSizeColor"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function getListColor_Size(barcodeid, container) { var $con = $("#" + container); var ItemList = ""; $.ajax({ type: "POST", data: "{barcodeid: '" + barcodeid + "'}", url: getPath("Services/Inventory.asmx/GetColor_Size"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.ItemDetailId + "'>" + "<td id='Size_" + val.SizeId + "' width='20%'>" + val.Size + "</td>" + "<td width='15%' style='background-color:" + val.Color + ";'></td>" + "<td id='Color_" + val.ColorId + "' width='25%'>" + val.Color + "</td>" + "<td name='price' width='25%'>" + val.DetailPrice + "</td>" + "<td id='delete' width='15%'><div><button name='delete' id='a_Button'>deleteKey</button></td></tr>" } $con.find("#ListColor_Size").html(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("button[id=a_Button]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveItemElement($(this).parents("tr").prop("id").replace("tr", ""), container, barcodeid); else return }); $con.find("tr[id*=tr]").find("td:not([id=delete])").click(function () { ClickColorSize($(this).parent("tr"), container) }).addClass("cursor") }, error: function (e) { alert(e.responseText) } }) } function ClickColorSize(e, t) { var n = $("#" + t); n.find("#ddl_m_Size").val(e.find("td[id*=Size_]").prop("id").replace("Size_", "")); n.find("#ddl_m_Color").val(e.find("td[id*=Color_]").prop("id").replace("Color_", "")); n.find("#txt_m_Price").val(e.find("td[name=price]").html() == "null" ? "" : e.find("td[name=price]").html()); n.find("#hd_m_itemid").val(e.prop("id").replace("tr", "")) } function EditColor_Size(e, t) { var n = $("#" + t); $.ajax({ type: "POST", data: "{itemid: '" + n.find("#hd_m_itemid").val() + "',sizeid:'" + (n.find("#ddl_m_Size").val() == null ? "" : n.find("#ddl_m_Size").val()) + "',colorid:'" + (n.find("#ddl_m_Color").val() == null ? "" : n.find("#ddl_m_Color").val()) + "',price:'" + n.find("#txt_m_Price").val() + "'}", url: getPath("Services/Inventory.asmx/EditColor_Size"), contentType: "application/json; charset=utf-8", success: function (n) { if (!isAuthenticated(n)) return; getListColor_Size(e, t); translate(n.d.msg) }, error: function (e) { alert(e.responseText) } }) } function RemoveItemElement(e, t, n) { var r = $("#" + t); $.ajax({ type: "POST", data: "{itemid: '" + e + "'}", url: getPath("Services/Inventory.asmx/DeleteItem"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; getListColor_Size(n, t); translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function getListPrice(barcodeid, container) { var $con = $("#" + container); var ItemList = ""; $.ajax({ type: "POST", data: "{barcodeid: '" + barcodeid + "'}", url: getPath("Services/Inventory.asmx/GetPrice"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.PriceId + "'>" + "<td name='Date'width='15%'>" + val.Date + "</td>" + "<td name='Regular' width='20%'>" + val.Regular + "</td>" + "<td name='Freinds' width='20%'>" + val.Freinds + "</td>" + "<td name='Wholesale' width='20%'>" + val.Wholesale + "</td>" + "<td name='Online' width='20%'>" + val.Online + "</td>" + "<td id='delete' width='5%'><button id='a_Button'>حذف</button></td></tr>" } $con.find("#ListPrice").html(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("[id=a_Button]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemovePriceElement($(this).parents("tr").prop("id").replace("tr", ""), container, barcodeid); else return }); $con.find("tr[id*=tr]").find("td:not([id=delete])").click(function () { ClickPrice($(this).parent("tr"), container, barcodeid) }).addClass("cursor") }, error: function (e) { alert(e.responseText) } }) } function AddPrice(e, t) { var n = $("#" + t); $.ajax({ type: "POST", data: "{barcodeid:'" + e + "',date:'" + n.find("#txt_m_Date").val() + "',regular:'" + n.find("#txt_m_RegularPrice").val() + "',Frinends:'" + n.find("#txt_m_FrinendsPrice").val() + "',wholesale:'" + n.find("#txt_m_WholesalePrice").val() + "',online:'" + n.find("#txt_m_OnlinePrice").val() + "'}", url: getPath("Services/Inventory.asmx/AddPrice"), contentType: "application/json; charset=utf-8", success: function (n) { if (!isAuthenticated(n)) return; translate(n.d.msg); if (n.d.isDone) getListPrice(e, t) }, error: function (e) { alert(e.responseText) } }) } function EditPrice(e, t) { var n = $("#" + t); $.ajax({ type: "POST", data: "{priceid: '" + n.find("#hd_m_priceid").val() + "',date:'" + n.find("#txt_m_Date").val() + "',regular:'" + n.find("#txt_m_RegularPrice").val() + "',Frinends:'" + n.find("#txt_m_FrinendsPrice").val() + "',wholesale:'" + n.find("#txt_m_WholesalePrice").val() + "',online:'" + n.find("#txt_m_OnlinePrice").val() + "'}", url: getPath("Services/Inventory.asmx/EditPrice"), contentType: "application/json; charset=utf-8", success: function (r) { if (!isAuthenticated(r)) return; getListPrice(e, t); n.find("#btn_Submit").unbind().bind("click", function () { AddPrice(e, t) }); n.find("#txt_m_Date").val(""); n.find("#txt_m_RegularPrice").val(""); n.find("#txt_m_FrinendsPrice").val(""); n.find("#txt_m_WholesalePrice").val(""); n.find("#txt_m_OnlinePrice").val(""); n.find("#hd_m_priceid").val() }, error: function (e) { alert(e.responseText) } }) } function ClickPrice(e, t, n) { var r = $("#" + t); r.find("#txt_m_Date").val(e.find("td[name=Date]").html().split(" ")[1]); r.find("#txt_m_RegularPrice").val(e.find("td[name=Regular]").html() == "null" ? "" : e.find("td[name=Regular]").html()); r.find("#txt_m_FrinendsPrice").val(e.find("td[name=Freinds]").html() == "null" ? "" : e.find("td[name=Freinds]").html()); r.find("#txt_m_WholesalePrice").val(e.find("td[name=Wholesale]").html() == "null" ? "" : e.find("td[name=Wholesale]").html()); r.find("#txt_m_OnlinePrice").val(e.find("td[name=Online]").html() == "null" ? "" : e.find("td[name=Online]").html()); r.find("#hd_m_priceid").val(e.prop("id").replace("tr", "")); r.find("#btn_Submit").unbind().bind("click", function () { EditPrice(n, t) }) } function RemovePriceElement(e, t, n) { var r = $("#" + t); $.ajax({ type: "POST", data: "{priceid: '" + e + "'}", url: getPath("Services/Inventory.asmx/DeletePrice"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg); if (e.d.isDone) getListPrice(n, t) }, error: function (e) { alert(e.responseText) } }) } function getListCategory(barcodeid, container, first) { var $con = $("#" + container); var ItemList = ""; ajgetListCategory = $.ajax({ type: "POST", data: "{barcodeid: '" + barcodeid + "'}", url: getPath("Services/Inventory.asmx/GetCategoryList"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.CategoryId + "'>" + "<td name='Category' width='80%'>" + val.Category + "</td>" + "<td id='delete' width='20%'><button id='a_Button'>حذف</button></td></tr>" } $con.find("#ListCategory").html(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("[id=a_Button]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveCategoryElement($(this).parents("tr").prop("id").replace("tr", ""), container, barcodeid); else return }); if (first) bindHierarchyData({ id: "hr_m_Category", container: container, canmodify: true, table: "category" }) }, error: function (e) { alert(e.responseText) } }) } function AddCategory(e, t) { var n = $("#" + t); $.ajax({ type: "POST", data: "{barcodeid:'" + e + "',categoryid:'" + getHierarchySelectedValue("hr_m_Category", t) + "'}", url: getPath("Services/Inventory.asmx/AddCategory"), contentType: "application/json; charset=utf-8", success: function (n) { if (!isAuthenticated(n)) return; if (n.d.isDone) getListCategory(e, t); translate(n.d.msg) }, error: function (e) { alert(e.responseText) } }) } function RemoveCategoryElement(e, t, n) { var r = $("#" + t); $.ajax({ type: "POST", data: "{barcodeid:'" + n + "',categoryid:'" + e + "'}", url: getPath("Services/Inventory.asmx/DeleteCategory"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isDone) getListCategory(n, t); translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function getListColorSystem(container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/InventorySetting.asmx/GetListColor"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.ColorId + "'>" + "<td width='20%' style='background-color: " + val.Color + ";'></td>" + "<td width='35%' name='name'>" + val.Color + "</td>" + "<td width='35%' name='translate'>" + val.ColorTranslate + "</td>" + "<td id='delete' width='10%'><button id='a_Button'>حذف</button></td></tr>" } $con.find("#ListColor").html(ItemList).parent().tableScroll({ height: 380, flush: false }); $con.find("[id=a_Button]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveColorElement($(this).parents("tr").prop("id").replace("tr", ""), container); else return }); $con.find("tr[id*=tr]").find("td:not([id=delete])").click(function () { ClickColor($(this).parent("tr"), container) }).addClass("cursor"); $con.find("#divInventoryAccordion").accordion({ collapsible: true, heightStyle: "content" }) }, error: function (e) { alert(e.responseText) } }) } function addColor(e) { var t = $("#" + e); $.ajax({ type: "POST", data: "{color:'" + t.find("#ddl_m_Color").val() + "',translate:'" + t.find("#txt_m_Translate").val() + "'}", url: getPath("Services/InventorySetting.asmx/AddColor"), contentType: "application/json; charset=utf-8", success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isdone) getListColorSystem(e); translate(t.d.msg) }, error: function (e) { alert(e.responseText) } }) } function RemoveColorElement(e, t) { var n = $("#" + t); $.ajax({ type: "POST", data: "{colorid:'" + e + "'}", url: getPath("Services/InventorySetting.asmx/DeleteColor"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; getListColorSystem(t); translate(e.d) }, error: function (e) { alert(e.responseText) } }) } function editColor(e, t) { var n = $("#" + t); $.ajax({ type: "POST", data: "{colorid:'" + e + "',color:'" + n.find("#ddl_m_Color").val() + "',translate:'" + n.find("#txt_m_Translate").val() + "'}", url: getPath("Services/InventorySetting.asmx/EditColor"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isdone) { getListColorSystem(t); n.find("#txt_m_Translate").val(""); n.find("#ddl_m_Color").val(0) } translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function ClickColor(e, t) { var n = $("#" + t); n.find("#ddl_m_Color").val(e.find("td[name=name]").html()); n.find("#selectedColorId").val(e.prop("id").replace("tr", "")); n.find("#txt_m_Translate").val(e.find("td[name=translate]").html() == "null" ? "" : e.find("td[name=translate]").html()) } function getListSize(container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/InventorySetting.asmx/GetListSize"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; if (val.ParentSizeId != null && val.ParentSizeId != 0) ItemList += "<tr id='tr" + val.SizeId + "'>" + "<td width='45%' name='Parent' id='td" + val.ParentSizeId + "'>" + val.ParentSize + "</td>" + "<td width='45%' name='Size'>" + val.Size + "</td>" + "<td width='10%' id='delete'><button id='a_Button'>حذف</button></td></tr>"; else ItemList += "<tr id='tr" + val.SizeId + "'>" + "<td width='45%' name='Parent' id='td" + val.SizeId + "'>" + val.Size + "</td>" + "<td width='45%' name='Size'></td>" + "<td width='10%' id='delete'><button id='a_Button'>حذف</button></td></tr>" } $con.find("#ListSize").html(ItemList).parent().tableScroll({ height: 380, flush: false }); $con.find("[id=a_Button]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveSizeElement($(this).parents("tr").prop("id").replace("tr", ""), container); else return }); $con.find("tr[id*=tr]").find("td:not([id=delete])").click(function () { ClickSize($(this).parent("tr"), container) }).addClass("cursor"); $con.find("#divInventoryAccordion").accordion({ collapsible: true, heightStyle: "content" }); }, error: function (e) { alert(e.responseText) } }) } function AddPaternSize(e) { var t = $("#" + e); $.ajax({ type: "POST", data: "{size:'" + t.find("#txt_m_ParentSize").val() + "'}", url: getPath("Services/InventorySetting.asmx/AddParentSize"), contentType: "application/json; charset=utf-8", success: function (t) { if (!isAuthenticated(t)) return; bindItemsForSelectCombo({ methodname: "GetPaternSizeList", servicename: "InventorySetting", id: "ddl_m_Size", container: e, headertext: "انتخاب جزئیات" }); getListSize(e); translate(t.d.msg) }, error: function (e) { alert(e.responseText) } }) } function AddSize(e) { var t = $("#" + e); $.ajax({ type: "POST", data: "{size:'" + t.find("#txt_m_Size").val() + "',parentsizeid:'" + t.find("#ddl_m_Size").val() + "'}", url: getPath("Services/InventorySetting.asmx/AddSize"), contentType: "application/json; charset=utf-8", success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isdone) getListSize(e); translate(t.d.msg) }, error: function (e) { alert(e.responseText) } }) } function editSize(e, t) { var n = $("#" + t); $.ajax({ type: "POST", data: "{sizeid:'" + e + "', size:'" + n.find("#txt_m_Size").val() + "',parentsizeid:'" + n.find("#ddl_m_Size").val() + "'}", url: getPath("Services/InventorySetting.asmx/EditSize"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isdone) { getListSize(t); n.find("#ddl_m_Size").val(0); n.find("#txt_m_Size").val("") } translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function ClickSize(e, t) { var n = $("#" + t); n.find("#ddl_m_Size").val(e.find("td[id*=td]").prop("id").replace("td", "")); n.find("#txt_m_Size").val(e.find("td[name=Size]").html() == "null" ? "" : e.find("td[name=Size]").html()); n.find("#selectedSizeId").val(e.prop("id").replace("tr", "")) } function RemoveSizeElement(e, t) { var n = $("#" + t); $.ajax({ type: "POST", data: "{sizeid:'" + e + "'}", url: getPath("Services/InventorySetting.asmx/DeleteSize"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; getListSize(t); translate(e.d) }, error: function (e) { alert(e.responseText) } }) } function loadInventoryUnit(e, t, n) { if (n) { var r = $("#" + t); r.find("#barcodeid").val(e); GetUnitList(e, t); r.find("#btn_new").button({ icons: { primary: "ui-icon-plusthick"} }).unbind().click(function () { $("#dialogAddUnit").find("input, select").val(""); $("#dialogAddUnit").find("#btn_save").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { AddUnit(e, "dialogAddUnit", t) }); bindHierarchyData({ id: "divUnitCategoryAdd", container: "dialogAddUnit", table: "MeasureUnit", canmodify: true }); $("#dialogAddUnit").dialog(open).dialog({ width: 500 }) }) } } function AddUnit(e, t, n) { var r = $("#" + t); var i = { barcodeid: e, MeasureUnitId: getHierarchySelectedValue("divUnitCategoryAdd", t), quantity: r.find("#txtQuantityAdd").val(), discount: r.find("#txtDiscountAdd").val() }; $.ajax({ type: "POST", data: JSON.stringify(i), url: getPath("Services/Inventory.asmx/AddUnit"), contentType: "application/json; charset=utf-8", success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isDone) GetUnitList(e, n); translate(t.d.msg) }, error: function (e) { alert(e.responseText) } }) } function buildUnitList(jq, container) { var $con = $("#" + container); var table = {}; var lstb = []; var lsth = []; lsth.push({ title: "واحد کالا", sort: "", width: "30%" }); lsth.push({ title: "تعداد", width: "30%" }); lsth.push({ title: "تخفیف واحد", width: "25%" }); lsth.push({ title: "ویرایش/حذف", width: "15%" }); var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; trBody[0] = { trId: val.MeasureUnitId }; trBody[1] = { name: "unit", html: val.UnitType, width: "30%" }; trBody[2] = { name: "quantity", html: val.Quantity, width: "30%" }; trBody[3] = { name: "discount", html: val.DiscountPercentage, width: "25%" }; lstb.push(trBody) } var details = { editFunction: BindItemsForEditUnit, deleteFunction: DeleteUnit }; table = { header: lsth, body: lstb, details: details, container: container, divName: "UnitTable" }; buildTable(table) } function GetUnitList(e, t) { var n = $("#" + t); var r = ""; var i = { barcodeid: e }; $.ajax({ type: "POST", data: JSON.stringify(i), url: getPath("Services/Inventory.asmx/GetUnitList"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; buildUnitList(e.d, t) }, error: function (e) { } }) } function BindItemsForEditUnit(e, t) { $("#dialogAddUnit").dialog().dialog("destroy"); var n = $(e).parents("tr"); var r = n.prop("id"); var i = $("#" + t); i.find("#divUnitCategoryAdd").html(""); i.find("#btn_save").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll(i.find("#dialogAddExpense"))) EditUnit(r.replace("tr", ""), "dialogAddUnit", t) }); bindHierarchyData({ id: "divUnitCategoryAdd", container: "dialogAddUnit", table: "MeasureUnit", canmodify: true, parentid: r.replace("tr", "") }); i.find("#txtQuantityAdd").val(n.find("[name=quantity]").html()); i.find("#txtDiscountAdd").val(n.find("[name=discount]").html()); i.find("#dialogAddUnit").dialog({ autoOpen: true }) } function EditUnit(e, t, n) { var r = $("#" + t); var i = { barcodeid: $("#" + n).find("#barcodeid").val(), oldMeasureUnitId: e, newMeasureUnitId: getHierarchySelectedValue("divUnitCategoryAdd", t), quantity: r.find("#txtQuantityAdd").val(), discount: r.find("#txtDiscountAdd").val() }; $.ajax({ type: "POST", data: JSON.stringify(i), url: getPath("Services/Inventory.asmx/EditUnit"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; if (e.d != null && e.d.isDone == true) { GetUnitList($("#" + n).find("#barcodeid").val(), n) } translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function DeleteUnit(e, t) { var n = $("#" + t); var r = e; var i = { barcodeid: $("#" + t).find("#barcodeid").val(), MeasureUnitId: r }; $.ajax({ type: "POST", url: getPath("Services/Inventory.asmx/DeleteUnit"), contentType: "application/json; charset=utf-8", data: JSON.stringify(i), success: function (t) { if (!isAuthenticated(t)) return; if (t.d != null && t.d.isDone == true) $("#tr" + e).remove(); translate(t.d.msg) }, error: function (e) { alert(e.responseText) } }) } function loadItemProperty(e, t, n) { if (n) { var r = $("#" + t); var i = r.find("#dialogAddProperty").attr("id", t + "dialogAddProperty"); r.find("#barcodeid").val(e); getProperty(e, t + "dialogAddProperty", t); bindHierarchyData({ id: "divProperty", container: t, table: "property", canmodify: true }); r.find("#btn_properties").button({ icons: { primary: "ui-icon-plusthick"} }).unbind().click(function () { getAllProperties(e, t + "dialogAddProperty", t) }); r.find("#btn_updateProperties").button({ icons: { primary: "ui-icon-plusthick"} }).unbind().click(function () { updateProperties(e, t) }); r.find("#btn_new").button({ icons: { primary: "ui-icon-plusthick"} }).unbind().click(function () { i.find("input, select").val(""); i.find("#btn_save").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { AddProperty(e, t + "dialogAddProperty", t) }); bindHierarchyData({ id: "divPropertyAdd", container: t + "dialogAddProperty", table: "property", canmodify: true }); i.dialog(open).dialog({ width: 500 }) }); aComplete({ methodname: "GetCompletionListByProperty", servicename: "AtuoComplete", id: "txtPropertyValueAdd", boxId: "txtPropertyValueAdd", container: t + "dialogAddProperty", minlength: 2, autofocus: false, limit: 20, data: { propertyId: "divPropertyAdd"} }) } } function getAllProperties(barcodeid, dialog, container) { var $con = $("#" + container); var DTO = { barcodeid: barcodeid, propertyId: getHierarchySelectedValue("divProperty", container) }; $.ajax({ type: "POST", data: JSON.stringify(DTO), url: getPath("Services/Inventory.asmx/getAllPropertys"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; var table = "<table class='table' ><tbody>"; var group = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; for (var j = 0; j < group.length; j++) { var val = group[0, j]; table += "<tr ><td style=' font-weight: bold; background-color: #CCFFCC' colspan='3'>" + val.Property + "</td></tr>"; var Properties = typeof val.properties == "string" ? eval("(" + val.properties + ")") : val.properties; for (var p = 0; p < Properties.length; p++) { var val = Properties[0, p]; table += "<tr id='tr" + val.PropertyId + "'><td>" + val.Property + "</td><td><input style='width:100%;height:25px;' id='pr" + val.PropertyId + "' propertyId='" + val.PropertyId + "' type='text' value='" + val.Value + "'/></td><td id='delete'>" + (val.Value != "" ? "<button propId='" + val.PropertyId + "' id='btnDelete'>حذف</button>" : "") + "</td></tr>" } } table += "</tbody></table>"; $con.find("#itemProperty").html(table); $con.find("#itemProperty").tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("[id=btnDelete]").button({}); $con.find("[id=btnDelete]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).unbind().click(function () { var e = this; if (confirm("آیا از حذف مطمئن هستید؟")) deleteProperty($(this).attr("propId"), container + "dialogAddProperty", container); else return }); $con.find("table").find("input:text").each(function () { aComplete({ methodname: "GetCompletionListByProperty", servicename: "AtuoComplete", id: $(this).attr("id"), boxId: $(this).attr("id"), container: container, minlength: 2, autofocus: false, limit: 20, data: { propertyId: $(this).attr("propertyId")} }) }) }, error: function (e) { alert(e.responseText) } }) } function getProperty(barcodeid, dialog, container) { var $con = $("#" + container); var DTO = { barcodeid: barcodeid }; $.ajax({ type: "POST", data: JSON.stringify(DTO), url: getPath("Services/Inventory.asmx/getProperty"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; var table = "<table class='table' ><tbody>"; var group = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; for (var j = 0; j < group.length; j++) { var val = group[0, j]; table += "<tr ><td colspan='3'>" + val.Property + "</td></tr>"; var Properties = typeof val.properties == "string" ? eval("(" + val.properties + ")") : val.properties; for (var p = 0; p < Properties.length; p++) { var val = Properties[0, p]; table += "<tr id='tr" + val.PropertyId + "'><td>" + val.Property + "</td><td>" + val.Value + "</td><td id='delete'><button propId='" + val.PropertyId + "' id='btnDelete'>حذف</button></td></tr>" } } table += "</tbody></table>"; $con.find("#itemProperty").html(table); $con.find("#itemProperty").tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("[id=btnDelete]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).unbind().click(function () { var e = this; if (confirm("آیا از حذف مطمئن هستید؟")) deleteProperty($(this).attr("propId"), container + "dialogAddProperty", container); else return }) }, error: function (e) { alert(e.responseText) } }) } function AddProperty(e, t, n) { var r = $("#" + t); var i = { barcodeid: e, propertyId: getHierarchySelectedValue("divPropertyAdd", t), value: r.find("#txtPropertyValueAdd").val() }; $.ajax({ type: "POST", data: JSON.stringify(i), url: getPath("Services/Inventory.asmx/AddProperty"), contentType: "application/json; charset=utf-8", success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isDone) getProperty(e, n + "dialogAddProperty", n); translate(t.d.msg) }, error: function (e) { alert(e.responseText) } }) } function updateProperties(e, t) { var n = $("#" + t); var r = []; n.find("table").find("input:text").each(function () { var e = {}; e["value"] = $(this).val(); e["id"] = $(this).attr("propertyId"); r.push(e) }); var i = { barcodeid: e, propList: r }; $.ajax({ type: "POST", data: JSON.stringify(i), url: getPath("Services/Inventory.asmx/UpdateProperties"), contentType: "application/json; charset=utf-8", success: function (n) { if (!isAuthenticated(n)) return; if (n.d.isDone) getAllProperties(e, t, t); translate(n.d.msg) }, error: function (e) { alert(e.responseText) } }) } function deleteProperty(e, t, n) { var r = $("#" + n); var i = { propertyId: e }; $.ajax({ type: "POST", data: JSON.stringify(i), url: getPath("Services/Inventory.asmx/deleteProperty"), contentType: "application/json; charset=utf-8", success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isDone) r.find("#tr" + e).remove(); translate(t.d.msg) }, error: function (e) { alert(e.responseText) } }) } function buildPropertyList(jq, container) { var $con = $("#" + container); var table = {}; var lstb = []; var lsth = []; lsth.push({ title: "واحد کالا", sort: "", width: "30%" }); lsth.push({ title: "تعداد", width: "30%" }); lsth.push({ title: "تخفیف واحد", width: "25%" }); lsth.push({ title: "ویرایش/حذف", width: "15%" }); var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; trBody[0] = { trId: val.MeasureUnitId }; trBody[1] = { name: "unit", html: val.UnitType, width: "30%" }; trBody[2] = { name: "quantity", html: val.Quantity, width: "30%" }; trBody[3] = { name: "discount", html: val.DiscountPercentage, width: "25%" }; lstb.push(trBody) } var details = { editFunction: BindItemsForEditUnit, deleteFunction: DeleteUnit }; table = { header: lsth, body: lstb, details: details, container: container, divName: "UnitTable" }; buildTable(table) } function loadItemDefinition(e, t, n) { if (n) { var r = $("#" + t); getItemDefinition(e, t) } } function getItemDefinition(e, t) { var n = $("#" + t); var r = { barcodeId: e }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(r), type: "Post", url: getPath("Services/InventorySetting.asmx/GetItemDefinition"), success: function (r) { if (r.d.canEdit) { n.find("#divDefinition").html("<textarea class='editor' name='txtDefinition'>" + (r.d.isDone ? r.d.result == null ? "" : r.d.result : "") + "</textarea></n><button id='btnSaveDefintion'>save</button>"); n.find(".editor").tinymce({ script_url: "jscripts/tiny_mce/tiny_mce.js", width: "100%", height: "500px", directionality: "rtl", theme: "advanced", verify_html: false, plugins: "pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,wordcount,advlist,autosave", theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,styleselect,formatselect,fontselect,fontsizeselect", theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor", theme_advanced_buttons3: "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen", theme_advanced_buttons4: "insertlayer,moveforward,movebackward,absolute,|,styleprops,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,pagebreak,restoredraft,codehighlighting,netadvimage", theme_advanced_toolbar_location: "top", theme_advanced_toolbar_align: "right", theme_advanced_statusbar_location: "bottom", theme_advanced_resizing: false, save_onsavecallback: function () { AddItemDefinition(e, t) }, content_css: "../../Scripts/tinymce/css/content.css", convert_urls: false }); n.find("#btnSaveDefintion").button().unbind("click").bind("click", function () { AddItemDefinition(e, t) }) } else { n.find("#divDefinition").html(r.d.isDone ? "<div style='padding-left:5em;'>" + r.d.result + "</div>" : "") } }, error: function (e) { alert(e.responseText) } }) } function AddItemDefinition(e, t) { var n = $("#" + t); var r = { barcodeId: e, definition: n.find("[name='txtDefinition']").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(r), type: "Post", url: getPath("Services/InventorySetting.asmx/AddItemDefinition"), success: function (e) { translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function loadCounterAdd(e, t) { var n = $("#" + e); bindItemsForSelectCombo({ servicename: "Shop", methodname: "getShopName", headertext: "شعبه اصلی", id: "ParentShopCounter", container: e }); if (t) { n.find("#addCounter").button({ icons: { primary: "ui-icon-disk" }, text: true }).unbind("click").click(function () { if (n.find("#ParentShopCounter").val() == "") { alert("شعبه را انتخاب کنید."); return } if (validateAll($("#" + e))) addCounter(e) }) } } function loadCounterList(e, t) { if (t) { var n = $("#" + e); n.find("#refreshCounterList").button({ icons: { primary: "ui-icon-refresh" }, text: false }).off().on("click", function (t) { getCounterList(e, { container: e, callbackmethod: getCounterList, fname: "", page_index: 0, build: buildCounterList, servicename: "Counter", methodname: "GetCounterlist", print: false }) }); getCounterList(e, { container: e, callbackmethod: getCounterList, fname: "", page_index: 0, build: buildCounterList, servicename: "Counter", methodname: "GetCounterlist", print: false }) } } function loadCounterEdit(e, t, n) { if (n) { var r = $("#" + t); bindItemsForSelectCombo({ servicename: "Shop", methodname: "getShopName", headertext: "شعبه اصلی", id: "ParentShopCounter", container: t }); r.find("#addCounter").button({ icons: { primary: "ui-icon-disk" }, text: true }).unbind("click").click(function () { if (r.find("#ParentShopCounter").val() == "") { alert("شعبه را انتخاب کنید."); return } if (validateAll($("#" + t))) EditCounter(e, t) }); ajDropDown.done(function () { r.find("#ParentShopCounter").val($("#tr" + e).find("td[name=branchName]").prop("id")); r.find("#text_Code").val($("#tr" + e).find("td[name=name]").attr("code")) }) } } function loadCounterAmount(e, t, n) { if (n) { var r = $("#" + t); r.find("#refreshCounterAmountList").button({ icons: { primary: "ui-icon-refresh" }, text: false }).off().on("click", function (n) { getCurrencyCounter(e, t) }); getCurrencyCounter(e, t) } } function addCounter(e) { var t = $("#" + e); $.ajax({ type: "POST", url: getPath("Services/Counter.asmx/AddCounter"), contentType: "application/json; charset=utf-8", data: "{code: '" + t.find("#text_Code").val() + "', shopid: '" + t.find("#ParentShopCounter").val() + "'}", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isdone) { $("#ddl_m_Counter").append("<option value='" + e.d.counterId + "'>" + e.d.counterName + "</option>"); $("#ddl_m_Counter").attr("disabled", false) } translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function EditCounter(e, t) { var n = $("#" + t); $.ajax({ type: "POST", url: getPath("Services/Counter.asmx/EditCounter"), contentType: "application/json; charset=utf-8", data: "{id: '" + e + "', code: '" + n.find("#text_Code").val() + "', shopid: '" + n.find("#ParentShopCounter").val() + "'}", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function buildCounterList(jq, container) { var $con = $("#" + container.pagingContainer); var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "code", width: "46%" }); lsth.push({ title: "branchName", width: "50%" }); if (!container.params.print) { lsth.push({ title: "deleteKey", width: "4%" }) } var List = typeof jq.d.results == "string" ? eval("(" + jq.d.results + ")") : jq.d.results; var ItemList = ""; if (List != null) for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; if (!container.params.print) trBody[0] = { trId: val.CounterId }; trBody[1] = { props: { name: "name", width: "46%", code: val.Code }, html: "<span>counter</span> " + val.Code }; trBody[2] = { props: { id: val.ShopId, name: "branchName", width: "50%" }, html: val.Name + "  " + val.ShopCode }; lstb.push(trBody) } table = { header: lsth, body: lstb, details: { deleteFunction: RemoveCounterElement, rowClick: clickCounter }, heigth: 300, container: container.pagingContainer, divName: "CounterList" }; buildTable(table) } function getCounterList(e, t) { var n = $("#" + e); pageselectCallback(0, t, { container: "", noPaging: true, fname: t.fname, pagingContainer: e, first: true, isOrder: false }) } function clickCounter(e, t) { createSubTab({ row: e, name: "a_CounterList" }); itemId = e.prop("id").replace("tr", ""); onRowClick(e) } function getCurrencyCounter(counterid, container) { var $con = $("#" + container); var amounttotal = 0; $.ajax({ type: "POST", url: getPath("Services/Counter.asmx/GetCurrencyCounter"), contentType: "application/json; charset=utf-8", data: "{id: '" + counterid + "'}", success: function (response) { if (!isAuthenticated(response)) return; var shop = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var shopItem = ""; for (var j = 0; j < shop.length; j++) { var val = shop[0, j]; shopItem += "<tr id='tr'>" + "<td width='30%'>" + val.Currency + "</td>" + "<td width='30%'>" + val.Amount + "</td>" + "<td name='Amount' width='35%'>" + val.Amount * 1 * val.Sell * 1 + "</td></tr>"; amounttotal += val.Amount * 1 * val.Sell * 1 } $con.find("#txt_d_TotalAmount").val(amounttotal); $con.find("#CounterAmountList").html(shopItem).parent().tableScroll({ height: 380, width: contentwidth, flush: false }) }, error: function (e) { alert(e.responseText) } }) } function RemoveCounterElement(e, t) { var n = $("#" + t); $.ajax({ type: "POST", url: getPath("Services/Counter.asmx/DeleteCounter"), contentType: "application/json; charset=utf-8", data: "{Cid: '" + e + "'}", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg); if (e.d.isDone) getCounterList(t, { container: t, callbackmethod: getCounterList, fname: "", page_index: 0, build: buildCounterList, servicename: "Counter", methodname: "GetCounterlist", print: false }) }, error: function (e) { alert(e.responseText) } }) } function loadCurrencyNameList(e, t) { var n = $("#" + e); getCurrency(e); n.find("#addCurrency").button({ icons: { primary: "ui-icon-disk" }, text: true }).unbind("click").click(function () { if (validateAll($("#" + e))) addCurrency(e) }); n.find("#editCurrency").button({ icons: { primary: "ui-icon-disk" }, text: true }).unbind("click").click(function () { if (validateAll($("#" + e))) { if (n.find(".table tbody tr").length == 0) alert("داده ای برای ویرایش وجود ندارد"); else { if (validateAll($(this))) editCurrency(e) } } }); n.find("#deleteCurrency").button({ icons: { primary: "ui-icon-closethick" }, text: true }).unbind("click").click(function () { if (validateAll($("#" + e))) { if (n.find(".table tbody tr").length == 0) { n.find("#currency_Name").val(""); n.find("#currency_Symbol").val(""); n.find("#CurrencyID").val(""); alert("داده ای برای حذف وجود ندارد") } else deleteCurrency(e) } }) } function loadCurrencyList(e, t) { sortid = "CurrencyRateId desc"; var n = $("#" + e); bindItemsForSelectCombo({ servicename: "Currency", methodname: "CurrensyList", headertext: "انتخاب ارز", id: "currencyNameAdd", container: e }); bindItemsForSelectCombo({ servicename: "Currency", methodname: "CurrensyList", headertext: "انتخاب ارز", id: "search_select", container: e }); if (t) { n.find("#moreFilter").slideUp("fast"); n.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); n.find("#divBasic").toggleClass("hidden"); n.find("#moreFilter").removeClass("invisible"); n.find("#moreFilter").slideToggle(function () { }) }); n.find("#datefrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#dateto").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#dateto").datepicker({ changeMonth: true, changeYear: true }); n.find("#rate_date").datepicker({ changeMonth: true, changeYear: true, onClose: function () { validateAll($("#" + e)) } }); getCurrencyRate(e, { container: e, callbackmethod: getCurrencyRate, fname: "", page_index: 0, build: buildCurrencyRateList, servicename: "Currency", methodname: "GetCurrencyRate", print: false }); n.find("#addCurrencyRate").button({ icons: { primary: "ui-icon-disk" }, text: true }).unbind("click").click(function () { if (n.find("#currencyNameAdd").val() == "") { alert("نام ارز را انتخاب کنید."); return } if (validateAll($("#" + e))) addCurrencyRate(e) }); n.find("#editCurrencyRate").button({ icons: { primary: "ui-icon-disk" }, text: true }).unbind("click").click(function () { if (n.find("#currencyNameAdd").val() == "") { alert("نام ارز را انتخاب کنید."); return } if (validateAll($("#" + e))) editCurrencyRate(e) }); n.find("#deleteCurrencyRate").button({ icons: { primary: "ui-icon-closethick" }, text: true }).unbind("click").click(function () { deleteCurrencyRate(e) }); n.find("#Reset").click(function () { n.find("#currencyNameAdd").val(0); n.find("#rate_date").val(""); n.find("#text_buyrate").val(""); n.find("#text_sellrate").val("") }).button({ icons: { primary: "ui-icon-plus" }, text: true }); n.find("#divslider").unbind("click").click(function () { sliderClick("moreFilter"); sliderClick("ul_add") }); n.find("#Button_advanceSearch").button().click(function () { getCurrencyRate(e, { container: e, callbackmethod: getCurrencyRate, fname: "", page_index: 0, build: buildCurrencyRateList, servicename: "Currency", methodname: "GetCurrencyRate", print: false }) }); n.find("#Button_search").button({ icons: { primary: "ui-icon-search" }, text: true }).click(function () { getCurrencyRate(e, { container: e, callbackmethod: getCurrencyRate, fname: "", page_index: 0, build: buildCurrencyRateList, servicename: "Currency", methodname: "GetCurrencyRate", print: false }) }) } } function deleteCurrency(e) { var t = $("#" + e); $.ajax({ type: "POST", url: getPath("Services/Currency.asmx/DeleteCurrency"), contentType: "application/json; charset=utf-8", data: "{id: '" + t.find("#CurrencyID").val() + "'}", success: function (t) { if (!isAuthenticated(t)) return; translate(t.d); getCurrency(e) }, error: function (e) { alert(e.responseText) } }) } function addCurrency(e) { var t = $("#" + e); $.ajax({ type: "POST", url: getPath("Services/Currency.asmx/AddCurrency"), contentType: "application/json; charset=utf-8", data: "{name: '" + t.find("#currency_Name").val() + "', symbol: '" + t.find("#currency_Symbol").val() + "'}", success: function (t) { if (!isAuthenticated(t)) return; translate(t.d); getCurrency(e) }, error: function (e) { alert(e.responseText) } }) } function editCurrency(e) { var t = $("#" + e); $.ajax({ type: "POST", url: getPath("Services/Currency.asmx/EditCurrency"), contentType: "application/json; charset=utf-8", data: "{id: '" + t.find("#CurrencyID").val() + "', name: '" + t.find("#currency_Name").val() + "', symbol: '" + t.find("#currency_Symbol").val() + "'}", success: function (t) { if (!isAuthenticated(t)) return; translate(t.d); getCurrency(e) }, error: function (e) { alert(e.responseText) } }) } function setIndexCurrency(e, t) { $.ajax({ type: "POST", url: getPath("Services/Currency.asmx/setIndexCurrency"), contentType: "application/json; charset=utf-8", data: "{id: '" + e + "'}", success: function (e) { if (!isAuthenticated(e)) return; getCurrency(t); translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function ClickCurrency(e, t) { var n = $("#" + t); n.find("#currency_Name").val($("#" + e.prop("id") + " td[name=currency]").html()); n.find("#currency_Symbol").val($("#" + e.prop("id") + " td[name=symbol]").html()); n.find("#CurrencyID").val(e.prop("id").toString().replace("tr", "")) } function getCurrency(container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/Currency.asmx/CurrensyList"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; var Currency = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var CurrencyItems = ""; for (var j = 0; j < Currency.length; j++) { var val = Currency[0, j]; CurrencyItems += "<tr id='tr" + val.id + "'><td  width='40%' name='currency'>" + val.name + "</td><td width='30%' name='symbol'>" + val.symbol + "</td>" + "<td width='30%' name='symbol'><input value=' ' name='isIndex' currencyId='" + val.id + "' type='checkbox'  " + (val.isIndex ? "checked" : "") + "/></td>"; "</tr>" } $con.find("#currencylist").html(CurrencyItems).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("tr[id*=tr]").find("td:not([id=delete])").click(function () { ClickCurrency($(this).parent("tr"), container) }).addClass("cursor"); $con.find("[name='isIndex']").click(function () { setIndexCurrency($(this).attr("currencyId"), container) }) }, error: function (e) { alert(e.responseText) } }) } function buildCurrencyRateList(jq, params) { var $con = $("#" + params.pagingContainer); jq = jq.d.results; var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "name", sort: "ac_Currency.CurrencyId", width: "24%" }); lsth.push({ title: "date", sort: "Date", width: "30%" }); lsth.push({ title: "buyPrice", sort: "Buy", width: "21%" }); lsth.push({ title: "sellPrice", sort: "Sell", width: "21%" }); lsth.push({ title: "deleteKey", width: "4%" }); var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; trBody[0] = { trId: val.CurrencyRateId }; trBody[1] = { props: { currencyId: val.CurrencyId, name: "name", id: val.CurrencyId, width: "24%" }, html: val.Currency + " " + val.Symbol }; trBody[2] = { html: val.Date, props: { name: "date", persianDate: val.date.split(" ")[1], date: val.Date, width: "30%", klass: "dateLong"} }; trBody[3] = { props: { name: "buyPrice", buy: val.Buy, width: "21%" }, name: "buyPrice", html: val.Buy }; trBody[4] = { props: { name: "sellPrice", sell: val.Sell, width: "21%" }, name: "sellPrice", html: val.Sell }; lstb.push(trBody) } table = { header: lsth, body: lstb, details: { rowClick: ClickCurrencyRate, deleteFunction: deleteCurrencyRate }, heigth: 300, container: params.pagingContainer, divName: "currencyRateList", rowClickParams: { textboxId: "CustomerIntroducerCode"} }; buildTable(table) } function getCurrencyRate(e, t) { var n = $("#" + e); var r = true; var i = n.find("#PageSize").val(); var s = 0; var o = 0; var u; var a = []; var f = n.find("#moreFilter:visible").length > 0 ? true : false; if (f) { a = { skip: s, take: i, currentPage: o, datefrom: n.find("#datefrom").val(), dateto: n.find("#dateto").val(), buyratefrom: n.find("#buyfrom").val(), buyrateto: n.find("#buyto").val(), sellratefrom: n.find("#sellfrom").val(), sellrateto: n.find("#sellto").val(), currencyid: n.find("#search_select").val(), first: r, sort: sortid, advance: f} } else { n.find("#datefrom").val(""); n.find("#dateto").val(""); n.find("#buyfrom").val(""); n.find("#buyto").val(""); n.find("#sellfrom").val(""); n.find("#sellto").val(""); a = { skip: s, take: i, currentPage: o, datefrom: n.find("#rate_date").val(), dateto: n.find("#dateto").val(), buyratefrom: n.find("#text_buyrate").val(), buyrateto: n.find("#buyto").val(), sellratefrom: n.find("#text_sellrate").val(), sellrateto: n.find("#sellto").val(), currencyid: n.find("#currencyNameAdd").val(), first: r, sort: sortid, advance: f} } t["DTO"] = a; pageselectCallback(0, t, { container: "", fname: t.fname, pagingContainer: e, first: true, isOrder: false }) } function ClickCurrencyRate(e, t) { var n = $("#" + t); n.find("#text_buyrate").val(e.find("td[name=buyPrice]").attr("buy")); n.find("#text_sellrate").val(e.find("td[name=sellPrice]").attr("sell")); n.find("#rate_date").val(e.find("td[name=date]").attr("persianDate")); n.find("#currencyNameAdd").val(e.find("td[name='name']").attr("currencyId")); n.find("#currencyid").val(e.prop("id").replace("tr", "")); var r = n.find("#moreFilter:visible").length > 0 ? true : false; if (r) { sliderClick("moreFilter"); sliderClick("ul_add") } onRowClick(e) } function getCurrencyForSelect(id, container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/Currency.asmx/CurrensyList"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; var Currency = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var CurrencyItems = " <li> <a  href='javascript:void(0);' ><input type='radio' name='" + id + "' class='offright' value='0'/><span> -</span></a></li>"; for (var j = 0; j < Currency.length; j++) { var val = Currency[0, j]; CurrencyItems += " <li>" + " <a  href='javascript:void(0);' ><input type='radio' name='" + id + "' class='offright' value='" + val["CurrencyId"] + "'/><span>" + val["Currency"] + "</span></a>" + "</li>" } $con.find("#" + id).find("div.selectChildCont > ul").html(CurrencyItems); $con.find("#search_select").find("div.selectChildCont > ul").html(CurrencyItems); ChangeNameOfComboBox("search_select", id) }, error: function (e) { alert(e.responseText) } }) } function addCurrencyRate(e) { var t = $("#" + e); $.ajax({ type: "POST", url: getPath("Services/Currency.asmx/AddCurrencyRate"), contentType: "application/json; charset=utf-8", data: "{idcurrency: '" + t.find("#currencyNameAdd").val() + "', buy: '" + t.find("#text_buyrate").val() + "', sell: '" + t.find("#text_sellrate").val() + "', date: '" + t.find("#rate_date").val() + "'}", success: function (n) { if (!isAuthenticated(n)) return; t.find("#currencyNameAdd").val(0); t.find("#rate_date").val(""); t.find("#text_buyrate").val(""); t.find("#text_sellrate").val(""); getCurrencyRate(e, { container: e, callbackmethod: getCurrencyRate, fname: "", page_index: 0, build: buildCurrencyRateList, servicename: "Currency", methodname: "GetCurrencyRate", print: false }); translate(n.d) }, error: function (e) { alert(e.responseText) } }) } function editCurrencyRate(e) { var t = $("#" + e); var n = { id: t.find("#currencyid").val(), currencyid: t.find("#currencyNameAdd").val(), buy: t.find("#text_buyrate").val(), sell: t.find("#text_sellrate").val(), date: t.find("#rate_date").val() }; $.ajax({ type: "POST", url: getPath("Services/Currency.asmx/EditCurrencyRate"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (n) { if (!isAuthenticated(n)) return; translate(n.d); t.find("currencyNameAdd").val(0); t.find("#rate_date").val(""); t.find("#text_buyrate").val(""); t.find("#text_sellrate").val(""); getCurrencyRate(e, { container: e, callbackmethod: getCurrencyRate, fname: "", page_index: 0, build: buildCurrencyRateList, servicename: "Currency", methodname: "GetCurrencyRate", print: false }) }, error: function (e) { alert(e.responseText) } }) } function deleteCurrencyRate(e, t) { var n = $("#" + t); $.ajax({ type: "POST", url: getPath("Services/Currency.asmx/DeleteCurrencyRate"), contentType: "application/json; charset=utf-8", data: "{id: '" + e + "'}", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d); n.find("#currencyNameAdd").val(0); n.find("#rate_date").val(""); n.find("#text_buyrate").val(""); n.find("#text_sellrate").val(""); getCurrencyRate(t, { container: t, callbackmethod: getCurrencyRate, fname: "", page_index: 0, build: buildCurrencyRateList, servicename: "Currency", methodname: "GetCurrencyRate", print: false }) }, error: function (e) { alert(e.responseText) } }) } function loadEmployeeEdit(e, t, n) { getEmployee(e, t); if (n) { var r = $("#" + t); r.find("#butn_Editemployee").button({ icons: { primary: "ui-icon-disk" }, text: true }).unbind("click").click(function () { if (validateAll($("#" + t))) EditEmployee(t) }); r.find("#text_empregdateEdit").datepicker({ changeMonth: true, changeYear: true, onClose: function () { validateAll($("#" + t)) } }); r.find("#text_emphdate").datepicker({ changeMonth: true, changeYear: true, onClose: function () { validateAll($("#" + t)) } }); aComplete({ methodname: "GetCompletionListByEmployeeName", servicename: "AtuoComplete", id: "text_empmaneger", container: t, minlength: 2, autofocus: false, limit: 20, boxId: "text_empmaneger" }) } } function loadEmployeeAdd(e, t) { if (t) { var n = $("#" + e); n.find("#text_empbdate").datepicker({ changeMonth: true, changeYear: true }); n.find("#text_empregdate").datepicker({ changeMonth: true, changeYear: true, onClose: function () { validateAll($("#" + e)) } }); n.find("#addemployee").button({ icons: { primary: "ui-icon-disk" }, text: true }).unbind("click").click(function () { if (validateAll($("#" + e))) addEmployee(e) }); n.find("#text_empregdate").datepicker({ changeMonth: true, changeYear: true, onClose: function () { validateAll($("#" + e)) } }); aComplete({ methodname: "GetCompletionListByEmployeeName", servicename: "AtuoComplete", id: "text_empmaneger", container: e, minlength: 2, autofocus: false, limit: 20, boxId: "text_empmaneger" }); bindHierarchyData({ id: "divEmployeeAddress", container: e, table: "address", canmodify: true, css: "selectsmall1 required validate" }) } } function loadEmployeeRole(e, t, n) { if (n) { var r = $("#" + t); getrole(e, "", t) } } function loadEmployeeShop(e, t, n) { getEmployeeShopList(e, t); if (n) { var r = $("#" + t); bindItemsForSelectCombo({ methodname: "getShopNameByUser", servicename: "Shop", headertext: "انتخاب شعبه", id: "ParentEmployeeShop", container: t }); r.find("#addEmployeeShop").button({ icons: { primary: "ui-icon-disk" }, text: true }).off().on("click", function (n) { addEmployeeShop(e, t) }); $("#" + t).find("#refreshEmployeeShopList").button({ icons: { primary: "ui-icon-refresh" }, text: false }).unbind("click").click(function () { getEmployeeShopList(e, t); bindItemsForSelectCombo({ methodname: "getShopNameByUser", servicename: "Shop", headertext: "انتخاب شعبه", id: "ParentEmployeeShop", container: t }) }) } } function loadEmployeeCounter(e, t, n) { if (n) { var r = $("#" + t); bindItemsForSelectCombo({ methodname: "getCounterNameForUser", servicename: "Counter", headertext: "انتخاب صندوق", id: "ParentEmployeeCounter", container: t }); r.find("#addEmployeeCounter").button({ icons: { primary: "ui-icon-disk" }, text: true }).off().on("click", function (n) { addEmployeeCounter(e, t) }); $("#" + t).find("#refreshEmployeeCounterList").button({ icons: { primary: "ui-icon-refresh" }, text: false }).unbind("click").click(function () { getEmployeeCounterList(e, t); bindItemsForSelectCombo({ methodname: "getCounterNameForUser", servicename: "Counter", headertext: "انتخاب صندوق", id: "ParentEmployeeCounter", container: t }) }) } getEmployeeCounterList(e, t) } function loadEmployeeList(e, t) { if (t) { sortid = "PersonId desc"; var n = $("#" + e); n.find("#refreshEmployeeList").button({ icons: { primary: "ui-icon-refresh" }, text: false }).unbind("click").click(function () { getEmployeeList(e, { container: e, callbackmethod: getEmployeeList, fname: "", page_index: 0, build: buildEmployeeList, servicename: "EmployeeService", methodname: "EmployeeList", print: false }) }); getEmployeeList(e, { container: e, callbackmethod: getEmployeeList, fname: "", page_index: 0, build: buildEmployeeList, servicename: "EmployeeService", methodname: "EmployeeList", print: false }) } } function loadEmployeeAccessDetails(e, t, n) { if (n) { var r = $("#" + t); r.find("#btn_ChangeEmail").off().on("click", function (n) { ChangeUserName(t, e) }); r.find("#btn_changePassword").button({ icons: { primary: "ui-icon-disk" }, text: true }).off().on("click", function (n) { if (validateAll(r.find("#div_pass"))) ChangePassword(t, e) }); r.find("#btn_editEmail").button({ icons: { primary: "ui-icon-disk" }, text: true }).off().on("click", function (n) { if (validateAll(r.find("#div_email"))) ChangeEmail(t, e) }); ChangeCheckBoxName("cb_userStatus", t); r.find("#cb_userStatus" + t).button(); getEmployeeEmail(t, e); r.find("#cb_userStatus" + t).unbind("change").change(function () { SetUserStatus(e, this.checked); if (this.checked) $(this).button("option", "label", "غیرفعال"); else $(this).button("option", "label", "فعال") }) } } function SetUserStatus(e, t) { $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/SetUserStatus"), contentType: "application/json; charset=utf-8", data: "{id: '" + e + "', status: '" + t + "'}", error: function (e) { translate("error") }, success: function (e) { if (!isAuthenticated(e)) return; return e.d.msg } }) } function getEmployeeEmail(e, t) { var n = $("#" + e); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/GetEmployeeEmail"), contentType: "application/json; charset=utf-8", data: "{id: '" + t + "'}", error: function (e) { translate("error") }, success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isdone) { n.find("#text_empemailEdit").val(t.d.msg); if (t.d.status) { n.find("#cb_userStatus" + e).attr("checked", true); n.find("#cb_userStatus" + e).button("option", "label", "غیرفعال") } else { n.find("#cb_userStatus" + e).attr("checked", false); n.find("#cb_userStatus" + e).button("option", "label", "فعال") } } else translate(t.d.msg) } }) } function ChangeEmail(e, t) { var n = $("#" + e); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/ChangeEmail"), contentType: "application/json; charset=utf-8", data: "{email: '" + n.find("#text_empemailEdit").val() + "', id: '" + t + "'}", error: function (e) { translate("error") }, success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isdone) alert("ایمیل با موفقیت ثبت شد."); else translate(e.d.msg) } }) } function ChangePassword(e, t) { var n = $("#" + e); $.ajax({ type: "POST", url: getPath("Services/Login.asmx/ChangePassword"), contentType: "application/json; charset=utf-8", data: "{oldPassword: '" + n.find("#txt_s_OldPassword").val() + "', newPassword: '" + n.find("#txt_s_NewPassword").val() + "', passwordConfirm: '" + n.find("#txt_s_PasswordConfirm").val() + "', id: '" + t + "'}", error: function (e) { translate("error") }, success: function (e) { if (!isAuthenticated(e)) return; if (e.d == "different") alert("تکرار کلمه عبور با کلمه عبور برابر نیست."); else if (e.d == "done") alert("کلمه عبور ا موفقیت ثبت شد."); else if (e.d == "incorrect") alert("کلمه عبور صحیح نیست.") } }) } function ChangeUserName(e, t) { var n = $("#" + e); $.ajax({ type: "POST", url: getPath("Services/Login.asmx/ChangeUserName"), contentType: "application/json; charset=utf-8", data: "{password: '" + n.find("#txt_s_CurrentPassword").val() + "', newUser: '" + n.find("#txt_s_NewUserName").val() + "', userConfirm: '" + n.find("#txt_s_UserNameConfirm").val() + "', id: '" + t + "'}", error: function (e) { translate("error") }, success: function (e) { if (!isAuthenticated(e)) return; if (e.d == "exist") alert("نام کاربری مجاز نیست."); else if (e.d == "different") alert("ایمیل با تکرار ایمیل برابر نیست."); else document.getElementById("userEmail").innerHTML = "<strong>نام کاربری فعلی شما </strong>" + e.d + "<strong> می باشد.</strong>" } }) } function addEmployeeCounter(e, t) { var n = $("#" + t); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/AddEmployeeCounter"), contentType: "application/json; charset=utf-8", data: "{counterid: '" + n.find("#ParentEmployeeCounter").val() + "', personid: '" + e + "'}", success: function (n) { if (!isAuthenticated(n)) return; translate(n.d.msg); getEmployeeCounterList(e, t) }, error: function (e) { alert(e.responseText) } }) } function getEmployeeCounterList(id, container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/getEmployeeCounterList"), contentType: "application/json; charset=utf-8", data: "{ personid: '" + id + "'}", success: function (response) { if (!isAuthenticated(response)) return; var shop = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var shopItem = ""; for (var j = 0; j < shop.length; j++) { var val = shop[0, j]; shopItem += "<tr id='tr" + val.CounterId + "'>" + "<td width='80%'>" + val.Code + "</td>" + "<td id='delete' width='80%'><button id='a_Button'>حذف</button></td></tr>" } $con.find("#EmployeeCounterList").html(shopItem).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("[id=a_Button]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveEmplyeeCounter($(this).parents("tr").prop("id").replace("tr", ""), id, container); else return }) }, error: function (e) { alert(e.responseText) } }) } function RemoveEmplyeeCounter(e, t, n) { var r = $("#" + n); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/DeleteEmployeeCounter"), contentType: "application/json; charset=utf-8", data: "{counterid: '" + e + "', personid: '" + t + "'}", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isDone) getEmployeeCounterList(t, n); translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function addEmployeeShop(e, t) { var n = $("#" + t); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/AddEmployeeShop"), contentType: "application/json; charset=utf-8", data: "{shopid: '" + n.find("#ParentEmployeeShop").val() + "', personid: '" + e + "'}", success: function (n) { if (!isAuthenticated(n)) return; translate(n.d.msg); getEmployeeShopList(e, t) }, error: function (e) { alert(e.responseText) } }) } function getEmployeeShopList(id, container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/getEmployeeShopList"), contentType: "application/json; charset=utf-8", data: "{ personid: '" + id + "'}", success: function (response) { if (!isAuthenticated(response)) return; var shop = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var shopItem = ""; for (var j = 0; j < shop.length; j++) { var val = shop[0, j]; shopItem += "<tr id='tr" + val.ShopId + "' ><td width='80%'>" + val.Name + val.Code + "</td>" + "<td id='delete' width='20%'><button id='a_Button'>حذف</button></td></tr>" } $con.find("#EmployeeShopList").html(shopItem).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("[id=a_Button]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveEmplyeeShop($(this).parents("tr").prop("id").replace("tr", ""), id, container); else return }) }, error: function (e) { alert(e.responseText) } }) } function RemoveEmplyeeShop(e, t, n) { var r = $("#" + n); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/DeleteEmployeeShop"), contentType: "application/json; charset=utf-8", data: "{shopid: '" + e + "', personid: '" + t + "'}", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d); getEmployeeShopList(t, n) }, error: function (e) { alert(e.responseText) } }) } function getroleChild(id, pid, appId, container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/getRoleList"), contentType: "application/json; charset=utf-8", data: "{id: '" + id + "',parentid: '" + pid + "',appId: '" + appId + "'}", success: function (response) { if (!isAuthenticated(response)) return; var role = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var roleItem = ""; roleItem = "<div><table class='table line'>" + "<tbody id='roleList'>"; for (var j = 0; j < role.length; j++) { var val = role[0, j]; roleItem += "<tr appId='" + appId + "' id='" + id + "'> <td id='" + container + "' ><input name='cbRole' type='checkbox'  " + (val.isinrole == true ? "checked='checked'" : "") + "   /> </td> <td id='" + val.rolename + "' name='rolename'><span>" + val.rolename + "</span></td> </tr>" } roleItem += "</tbody></table></div>"; $con.find("#div_" + pid).html(roleItem); $con.find("[name='cbRole']").unbind("click").bind("click", function () { ocCheckenterFolder(this, appId) }); $con.find("#divRolesAccordion").accordion({ collapsible: true, heightStyle: "content" }) }, error: function (e) { } }) } function getrole(id, appId, container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/getRoleParent"), contentType: "application/json; charset=utf-8", data: "{id: '" + id + "',appId: '" + appId + "'}", success: function (response) { if (!isAuthenticated(response)) return; var role = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var roleItem = ""; for (var j = 0; j < role.length; j++) { var val = role[0, j]; roleItem += " <h3><a href='#' style='font-size: 16px!important'>" + val.rolename + "</a></h3><div id='div_" + val.roleid + "'></div>" } $con.find("#divRolesAccordion").html(roleItem); $con.find("#divRolesAccordion").accordion({ heightStyle: "content", collapsible: true, active: false, activate: function (e, t) { if (t.newPanel.length > 0 && t.newPanel.html().length < 1) getroleChild(id, t.newPanel.prop("id").replace("div_", ""), appId, container) } }); $con.find("#roleList").html(roleItem).parent().tableScroll({ height: 380, width: contentwidth, flush: false }) }, error: function (e) { } }) } function ocCheckenterFolder(e, t) { var n = $(e).parent().parent().prop("id"); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/AddroleforUser"), contentType: "application/json; charset=utf-8", data: "{id: '" + n + "', role: '" + $(e).parent().parent().find("td[name=rolename]").prop("id") + "', ischecked: '" + $(e).is(":checked") + "', appId: '" + t + "' }", success: function (t) { if (!isAuthenticated(t)) return; getroleChild(n, t.d, $(e).parent().attr("appId"), $(e).parent().prop("id")); if (t.d.isdone) alert("نقش ها با موفقیت ثبت شد."); else { $(e).attr("checked", !$(e).checked); translate(t.d.msg) } }, error: function (e) { alert(e.responseText) } }) } function oncheckforcheng(e) { $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/usercancheng"), contentType: "application/json; charset=utf-8", data: "{username: '" + $(e).parent().parent().prop("id") + "', role: '" + $(e).parent().parent().find("td[name=rolename]").html() + "', ischeckedadd: '" + $(e).parent().parent().find('input:checkbox[name="insert"]').is(":checked") + "', ischeckeddel: '" + $(e).parent().parent().find('input:checkbox[name="delete"]').is(":checked") + "'}", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d) }, error: function (e) { alert(e.responseText) } }) } function addEmployee(e) { var t = $("#" + e); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/AddEmployee"), contentType: "application/json; charset=utf-8", data: "{username: '" + t.find("#text_username").val() + "', pass: '" + t.find("#text_password").val() + "', email: '" + t.find("#text_empemail").val() + "', name: '" + t.find("#text_empName").val() + "', famil: '" + t.find("#text_empfamily").val() + "', male: '" + t.find("#ddl_m_Gender").val() + "', bdate: '" + t.find("#text_empbdate").val() + "', rdate: '" + t.find("#text_empregdate").val() + "', tell: '" + t.find("#text_emptell").val() + "', mobile: '" + t.find("#text_empmobile").val() + "', meli: '" + t.find("#text_empmelicode").val() + "', acc: '" + t.find("#text_empaccount").val() + "', maneg: '" + t.find("#text_empmaneger").val() + "', addressId: '" + getHierarchySelectedValue("divEmployeeAddress", e) + "'}", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isdone && e.d.isAdmin) location.reload(true); else if (e.d.isdone && !e.d.isAdmin) translate(e.d.msg); else if (!e.d.isdone) translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function buildEmployeeList(jq, container) { var $con = $("#" + container.pagingContainer); var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "name", width: "15%" }); lsth.push({ title: "code", width: "10%" }); lsth.push({ title: "dateOfEmployment", width: "20%" }); lsth.push({ title: "phone", width: "15%" }); lsth.push({ title: "manager", footer: jq.d.sumDebtor, width: "16%" }); lsth.push({ title: "image", width: "20%" }); if (!container.params.print) { lsth.push({ title: "deleteKey", width: "4%" }) } var List = typeof jq.d.results == "string" ? eval("(" + jq.d.results + ")") : jq.d.results; var ItemList = ""; if (List != null) for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; if (!container.params.print) trBody[0] = { trId: val.id }; trBody[1] = { name: "name", html: val.name, width: "15%" }; trBody[2] = { name: "code", html: val.code, width: "10%" }; trBody[3] = { props: { date: val.regdate, name: "date", width: "20%", klass: "dateLong" }, html: val.regdate }; trBody[4] = { name: "tell", html: val.tell, width: "15%" }; trBody[5] = { name: "manager", html: val.manager, width: "16%" }; trBody[6] = { name: "image", html: "<img class='imagefortable' src='ImageHandler/EmployeeLargePhoto.ashx?EmployeeCode=" + val.code + "' />", width: "20%" }; lstb.push(trBody) } table = { header: lsth, body: lstb, details: { deleteFunction: DeleteEmployee, rowClick: ClickEmployee }, heigth: 300, container: container.pagingContainer, divName: "employeeList" }; buildTable(table) } function getEmployeeList(e, t) { var n = $("#" + e); pageselectCallback(0, t, { container: "", noPaging: true, fname: t.fname, pagingContainer: e, first: true, isOrder: false }) } function ClickEmployee(e, t) { createSubTab({ row: e, name: "a_EmployeeList" }); itemId = e.prop("id").replace("tr", ""); employeeid = itemId; onRowClick(e) } function DeleteEmployee(e, t) { $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/Deleteemployee"), contentType: "application/json; charset=utf-8", data: "{id: '" + e + "' }", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isDone) getEmployeeList(t, { container: t, callbackmethod: getEmployeeList, fname: "", page_index: 0, build: buildEmployeeList, servicename: "EmployeeService", methodname: "EmployeeList", print: false }); translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function getEmployee(employeeid, container) { $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/getEmployee"), contentType: "application/json; charset=utf-8", data: "{id: '" + employeeid + "' }", success: function (response) { if (!isAuthenticated(response)) return; var Employee = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var empval = Employee[0]; var con = $("#" + container); bindHierarchyData({ id: "divEmployeeAddress", table: "address", container: container, parentid: empval.AddressId, css: "selectsmall required validate" }); con.find("#hid_empid").val(empval.PersonId); con.find("#text_empemail").val(empval.Email); con.find("#text_empName").val(empval.Name); con.find("#text_empfamily").val(empval.Family); con.find("#text_empbdate").val(empval.DateOfBirth); con.find("#text_empregdateEdit").val(empval.RegDate); con.find("#text_emphdate").val(empval.HierDate); con.find("#text_empmelicode").val(empval.IdCart); con.find("#text_empaccount").val(empval.AccountNumber); con.find("#text_empmaneger").val(empval.managere); con.find("#ddl_m_Gender").val("" + empval.Gender + "") }, error: function (e) { alert(e.responseText) } }) } function EditEmployee(e) { var t = $("#" + e); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/EditEmployee"), contentType: "application/json; charset=utf-8", data: "{id: '" + t.find("#hid_empid").val() + "', name: '" + t.find("#text_empName").val() + "', famil: '" + t.find("#text_empfamily").val() + "', gender: '" + t.find("#ddl_m_Gender").val() + "', bdate: '" + t.find("#text_empbdate").val() + "', regdate: '" + t.find("#text_empregdateEdit").val() + "', hdate: '" + t.find("#text_emphdate").val() + "', meli: '" + t.find("#text_empmelicode").val() + "', acc: '" + t.find("#text_empaccount").val() + "', manage: '" + t.find("#text_empmaneger").val() + "', addressId: '" + getHierarchySelectedValue("divEmployeeAddress", e) + "'}", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function loadShopList(e, t) { if (t) { $("#" + e).find("#refreshShopList").button({ icons: { primary: "ui-icon-refresh" }, text: false }).unbind("click").click(function () { getShopList(e, { container: e, callbackmethod: getEmployeeList, fname: "", page_index: 0, build: buildShopList, servicename: "Shop", methodname: "GetListShop", print: false }) }); getShopList(e, { container: e, callbackmethod: getEmployeeList, fname: "", page_index: 0, build: buildShopList, servicename: "Shop", methodname: "GetListShop", print: false }) } } function loadShopEdit(e, t, n) { if (n) { var r = $("#" + t); r.find("#text_shopDateStart").attr("id", "text_shopDateStart" + t); r.find("#text_shopDateStart" + t).datepicker({ changeMonth: true, changeYear: true, onClose: function () { validateAll($("#" + t)) } }); bindItemsForSelectCombo({ servicename: "Shop", methodname: "getShopName", headertext: "شعبه اصلی", id: "ParentShopName", container: t }); ajDropDown.done(function () { getShop(e, t) }); r.find("#addShop").button({ icons: { primary: "ui-icon-disk" }, text: true }).unbind("click").click(function () { if (validateAll($("#" + t))) EditShop(e, t) }) } } function loadShopAdd(e, t) { if (t) { var n = $("#" + e); n.find("#text_shopDateStart").datepicker({ changeMonth: true, changeYear: true, onClose: function () { validateAll($("#" + e)) } }); bindHierarchyData({ id: "divShopAddress", container: e, table: "address", canmodify: true, css: "selectsmall1 required validate" }); bindItemsForSelectCombo({ methodname: "getShopName", servicename: "Shop", headertext: "انتخاب شعبه", id: "ParentShopName", container: e }); n.find("#addShop").button({ icons: { primary: "ui-icon-disk" }, text: true }).unbind("click").click(function () { if (validateAll($("#" + e))) addShop(e) }) } } function addShop(e) { var t = $("#" + e); var n = { code: t.find("#text_shopCode").val(), fax: t.find("#text_shopFax").val(), address: getHierarchySelectedValue("divShopAddress", e), startdate: t.find("#text_shopDateStart").val(), email: t.find("#text_shopEmail").val(), name: t.find("#text_shopName").val(), parent: t.find("#ParentShopName").val() }; $.ajax({ type: "POST", url: getPath("Services/Shop.asmx/AddShop"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isdone) $("#ddl_s_Branch").append("<option value='" + e.d.shopId + "'>" + e.d.shopName + "</option>"); translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function EditShop(e, t) { var n = $("#" + t); $.ajax({ type: "POST", url: getPath("Services/Shop.asmx/EditShop"), contentType: "application/json; charset=utf-8", data: "{id:'" + e + "',code: '" + n.find("#text_shopCode").val() + "', fax: '" + n.find("#text_shopFax").val() + "', address: '" + getHierarchySelectedValue("divShopAddress", t) + "', startdate: '" + n.find("#text_shopDateStart" + t).val() + "', email: '" + n.find("#text_shopEmail").val() + "', name: '" + n.find("#text_shopName").val() + "', parent: '" + n.find("#ParentShopName").val() + "'}", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function deleteShop() { $.ajax({ type: "POST", url: getPath("Services/Shop.asmx/DeleteShop"), contentType: "application/json; charset=utf-8", data: "{id: '" + 0 + "'}", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function buildShopList(jq, container) { var $con = $("#" + container.pagingContainer); var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "code", width: "10%" }); lsth.push({ title: "fax", width: "15%" }); lsth.push({ title: "address", width: "15%" }); lsth.push({ title: "dateStart", width: "15%" }); lsth.push({ title: "email", footer: jq.d.sumDebtor, width: "16%" }); lsth.push({ title: "name", width: "15%" }); lsth.push({ title: "mainBranch", width: "15%" }); if (!container.params.print) { lsth.push({ title: "deleteKey", width: "4%" }) } var List = typeof jq.d.results == "string" ? eval("(" + jq.d.results + ")") : jq.d.results; var ItemList = ""; if (List != null) for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; if (!container.params.print) trBody[0] = { trId: val.ShopId }; trBody[1] = { name: "code", html: val.Code, width: "10%" }; trBody[2] = { name: "fax", html: val.Fax, width: "15%" }; trBody[3] = { name: "address", html: val.Address, width: "15%" }; trBody[4] = { props: { date: val.StartingDate, name: "date", width: "16%", klass: "dateLong" }, html: val.StartingDate }; trBody[5] = { name: "email", html: val.Email, width: "15%" }; trBody[6] = { name: "name", html: val.Name, width: "15%" }; trBody[7] = { name: "name", html: val.parent, width: "15%" }; lstb.push(trBody) } table = { header: lsth, body: lstb, details: { deleteFunction: RemoveShopElement, rowClick: ClickShop }, heigth: 300, container: container.pagingContainer, divName: "shopList" }; buildTable(table) } function getShopList(e, t) { var n = $("#" + e); pageselectCallback(0, t, { container: "", noPaging: true, fname: t.fname, pagingContainer: e, first: true, isOrder: false }) } function ClickShop(e, t) { createSubTab({ row: e, name: "a_ShopList" }); itemId = e.prop("id").replace("tr", ""); onRowClick(e) } function getShop(idShop, container) { $.ajax({ type: "POST", url: getPath("Services/Shop.asmx/getShop"), contentType: "application/json; charset=utf-8", data: "{id: '" + idShop + "' }", success: function (response) { if (!isAuthenticated(response)) return; var Item = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItmVal = Item[0]; var $con = $("#" + container); $con.find("#text_shopCode").val(ItmVal.Code); $con.find("#text_shopFax").val(ItmVal.Fax); bindHierarchyData({ id: "divShopAddress", table: "address", container: container, parentid: ItmVal.AddressId, css: "selectsmall required validate" }); $con.find("#text_shopDateStart" + container).val(ItmVal.startdate); $con.find("#text_shopEmail").val(ItmVal.Email); $con.find("#text_shopName").val(ItmVal.Name); $con.find("#ParentShopName").val(ItmVal.ParentShopId) }, error: function (e) { alert(e.responseText) } }) } function RemoveShopElement(e, t) { t; $.ajax({ type: "POST", url: getPath("Services/Shop.asmx/DeleteShop"), contentType: "application/json; charset=utf-8", data: "{id: '" + e + "' }", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isDone) getShopList(t, { container: t, callbackmethod: getEmployeeList, fname: "", page_index: 0, build: buildShopList, servicename: "Shop", methodname: "GetListShop", print: false }); translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function GetMenuItems() { menuItems = $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", type: "Post", url: getPath("Services/Menu.asmx/getMenu"), success: function (e) { if (!isAuthenticated(e)) return; BuildMainTabs(e); masterLocalize() }, error: function (e) { alert(e.responseText) } }) } function BuildMainTabs(response) { var Products = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var basketItems = "<ul class='top-nav' >"; for (var j = 0; j < Products.length; j++) { var val = Products[0, j]; basketItems += "<li ><a mllk='" + val.title + "' mainTab='" + val.id + "'  name='#div" + val.id + "-" + val.id + "'  href='div_" + val.id + "' >" + val.title + "</a></li>" } basketItems += "</ul>"; $("#mainTab").html(basketItems).tabs({ beforeLoad: function (e, t) { if (t.tab.data("loaded")) { e.preventDefault(); return } t.jqXHR.success(function () { t.tab.data("loaded", true) }) }, beforeActivate: function (e, t) { t.oldTab.parents("ul").find("li").removeClass("oldTab").removeClass("red").addClass("sunny"); var n = t.oldTab.addClass("oldTab").removeClass("sunny").addClass("red"); var r = t.newPanel.find(".subTab"); if (r.find(".ui-state-active a").length > 0) { var i = window["load" + r.find(".ui-state-active a").prop("id").split("_")[1]]; if (typeof i === "function") i(r.find(".ui-state-active").attr("aria-controls"), false) } else if (r.find("#toolbar").length > 0) { var i = window["load" + r.prop("id").split("_")[1]]; if (typeof i === "function") i("tab" + r.prop("id").split("_")[1], false) } }, create: function (event, ui) { var d = $(this).find("div"); for (var j = 0; j < Products.length; j++) { var subTab = ""; var val = Products[0, j]; if (val.subMenu == "toolbar") { var id = val.id.replace("a_", ""); subTab += "<div class='heading subTab sunny' id='div_" + id + "'><span id='toolbar' >"; var subMenu = typeof val.sub == "string" ? eval("(" + val.sub + ")") : val.sub; if (subMenu.length > 0) { for (var s = 0; s < subMenu.length; s++) { var subVal = subMenu[0, s]; subTab += "<button mllk='" + subVal.title + "' fName='" + subVal.id + "' size='" + subVal.size + "' href=" + subVal.url + " id='" + subVal.id + "'>" + subVal.title + "</button>" } subTab += "</span></div><div id='tab" + id + "'></div><div dir='rtl' id='dialogAdd" + id + "'></div>" } else { subTab += "</span></div><div id='tab" + id + "'></div><div dir='rtl' id='dialogAdd" + id + "'></div>" } var $d = $(d[j]).html(subTab); var first = true; $("#tab" + id).load(val.url, function () { window["load" + $(this).attr("id").replace("tab", "")]($(this).prop("id"), true) }); $dialog = $("#dialogAdd" + id); $d.find("button").button({ text: true, icons: { primary: "ui-icon-plus"} }).click(function () { $button = $(this); $dialog.load($button.attr("href").replace("_#", " #"), function () { window["load" + $button.attr("fName").replace("a_", "")]("dialogAdd" + id, true); $(this).dialog({ width: $button.attr("size"), modal: true, position: { my: "top", at: "top", of: $(".top-nav")} }).dialog(open) }); $("#play").button("option", { label: "play", icons: { primary: "ui-icon-play"} }) }) } else { subTab += "<div class='subTab' id='div_" + val.id + "'><ul subTab class='heading'>"; var subMenu = typeof val.sub == "string" ? eval("(" + val.sub + ")") : val.sub; var subTabQuan = 0; if (subMenu.length > 0) { for (var s = 0; s < subMenu.length; s++) { var subVal = subMenu[0, s]; subTab += "<li  ><a mllk='" + subVal.title + "'  id='" + subVal.id + "' name='" + subVal.url + "' href='" + subVal.url + "'>" + subVal.title + "</a></li>"; subTabQuan++ } if (response.d[j].active == "true") subTabQuan = 0; subTab += "</ul></div>" } else { subTab += "</ul></div>" } var $d = $(d[j]).html(subTab); var first = true; $d.tabs({ collapsible: subTabQuan > 1 ? true : false, active: subTabQuan > 1 ? false : 0, beforeLoad: function (e, t) { if (t.tab.data("loaded")) { e.preventDefault(); if (e.srcElement != undefined || e.target != undefined) { var n = window["load" + t.tab.children("a").prop("id").split("_")[1]]; if (typeof n === "function") n(t.panel.prop("id"), false) } return } t.jqXHR.success(function () { t.tab.data("loaded", true) }) }, load: function (e, t) { var n = window["load" + t.tab.find("a").attr("id").split("_")[1]]; if (typeof n === "function") { n(t.panel.attr("id"), true) } } }) } } } }) } function GetSubMenuItems() { var $con = $("#divSubTabMenu"); $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", type: "Post", url: getPath("Services/Menu.asmx/getAllSubMenu"), success: function (response) { if (!isAuthenticated(response)) return; var basketItems = ""; for (var d = 0; d < response.d.length; d++) { var Products = typeof response.d[d].sub == "string" ? eval("(" + response.d[d].sub + ")") : response.d[d].sub; basketItems += "<ul active='" + response.d[d].active + "' id='" + response.d[d].root + "' subMenu='" + response.d[d].subMenu + "' class='formControls'>"; for (var j = 0; j < Products.length; j++) { var val = Products[0, j]; basketItems += "<li  class='formControl'><a  name='" + val.url + "' href='#' id='" + val.id + "'><span>" + val.title + "</span></a></li>" } basketItems += "</ul>" } $con.html(basketItems) }, error: function (e) { alert(e.responseText) } }) } function createSubTab(e) { var t = ""; var n = e.id != undefined ? e.id : e.row.prop("id").replace("tr", ""); var r = e.tabName == undefined ? e.row.find("td[name='name']").html() : e.tabName; var i = $("#mainTab"); var s; var o = $("#divSubTabMenu").find("#" + e.name); var u = o.attr("active"); var a = o.find("li").length; var f = o.find("li").first().find("a").prop("id"); var l = "div" + n + "-" + o.find("li").first().find("a").prop("id"); var c; i.tabs({ collapsible: a > 1 ? true : false, active: a > 1 ? false : true }); if (i.find("a[name='" + n + "']").length == 0) { $("#mainTab >ul").append("<li  class='sunny' ><a mainTab='" + e.name + "' href='k'>" + r + "</a> <span class='ui-icon ui-icon-close'>Remove Tab</span></li>"); $("#mainTab >ul").append("<div ></div>"); i.tabs("refresh"); var h = $("#mainTab >ul >li").size() - 1; i.tabs({ active: h }); $("#mainTab .top-nav span.ui-icon-close").off().on("click", function () { var e = $(this).parent().remove(); var t = e.attr("aria-controls"); $("#" + t).remove(); i.tabs("refresh") }); c = $("#mainTab >ul >li ").eq(h).attr("aria-controls"); if (o.attr("subMenu") == "toolbar") { var p = c; var d = ""; d += "<div  class='heading subTab sunny' id='div_" + c + "'><span id='toolbar' >"; $.each(o.find("li"), function (e, t) { d += "<button mllk='" + $(this).find("a span").html() + "' size='" + $(this).find("a").attr("size") + "' id='" + $(this).find("a").prop("id") + "' fName='" + $(this).find("a").prop("id") + "' name='#div" + n + "-" + $(this).find("a").prop("id") + "'  href='" + $(this).find("a").prop("name") + "' >" + $(this).find("a span").html() + "</button>" }); d += "</span></div><div id='tab" + p + "'></div><div dir='rtl' id='dialogAdd" + p + "'></div>"; s = $("#" + c); var v = s.html(d); var m = true; $dialog = $("#dialogAdd" + p); v.find("button").button({ text: true, icons: { primary: "ui-icon-plus"} }).click(function () { $button = $(this); $dialog.load($button.attr("href").replace("_#", " #"), function () { window["load" + $button.attr("fName").replace("a_", "")](null, "dialogAdd" + p, true); $(this).dialog({ width: $button.attr("size"), modal: true, position: { my: "top", at: "top", of: $(".top-nav")} }).dialog(open) }); $("#play").button("option", { label: "play", icons: { primary: "ui-icon-play"} }) }) } else { var g = "<ul subTab class='heading'>"; var y = ""; var a = 0; $.each(o.find("li"), function (e, t) { g += "<li ><a  id='" + $(this).find("a").prop("id") + "' mllk='" + $(this).find("a span").html() + "' name='#div" + n + "-" + $(this).find("a").prop("id") + "'  href='" + $(this).find("a").prop("name") + "#content' >" + $(this).find("a span").html() + "</a></li>"; a++ }); g += "</ul>" + y; s = $("#" + c); s.html(g).tabs({ collapsible: u == "true" ? false : true, active: u == "true" ? 0 : false, beforeLoad: function (e, t) { $("[id*=dialog]").dialog().dialog("destroy"); if (t.tab.data("loaded")) { e.preventDefault(); return } t.jqXHR.success(function () { t.tab.data("loaded", true) }) }, load: function (e, t) { var r = window["load" + t.tab.find("a").attr("name").split("_")[1].replace("a_", "")]; if (typeof r === "function") { r(n, t.panel.attr("id"), true) } }, beforeActivate: function (e, t) { var r = window["load" + t.newTab.find("a").attr("name").split("_")[1].replace("a_", "")]; if (typeof r === "function" && $(t.newPanel).html().length > 0) { r(n, t.newPanel.attr("id"), false) } } }) } } else { i.tabs("beforeActivate", "#" + i.find("a[name='" + n + "']").prop("href").split("#")[1]) } return c } function loadInventoryPhoto(e, t, n) { var r = $("#" + t); if (n) { var i = $("#tr" + e).find("td[name='barcode']").html(); bindItemsForSelectCombo({ methodname: "GetColorListByBarcodeIdAll", servicename: "InventorySetting", id: "ddl_m_Color", container: t, headertext: "انتخاب رنگ", setcolor: true, showAlert: false }, "{ arg:'" + e + "'}"); r.find("#fileInput").button(); r.find("#btn_Submit").button().unbind("click").click(function () { if (validateAll($("#" + t))) ajaxFileUpload({ container: t, barcode: i, isMenu: false }) }); getPhotos(i, t) } } function getPhotos(barcode, container) { var $con = $("#" + container); var ItemList = ""; $.ajax({ type: "POST", url: getPath("Services/InventorySetting.asmx/getPhotos"), contentType: "application/json; charset=utf-8", data: "{ barcode:'" + barcode + "'}", success: function (response) { if (!isAuthenticated(response)) return; if (!response.d.hasPhoto) return response.d.msg; var List = typeof response.d.lphotos == "string" ? eval("(" + response.d.lphotos + ")") : response.d.lphotos; var appName = response.d.appName; if (appName == "/") appName = ""; var ItemList = "<ul id='sortable'>"; if (List != null) for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<li style='cursor:move;' id='li" + i + "' class='ui-state-default'><div class='modalClose modalRemove'><a href='javascript:RemovePhoto(\"" + container + '","li' + i + '","' + barcode + "\");'/></div><img  title='" + val + "' alt='" + val + "' src='Data/" + appName + "Photos/" + val + "' /></li>" } ItemList += "</ul>"; $con.find("#div_d_PhotoList").html(ItemList); $("#sortable").sortable().sortable({ stop: function (e, t) { sortPhotos(barcode, container) } }) }, error: function (e) { alert(e.responseText) } }) } function sortPhotos(barcode, container) { var $con = $("#" + container); var photoList = []; $.each($("#sortable li").find("img"), function () { photoList.push(this.alt) }); var DTO = { photos: photoList, barcode: barcode }; var ItemList = ""; $.ajax({ type: "POST", url: getPath("Services/InventorySetting.asmx/sortPhotos"), contentType: "application/json; charset=utf-8", data: JSON.stringify(DTO), success: function (response) { if (!isAuthenticated(response)) return; var lis = $con.find("#sortable li"); var List = typeof response.d.lphotos == "string" ? eval("(" + response.d.lphotos + ")") : response.d.lphotos; for (var i = 0; i < List.length; i++) { var val = List[0, i]; $(lis[i]).find("img").attr("alt", val).attr("title", val) } }, error: function (e) { alert(e.responseText) } }) } function RemovePhoto(e, t, n) { var r = $("#" + e); var i = r.find("#" + t).children("img").prop("alt"); var s = { fileName: i, barcode: n }; var o = ""; $.ajax({ type: "POST", url: getPath("Services/InventorySetting.asmx/deletePhoto"), contentType: "application/json; charset=utf-8", data: JSON.stringify(s), success: function (i) { if (!isAuthenticated(i)) return; r.find("#sortable li[id='" + t + "']").remove(); sortPhotos(n, e) }, error: function (e) { alert(e.responseText) } }) } function buildColorSizeTable(e, t, n, r, i, s) { if (s != undefined) $con = $("#" + s).find("#" + i); else $con = $("#" + i); getItem(e, t, n, r, i, s) } function getItem(barcode, ShopId, withQuantity, methodname, id, Container) { if (Container != undefined) $con = $("#" + Container).find("#" + id); else $con = $("#" + id); $.ajax({ type: "POST", url: getPath("Services/InventorySetting.asmx/" + methodname), async: false, data: "{barcode: '" + barcode + "', shopId: '" + ShopId + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (response) { if (!isAuthenticated(response)) return; var Order = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; bindSizeColor(Order.Size, Order.Color, Order.Quantity, withQuantity, $con); if (withQuantity) BindQuantitys(Order.Quantity, $con); else { $con.find("input[name='quantity']").off("change").on("change", function () { SumWholesale(Container.split("_")[1]) }) } } }) } function BindQuantitys(e, t) { for (var n = 0; n < e.length; n++) { var r = e[0, n]; var i = r.Quantity; var s = (r.ColorId == null ? "" : r.ColorId) + "-" + (r.SizeId == null ? "" : r.SizeId); t.find("#" + s).val((i * 1).toFixed(0)) } } function bindSizeColor(e, t, n, r, i) { var s = "<table id='tbSizeColor_" + i.prop("id") + "' name='SieColor' class='QuantityTable' title='orderDetail' ></table>"; i.html(s); var o = document.getElementById("tbSizeColor_" + i.prop("id")); var u = document.createElement("tbody"); var a = document.createElement("tr"); var f = document.createElement("tr"); var l = document.createElement("td"); var c = document.createElement("td"); var h = document.createElement("td"); var p = document.createElement("td"); o.appendChild(u); u.appendChild(a); u.appendChild(f); a.appendChild(h); a.appendChild(p); f.appendChild(c); f.appendChild(l); var d = document.createElement("input"); d.setAttribute("name", "quantity"); d.setAttribute("id", "" + "-" + ""); d.setAttribute("title", "بدون جزئیات و رنگ"); l.appendChild(d); c.appendChild(document.createTextNode("   ")); h.appendChild(document.createTextNode("   ")); p.appendChild(document.createTextNode("   ")); var v = e.length; if (v > 0) { for (var m = 0; m < v; m++) { var g = e[0, m]; var y = g.Size; var b = g.SizeId == undefined ? "" : g.SizeId; var w = document.createElement("td"); var E = document.createElement("input"); E.setAttribute("name", "quantity"); E.setAttribute("title", "بدون رنگ" + "_" + y); E.setAttribute("id", "" + "-" + b); w.appendChild(E); a.appendChild(w); var S = document.createElement("td"); S.setAttribute("id", "cell"); var x = document.createElement("input"); x.setAttribute("value", y); x.setAttribute("name", b); x.setAttribute("title", y); x.setAttribute("id", "txtSize" + m * 1); S.appendChild(x); f.appendChild(S) } } if (t.length > 0) { var T = t.length; for (var m = 0; m < T; m++) { var g = t[0, m]; var y = g.Color; var b = g.ColorId == undefined ? "" : g.ColorId; var N = document.createElement("tr"); N.setAttribute("id", "row" + m * 1); u.appendChild(N); var C = document.createElement("td"); C.setAttribute("id", "cell" + m); var E = document.createElement("input"); E.setAttribute("name", "quantity"); E.setAttribute("title", y + "_" + "بدون جزئیات"); E.setAttribute("id", b + "-" + ""); C.appendChild(E); N.appendChild(C); var S = document.createElement("td"); S.setAttribute("id", "cell" + m); var k = document.createElement("input"); k.style.backgroundColor = y; k.setAttribute("id", "txtColor" + m * 1 + 1); k.setAttribute("value", y); k.setAttribute("name", b); k.setAttribute("title", y); S.appendChild(k); N.appendChild(S); for (var L = 0; L < e.length; L++) { var A = e[0, L]; var O = A.Size == undefined ? "" : A.Size; var M = A.SizeId == undefined ? "" : A.SizeId; var S = document.createElement("td"); S.setAttribute("id", "cell" + L); var E = document.createElement("input"); E.setAttribute("name", "quantity"); E.setAttribute("title", y + "_" + O); E.setAttribute("id", b + "-" + M); S.appendChild(E); N.appendChild(S) } } } } function readItemDetailQuantitys(e, t) { if (t != undefined) $con = $("#" + t).find("#" + e); else $con = $("#" + e); var n = []; $con.find("input[name=quantity]").each(function () { if (this.value != "") { var e = {}; var t = {}; e = this.id.split("-"); t["ColorID"] = e[0]; t["SizeID"] = e[1]; t["Quantity"] = this.value; n.push(t); t = null } }); return n } function getTotalQuantity(e, t) { if (t != undefined) $con = $("#" + t).find("#" + e); else $con = $("#" + e); var n = 0; $con.find("input[name='quantity']").each(function () { if (this.value != "") { n += this.value * 1 } }); return n } function loadAccountDetailsShopSale(e, t) { if (t) { var n = $("#" + e); n.find("#clearSale").html("فروش خالص"); n.find("#clearAmount").html("مبلغ واریزی خالص"); n.find("#countSale").html("تعداد فروش"); n.find("#sumSale").html("جمع فروش"); n.find("#divdialogCustomer").dialog({ autoOpen: false }).dialog({ width: 600 }); n.find("#ddl_s_Scoup").val("day"); n.find("#txt_s_DateStart").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#txt_s_DateEnd").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#txt_s_DateEnd").datepicker({ changeMonth: true, changeYear: true }); n.find("#a_CustomerIntroducerCode").off().on("click", function () { opendialog({ container: "divdialogCustomer", containerpage: e }) }); n.find("#btnSearch").button({ icons: { primary: "ui-icon-search"} }).off().on("click", function () { AccountDetailsShop(e, true) }) } AccountDetailsShop(e, true) } function loadAccountDetailsShopBuy(e, t) { if (t) { var n = $("#" + e); n.find("#clearSale").html("خرید خالص"); n.find("#clearAmount").html("مبلغ برداشتی خالص"); n.find("#countSale").html("تعداد خرید"); n.find("#sumSale").html("جمع خرید"); n.find("#divdialogCustomer").dialog({ autoOpen: false }).dialog({ width: 600 }); n.find("#ddl_s_Scoup").val("day"); n.find("#txt_s_DateStart").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#txt_s_DateEnd").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#txt_s_DateEnd").datepicker({ changeMonth: true, changeYear: true }); n.find("#btnSearch").button({ icons: { primary: "ui-icon-search"} }).off().on("click", function () { AccountDetailsShop(e, false) }); n.find("#a_CustomerIntroducerCode").off().on("click", function () { opendialog({ container: "divdialogCustomer", containerpage: e }) }) } AccountDetailsShop(e, false) } function AccountDetailsShop(e, t) { var n = $("#" + e); DTO = { shopid: $("#userDefault").find("#ddl_s_Branch").val(), Scoup: n.find("#ddl_s_Scoup").val(), clientid: "", employeeid: n.find("#txt_s_Supplier").val(), dateFrom: n.find("#txt_s_DateStart").val(), dateTo: n.find("#txt_s_DateEnd").val(), isSale: t, clientCode: n.find("#CustomerIntroducerCode").val() }; $.ajax({ type: "POST", url: getPath("Services/AccountDetails.asmx/GetAccountDetailsShop"), contentType: "application/json; charset=utf-8", data: JSON.stringify(DTO), success: function (e) { if (!isAuthenticated(e)) return; if (t) { n.find("#txt_d_Sale").val(e.d.BuyAmount * 1 - e.d.SellAmount * 1); n.find("#txt_d_PaymentSale").val(e.d.ReceivedCash * 1 + e.d.ReceivedCheque * 1 + e.d.ReceivedVoucher * 1 - (e.d.PaidCash * 1 + e.d.PaidCheque * 1 + e.d.paidVoucher * 1)); n.find("#txt_d_BalanceTotal").val(e.d.BuyAmount * 1 - e.d.SellAmount * 1 - (e.d.ReceivedCash * 1 + e.d.ReceivedCheque * 1 + e.d.ReceivedVoucher * 1 - (e.d.PaidCash * 1 + e.d.PaidCheque * 1 + e.d.paidVoucher * 1))); n.find("#txt_d_SaleTotal").val(e.d.BuyAmount); n.find("#txt_d_Return").val(e.d.SellAmount); n.find("#txt_d_TotalPayment").val(e.d.PaidCash * 1 + e.d.PaidCheque * 1 + e.d.paidVoucher * 1); n.find("#txt_d_TotalReceive").val(e.d.ReceivedCash * 1 + e.d.ReceivedCheque * 1 + e.d.ReceivedVoucher * 1); n.find("#txt_d_ChequePeyment").val(e.d.PaidCheque); n.find("#txt_d_ChequeReceive").val(e.d.ReceivedCheque); n.find("#txt_d_CashPayment").val(e.d.PaidCash); n.find("#txt_d_CashReceive").val(e.d.ReceivedCash); n.find("#txt_d_TotalOff").val(e.d.OffSale * 1 - e.d.BuyAmount * 1); n.find("#txt_d_profit").val(e.d.profit); n.find("#txt_d_BuyQuantity").val(e.d.BuyQuantity); n.find("#txt_d_SellQuantity").val(e.d.SellQuantity); n.find("#txt_d_NetQuantity").val(e.d.BuyQuantity * 1 - e.d.SellQuantity * 1) } else if (!t) { n.find("#txt_d_Sale").val(e.d.SellAmount * 1 - e.d.BuyAmount * 1); n.find("#txt_d_PaymentSale").val(e.d.PaidCash * 1 + e.d.PaidCheque * 1 + e.d.paidVoucher * 1 - (e.d.ReceivedCash * 1 + e.d.ReceivedCheque * 1 + e.d.ReceivedVoucher * 1)); n.find("#txt_d_BalanceTotal").val(e.d.SellAmount * 1 - e.d.BuyAmount * 1 - (e.d.PaidCash * 1 + e.d.PaidCheque * 1 + e.d.paidVoucher * 1 - (e.d.ReceivedCash * 1 + e.d.ReceivedCheque * 1 + e.d.ReceivedVoucher * 1))); n.find("#txt_d_SaleTotal").val(e.d.SellAmount); n.find("#txt_d_Return").val(e.d.BuyAmount); n.find("#txt_d_TotalPayment").val(e.d.PaidCash * 1 + e.d.PaidCheque * 1 + e.d.paidVoucher * 1); n.find("#txt_d_TotalReceive").val(e.d.ReceivedCash * 1 + e.d.ReceivedCheque * 1 + e.d.ReceivedVoucher * 1); n.find("#txt_d_ChequePeyment").val(e.d.PaidCheque); n.find("#txt_d_ChequeReceive").val(e.d.ReceivedCheque); n.find("#txt_d_CashPayment").val(e.d.PaidCash); n.find("#txt_d_CashReceive").val(e.d.ReceivedCash); n.find("#txt_d_TotalOff").val(e.d.OffBuy * 1 - e.d.SellAmount * 1); n.find("#txt_d_profit").val(e.d.profit); n.find("#txt_d_BuyQuantity").val(e.d.BuyQuantity); n.find("#txt_d_SellQuantity").val(e.d.SellQuantity); n.find("#txt_d_NetQuantity").val(e.d.BuyQuantity * 1 - e.d.SellQuantity * 1) } }, error: function (e) { alert(e.responseText) } }) } function loadTransferProducts(e, t) { sortid = "BarcodeId desc"; if (t) { var n = $("#" + e); n.find("#dialog").attr("id", "dialog" + e); bindItemsForSelectCombo({ methodname: "getAvailablity", servicename: "Inventory", id: "ddl_m_Availability", container: e, headertext: "وضعیت کالا", selectedindex: 1 }); n.find("#txt_s_ProductCode,#txt_s_ProductBarcode").bind("keydown", function (t) { if (t.keyCode == 13 || t.keyCode == 9) { getBarcodeListOrder(e, { container: "dialog", callbackmethod: getBarcodeListOrder, fname: GetItemTransferProducts, page_index: 0, build: buildBarcodeListOrder, servicename: "Inventory", methodname: "GetItemsList" }) } }); aComplete({ methodname: "GetCompletionListByItemName", servicename: "AtuoComplete", id: "txt_s_ProductCode", container: e, minlength: 2, autofocus: false, limit: 10, boxId: "txt_s_ProductCode" }, { Status: "ddl_m_Availability" }); n.find("#btn_AddTransferProducts").button({ icons: { primary: "ui-icon-transferthick-e-w"} }); bindItemsForSelectCombo({ methodname: "getShopName", servicename: "Shop", id: "ddl_m_Branch", container: e, headertext: "انتخاب شعبه " }); n.find("#DialogBarcode").dialog({ autoOpen: false }).dialog({ width: 750 }); n.find("#dialog_ItemQuantity").dialog({ autoOpen: false }); bindHierarchyData({ id: "hr_s_Category", container: e, styleclass: "PagingSelect selectMedium", table: "category" }); n.find("#btn_SearchProduct").button({ icons: { primary: "ui-icon-search"} }).off().on("click", function () { getBarcodeListOrder(e, { container: "dialog", callbackmethod: getBarcodeListOrder, fname: GetItemTransferProducts, page_index: 0, build: buildBarcodeListOrder, servicename: "Inventory", methodname: "GetItemsList" }) }).button(); n.find("#btn_AddTransferProducts").off().on("click", function () { if (validateAll(n.find("#div_ToCounter")) && n.find("#OrderList").html() != "") AddTransferProducts(e) }).button({ icons: { primary: "ui-icon-transferthick-e-w" }, text: true }); n.find("#OrderList").parent().tableScroll({ height: 380, width: contentwidth, flush: false }) } } function AddTransferProducts(e) { var t = $("#" + e); var n = []; var r = {}; $.each($("#" + e).find("tr[id*=tr]"), function () { var e = {}; e["barcodeid"] = this.id.split("_")[2]; var t = []; $(this).find("input[name=quantity]").each(function () { if (this.value != "") { var e = {}; var n = {}; e = this.id.split("-"); n["ColorID"] = e[0]; n["SizeID"] = e[1]; n["Quantity"] = this.value; t.push(n) } }); e["itemDetails"] = t; n.push(e) }); r["shopidTo"] = t.find("#ddl_m_Branch").val(); r["date"] = $("#userDefault").find("#txt_s_Date").val(); r["shopidFrom"] = $("#userDefault").find("#ddl_s_Branch").val(); r["description"] = t.find("#txt_m_Description").val(); var i = { header: r, itemDetails: n }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(i), type: "Post", url: getPath("Services/Transfer.asmx/AddTransferProducts"), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function GetItemTransferProducts($dis, container, barcode) { var $con = $("#" + container); if (barcode == undefined) barcode = $dis.find("[name=barcode]").html(); var ItemList = ""; var DTO = { barcode: barcode, shopId: $("#userDefault").find("#ddl_s_Branch").val(), isReturn: false }; $.ajax({ type: "POST", data: JSON.stringify(DTO), url: getPath("Services/Order.asmx/GetProductForOrderByBarcode"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; $con.find("#txt_s_ProductBarcode").val(""); var count = $con.find("tr[id*='tr_" + container + "']").length; var List = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trid = "tr_" + container + "_" + val.barcodeid + "_" + count; ItemList += "<tr id='" + trid + "'>" + "<td width='20%'><a href='javascript:showQuantity(\"" + container + '","' + val.barcode + "\");'>" + val.name + " " + val.code + " " + val.barcode + "</a></td>" + "<td width='10%' id='mesureunit'>" + " <select   id='ddl_m_measureunit_" + trid + "' disabled='disabled' class='select95'></select>" + "</td>" + "<td width='10%'><input type='text'  class=' inputText inputW50 ' id='txt_m_TotalQuantity'  disabled='disabled' value='0'/></td>" + "<td width='50%' id='Div_Product_Quantity_" + trid + "' dir='rtl'></td>" + "<td width='10%' id='delete'><button id='btn_deleteProduct'>حذف</button></td></tr>" } $con.find("#OrderList").append(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("[id=btn_deleteProduct]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).unbind().bind("click", function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveItemOrderElementTransferProducts($(this).parents("tr").attr("id"), container); else return }); buildColorSizeTable(barcode, $("#userDefault").find("#ddl_s_Branch").val(), false, "GetItemDetailsByBarcodeAndShopIDNoQuantity", "Div_Product_Quantity_" + trid, trid); bindComboData({ id: "ddl_m_measureunit_" + trid, container: trid, isMeasureUnit: true }, val.measureUnits); $("#ddl_m_measureunit_" + trid).change(function () { SumTransferProducts(trid, container) }) }, error: function (e) { alert(e.responseText) } }) } function RemoveItemOrderElementTransferProducts(e, t) { $("#" + e).remove(); SumTransferProducts(e, t) } function SumTransferProducts(e, t) { $("#" + e).find("#txt_m_TotalQuantity").val(getTotalQuantity(e, t) * ($("#" + e).find("[id*=ddl_m_measureunit]").val() != null ? $("#" + e).find("[id*=ddl_m_measureunit]").val().split("_")[0] : 1)) } function loadTransferProductList(e, t) { sortid = "TransferItemId desc"; if (t) { var n = $("#" + e); n.find("#btnSearchTransferProducts").off().on("click", function () { getTransferProductsList(e, { container: e, callbackmethod: getTransferProductsList, fname: "", page_index: 0, build: buildTransferProductsList, servicename: "Transfer", methodname: "GetTransferProductsList", print: false }) }).button({ icons: { primary: "ui-icon-search"} }); getTransferProductsList(e, { container: e, callbackmethod: getTransferProductsList, fname: "", page_index: 0, build: buildTransferProductsList, servicename: "Transfer", methodname: "GetTransferProductsList", print: false }); n.find("#div_dialog_TransferProducts").attr("id", "div_dialog_TransferProducts" + e).dialog({ autoOpen: false }).dialog({ width: 750 }) } } function getTransferProductsList(e, t) { var n = $("#" + e); var r = true; var i = n.find("#PageSize").val(); var s = 0; var o = 0; var u = "", a = "", f = "", l = ""; var c = n.find("#ddl_d_SearchBy").val(); if (c == "Barcode") { u = n.find("#txt_s_TransferProducts").val() } if (c == "Name") { a = n.find("#txt_s_TransferProducts").val() } if (c == "Code") { f = n.find("#txt_s_TransferProducts").val() } if (c == "Price") { l = n.find("#txt_s_TransferProducts").val() } var h = { skip: s, take: i, currentPage: o, first: r, sort: sortid, barcode: u, name: a, code: f, price: l, quantityfrom: "", quantityto: "", regdatefrom: "", regdateto: "", shopid: $("#userDefault").find("#ddl_s_Branch").val() }; t["DTO"] = h; pageselectCallback(0, t, { container: "", fname: t.fname, pagingContainer: e, first: true, isOrder: false }) } function buildTransferProductsList(jq, container) { var $con = $("#" + container.pagingContainer); var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "date", sort: "Date", width: "20%" }); lsth.push({ title: "fromBranch", sort: "inv_Shop.ShopId", width: "20%" }); lsth.push({ title: "toBranch", sort: "inv_Shop1.ShopId", width: "20%" }); lsth.push({ title: "senderName", sort: "p_Person.PersonId", width: "20%" }); lsth.push({ title: "recieverName", sort: "p_Person1.PersonId", footer: jq.d.sumDebtor, width: "16%" }); if (!container.params.print) { lsth.push({ title: "details", width: "4%" }) } var List = typeof jq.d.results == "string" ? eval("(" + jq.d.results + ")") : jq.d.results; var ItemList = ""; if (List != null) for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; if (!container.params.print) trBody[0] = { trId: val.TransferItemId, trName: val.detail }; trBody[1] = { props: { date: val.Date, name: "date", width: "20%", klass: "dateLong" }, html: val.Date }; trBody[2] = { name: "fromBranch", html: val.ShopFromName, width: "20%" }; trBody[3] = { name: "toBranch", html: val.ShopToName, width: "20%" }; trBody[4] = { name: "senderName", html: val.sendername + "  " + val.senderfamily, width: "20%" }; trBody[5] = { name: "recieverName", html: val.receivername != null && val.receiverfamily != null ? val.receivername + " " + val.receiverfamily : "<button id='btnConfirm'>تایید</button>", width: "16%" }; lstb.push(trBody) } table = { header: lsth, body: lstb, details: { detailsFunction: SelectDetailTransferProducts, confirmFunction: ConfirmTransferProducts }, heigth: 300, container: container.pagingContainer, divName: "TransferProductsList" }; buildTable(table) } function ClickTransferProducts(e) { } function SelectDetailTransferProducts(dis, container) { var $con = $("#div_dialog_TransferProducts" + container); id = $(dis).parents("tr").prop("id").replace("tr", ""); $.ajax({ type: "POST", url: getPath("Services/Transfer.asmx/GetDetailTransferProducts"), contentType: "application/json; charset=utf-8", data: "{id: '" + id + "'}", success: function (response) { if (!isAuthenticated(response)) return; jq = response.d; var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.ItemDetailId + "'>" + "<td width='30%' name='name'>" + val.Barcode + "_" + val.Name + "_" + val.ItemCode + "</td>" + "<td width='15%' name='Size'>" + val.Size + "</td>" + "<td width='15%' name='Color'>" + val.Color + "</td>" + "<td width='20%' name='Quantity'>" + val.Quantity + "  " + val.UnitType + "</td>" + "<td name='" + val.TransferItemId + "' width='20%' id='delete'><button id='a_Button'>حذف</button></td></tr>" } $con.find("#DetailListTransferProducts").html(ItemList).parent().tableScroll({ height: 380, width: 700, flush: false }); $con.find("[id=a_Button]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveItemDetailTransferProducts($(this).parents("tr").attr("id").replace("tr", ""), $(this).parents("td").attr("name"), container); else return }); $con.find("#btn_PrintBarcode").button({ icons: { primary: "ui-icon-print" }, text: true }).click(function () { buildPrintBarcode({ result: jq, container: container, hasQuantity: true }) }); $con.find("tr[id*=tr]").dblclick(function () { }); $con.dialog("open") }, error: function (e) { alert(e.responseText) } }) } function RemoveItemDetailTransferProducts(e, t, n) { var r = $("#div_dialog_TransferProducts" + n); $.ajax({ type: "POST", url: getPath("Services/Transfer.asmx/DeleteDetailTransferProducts"), contentType: "application/json; charset=utf-8", data: "{id: '" + e + "',TransferId:'" + t + "'}", success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isDone) r.find("#tr" + e).remove(); translate(t.d.msg) }, error: function (e) { alert(e.responseText) } }) } function ConfirmTransferProducts(e, t) { var n = $("#" + t); $.ajax({ type: "POST", url: getPath("Services/Transfer.asmx/ConfirmTransferProducts"), contentType: "application/json; charset=utf-8", data: "{id: '" + $(e).parent().parent().prop("id").replace("tr", "") + "'}", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d); getTransferProductsList(t, { container: t, callbackmethod: getTransferProductsList, fname: "", page_index: 0, build: buildTransferProductsList, servicename: "Transfer", methodname: "GetTransferProductsList", print: false }) }, error: function (e) { alert(e.responseText) } }) } function loadTransferAmount(e, t) { sortid = "OrderHeaderId desc"; getTransferAmountList(e); if (t) { var n = $("#" + e); n.find("input[id*=cb_d_Confirm_]").off().on("change", function () { if (this.checked) ConfirmTransferAmount(this, e) }); n.find("#btn_AddTransferAmount").button({ icons: { primary: "ui-icon-disk" }, text: true }); bindItemsForSelectCombo({ methodname: "getCounterName", servicename: "Counter", headertext: "انتخاب صندوق", id: "ddl_m_CounterTo", container: e }); n.find("#PageSize").off().on("change", function () { getTransferAmountList(e) }); n.find("#div_dialog_TransferAmount").dialog({ autoOpen: false }).dialog({ width: 750 }); n.find("#btn_AddTransferAmount").off().on("click", function () { AddTransferAmount(e) }) } } function AddTransferAmount(e) { var t = $("#" + e); var n = { amount: t.find("#txt_m_TransferAmount").val(), counteridFrom: $("#userDefault").find("#ddl_m_Counter").val(), counteridTo: t.find("#ddl_m_CounterTo").val(), currencyid: $("#userDefault").find("#ddl_m_Currency").val(), date: $("#userDefault").find("#txt_s_Date").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(n), type: "Post", url: getPath("Services/Transfer.asmx/AddTransferAmount"), success: function (t) { if (!isAuthenticated(t)) return; getTransferAmountList(e) }, error: function (e) { alert(e.responseText) } }) } function getTransferAmountList(e) { var t = $("#" + e); var n = true; var r = t.find("#PageSize").val(); var i = 0; var s = 0; var o = "", u = "", a = "", f = ""; var l = { skip: i, take: r, currentPage: s, first: n, sort: sortid, barcode: o, name: u, code: a, price: f, quantityfrom: "", quantityto: "", regdatefrom: "", regdateto: "", counterid: $("#userDefault").find("#ddl_m_Counter").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(l), type: "Post", url: getPath("Services/Transfer.asmx/GetTransferAmountList"), success: function (r) { if (!isAuthenticated(r)) return; if (r.d.results != null) { var i = TransferAmountgetOptionsFrom(r.d.count, e); t.find("#paging").pagination(r.d.count, i); TransferAmountpageselectCallback(0, r, e, n) } }, error: function (e) { alert(e.responseText) } }) } function TransferAmountgetOptionsFrom(e, t) { var n = $("#" + t); var r = { callback: TransferAmountpageselectCallback }; n.find("input:text").each(function () { r[this.name] = this.className.match(/numeric/) ? parseInt(this.value) : this.value }); r.prev_show_always = false; r.next_show_always = false; if (e < n.find("#PageSize").val()) n.find("#PageSize").css("display", "none"); else { n.find("#PageSize").css("display", "inline") } r.items_per_page = n.find("#PageSize").val(); r.prev_text = "قبلی"; r.next_text = "بعدی"; r.container = t; return r } function buildTransferAmountList(jq, container) { var $con = $("#" + container); jq = jq.d.results; var condialog = "div_dialog_TransferAmount"; var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.OrderHeaderId + "'>" + "<td name='Amount' width='15%'>" + val.Amount + "  " + val.Currency + "</td>" + "<td name='Date' width='15%'>" + val.Date + "</td>" + "<td name='CounterFrom' width='15%'>" + val.CounterFromName + "</td> " + "<td name='CounterTo' width='15%'>" + val.CounterToName + "</td> " + "<td name='sender' width='15%'>" + val.sendername + "  " + val.senderfamily + "</td> " + (val.receivername != null || val.receiverfamily != null ? "<td name='receiver'  width='15%'>" + val.receivername + "  " + val.receiverfamily + "</td> " : "<td  width='15%'><input type='checkbox' id='cb_d_Confirm_" + val.OrderHeaderId + "' value='تائید' /><label for='cb_d_Confirm_" + val.OrderHeaderId + "'>تائید</label></td>") + "<td id='delete' width='10%'><button id='a_Button'>حذف</button></tr>" } $con.find("#TransferAmountList").html(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("[id=a_Button]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) RemoveTransferAmount(this, $(this).parents("tr").prop("id").replace("tr", ""), container); else return }); $con.find("input[id*=cb_d_Confirm_]").button() } function TransferAmountpageselectCallback(e, t, n, r) { var i = $("#" + n); var s = "", o = "", u = "", a = ""; if (r) { buildTransferAmountList(t, n) } else { r = false; var f = i.find("#PageSize").val(); var l = ""; var c = f; var h = e == 0 ? 0 : e * c; var p = { skip: h, take: c, currentPage: e, first: r, sort: sortid, barcode: s, name: o, code: u, price: a, quantityfrom: "", quantityto: "", regdatefrom: "", regdateto: "", counterid: $("#userDefault").find("#ddl_m_Counter").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(p), type: "Post", url: getPath("Services/Transfer.asmx/GetTransferAmountList"), success: function (e) { if (!isAuthenticated(e)) return; buildTransferAmountList(e, n) }, error: function (e) { alert(e.responseText) } }); return false } Sort(getTransferAmountList, n) } function ClickTransferAmount(e) { } function RemoveTransferAmount(e, t, n) { var r = $("#" + n); var i = $(e); $.ajax({ type: "POST", url: getPath("Services/Transfer.asmx/DeleteTransferAmount"), contentType: "application/json; charset=utf-8", data: "{id: '" + t + "'}", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isdone) i.parents("tr").remove(); translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function ConfirmTransferAmount(e, t) { var n = $("#" + t); var r = $(e); $.ajax({ type: "POST", url: getPath("Services/Transfer.asmx/ConfirmTransferAmount"), contentType: "application/json; charset=utf-8", data: "{id: '" + $(e).parent().parent().prop("id").replace("tr", "") + "'}", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isdone) r.parent().html(e.d.name + " " + e.d.family); translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function bindHierarchyData(e) { var t = "انتخاب"; if (e.headertext != undefined) t = e.headertext; var n = "selectHierarchy"; if (e.canmodify) n = "selectsmall1 validate"; if (e.css != undefined) n = e.css; var r = "0"; if (e.startlevel != undefined) r = e.startlevel; var i = "0"; if (e.parentid != undefined) i = e.parentid; var s = 20; if (e.depth != undefined) s = e.depth; if (e.container != undefined) var o = $("#" + e.container).find("#" + e.id); else var o = $("#" + e.id); var u = false; if (e.canmodify != undefined) u = e.canmodify; o.html(""); if (u) { o.append("<a  href='#'> <span title='باز' class='hExpand unit HierarchyImage ui-icon ui-icon-circle-triangle-s'  ></span></a>" + "<a  href='#'><span title='رست' class='hReset unit HierarchyImage ui-icon ui-icon-refresh'></span></a>" + "<select    id='hierarchyAddress' class=' " + n + " ' name='ComboDiv' ></select>" + "<div  class='resultBar'></div><div  class='editBox invisible' style='padding-top:20px;'>  " + "<input   type='text' class='inputText inputW50'  />" + "<a  class='hAdd' href='#'> <span title='اضافه' class=' unit  ui-icon ui-icon-plusthick'></span></a>" + "<a  class='hDelete' href='#'> <span title='حذف' class=' unit  ui-icon ui-icon-trash'></span></a>" + "<a  class='hEdit' href='#'><span title='ویرایض' class=' unit  ui-icon ui-icon-pencil'></span></a></div>") } else { o.append("<a href='#'><span title='رست' class='hReset unit HierarchyImage ui-icon ui-icon-refresh'></span></a>" + "<select   id='hierarchyAddress' class='" + n + "' name='ComboDiv' ></select>" + " <div  class='resultBar'></div>") } var a = o.find("select"); a.unbind().bind("change", function () { onOptionChanged(this, e.table, s, o) }); o.find(".hReset").unbind().bind("click", function () { Resetbut_onclick(o, e.table, r, i, t, e.resetid) }); o.find(".hExpand").unbind().bind("click", function () { if ($(this).hasClass("ui-icon-circle-triangle-s")) { $(this).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n").prop("title", "بسته") } else if ($(this).hasClass("ui-icon-circle-triangle-n")) $(this).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s").prop("title", "باز"); o.find(".editBox").toggle() }); o.find(".hDelete").unbind().bind("click", function () { Delete_onclick(o, e.table, t) }); o.find(".hAdd").unbind().bind("click", function () { Add_onclick(o, e.table) }); o.find(".hEdit").unbind().bind("click", function () { Update_onclick(o, e.table) }); if (e.parentid != undefined) { BindParents(o, e.table, e.parentid, r); return } ajHierarchy = $.ajax({ type: "POST", url: getPath("Services/Hierarchy.asmx/Get"), data: "{parentID: '" + (e.parentid == undefined ? "" : e.parentid) + "', table: '" + e.table + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (e) { if (!isAuthenticated(e)) return; BindOptionsHtml(e, a); setSelectedValueID(o) } }) } function onOptionChanged(e, t, n, r) { var i = $(e).val(); var s = $(e).selectedOptions()[0].text; var o = 0; var u = r.prop("id"); $("a[name='hiddenOption']").each(function () { o = o + 1 }); if (i != "-" && o < n) { var a = r.find(".resultBar"); a.append("<span class='spanAction' name='hiddenOption' id='" + i + "'>" + s + " > </span>"); a.find("#" + i).click(function () { onOptionClicked(r, i, t) }); if (o + 1 < n) { $.ajax({ type: "POST", url: getPath("Services/Hierarchy.asmx/Get"), data: "{parentID: '" + r.find(".resultBar span").last().prop("id") + "', table: '" + t + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (e) { if (!isAuthenticated(e)) return; BindOptionsHtml(e, r.find("select")); setSelectedValueID(r) } }) } } } function onOptionClicked(e, t, n) { $.ajax({ type: "POST", url: getPath("Services/Hierarchy.asmx/Get"), data: "{parentID: '" + t + "', table: '" + n + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (n) { if (!isAuthenticated(n)) return; BindOptionsHtml(n, e.find("select"), false); var r = e.find(".resultBar span"); while (e.find(".resultBar span").last() != null && e.find(".resultBar span").last().prop("id") != t) { e.find(".resultBar span").last().remove() } setSelectedValueID(e) } }) } function BindOptionsHtml(response, $hrSelect, isAdd, isParents) { if (!isAdd) { var Details; if (isParents) Details = response; else Details = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d } $hrSelect.removeOption(/./).addOption("-", " انتخاب زیر گروه "); if (Details != undefined) for (var j = 0; j < Details.length; j++) { var val = Details[j]; var text = val.value; var value = val.id; $hrSelect.addOption(value, text, false) } } function setSelectedValueID(e) { e.find("#selectedValue").remove(); e.append("<input name='selectedValue' id='selectedValue' type='hidden' />"); if (e.find(".resultBar span").last() != null) e.find("#selectedValue").val(e.find(".resultBar span").last().prop("id")); else { if ($("#startLevelID").val() != null) e.find("#selectedValue").val($("#startLevelID").val()); else e.find("#selectedValue").val(null) } } function BindParents($hrDiv, tableName, selectedValue, startLevel, options) { $.ajax({ type: "POST", url: getPath("Services/Hierarchy.asmx/GetParents"), data: "{parentID: '" + selectedValue + "', table: '" + tableName + "', StartLevel: '" + startLevel + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (response) { if (!isAuthenticated(response)) return; if (response.d != null) { var Details = typeof response.d.parents == "string" ? eval("(" + response.d.parents + ")") : response.d.parents; if (options != undefined && options.isRaw) { for (var j = 0; j < Details.length; j++) { var val = Details[0, j]; var id = val[1]; $hrDiv.append("<span >" + val[0] + " > </span>") } $hrDiv.append(options.concat) } else { BindOptionsHtml(response.d.body, $hrDiv.find("select"), false, true); var $resultBar = $hrDiv.find(".resultBar"); $resultBar.find("span").remove(); { for (var j = 0; j < Details.length; j++) { var val = Details[0, j]; var id = val[1]; $resultBar.append("<span class='spanAction' name='hiddenOption' id='" + id + "' >" + val[0] + " > </span>"); $resultBar.find("[class=spanAction]").click(function () { onOptionClicked($hrDiv, $(this).attr("id"), tableName) }) } } } setSelectedValueID($hrDiv) } } }) } function Resetbut_onclick(e, t, n, r, i, s) { if (s != undefined) { BindParents(container, t, s, n); return } $.ajax({ type: "POST", url: getPath("Services/Hierarchy.asmx/Get"), data: "{parentID: '" + "" + "', table: '" + t + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (!isAuthenticated(t)) return; BindOptionsHtml(t, e.find("select"), false); e.find(".resultBar span").remove(); setSelectedValueID(e) } }) } function Delete_onclick(e, t, n) { $.ajax({ type: "POST", url: getPath("Services/Hierarchy.asmx/Delete"), data: "{parentID: '" + e.find(".resultBar span").last().prop("id") + "', table: '" + t + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isDone != undefined && !t.d.isDone) { translate(t.d.msg); return } BindOptionsHtml(t, e, false); e.find(".resultBar span").last().remove(); if (e.find(".resultBar span").last().length > 0) e.find("span.text").html(e.find(".resultBar span").last().html().replace("&gt;&gt;", "")); else e.find("span.text").html(n); setSelectedValueID(e) }, error: function (e) { alert(e) } }) } function Add_onclick(e, t) { var n; if (e.find(".resultBar span").last().length > 0) n = e.find(".resultBar span").last().prop("id"); else n = 0; $.ajax({ type: "POST", url: getPath("Services/Hierarchy.asmx/Add"), data: "{parentID: '" + n + "', value: '" + e.find(".inputText").val() + "', table: '" + t + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (n) { if (!isAuthenticated(n)) return; if (n.d.isDone != undefined && !n.d.isDone) { translate(n.d.msg); return } var r = e.find(".resultBar"); r.append("<span class='spanAction' name='hiddenOption' id='" + n.d.id + "' >" + n.d.value + " > </span>"); r.find("#" + n.d.id).click(function () { onOptionClicked(e, n.d.id, t) }); BindOptionsHtml(n, e.find("select"), true); setSelectedValueID(e); e.find(".inputText").val("") } }) } function Update_onclick(e, t) { $.ajax({ type: "POST", url: getPath("Services/Hierarchy.asmx/Update"), data: "{parentID: '" + e.find(".resultBar span").last().prop("id") + "', value: '" + e.find(".inputText").val() + "', table: '" + t + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isDone != undefined && !t.d.isDone) { translate(t.d.msg); return } e.find(".resultBar span").last().html(e.find(".inputText").val() + "&gt;&gt;"); e.find("span.text").html(e.find(".inputText").val()); setSelectedValueID(e) } }) } function getHierarchySelectedValue(e, t) { if (t != undefined) return $("#" + t).find("#" + e).find("#selectedValue").val() == undefined ? null : $("#" + t).find("#" + e).find("#selectedValue").val(); else return $("#" + e).find("#selectedValue").val() == undefined ? null : $("#" + e).find("#selectedValue").val() } function GetSMSLenght(e) { var t = $("#" + e); var n = 0; t.find("#txt_m_Body li").each(function () { if ($(this).attr("char") != undefined && $(this).attr("char") != "") n += $(this).attr("char") * 1; else n += $(this).find("a").html().length * 1 + 1 }); t.find("#txt_m_Page").val(parseInt(parseInt(n) / 70) + 1); t.find("#txt_m_Count").val(Math.abs(70 - n % 70)) } function sendEmailSms(e) { var t = $("#" + e); t.find("#moreFilter").slideUp("fast"); t.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); t.find("#moreFilter").slideToggle(function () { }) }); bindXmlDropDownData({ id: "ddl_s_Title", container: e, path: "Customer/smsTitle", canmodify: true, headertext: "انتخاب موضوع", async: false, css: "selectsmall1 required validate" }); $container = t.find("#CustomerForSMSContent"); bindHierarchyData({ id: "divCustomerForSMSAddress", container: e, table: "address" }); bindHierarchyData({ id: "div_Category", container: e, table: "Category" }); t.find("#SearchBy").val("Name"); t.find("#SendAll").button({ icons: { primary: "ui-icon-disk"} }); t.find("#SendSelected").button({ icons: { primary: "ui-icon-disk"} }); t.find("#txt_m_Body").keydown(function () { GetSMSLenght(e) }); t.find("#ddl_TitleSMS").html(t.find("#ddl_s_Title select").html()); t.find("#txt_LastDateSMSFrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, n) { t.find("#txt_LastDateSMSTo").datepicker("option", "minDate", new JalaliDate(n["selectedYear"], n["selectedMonth"], n["selectedDay"])) } }); t.find("#txt_LastDateSMSTo").datepicker({ changeMonth: true, changeYear: true }); t.find("#txt_s_PaymenytLastFrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, n) { t.find("#txt_s_PaymenytLastTo").datepicker("option", "minDate", new JalaliDate(n["selectedYear"], n["selectedMonth"], n["selectedDay"])) } }); t.find("#txt_s_PaymenytLastTo").datepicker({ changeMonth: true, changeYear: true }); t.find("#CustomerForSMSSearchRegDateStart").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, n) { t.find("#CustomerForSMSSearchRegDateEnd").datepicker("option", "minDate", new JalaliDate(n["selectedYear"], n["selectedMonth"], n["selectedDay"])) } }); t.find("#CustomerForSMSSearchRegDateEnd").datepicker({ changeMonth: true, changeYear: true }); t.find("#txt_s_BuytLastFrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, n) { t.find("#txt_s_BuytLastTo").datepicker("option", "minDate", new JalaliDate(n["selectedYear"], n["selectedMonth"], n["selectedDay"])) } }); t.find("#txt_s_BuytLastTo").datepicker({ changeMonth: true, changeYear: true }); t.find("#divdialogCustomerForSMS").dialog({ autoOpen: false }).dialog({ width: 600 }); t.find("#PageSize").off().on("change", function () { getCustomerForSMSList({ container: e }) }); t.find("#divslider").unbind("click").click(function () { sliderClick("divCustomerForSMSsearch"); sliderClick("moreFilter") }); t.find("#CustomerForSMSAdvanceSearchbt").button({ icons: { primary: "ui-icon-search"} }).unbind("click").click(function () { sortid = "PersonId desc"; getCustomerForSMSList({ container: e }) }); t.find("#ddl_s_Shop").html($("#ddl_s_Branch").html()).val(""); var n = ""; t.find("#txt_m_Body").sortable(); t.find("#btn_editContent").button({ text: false, icons: { primary: "ui-icon-refresh"} }).click(function () { t.find("#btn_editContent").addClass("invisible"); n.html(t.find("#txt_content").val()); GetSMSLenght(e) }); bindItemsForSelectCombo({ async: false, methodname: "getEmployees", servicename: "EmployeeService", id: "ddl_registerer", container: e, headertext: "انتخاب کارمند", selectedindex: 0 }); t.find("#btn_regDate, #btn_address, #btn_product, #btn_shop, #btn_category, #btn_subject, #btn_registerer," + " #btn_lastSentDate, #lastBuyDate").button({ text: false, icons: { primary: "ui-icon-circle-check"} }).click(function () { var e; if ($(this).text().indexOf("شامل") != "-1") { e = { label: "به جز", icons: { primary: "ui-icon-circle-minus"} }; $(this).parent().removeClass("frog").addClass("red") } else { e = { label: "شامل", icons: { primary: "ui-icon-circle-check"} }; $(this).parent().removeClass("red").addClass("frog") } $(this).button("option", e) }).parent().addClass("frog") } function loadSendEmail(e, t) { if (t) { sendEmailSms(e); $con = $("#" + e); $con.find("#SendAll").unbind("click").click(function () { if (validateAll($("#divSmsSubject"))) if (confirm("Are you Sure?!")) { SendEmailForAll({ container: e }) } }); $con.find("#SendSelected").unbind("click").click(function () { if (validateAll($("#divSmsSubject"))) if (confirm("Are you Sure?!")) { SendEmailForSelected(e) } }); $con.find("#emailBody").html("<textarea class='editor' name='text1'>" + "</textarea>"); $(".editor").tinymce({ script_url: "jscripts/tiny_mce/tiny_mce.js", width: "100%", height: "500px", directionality: "rtl", theme: "advanced", verify_html: false, plugins: "pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,wordcount,advlist,autosave", theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,styleselect,formatselect,fontselect,fontsizeselect", theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor", theme_advanced_buttons3: "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen", theme_advanced_buttons4: "insertlayer,moveforward,movebackward,absolute,|,styleprops,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,pagebreak,restoredraft,codehighlighting,netadvimage", theme_advanced_toolbar_location: "top", theme_advanced_toolbar_align: "right", theme_advanced_statusbar_location: "bottom", theme_advanced_resizing: false, content_css: "../../Scripts/tinymce/css/content.css", convert_urls: false }); $con.find("#ulSmsItems li,#li_text").bind("click", function () { $con.find("[name=text1]").append("<span>%" + $(this).attr("name") + "%</span>"); if ($(this).attr("id") == "li_text") { $con.find("#txt_m_Body").append("<li style='margin:3px;' name='" + $(this).attr("name") + "' class='ui-state-default ui-corner-top' ><a name='content' href='#' class='ui-tabs-anchor' >" + $con.find("#txt_content").val() + "</a> <span name='smsItems' class='ui-icon ui-icon-close'>Remove Tab</span></li>"); $con.find("#txt_m_Body").find("a[name='content']").unbind("click").click(function () { selectedTxt = SelectContent(this, e); $con.find("#btn_editContent").removeClass("invisible") }) } else $con.find("#txt_m_Body").append("<li style='margin:5px;' char='" + $(this).attr("char") + "' name='" + $(this).attr("name") + "' class='ui-state-default ui-corner-top' ><a href='#' class='ui-tabs-anchor' >" + $(this).find("a").html() + "</a> <span name='smsItems' class='ui-icon ui-icon-close'>Remove Tab</span></li>"); $con.find("span[name='smsItems']").off().on("click", function () { $(this).parent("li").remove(); GetSMSLenght(e) }) }).attr("style", "margin:3px;") } } function loadSendSMS(e, t) { if (t) { sendEmailSms(e); var n = $("#" + e); n.find("#SendAll").unbind("click").click(function () { if (validateAll($("#divSmsSubject"))) if (confirm("Are you Sure?!")) { SendMessageForAll({ container: e }) } }); n.find("#SendSelected").unbind("click").click(function () { if (validateAll($("#divSmsSubject"))) if (confirm("Are you Sure?!")) { SendMessageForSelected(e) } }); n.find("#btn_showCredit").button().unbind("click").click(function () { getCredit() }); n.find("#ulSmsItems li,#li_text").draggable({ cursor: "move", revert: true }).attr("style", "margin:3px;"); n.find("#txt_m_Body").droppable({ accept: $("#ulSmsItems li,#li_text"), drop: function (t, r) { if (r.draggable.attr("id") == "li_text") { n.find("#txt_m_Body").append("<li style='margin:3px;' name='" + r.draggable.attr("name") + "' class='ui-state-default ui-corner-top' ><a name='content' href='#' class='ui-tabs-anchor' >" + n.find("#txt_content").val() + "</a> <span name='smsItems' class='ui-icon ui-icon-close'>Remove Tab</span></li>"); n.find("#txt_m_Body").find("a[name='content']").unbind("click").click(function () { selectedTxt = SelectContent(this, e); n.find("#btn_editContent").removeClass("invisible") }) } else n.find("#txt_m_Body").append("<li style='margin:5px;' char='" + r.draggable.attr("char") + "' name='" + r.draggable.attr("name") + "' class='ui-state-default ui-corner-top' ><a href='#' class='ui-tabs-anchor' >" + r.draggable.find("a").html() + "</a> <span name='smsItems' class='ui-icon ui-icon-close'>Remove Tab</span></li>"); GetSMSLenght(e); n.find("span[name='smsItems']").off().on("click", function () { $(this).parent("li").remove(); GetSMSLenght(e) }) } }) } } function getCredit() { $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", type: "Post", url: getPath("Services/Customer.asmx/GetCredit"), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function SelectContent(e, t) { $con = $("#" + t); $dis = $(e); $con.find("#txt_content").val($dis.html()); return $dis } function getCustomerForSMSList(e) { var t = $("#" + e.container); var n = true; var r = t.find("#PageSize").val(); var i = 0; var s = 0; var o = "", u = "", a = "", f = "", l = "", c = "", h = "", p = "", d = "", v = ""; var m = t.find("#SearchBy").val(); if (m == "Code") { o = t.find("#CustomerForSMStxtSearch").val() } else if (m == "Email") { v = t.find("#CustomerForSMStxtSearch").val() } else if (m == "Name") { u = t.find("#CustomerForSMStxtSearch").val() } else if (m == "RegName") { a = t.find("#CustomerForSMStxtSearch").val() } else if (m == "IntroducerName") { f = t.find("#CustomerForSMStxtSearch").val() } else if (m == "Mobile") { l = t.find("#CustomerForSMStxtSearch").val() } else if (m == "Phone") { c = t.find("#CustomerForSMStxtSearch").val() } var g = t.find("#ddl_d_SearchByProduct").val(); if (g == "Barcode") { h = t.find("#txt_s_Product").val() } else if (g == "Name") { p = t.find("#txt_s_Product").val() } else if (g == "Code") { d = t.find("#txt_s_Product").val() } var y = { skip: i, take: r, currentPage: s, first: n, sort: t.find("#ddl_s_Sort").val() + " " + t.find("#ddl_s_Sorting").val(), code: o, namefamily: u, introducer: f, registerername: a, Mobile: l, Phone: c, agefrom: t.find("#CustomerForSMSSearchAgeStart").val(), ageto: t.find("#CustomerForSMSSearchAgeEnd").val(), regdatefrom: t.find("#CustomerForSMSSearchRegDateStart").val(), regdateto: t.find("#CustomerForSMSSearchRegDateEnd").val(), gender: t.find("#ddl_s_Gender").val(), shopId: t.find("#ddl_s_Shop").val(), LastDateSMSFrom: t.find("#txt_LastDateSMSFrom").val(), LastDateSMSTo: t.find("#txt_LastDateSMSTo").val(), subjectsms: t.find("#ddl_TitleSMS").val(), AddressId: getHierarchySelectedValue("divCustomerForSMSAddress", e.container), barcode: h, productname: p, productcode: d, categoryid: getHierarchySelectedValue("div_Category", e.container), PaymenytLastFrom: t.find("#txt_s_PaymenytLastFrom").val(), PaymenytLastTo: t.find("#txt_s_PaymenytLastTo").val(), PaymentAmountFrom: t.find("#txt_s_PaymentAmountFrom").val(), PaymentAmountTo: t.find("#txt_s_PaymentAmountTo").val(), BuyAmountFrom: t.find("#txt_s_BuyAmountFrom").val(), BuyAmountTo: t.find("#txt_s_BuyAmountTo").val(), BuyIntroducerFrom: t.find("#txt_s_BuyIntroducerFrom").val(), BuyIntroducerTo: t.find("#txt_s_BuyIntroducerTo").val(), DebtFrom: t.find("#txt_s_DebtFrom").val(), DebtTo: t.find("#txt_s_DebtTo").val(), VocherBuyFrom: t.find("#txt_s_VocherBuyFrom").val(), VocherBuyTo: t.find("#txt_s_VocherBuyTo").val(), ChequeNotFrom: t.find("#txt_s_ChequeNotFrom").val(), ChequeNotTo: t.find("#txt_s_ChequeNotTo").val(), BuyLastFrom: t.find("#txt_s_BuytLastFrom").val(), BuyLastTo: t.find("#txt_s_BuytLastTo").val(), regDate: t.find("#btn_regDate").text().indexOf("شامل") != "-1" ? true : false, address: t.find("#btn_address").text().indexOf("شامل") != "-1" ? true : false, product: t.find("#btn_product").text().indexOf("شامل") != "-1" ? true : false, shop: t.find("#btn_shop").text().indexOf("شامل") != "-1" ? true : false, category: t.find("#btn_category").text().indexOf("شامل") != "-1" ? true : false, subject: t.find("#btn_subject").text().indexOf("شامل") != "-1" ? true : false, registerer: t.find("#btn_registerer").text().indexOf("شامل") != "-1" ? true : false, lastSentDate: t.find("#btn_lastSentDate").text().indexOf("شامل") != "-1" ? true : false, lastBuy: t.find("#lastBuyDate").text().indexOf("شامل") != "-1" ? true : false, registererId: t.find("#ddl_registerer").val(), email: v }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(y), type: "Post", url: getPath("Services/Customer.asmx/GetCustomerForSMSList"), success: function (r) { if (!isAuthenticated(r)) return; var i = CustomerForSMSgetOptionsFrom(r.d.count, e); t.find("#paging").pagination(r.d.count, i); CustomerForSMSpageselectCallback(0, r, e, n) }, error: function (e) { alert(e.responseText) } }) } function CustomerForSMSgetOptionsFrom(e, t) { var n = $("#" + t.container); var r = { callback: CustomerForSMSpageselectCallback }; n.find("input:text").each(function () { r[this.name] = this.className.match(/numeric/) ? parseInt(this.value) : this.value }); r.prev_show_always = false; r.next_show_always = false; if (e < n.find("#PageSize").val()) n.find("#PageSize").css("display", "none"); else { n.find("#PageSize").css("display", "inline") } r.items_per_page = n.find("#PageSize").val(); r.prev_text = "قبلی"; r.next_text = "بعدی"; r.container = t; return r } function buildCustomerForSMSList(jq, pageoption) { var $con = $("#" + pageoption.container); jq = jq.d.results; var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var gender = val.Gender == true ? "آقای" : "خانم"; var introducerName = val.introducerName == null ? "" : val.introducerName; ItemList += "<tr id='tr" + val.PersonId + "'>" + "<td><ul class=''>" + "<li class='line formControl'>" + "<div class=' unit size1of5'>" + "<label class='labelPadding '>" + "مشتری  " + val.Code + " : </label><span class='cursor' name='subTab' menuName='a_CustomerList' id='" + val.PersonId + "'>" + gender + " " + val.Name + " " + val.Family + "</span> <input type='hidden' id='hd_customeramily' value='" + val.Family + "' />" + "</div>" + "<div class=' unit size1of5'>" + "<label > معرف " + (val.introducerCode == null ? "" : val.introducerCode) + " : </label><label class=''>" + (val.introducerId == null ? "" : "<span class='cursor' name='subTab' menuName='a_CustomerList' id='" + val.introducerId + "'>") + (val.introducerName == null ? "" : val.introducerName) + "  " + (val.introducerFamily == null ? "" : val.introducerFamily) + (val.introducerId == null ? "" : "</span>") + "</label>" + "</div>" + "<div class=' unit size1of6'>" + "<label > ثبت نام کننده : </label><label >" + (val.regFamily != null ? val.regName + "  " + val.regFamily : "") + "</label>" + "</div>" + "<div class=' unit size1of7'>" + "<label >سن : </label><label >" + val.age + "</label>" + "</div>" + "<div class=' unit size1of7'>" + "<label >تاریخ ثبت نام : </label><label class=' label100'><span date='" + val.regdate + "' class='date'>" + val.regdate + "</span></label>" + "</div>" + "<div class=' unit size1of7'>" + (val.Email != null ? "<input type='checkbox' id='email" + val.PersonId + "' name='email' email='" + val.Email + "' /><label name='email' for='email" + val.PersonId + "'>" + val.Email + "</label>" : "") + "</div>" + "</li><br/>" + "<li class='line formControl''>" + "<div class=' unit size1of6'>" + "<label class='labelPadding'>خرید خالص : </label><label><span class='digit'>" + val.NetBuy + "</span> تومان</label>" + "</div>" + "<div class=' unit size1of6'>" + "<label >پرداختی خالص : </label><label><span class='digit'>" + val.NetPayment + "</span> تومان</label>" + "</div>" + "<div class=' unit size1of6'>" + "<label>چکهای پرداختی : </label><label><span class='digit'>" + val.ReceivedCheque + "</span> تومان</label>" + "</div>" + "<div class=' unit size1of6'>" + "<label>چکهای پاس نشده : </label><label><span class='digit'>" + val.ChequeNotPassed + "</span> تومان</label>" + "</div>" + "<div class=' unit size1of6'>" + "<label >بدهی کل : </label><label><span class='digit'>" + (val.NetBuy * 1 - val.NetPayment * 1) + "</span> تومان</label>" + "</div>" + "<div class=' unit size1of6'><label class='unit label15'>همراه :</label><ul class=' unit '> "; for (var j = 0; j < val.Mobile.length; j++) { var num = val.Mobile[0, j]; ItemList += "<li>" + "<input type='checkbox' name='mobileNum' id='cb_d_Mobile_" + num + "' ><label name='CellNumber' for='cb_d_Mobile_" + num + "'>" + num + "</label>" + "</li>" } ItemList += "</ul></div></li><br/>" + "<li class='line formControl''>" + "<div class=' unit size1of6'>" + "<label>موجودی کارت خرید : </label><label><span class='digit'>" + val.VoucherPower + "</span> تومان</label>" + "</div>" + "<div class=' unit size1of6'>" + "<label>پرداختی کارت خرید : </label><label><span class='digit'>" + (val.paidVoucher * 1 - val.ReceivedVoucher * 1) + "</span> تومان</label>" + "</div>" + "<div class=' unit size1of6'>" + "<label class='labelPadding'>آخرین خرید : </label><label>" + (val.LastBuy != null ? "<span class='date' date='" + val.LastBuy + "'>" + val.LastBuy + "</span>" : "") + "</label>" + "</div>" + "<div class=' unit size1of6'>" + "<label >آخرین برداشت  : </label><label>" + (val.LastPayment != null ? "<span class='date' date='" + val.LastPayment + "'>" + val.LastPayment + "</span>" : "") + "</label>" + "</div>" + "<div class=' unit size1of6'>" + "<label> خرید معرفی شده ها : </label><label><span class='digit'>" + val.BuyIntroducer + "</span> تومان</label>" + "</div>" + "<div class=' unit size1of6'>" + "<label>  واریزی معرفی شده ها : </label><label><span class='digit'>" + val.PaymentIntroducer + "</span> تومان</label>" + "</div>" + "</li>" + "</ul></td></tr>" } $con.find("#CustomerForSMSList").html(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("input[name='mobileNum']").button(); $con.find("input[name='email']").button(); $con.find("tr[id*=tr]").dblclick(function () { }); $con.find("[name=subTab]").unbind().click(function () { var e = $(this); createSubTab({ name: e.attr("menuName"), tabName: e.html(), id: e.attr("id") }) }); if (pageoption.container == "divdialogCustomerForSMS") $con.dialog("open") } function CustomerForSMSpageselectCallback(e, t, n, r) { var i = $("#" + n.container); if (r) { buildCustomerForSMSList(t, n) } else { r = false; var s = i.find("#PageSize").val(); var o = ""; var u = s; var a = e == 0 ? 0 : e * u; var f = "", l = "", c = "", h = "", p = "", d = "", v = "", m = "", g = "", y = ""; var b = i.find("#SearchBy").val(); if (b == "Code") { f = i.find("#CustomerForSMStxtSearch").val() } else if (b == "Name") { l = i.find("#CustomerForSMStxtSearch").val() } else if (b == "Email") { y = i.find("#CustomerForSMStxtSearch").val() } else if (b == "RegName") { c = i.find("#CustomerForSMStxtSearch").val() } else if (b == "IntroducerName") { h = i.find("#CustomerForSMStxtSearch").val() } else if (b == "Mobile") { p = i.find("#CustomerForSMStxtSearch").val() } else if (b == "Phone") { d = i.find("#CustomerForSMStxtSearch").val() } var w = i.find("#ddl_d_SearchByProduct").val(); if (w == "Barcode") { v = i.find("#txt_s_Product").val() } else if (w == "Name") { m = i.find("#txt_s_Product").val() } else if (w == "Code") { g = i.find("#txt_s_Product").val() } var E = { skip: a, take: u, currentPage: e, first: r, sort: i.find("#ddl_s_Sort").val() + " " + i.find("#ddl_s_Sorting").val(), code: f, namefamily: l, introducer: h, registerername: c, Mobile: p, Phone: d, agefrom: i.find("#CustomerForSMSSearchAgeStart").val(), ageto: i.find("#CustomerForSMSSearchAgeEnd").val(), regdatefrom: i.find("#CustomerForSMSSearchRegDateStart").val(), regdateto: i.find("#CustomerForSMSSearchRegDateEnd").val(), gender: i.find("#ddl_s_Gender").val(), shopId: i.find("#ddl_s_Shop").val(), LastDateSMSFrom: i.find("#txt_LastDateSMSFrom").val(), LastDateSMSTo: i.find("#txt_LastDateSMSTo").val(), subjectsms: i.find("#ddl_TitleSMS").val(), AddressId: getHierarchySelectedValue("divCustomerForSMSAddress", n.container), barcode: v, productname: m, productcode: g, categoryid: getHierarchySelectedValue("div_Category", n.container), PaymenytLastFrom: i.find("#txt_s_PaymenytLastFrom").val(), PaymenytLastTo: i.find("#txt_s_PaymenytLastTo").val(), PaymentAmountFrom: i.find("#txt_s_PaymentAmountFrom").val(), PaymentAmountTo: i.find("#txt_s_PaymentAmountTo").val(), BuyAmountFrom: i.find("#txt_s_BuyAmountFrom").val(), BuyAmountTo: i.find("#txt_s_BuyAmountTo").val(), BuyIntroducerFrom: i.find("#txt_s_BuyIntroducerFrom").val(), BuyIntroducerTo: i.find("#txt_s_BuyIntroducerTo").val(), DebtFrom: i.find("#txt_s_DebtFrom").val(), DebtTo: i.find("#txt_s_DebtTo").val(), VocherBuyFrom: i.find("#txt_s_VocherBuyFrom").val(), VocherBuyTo: i.find("#txt_s_VocherBuyTo").val(), ChequeNotFrom: i.find("#txt_s_ChequeNotFrom").val(), ChequeNotTo: i.find("#txt_s_ChequeNotTo").val(), BuyLastFrom: i.find("#txt_s_BuytLastFrom").val(), BuyLastTo: i.find("#txt_s_BuytLastTo").val(), regDate: i.find("#btn_regDate").text().indexOf("شامل") != "-1" ? true : false, address: i.find("#btn_address").text().indexOf("شامل") != "-1" ? true : false, product: i.find("#btn_product").text().indexOf("شامل") != "-1" ? true : false, shop: i.find("#btn_shop").text().indexOf("شامل") != "-1" ? true : false, category: i.find("#btn_category").text().indexOf("شامل") != "-1" ? true : false, subject: i.find("#btn_subject").text().indexOf("شامل") != "-1" ? true : false, registerer: i.find("#btn_registerer").text().indexOf("شامل") != "-1" ? true : false, lastSentDate: i.find("#btn_lastSentDate").text().indexOf("شامل") != "-1" ? true : false, lastBuy: i.find("#lastBuyDate").text().indexOf("شامل") != "-1" ? true : false, registererId: i.find("#ddl_registerer").val(), email: y }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(E), type: "Post", url: getPath("Services/Customer.asmx/GetCustomerForSMSList"), success: function (e) { if (!isAuthenticated(e)) return; buildCustomerForSMSList(e, n) }, error: function (e) { alert(e.responseText) } }); return false } Sort(getCustomerForSMSList, n) } function SendMessageForSelected(e) { var t = $("#" + e); var n = []; var r = ""; t.find("ul[id*=txt_m_Body] li").each(function () { if ($(this).attr("name") == "name") r += "<%name%>"; else if ($(this).attr("name") == "family") r += "<%family%>"; else if ($(this).attr("name") == "amount") r += "<%amount%>"; else if ($(this).attr("name") == "voucherAmount") r += "<%voucherAmount%>"; else if ($(this).attr("name") == "text") r += $(this).find("a[name=content]").html(); else if ($(this).attr("name") == "title") r += "<%title%>" }); if ($(this).find("input[id*='cb_d_Mobile_']:checked").length > 0) { t.find("tr[id*=tr]").each(function () { var e = {}; var t = []; $(this).find("input[id*='cb_d_Mobile_']:checked").each(function () { if (!$(this).attr("checked")) t.push($(this).prop("id").split("_")[3]) }); e["listNumber"] = t; e["personid"] = $(this).prop("id").replace("tr", ""); e["family"] = $(this).find("label[name='Customername']").prop("id"); e["sex"] = $(this).find("label[name='Customername']").html().split(" ")[0]; n.push(e) }) } else { t.find("tr[id*=tr]").each(function () { var e = {}; var t = []; $(this).find("input[id*='cb_d_Mobile_']").each(function () { if (!$(this).prop("checked")) t.push($(this).prop("id").split("_")[3]) }); if (t.length > 0) { e["listNumber"] = t; e["personid"] = $(this).prop("id").replace("tr", ""); e["family"] = $(this).find("[id='hd_customeramily']").val(); e["sex"] = $(this).find("span[id='" + e["personid"] + "']").html().split(" ")[0]; n.push(e) } }) } if (n.length == 0) { translate("selectCustomers"); return } var i = { header: n, messageBody: r, messageHeader: "", Setname: false, title: t.find("#ddl_s_Title select").val(), paging: t.find("#txt_m_Page").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(i), type: "Post", url: getPath("Services/Customer.asmx/SendSMSForSelected"), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d) }, error: function (e) { alert(e.responseText) } }); return false } function SendMessageForAll(e) { var t = $("#" + e.container); if (t.find("#CustomerForSMSList").html() == "") { translate("selectCustomers"); return } var n = true; var r = t.find("#PageSize").val(); var i = 0; var s = 0; var o = "", u = "", a = "", f = "", l = "", c = "", h = "", p = "", d = "", v = "", m = ""; t.find("ul[id*=txt_m_Body] li").each(function () { if ($(this).prop("name") == "name") m += "<%name%>"; else if ($(this).attr("name") == "family") m += "<%family%>"; else if ($(this).attr("name") == "amount") m += "<%amount%>"; else if ($(this).attr("name") == "voucherAmount") m += "<%voucherAmount%>"; else if ($(this).attr("name") == "text") m += $(this).find("a[name=content]").html(); else if ($(this).attr("name") == "title") m += "<%title%>" }); var g = t.find("#SearchBy").val(); if (g == "Code") { o = t.find("#CustomerForSMStxtSearch").val() } else if (g == "Name") { u = t.find("#CustomerForSMStxtSearch").val() } else if (g == "Email") { d = t.find("#CustomerForSMStxtSearch").val() } else if (g == "RegName") { a = t.find("#CustomerForSMStxtSearch").val() } else if (g == "IntroducerName") { f = t.find("#CustomerForSMStxtSearch").val() } else if (g == "Mobile") { l = t.find("#CustomerForSMStxtSearch").val() } else if (g == "Phone") { c = t.find("#CustomerForSMStxtSearch").val() } var y = t.find("#ddl_d_SearchByProduct").val(); if (g == "Barcode") { h = t.find("#txt_s_Product").val() } else if (y == "Name") { p = t.find("#txt_s_Product").val() } else if (y == "Code") { v = t.find("#txt_s_Product").val() } var b = { skip: i, take: r, currentPage: s, first: n, sort: t.find("#ddl_s_Sort").val() + " " + t.find("#ddl_s_Sorting").val(), code: o, namefamily: u, introducer: f, registerername: a, Mobile: l, Phone: c, agefrom: t.find("#CustomerForSMSSearchAgeStart").val(), ageto: t.find("#CustomerForSMSSearchAgeEnd").val(), regdatefrom: t.find("#CustomerForSMSSearchRegDateStart").val(), regdateto: t.find("#CustomerForSMSSearchRegDateEnd").val(), gender: t.find("#ddl_s_Gender").val(), shopId: t.find("#ddl_s_Shop").val(), LastDateSMSFrom: t.find("#txt_LastDateSMSFrom").val(), LastDateSMSTo: t.find("#txt_LastDateSMSTo").val(), subjectsms: t.find("#ddl_TitleSMS").val(), AddressId: getHierarchySelectedValue("divCustomerForSMSAddress", e.container), barcode: h, productname: p, productcode: v, categoryid: getHierarchySelectedValue("div_Category", e.container), PaymenytLastFrom: t.find("#txt_s_PaymenytLastFrom").val(), PaymenytLastTo: t.find("#txt_s_PaymenytLastTo").val(), PaymentAmountFrom: t.find("#txt_s_PaymentAmountFrom").val(), PaymentAmountTo: t.find("#txt_s_PaymentAmountTo").val(), BuyAmountFrom: t.find("#txt_s_BuyAmountFrom").val(), BuyAmountTo: t.find("#txt_s_BuyAmountTo").val(), BuyIntroducerFrom: t.find("#txt_s_BuyIntroducerFrom").val(), BuyIntroducerTo: t.find("#txt_s_BuyIntroducerTo").val(), DebtFrom: t.find("#txt_s_DebtFrom").val(), DebtTo: t.find("#txt_s_DebtTo").val(), VocherBuyFrom: t.find("#txt_s_VocherBuyFrom").val(), VocherBuyTo: t.find("#txt_s_VocherBuyTo").val(), ChequeNotFrom: t.find("#txt_s_ChequeNotFrom").val(), ChequeNotTo: t.find("#txt_s_ChequeNotTo").val(), BuyLastFrom: t.find("#txt_s_BuytLastFrom").val(), BuyLastTo: t.find("#txt_s_BuytLastTo").val(), messageBody: m, messageHeader: "", Setname: false, title: t.find("#ddl_s_Title select").val(), paging: t.find("#txt_m_Page").val(), regDate: t.find("#btn_regDate").text().indexOf("شامل") != "-1" ? true : false, address: t.find("#btn_address").text().indexOf("شامل") != "-1" ? true : false, product: t.find("#btn_product").text().indexOf("شامل") != "-1" ? true : false, shop: t.find("#btn_shop").text().indexOf("شامل") != "-1" ? true : false, category: t.find("#btn_category").text().indexOf("شامل") != "-1" ? true : false, subject: t.find("#btn_subject").text().indexOf("شامل") != "-1" ? true : false, registerer: t.find("#btn_registerer").text().indexOf("شامل") != "-1" ? true : false, lastSentDate: t.find("#btn_lastSentDate").text().indexOf("شامل") != "-1" ? true : false, lastBuy: t.find("#lastBuyDate").text().indexOf("شامل") != "-1" ? true : false, registererId: t.find("#ddl_registerer").val(), email: d }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(b), type: "Post", url: getPath("Services/Customer.asmx/SendSMSForAll"), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d) }, error: function (e) { alert(e.responseText) } }) } function SendEmailForSelected(e) { var t = $("#" + e); var n = []; var r = t.find("[name='text1']").val(); var i = ""; t.find("ul[id*=txt_m_Body] li").each(function () { if ($(this).attr("name") == "name") i += "<%name%>"; else if ($(this).attr("name") == "family") i += "<%family%>"; else if ($(this).attr("name") == "amount") i += "<%amount%>"; else if ($(this).attr("name") == "voucherAmount") i += "<%voucherAmount%>"; else if ($(this).attr("name") == "text") i += $(this).find("a[name=content]").html(); else if ($(this).attr("name") == "title") i += "<%title%>" }); if ($(this).find("input[name='email']:checked").length > 0) { t.find("tr[id*=tr]").each(function () { var e = {}; var t = []; $(this).find("input[id*='cb_d_Mobile_']:checked").each(function () { if (!$(this).attr("checked")) t.push($(this).prop("id").split("_")[3]) }); e["listNumber"] = t; e["personid"] = $(this).prop("id").replace("tr", ""); e["family"] = $(this).find("label[name='Customername']").prop("id"); e["sex"] = $(this).find("label[name='Customername']").html().split(" ")[0]; n.push(e) }) } else { t.find("tr[id*=tr]").each(function () { var e = {}; var t = []; $(this).find("input[name='email']").each(function () { if (!$(this).prop("checked")) t.push($(this).attr("email")) }); if (t.length > 0) { e["listNumber"] = t; e["personid"] = $(this).prop("id").replace("tr", ""); e["family"] = $(this).find("[id='hd_customeramily']").val(); e["sex"] = $(this).find("span[id='" + e["personid"] + "']").html().split(" ")[0]; n.push(e) } }) } if (n.length == 0) { translate("selectCustomers"); return } var s = { header: n, messageBody: r, messageHeader: i, Setname: false, title: t.find("#ddl_s_Title select").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(s), type: "Post", url: getPath("Services/Customer.asmx/SendEmailForSelected"), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d) }, error: function (e) { alert(e.responseText) } }); return false } function SendEmailForAll(e) { var t = $("#" + e.container); if (t.find("#CustomerForSMSList").html() == "") { translate("selectCustomers"); return } var n = true; var r = t.find("#PageSize").val(); var i = 0; var s = 0; var o = "", u = "", a = "", f = "", l = "", c = "", h = "", p = "", d = "", v = "", m = ""; t.find("ul[id*=txt_m_Body] li").each(function () { if ($(this).prop("name") == "name") m += "<%name%>"; else if ($(this).attr("name") == "family") m += "<%family%>"; else if ($(this).attr("name") == "amount") m += "<%amount%>"; else if ($(this).attr("name") == "voucherAmount") m += "<%voucherAmount%>"; else if ($(this).attr("name") == "text") m += $(this).find("a[name=content]").html(); else if ($(this).attr("name") == "title") m += "<%title%>" }); var g = t.find("#SearchBy").val(); if (g == "Code") { o = t.find("#CustomerForSMStxtSearch").val() } else if (g == "Name") { u = t.find("#CustomerForSMStxtSearch").val() } else if (g == "RegName") { a = t.find("#CustomerForSMStxtSearch").val() } else if (g == "IntroducerName") { f = t.find("#CustomerForSMStxtSearch").val() } else if (g == "Mobile") { l = t.find("#CustomerForSMStxtSearch").val() } else if (g == "Phone") { c = t.find("#CustomerForSMStxtSearch").val() } var y = t.find("#ddl_d_SearchByProduct").val(); if (g == "Barcode") { h = t.find("#txt_s_Product").val() } else if (y == "Name") { p = t.find("#txt_s_Product").val() } else if (y == "Code") { v = t.find("#txt_s_Product").val() } else if (y == "Email") { d = t.find("#txt_s_Product").val() } var b = { skip: i, take: r, currentPage: s, first: n, sort: t.find("#ddl_s_Sort").val() + " " + t.find("#ddl_s_Sorting").val(), code: o, namefamily: u, introducer: f, registerername: a, Mobile: l, Phone: c, agefrom: t.find("#CustomerForSMSSearchAgeStart").val(), ageto: t.find("#CustomerForSMSSearchAgeEnd").val(), regdatefrom: t.find("#CustomerForSMSSearchRegDateStart").val(), regdateto: t.find("#CustomerForSMSSearchRegDateEnd").val(), gender: t.find("#ddl_s_Gender").val(), shopId: t.find("#ddl_s_Shop").val(), LastDateSMSFrom: t.find("#txt_LastDateSMSFrom").val(), LastDateSMSTo: t.find("#txt_LastDateSMSTo").val(), subjectsms: t.find("#ddl_TitleSMS").val(), AddressId: getHierarchySelectedValue("divCustomerForSMSAddress", e.container), barcode: h, productname: p, productcode: v, categoryid: getHierarchySelectedValue("div_Category", e.container), PaymenytLastFrom: t.find("#txt_s_PaymenytLastFrom").val(), PaymenytLastTo: t.find("#txt_s_PaymenytLastTo").val(), PaymentAmountFrom: t.find("#txt_s_PaymentAmountFrom").val(), PaymentAmountTo: t.find("#txt_s_PaymentAmountTo").val(), BuyAmountFrom: t.find("#txt_s_BuyAmountFrom").val(), BuyAmountTo: t.find("#txt_s_BuyAmountTo").val(), BuyIntroducerFrom: t.find("#txt_s_BuyIntroducerFrom").val(), BuyIntroducerTo: t.find("#txt_s_BuyIntroducerTo").val(), DebtFrom: t.find("#txt_s_DebtFrom").val(), DebtTo: t.find("#txt_s_DebtTo").val(), VocherBuyFrom: t.find("#txt_s_VocherBuyFrom").val(), VocherBuyTo: t.find("#txt_s_VocherBuyTo").val(), ChequeNotFrom: t.find("#txt_s_ChequeNotFrom").val(), ChequeNotTo: t.find("#txt_s_ChequeNotTo").val(), BuyLastFrom: t.find("#txt_s_BuytLastFrom").val(), BuyLastTo: t.find("#txt_s_BuytLastTo").val(), messageBody: m, messageHeader: "", Setname: false, title: t.find("#ddl_s_Title select").val(), paging: "", regDate: t.find("#btn_regDate").text().indexOf("شامل") != "-1" ? true : false, address: t.find("#btn_address").text().indexOf("شامل") != "-1" ? true : false, product: t.find("#btn_product").text().indexOf("شامل") != "-1" ? true : false, shop: t.find("#btn_shop").text().indexOf("شامل") != "-1" ? true : false, category: t.find("#btn_category").text().indexOf("شامل") != "-1" ? true : false, subject: t.find("#btn_subject").text().indexOf("شامل") != "-1" ? true : false, registerer: t.find("#btn_registerer").text().indexOf("شامل") != "-1" ? true : false, lastSentDate: t.find("#btn_lastSentDate").text().indexOf("شامل") != "-1" ? true : false, lastBuy: t.find("#lastBuyDate").text().indexOf("شامل") != "-1" ? true : false, registererId: t.find("#ddl_registerer").val(), email: d }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(b), type: "Post", url: getPath("Services/Customer.asmx/SendEmailForAll"), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d) }, error: function (e) { alert(e.responseText) } }) } function loadAllListSMS(e, t) { sortid = "Date Desc"; if (t) { var n = $("#" + e); getSMSList({ container: e }); n.find("#txt_s_SendDateFrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { n.find("#txt_s_SendDateTo").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); bindItemsForSelectCombo({ servicename: "Customer", methodname: "GetSmsTitles", headertext: "انتخاب موضوع", id: "ddl_s_Title", container: e }); aComplete({ methodname: "GetCompletionListByCustomerName", servicename: "AtuoComplete", id: "txt_customerSms", container: e, minlength: 2, autofocus: false, limit: 20, boxId: "txt_customerSms", fname: customerOnSelect }); n.find("#txt_s_SendDateTo").datepicker({ changeMonth: true, changeYear: true }); n.find("#div_customerSms").removeClass("invisible"); n.find("#PageSize").off().on("change", function () { getSMSList({ container: e }) }); n.find("#btn_Search").button({ icons: { primary: "ui-icon-search"} }).unbind("click").click(function () { getSMSList({ container: e }) }); n.find("#btn_checkStatus").button().unbind("click").click(function () { checkSmsStatus({ container: e }) }); n.find("#btn_resendSms").button().unbind("click").click(function () { resendSms(e) }) } } function loadListSMS(e, t, n) { sortid = "Date Desc"; if (n) { var r = $("#" + t); getSMSList({ container: t, id: e }); r.find("#txt_s_SendDateFrom").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { r.find("#txt_s_SendDateTo").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); bindItemsForSelectCombo({ servicename: "Customer", methodname: "GetSmsTitles", headertext: "انتخاب موضوع", id: "ddl_s_Title", container: t }); r.find("#div_customerSms").addClass("invisible"); r.find("#txt_s_SendDateTo").datepicker({ changeMonth: true, changeYear: true }); r.find("#btn_resendSms").button().unbind("click").click(function () { resendSms(t) }); r.find("#PageSize").off().on("change", function () { getSMSList({ container: t, id: e }) }); r.find("#btn_Search").button({ icons: { primary: "ui-icon-search"} }).unbind("click").click(function () { getSMSList({ container: t, id: e }) }); r.find("#btn_checkStatus").button().unbind("click").click(function () { checkSmsStatus({ container: t, id: e }) }) } } function resendSms(e) { var t = $("#" + e); var n = []; t.find("#SMSList").find("input:checkbox").each(function () { if (this.checked == true) n.push($(this).parents("tr").attr("id").replace("tr", "")) }); var r = { messageId: n }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(r), type: "Post", url: getPath("Services/Customer.asmx/ResendSms"), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function getSMSList(e) { var t = $("#" + e.container); var n = true; var r = t.find("#PageSize").val(); var i = 0; var s = 0; var o = { skip: i, take: r, currentPage: s, first: n, sort: sortid, id: e.id != undefined ? e.id : "", title: t.find("#ddl_s_Title").val(), body: t.find("#txt_s_Body").val(), datefrom: t.find("#txt_s_SendDateFrom").val(), dateto: t.find("#txt_s_SendDateTo").val(), status: t.find("#txt_smsStatus").val(), mobile: t.find("#txt_mobileSms").val(), customerCode: t.find("#txt_customerSms").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(o), type: "Post", url: getPath("Services/Customer.asmx/GetListSMS"), success: function (r) { if (!isAuthenticated(r)) return; var i = getSMSListgetOptionsFrom(r.d.count, e); t.find("#paging").pagination(r.d.count, i); getSMSListpageselectCallback(0, r, e, n) }, error: function (e) { alert(e.responseText) } }) } function checkSmsStatus(e) { var t = $("#" + e.container); var n = { id: e.id != undefined ? e.id : "", title: t.find("#ddl_s_Title").val(), body: t.find("#txt_s_Body").val(), datefrom: t.find("#txt_s_SendDateFrom").val(), dateto: t.find("#txt_s_SendDateTo").val(), status: t.find("#txt_smsStatus").val(), mobile: t.find("#txt_mobileSms").val(), customerCode: t.find("#txt_customerSms").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(n), type: "Post", url: getPath("Services/Customer.asmx/CheckSmsStatus"), success: function (t) { if (!isAuthenticated(t)) return; getSMSList({ container: e.container, id: e.id }) }, error: function (e) { alert(e.responseText) } }) } function getSMSListgetOptionsFrom(e, t) { var n = $("#" + t.container); var r = { callback: getSMSListpageselectCallback }; n.find("input:text").each(function () { r[this.name] = this.className.match(/numeric/) ? parseInt(this.value) : this.value }); r.prev_show_always = false; r.next_show_always = false; if (e < n.find("#PageSize").val()) n.find("#PageSize").css("display", "none"); else { n.find("#PageSize").css("display", "inline") } r.items_per_page = n.find("#PageSize").val(); r.prev_text = "قبلی"; r.next_text = "بعدی"; r.container = t; return r } function buildgetSMSList(jq, pageoption) { var $con = $("#" + pageoption.container); jq = jq.d.results; var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; if (List != null) { for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.MessageId + "'>" + "<td width='10%' date='" + val.Date + "' class='dateLong'></td>" + "<td width='10%'>" + val.Title + "</td>" + "<td width='25%'>" + val.Body + "</td>" + "<td width='5%'>" + val.Length + "</td>" + "<td width='10%'>" + val.Number + "</td>" + "<td width='10%'>" + val.Name + " " + val.Family + "</td>" + "<td width='10%'>" + val.cName + " " + val.cFamily + "</td>" + "<td width='15%' style='background-color:" + (val.Status == "SentToMobile" ? "#B9F43E" : "#ED6912") + ";'><span>" + val.Status + "</span></td>" + "<td width='5%'><input type='checkbox' name='selectsms'></input></td>" + "</tr>" } } $con.find("#SMSList").html(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }) } function getSMSListpageselectCallback(e, t, n, r) { var i = $("#" + n.container); if (r) { buildgetSMSList(t, n) } else { r = false; var s = i.find("#PageSize").val(); var o = ""; var u = s; var a = e == 0 ? 0 : e * u; var f = { skip: a, take: u, currentPage: e, first: r, sort: sortid, id: n.id != undefined ? n.id : "", title: i.find("#ddl_s_Title").val(), body: i.find("#txt_s_Body").val(), datefrom: i.find("#txt_s_SendDateFrom").val(), dateto: i.find("#txt_s_SendDateTo").val(), status: i.find("#txt_smsStatus").val(), mobile: i.find("#txt_mobileSms").val(), customerCode: i.find("#txt_customerSms").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(f), type: "Post", url: getPath("Services/Customer.asmx/GetListSMS"), success: function (e) { if (!isAuthenticated(e)) return; buildgetSMSList(e, n) }, error: function (e) { alert(e.responseText) } }); return false } Sort(getSMSList, n) } function loadBank(e, t) { if (t) { bindXmlDropDownData({ id: "Bank_Name", container: e, path: "Counter/BankTitle", canmodify: true, istext: false, headertext: "انتخاب بانک ", css: "selectsmall " }) } } function loadOrderType(e, t) { if (t) { bindRawDropDownData({ id: "divOrderType", container: e, path: "orderType", canmodify: true, istext: false, headertext: "orderType", css: "selectsmall " }) } } function loadSellChart(e, t) { if (t) { loadChart(t, e, true, { onLoad: true }) } } function loadBuyChart(e, t) { if (t) { loadChart(t, e, false, { onLoad: true }) } } function loadCustomerChart(e, t, n) { var r = $("#" + t); if (n) { r.find("#hd_d_PersonId").val(e); loadChart(n, t, true, { onLoad: true }) } } function loadChart(e, t, n, r) { function l(e, t) { var n = $("#" + e); var r = "", i = "", s = "", o = "", u = "", a = "", f = "", l = "", c = ""; var h = "", p = "", d = ""; if (n.find("#moreFilter").is(":visible")) { var v = n.find("#ddl_d_SearchBy1").val(); if (v != "") { if (v == "Code") { i = n.find("#txtSearch1").val() } if (v == "Name") { r = n.find("#txtSearch1").val() } if (v == "EmployeeId") { s = n.find("#txtSearch1").val() } if (v == "EmployeeName") { o = n.find("#txtSearch1").val() } if (v == "Shop") { u = n.find("#txtSearch1").val() } } var v = n.find("#ddl_d_SearchBy2").val(); if (v != "") { if (v == "InvoiceId") { a = n.find("#txtSearch2").val() } if (v == "ProductId") { f = n.find("#txtSearch2").val() } if (v == "ProductName") { l = n.find("#txtSearch2").val() } if (v == "Barcode") { c = n.find("#txtSearch2").val() } } h = n.find("#txt_s_PriceFrom").val(); p = n.find("#txt_s_PriceTo").val(); d = getHierarchySelectedValue("hr_s_Category", e) } var m = ""; if (n.find("#Checkbox1" + e).prop("checked") && n.find("#Checkbox2" + e).prop("checked")) m = ""; else if (!n.find("#Checkbox1" + e).prop("checked") && n.find("#Checkbox2" + e).prop("checked")) m = false; else if (n.find("#Checkbox1" + e).prop("checked") && !n.find("#Checkbox2" + e).prop("checked")) m = true; var g = { Datetype: n.find("#ddl_d_GroupBy").val(), supplierid: n.find("#hd_d_PersonId").val(), IsClient: t, SupplierName: r, code: i, EmployeeId: s, EmployeeName: o, Shop: u, InvoiceId: a, ProductId: f, ProductName: l, Barcode: c, InvoiceDateStart: n.find("#txt_s_InvoiceMonthStart").val() + "/" + n.find("#txt_s_InvoiceDayStart").val(), InvoiceDateEnd: n.find("#txt_s_InvoiceMonthEnd").val() + "/" + n.find("#txt_s_InvoiceDayEnd").val(), InvoiceYearStart: n.find("#txt_s_InvoiceYearStart").val(), InvoiceYearEnd: n.find("#txt_s_InvoiceYearEnd").val(), PriceFrom: h, PriceTo: p, Order: m, PreOrder: n.find("#Checkbox3" + e).length > 0 ? n.find("#Checkbox3" + e).prop("checked") : "", Broken: n.find("#Checkbox4" + e).length > 0 ? n.find("#Checkbox4" + e).prop("checked") : "", CategoryId: d, shopid: $("#userDefault").find("#ddl_s_Branch").val(), counterid: $("#userDefault").find("#ddl_m_Counter").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(g), type: "Post", url: getPath("Services/Charts.asmx/GetSaleChart"), success: function (e) { var t = [7, 6, 9, 14, 18, 21, 25, 26, 23, 18, 13, 9]; if (!isAuthenticated(e)) return; if (e.d != null) { var r = n.find("#ddl_d_DisplayBy").val(); var i = "right"; var s = []; var o = []; var u = []; var a = []; if (e.d.name == "Month") o = PERSIAN_MONTHS; else if (e.d.name == "Season") o = ["بهار", "تابستان", "پاییز", "زمستان"]; $.each(e.d.data, function () { u.push(this.amount); if (e.d.name != "Month" && e.d.name != "Season" && e.d.name != "Week" && e.d.name != "Day") { o.push(this.name) } if (e.d.name == "Year") { o = this.name } a.push(this.quantity); var t = { name: this.name + " مبلغ", type: "column", data: this.amount }; var r = { name: this.name + " تعداد", type: "spline", yAxis: 1, data: this.quantity }; if (n.find("#ddl_d_DisplayBy").val() == "Amount") s.push(t); else if (n.find("#ddl_d_DisplayBy").val() == "Count") s.push(r); else { s.push(t); s.push(r) } }); if (s.length > 0) { n.find("#Div_SaleChart").highcharts({ title: { text: " ", x: -20 }, credits: { enabled: false }, colors: ["#058DC7", "#50B432", "#ED561B", "#DDDF00", "#24CBE5", "#64E572", "#FF9655", "#FFF263", "#6AF9C4"], chart: { backgroundColor: { linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 }, stops: [[0, "rgb(255, 255, 255)"], [1, "rgb(240, 240, 255)"]] }, plotBackgroundColor: "rgba(255, 255, 255, .9)", plotShadow: true, plotBorderWidth: 1 }, yAxis: [{ labels: { style: { color: "#89A54E"} }, title: { text: "مبلغ", style: { color: "#89A54E"}} }, { title: { text: "تعداد", style: { color: "#4572A7"} }, labels: { style: { color: "#4572A7"} }, opposite: true}], xAxis: { categories: o, labels: { rotation: -35, align: "right", style: { fontSize: "13px", fontFamily: "Verdana, sans-serif"}} }, series: s }) } else { $.plot(n.find("#Div_SaleChart"), [[0, 0]], { xaxis: { tickDecimals: "number" }, yaxes: [{ min: 0 }, { alignTicksWithAxis: i == "right" ? 1 : null, position: i}], legend: { position: "sw"} }) } } else { $.plot(n.find("#Div_SaleChart"), [[0, 0]], { bars: { show: false, barWidth: .5 }, xaxis: { tickDecimals: "number"} }) } }, error: function (e) { alert(e.responseText) } }); return false } var i = $("#" + t); if (e) { i.find("#moreFilter").slideUp("fast"); i.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); i.find("#moreFilter").slideToggle(function () { }) }); ChangeCheckBoxGroupName("Check", t); var s = " <option value=''>روز </option>", o = "<option value=''>ماه </option>", u = " <option value=''>سال </option>"; var a = new Date; a = a.getFullYear() * 1 - 621 + 1; for (var f = 1; f < 32; f++) { s += " <option value='" + f + "'>" + f + "</option>"; if (f < 13) o += " <option value='" + f + "'>" + f + "</option>" } for (var f = 1388; f < a; f++) { u += " <option value='" + f + "'>" + f + "</option>" } i.find("#txt_s_InvoiceDayStart").html(s); i.find("#txt_s_InvoiceDayStart").val("1"); i.find("#txt_s_InvoiceMonthStart").html(o); i.find("#txt_s_InvoiceMonthStart").val("1"); i.find("#txt_s_InvoiceYearStart").html(u); i.find("#txt_s_InvoiceYearStart").val("1388"); i.find("#txt_s_InvoiceDayEnd").html(s); i.find("#txt_s_InvoiceDayEnd").val("29"); i.find("#txt_s_InvoiceMonthEnd").html(o); i.find("#txt_s_InvoiceMonthEnd").val("12"); i.find("#txt_s_InvoiceYearEnd").html(u); i.find("#txt_s_InvoiceYearEnd").val(a * 1 - 1); i.find("#ddl_d_GroupBy").val("Month"); bindHierarchyData({ id: "hr_s_Category", table: "category", container: t }); i.find("#btnSearch").button({ icons: { primary: "ui-icon-search"} }).unbind("click").click(function () { l(t, n) }); if (r.onLoad) { l(t, n) } } } function bindXmlDropDownData(e) { var t = "انتخاب"; if (e.headertext != undefined) t = e.headertext; if (e.container != undefined) var n = $("#" + e.container).find("#" + e.id); else var n = $("#" + e.id); var r = false; if (e.canmodify != undefined) r = e.canmodify; var i = "selectHierarchy"; if (e.canmodify) i = "selectsmall validate"; if (e.css != undefined) i = e.css; var s = true; if (e.async != undefined) s = e.async; if (r) { n.append("<a  href='#'> <span title='باز' class='hExpand unit HierarchyImage ui-icon ui-icon-circle-triangle-s'  ></span></a>" + "<select   id='hierarchyAddress' class=' " + i + " ' name='Combo' ></select>" + "<div  class='resultBar'></div><div  class='editBox invisible' style='padding-top:20px;'>  " + "<input   type='text' class='inputText inputW50'  />" + "<a  class='hAdd' href='#'> <span title='اضافه' class=' unit  ui-icon ui-icon-plusthick'></span></a>" + "<a  class='hDelete' href='#'> <span title='حذف' class=' unit  ui-icon ui-icon-trash'></span></a>" + "<a  class='hEdit' href='#'><span title='ویرایش' class=' unit  ui-icon ui-icon-pencil'></span></a></div>") } else { n.append("<select   id='hierarchyAddress' class=' " + i + "' name='Combo' ></select>") } var o = n.find("select"); n.find(".hExpand").unbind().bind("click", function () { if ($(this).hasClass("ui-icon-circle-triangle-s")) $(this).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n"); else if ($(this).hasClass("ui-icon-circle-triangle-n")) $(this).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s"); n.find(".editBox").toggle() }); n.find(".hDelete").unbind().bind("click", function () { DeleteXml_onclick(n, e) }); n.find(".hAdd").unbind().bind("click", function () { AddXml_onclick(n, e) }); n.find(".hEdit").unbind().bind("click", function () { UpdateXml_onclick(n, e) }); ajHierarchy = $.ajax({ type: "POST", url: getPath("Services/XmlDropDown.asmx/GetComboItems"), async: s, data: "{path: '" + e.path + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (!isAuthenticated(t)) return; BindXmlOptionsHtml(t, o, e) } }) } function BindXmlOptionsHtml(response, $hrSelect, options) { var Details = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; $hrSelect.removeOption(/./).addOption("", options.headertext); for (var j = 0; j < Details.length; j++) { var val = Details[0, j]; var text = val.name; if (options.istext) var value = val.name; else var value = val.id; $hrSelect.addOption(value, text, false) } } function AddXml_onclick(e, t) { $.ajax({ type: "POST", url: getPath("Services/XmlDropDown.asmx/Add"), data: "{value: '" + e.find(".inputText").val() + "', path: '" + t.path + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (n) { if (!isAuthenticated(n)) return; BindXmlOptionsHtml(n, e.find("select"), t); e.find(".inputText").val("") } }) } function UpdateXml_onclick(e, t) { $.ajax({ type: "POST", url: getPath("Services/XmlDropDown.asmx/Update"), data: "{id:'" + e.find("select").val() + "',value: '" + e.find(".inputText").val() + "', path: '" + t.path + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (n) { if (!isAuthenticated(n)) return; BindXmlOptionsHtml(n, e.find("select"), t); e.find(".inputText").val("") } }) } function DeleteXml_onclick(e, t) { $.ajax({ type: "POST", url: getPath("Services/XmlDropDown.asmx/Delete"), data: "{id: '" + e.find("select").val() + "', path: '" + t.path + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (n) { if (!isAuthenticated(n)) return; BindXmlOptionsHtml(n, e.find("select"), t); e.find(".inputText").val("") } }) } function bindRawDropDownData(e) { var t = "انتخاب"; if (e.headertext != undefined) t = e.headertext; if (e.container != undefined) var n = $("#" + e.container).find("#" + e.id); else var n = $("#" + e.id); var r = false; if (e.canmodify != undefined) r = e.canmodify; var i = "selectHierarchy"; if (e.canmodify) i = "selectsmall validate"; if (e.css != undefined) i = e.css; var s = true; if (e.async != undefined) s = e.async; if (r) { n.append("<a  href='#'> <span title='باز' class='hExpand unit HierarchyImage ui-icon ui-icon-circle-triangle-s'  ></span></a>" + "<select   id='hierarchyAddress' class=' " + i + " ' name='Combo' ></select>" + "<div  class='resultBar'></div><div  class='editBox invisible' style='padding-top:20px;'>  " + "<input   type='text' class='inputText inputW50'  />" + "<a  class='hAdd' href='#'> <span title='اضافه' class=' unit  ui-icon ui-icon-plusthick'></span></a>" + "<a  class='hDelete' href='#'> <span title='حذف' class=' unit  ui-icon ui-icon-trash'></span></a>" + "<a  class='hEdit' href='#'><span title='ویرایش' class=' unit  ui-icon ui-icon-pencil'></span></a></div>") } else { n.append("<select   id='hierarchyAddress' class=' " + i + "' name='Combo' ></select>") } var o = n.find("select"); n.find(".hExpand").unbind().bind("click", function () { if ($(this).hasClass("ui-icon-circle-triangle-s")) $(this).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n"); else if ($(this).hasClass("ui-icon-circle-triangle-n")) $(this).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s"); n.find(".editBox").toggle() }); n.find(".hDelete").unbind().bind("click", function () { DeleteRaw_onclick(n, e) }); n.find(".hAdd").unbind().bind("click", function () { AddRaw_onclick(n, e) }); n.find(".hEdit").unbind().bind("click", function () { UpdateRaw_onclick(n, e) }); ajHierarchy = $.ajax({ type: "POST", url: getPath("Services/XmlDropDown.asmx/GetComboItemsRaw"), async: s, data: "{table: '" + e.path + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (!isAuthenticated(t)) return; BindRawOptionsHtml(t, o, e) } }) } function BindRawOptionsHtml(response, $hrSelect, options) { var Details = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; $hrSelect.removeOption(/./).addOption("", options.headertext); if (Details.length < 1) return; for (var j = 0; j < Details.length; j++) { var val = Details[0, j]; var text = val.value; if (options.istext) var value = val.value; else var value = val.id; $hrSelect.addOption(value, text, false) } } function AddRaw_onclick(e, t) { $.ajax({ type: "POST", url: getPath("Services/XmlDropDown.asmx/AddRaw"), data: "{value: '" + e.find(".inputText").val() + "', table: '" + t.path + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (n) { if (!isAuthenticated(n)) return; BindRawOptionsHtml(n, e.find("select"), t); e.find(".inputText").val("") } }) } function UpdateRaw_onclick(e, t) { $.ajax({ type: "POST", url: getPath("Services/XmlDropDown.asmx/UpdateRaw"), data: "{id:'" + e.find("select").val() + "',value: '" + e.find(".inputText").val() + "', table: '" + t.path + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (n) { if (!isAuthenticated(n)) return; BindRawOptionsHtml(n, e.find("select"), t); e.find(".inputText").val("") } }) } function DeleteRaw_onclick(e, t) { $.ajax({ type: "POST", url: getPath("Services/XmlDropDown.asmx/DeleteRaw"), data: "{id: '" + e.find("select").val() + "', table: '" + t.path + "'}", contentType: "application/json; charset=utf-8", dataType: "json", success: function (n) { if (!isAuthenticated(n)) return; BindRawOptionsHtml(n, e.find("select"), t); e.find(".inputText").val("") } }) } function ResetPage(e) { var t = $("#" + e); t.find("input:text").val(""); t.find(".inputTip.tipOk").css({ display: "none", visibility: "hidden", opacity: "0" }) } function loadEmployeeSalary(e, t) { var n = $("#" + e); sortid = "OrderHeaderId desc"; if (t) { n.find("#moreFilter").slideUp("fast"); n.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); n.find("#divBasic").toggleClass("hidden"); n.find("#moreFilter").removeClass("invisible"); n.find("#moreFilter").slideToggle(function () { }) }); n.find("#txt_m_fromDate").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#txt_m_toDate").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#PageSize").off().on("change", function () { GetEmployeeSalaryList({ container: e }) }); n.find("#txt_m_toDate").datepicker({ changeMonth: true, changeYear: true }); n.find("#txt_m_fromDate_add").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#txt_m_toDate_add").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); bindItemsForSelectCombo({ async: false, methodname: "getEmployees", servicename: "EmployeeService", id: "ddl_m_employee", container: e, headertext: "انتخاب کارمند", selectedindex: 0 }); GetEmployeeSalaryList({ container: e }); n.find("#EmployeeAdvanceSearchbt").button({ icons: { primary: "ui-icon-search"} }).unbind().click(function () { GetEmployeeSalaryList({ container: e }) }); n.find("#btn_new").button({ icons: { primary: "ui-icon-plusthick"} }).unbind().click(function () { $("#dialogAddSalary").find("input, select").val(""); $("#dialogAddSalary").find("#btn_save").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll(n.find("#dialogAddSalary"))) AddEmployeeSalary("dialogAddSalary") }); bindItemsForSelectCombo({ async: false, methodname: "getEmployees", servicename: "EmployeeService", id: "ddl_m_employee_add", container: e, headertext: "انتخاب کارمند" }); $("#dialogAddSalary").dialog(open).dialog({ width: 500, modal: true }) }) } } function loadSocialSecurity(e, t) { var n = $("#" + e); sortid = "OrderHeaderId desc"; if (t) { n.find("#moreFilter").slideUp("fast", function () { GetSocialSecurityList({ container: e }) }); n.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); n.find("#divBasic").toggleClass("hidden"); n.find("#moreFilter").removeClass("invisible"); n.find("#moreFilter").slideToggle(function () { }) }); n.find("#txt_m_fromDate").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#txt_m_toDate").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#PageSize").off().on("change", function () { GetSocialSecurityList({ container: e }) }); n.find("#txt_m_toDate").datepicker({ changeMonth: true, changeYear: true }); bindItemsForSelectCombo({ async: false, methodname: "getEmployees", servicename: "EmployeeService", id: "ddl_m_employee", container: e, headertext: "انتخاب کارمند", selectedindex: 0 }); bindXmlDropDownData({ id: "Month_Name", container: e, path: "Counter/MonthTitle", canmodify: false, istext: false, headertext: "انتخاب ماه" }); bindXmlDropDownData({ async: false, id: "Month_Name_Add", container: e, path: "Counter/MonthTitle", canmodify: true, istext: false, headertext: "انتخاب ماه" }); n.find("#SocialAdvanceSearchbt").button({ icons: { primary: "ui-icon-search"} }).unbind().click(function () { GetSocialSecurityList({ container: e }) }); n.find("#btn_new").button({ icons: { primary: "ui-icon-plusthick"} }).unbind().click(function () { $("#dialogAddSocial").find("input, select").val(""); $("#dialogAddSocial").find("#btn_save").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll(n.find("#dialogAddSocial"))) AddSocialSecurity("dialogAddSocial") }); bindItemsForSelectCombo({ async: false, methodname: "getEmployees", servicename: "EmployeeService", id: "ddl_social_employee_add", container: e, headertext: "انتخاب کارمند" }); $("#dialogAddSocial").dialog(open).dialog({ width: 500 }) }) } } function loadExpense(e, t) { var n = $("#" + e); sortid = "OrderHeaderId desc"; if (t) { n.find("#moreFilter").slideUp("fast", function () { GetExpenseList({ container: e }) }); n.find(".toggle-more-filters").click(function () { $(this).toggleClass("open"); n.find("#divBasic").toggleClass("hidden"); n.find("#moreFilter").removeClass("invisible"); n.find("#moreFilter").slideToggle(function () { }) }); n.find("#txt_m_fromDate").datepicker({ changeMonth: true, changeYear: true, onSelect: function (e, t) { $("#txt_m_toDate").datepicker("option", "minDate", new JalaliDate(t["selectedYear"], t["selectedMonth"], t["selectedDay"])) } }); n.find("#PageSize").off().on("change", function () { GetExpenseList({ container: e }) }); n.find("#txt_m_toDate").datepicker({ changeMonth: true, changeYear: true }); bindHierarchyData({ id: "divExpenseCategory", container: e, table: "ExpenseCategory", canmodify: false }); n.find("#btn_search").button({ icons: { primary: "ui-icon-search"} }).unbind().click(function () { GetExpenseList({ container: e }) }); n.find("#ExpenseAdvanceSearchbt").button({ icons: { primary: "ui-icon-search"} }).unbind().click(function () { GetExpenseList({ container: e }) }); n.find("#btn_new").button({ icons: { primary: "ui-icon-plusthick"} }).unbind().click(function () { $("#dialogAddExpense").find("input, select").val(""); $("#dialogAddExpense").find("#btn_save").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll(n.find("#dialogAddExpense"))) AddExpense("dialogAddExpense") }); bindHierarchyData({ id: "divExpenseCategoryAdd", container: "dialogAddExpense", table: "ExpenseCategory", canmodify: true, css: "selectsmall1 required validate" }); $("#dialogAddExpense").dialog(open).dialog({ width: 500 }) }) } } function loadTotalExpense(e, t) { var n = $("#" + e); if (t) { bindItemsForSelectCombo({ async: false, methodname: "getEmployees", servicename: "EmployeeService", id: "ddlEmployee", container: e, headertext: "انتخاب کارمند", selectedindex: 0 }); n.find("[id=txtDateFrom]").datepicker({ changeMonth: true, changeYear: true }); n.find("[id=txtDateTo]").datepicker({ changeMonth: true, changeYear: true }); n.find("[id=btn_search]").button({ icons: { primary: "ui-icon-search"} }).unbind().click(function () { GetTotalExpenses(n.find("[id=ddlEmployee]").val(), n.find("[id=txtDateFrom]").val(), n.find("[id=txtDateTo]").val(), $("[id=userDefault]").find("[id=ddl_s_Branch]").val(), e) }) } } function GetTotalExpenses(e, t, n, r, i) { var s = $("#" + i); var o = { registererId: e, dateFrom: t, dateTo: n, shopId: r }; $.ajax({ type: "POST", data: JSON.stringify(o), url: getPath("Services/Order.asmx/GetTotalExpenses"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isDone) { s.find("[id=txtTotalExpense]").val(e.d.totalExpense); s.find("[id=txtTotalSocialSecurity]").val(e.d.totalSocialSecurity); s.find("[id=txtTotalEmployeeSalary]").val(e.d.totalSalary); s.find("[id=txtTotalSale]").val(e.d.totalSale); s.find("[id=txtTotalBuy]").val(e.d.totalBuy); s.find("[id=txtTotalReceive]").val(e.d.totalReceiveCash * 1 + e.d.totalReceiveCheque * 1 + e.d.totalReceiveVoucher * 1); s.find("[id=txtTotalPay]").val(e.d.totalPayCash * 1 + e.d.totalPayCheque * 1 + e.d.totalPayVoucher * 1); s.find("[id=txtTotalAmount]").val(e.d.totalExpense * 1 + e.d.totalSocialSecurity * 1 + e.d.totalSalary * 1); s.find("[id=txtTotalClearSale]").val(e.d.totalSale * 1 - e.d.totalBuy * 1); s.find("[id=txtTotalClearReceive]").val(s.find("[id=txtTotalReceive]").val() * 1 - s.find("[id=txtTotalPay]").val() * 1); s.find("[id=txtNetProfit]").val(s.find("[id=txtTotalClearSale]").val() * 1 - s.find("[id=txtTotalAmount]").val() * 1) } else translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function AddEmployeeSalary(e) { var t = $("#" + e); var n = { employeeId: t.find("#ddl_m_employee_add").val(), fromDate: t.find("#" + e + "txt_m_fromDate_add").val(), toDate: t.find("#" + e + "txt_m_toDate_add").val(), fixSalary: t.find("#txt_m_fixSalary_add").val(), commission: t.find("#txt_m_commission_add").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), currencyId: $("#userDefault").find("#ddl_m_Currency").val(), description: t.find("#txt_salary_description_add").val(), shopId: $("#userDefault").find("#ddl_s_Branch").val(), date: $("#userDefault").find("#txt_s_Date").val() }; $.ajax({ type: "POST", data: JSON.stringify(n), url: getPath("Services/Order.asmx/AddEmployeeSalary"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function AddSocialSecurity(e) { var t = $("#" + e); var n = { employeeId: t.find("#ddl_social_employee_add").val(), month: t.find("#Month_Name_Add option:selected").val(), amount: t.find("#txt_social_amount_add").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), currencyId: $("#userDefault").find("#ddl_m_Currency").val(), description: t.find("#txt_social_description_add").val(), shopId: $("#userDefault").find("#ddl_s_Branch").val(), date: $("#userDefault").find("#txt_s_Date").val() }; $.ajax({ type: "POST", data: JSON.stringify(n), url: getPath("Services/Order.asmx/AddSocialSecurity"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; alert("اطلاعات ثبت شد.") }, error: function (e) { alert(e.responseText) } }) } function AddExpense(e) { var t = $("#" + e); var n = { expenseCategoryId: getHierarchySelectedValue("divExpenseCategoryAdd", e), amount: t.find("#txt_m_amount_add").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), currencyId: $("#userDefault").find("#ddl_m_Currency").val(), description: t.find("#txt_m_description_add").val(), shopId: $("#userDefault").find("#ddl_s_Branch").val(), date: $("#userDefault").find("#txt_s_Date").val() }; $.ajax({ type: "POST", data: JSON.stringify(n), url: getPath("Services/Order.asmx/AddExpense"), contentType: "application/json; charset=utf-8", success: function (e) { if (!isAuthenticated(e)) return; alert("اطلاعات ثبت شد.") }, error: function (e) { alert(e.responseText) } }) } function GetEmployeeSalaryList(e) { var t = $("#" + e.container); var n = true; var r = t.find("#PageSize").val(); var i = 0; var s = 0; var o = "", u = "", a = ""; if (!t.find("#moreFilter").is(":visible")) { var f = t.find("#ddl_m_searchBy").val(); if (f == "employee") { o = t.find("#EmployeetxtSearch").val() } if (f == "confirmer") { u = t.find("#EmployeetxtSearch").val() } if (f == "registerer") { a = t.find("#EmployeetxtSearch").val() } var l = { skip: i, take: r, currentPage: s, first: n, sort: sortid, employeeId: 0, employee: o, confirmer: u, registerer: a, counterId: $("#userDefault").find("#ddl_m_Counter").val(), fixSalaryFrom: "", fixSalaryTo: "", dateFrom: "", dateTo: "", isConfirmed: "", description: ""} } else var l = { skip: i, take: r, currentPage: s, first: n, sort: sortid, employeeId: t.find("#ddl_m_employee").val() != "" ? t.find("#ddl_m_employee").val() : 0, employee: "", confirmer: t.find("#txt_m_confirmer").val(), registerer: t.find("#txt_m_registerer").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), fixSalaryFrom: t.find("#txt_m_fixSalaryFrom").val(), fixSalaryTo: t.find("#txt_m_fixSalaryTo").val(), dateFrom: t.find("#txt_m_fromDate").val(), dateTo: t.find("#txt_m_toDate").val(), isConfirmed: t.find("#ddl_m_status").val(), description: t.find("#txt_m_description").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(l), type: "Post", url: getPath("Services/Order.asmx/GetEmployeeSalaryList"), success: function (r) { if (!isAuthenticated(r)) return; e["count"] = r.d.count; e["callBackName"] = employeepageselectCallback; var i = getPageOptions(e); t.find("#paging").pagination(r.d.count, i); employeepageselectCallback(0, r, e, n) }, error: function (e) { alert(e.responseText) } }) } function GetSocialSecurityList(e) { var t = $("#" + e.container); var n = true; var r = t.find("#PageSize").val(); var i = 0; var s = 0; var o = "", u = "", a = ""; if (!t.find("#moreFilter").is(":visible")) { var f = t.find("#ddl_m_searchBy").val(); if (f == "employee") { o = t.find("#EmployeetxtSearch").val() } if (f == "confirmer") { u = t.find("#EmployeetxtSearch").val() } if (f == "registerer") { a = t.find("#EmployeetxtSearch").val() } var l = { skip: i, take: r, currentPage: s, first: n, sort: sortid, employeeId: "", employee: o, confirmer: u, registerer: a, counterId: $("#userDefault").find("#ddl_m_Counter").val(), amountFrom: "", amountTo: "", dateFrom: "", dateTo: "", isConfirmed: "", description: "", month: ""} } else var l = { skip: i, take: r, currentPage: s, first: n, sort: sortid, employeeId: t.find("#ddl_m_employee").val() != "" ? t.find("#ddl_m_employee").val() : "", employee: "", confirmer: t.find("#txt_m_confirmer").val(), registerer: t.find("#txt_m_registerer").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), amountFrom: t.find("#txt_m_amountFrom").val(), amountTo: t.find("#txt_m_amountTo").val(), dateFrom: t.find("#txt_m_fromDate").val(), dateTo: t.find("#txt_m_toDate").val(), isConfirmed: t.find("#ddl_m_status").val(), description: t.find("#txt_m_description").val(), month: t.find("#Month_Name option:selected").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(l), type: "Post", url: getPath("Services/Order.asmx/GetSocialSecurityList"), success: function (r) { if (!isAuthenticated(r)) return; e["count"] = r.d.count; e["callBackName"] = socialsecuritypageselectCallback; var i = getPageOptions(e); t.find("#paging").pagination(r.d.count, i); socialsecuritypageselectCallback(0, r, e, n) }, error: function (e) { alert(e.responseText) } }) } function GetExpenseList(e) { var t = $("#" + e.container); var n = true; var r = t.find("#PageSize").val(); var i = 0; var s = 0; var o = "", u = ""; if (!t.find("#moreFilter").is(":visible")) { var a = t.find("#ddl_m_searchBy").val(); if (a == "confirmer") { o = t.find("#ExpensetxtSearch").val() } if (a == "registerer") { u = t.find("#ExpensetxtSearch").val() } var f = { skip: i, take: r, currentPage: s, first: n, sort: sortid, expenseCategory: "", amountFrom: "", amountTo: "", confirmer: o, registerer: u, counterId: $("#userDefault").find("#ddl_m_Counter").val(), dateFrom: "", dateTo: "", isConfirmed: "", description: ""} } else var f = { skip: i, take: r, currentPage: s, first: n, sort: sortid, expenseCategory: getHierarchySelectedValue("divExpenseCategory", e.container), amountFrom: t.find("#txt_m_AmountFrom").val(), amountTo: t.find("#txt_m_AmountTo").val(), dateFrom: t.find("#txt_m_fromDate").val(), dateTo: t.find("#txt_m_toDate").val(), registerer: t.find("#txt_m_registerer").val(), isConfirmed: t.find("#ddl_m_status").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), description: t.find("#txt_m_description").val(), confirmer: t.find("#txt_m_confirmer").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(f), type: "Post", url: getPath("Services/Order.asmx/GetExpenseList"), success: function (r) { if (!isAuthenticated(r)) return; e["count"] = r.d.count; e["callBackName"] = expensepageselectCallback; var i = getPageOptions(e); t.find("#paging").pagination(r.d.count, i); expensepageselectCallback(0, r, e, n) }, error: function (e) { alert(e.responseText) } }) } function buildEmployeeSalaryList(jq, pageoption) { var $con = $("#" + pageoption.container); total = jq.d; jq = jq.d.results; var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.OrderHeaderId + "'>" + "<td width='13%' id = 'td" + val.ClientId + "' name = 'employee'>" + val.EmployeeName + "</td>" + "<td width='10%' name = 'fixsalary'>" + "<span>" + val.FixSalary + "</span>" + " " + val.Currency + "</td> " + "<td width='8%' name = 'comission'>" + "<span>" + val.Commission + "</span>" + " " + val.Currency + "</td>" + "<td width='8%' name = 'fromDate'>" + val.FromDate + "</td>" + "<td width='8%' name = 'toDate'>" + val.ToDate + "</td>" + "<td width='8%' name = 'date'>" + val.Date + "</td>" + "<td width='8%' name = 'registerer'>" + val.RegistererName + "</td>" + "<td  width='5%'name = 'shop'>" + val.shop + "</td>" + "<td width='5%' name = 'counter'>" + val.counter + "</td>" + "<td width='10%' name = 'Description'>" + val.Description + "</td>" + "<td  width='8%'name = 'confirmer'>" + (val.ConfirmerName != null ? val.ConfirmerName : "<button id='btnSalaryConfirm'>تایید</button>") + "</td>" + "<td width='6%' id='edit'><button id='btnEditSalary'>ویرایش</button></td>" + "<td width='3%' id='delete'><button id='btnDeleteSalary'>حذف</button></td>" + "</tr>" } $con.find("#SalaryList").html(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("#txtTotalSalary").html(total.sumSalary); $con.find("#txtTotalCommision").html(total.sumComission); $con.find("#txtTotalRecieve").html(total.sumSalary * 1 + total.sumComission * 1); $con.find("[id=btnSalaryConfirm]").button({ icons: { primary: "ui-icon-check" }, text: false }).unbind().click(function () { ConfirmSalary($(this).parents("tr").prop("id").replace("tr", ""), pageoption.container, $(this)) }); $con.find("[id=btnEditSalary]").button({ icons: { primary: "ui-icon-pencil" }, text: false }).unbind().click(function () { var e = $(this); bindItemsForSelectCombo({ async: false, methodname: "getEmployees", servicename: "EmployeeService", id: "ddl_m_employee_add", container: pageoption.container, headertext: "انتخاب کارمند" }); $("#dialogAddSalary").find("#btn_save").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll($con.find("#dialogAddSalary"))) EditEmployeeSalary(e.parents("tr").prop("id").replace("tr", ""), "dialogAddSalary") }); $("#dialogAddSalary").dialog(open).dialog({ width: 500 }); BindItemsForEditSalary($(this).parents("tr"), "dialogAddSalary") }); $con.find("[id=btnDeleteSalary]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).unbind().click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) DeleteSalary($(this).parents("tr").prop("id").replace("tr", ""), pageoption.container, this); else return }) } function buildSocialSecurityList(jq, pageoption) { var $con = $("#" + pageoption.container); total = jq.d; jq = jq.d.results; var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; ItemList += "<tr id='tr" + val.OrderHeaderId + "'>" + "<td width='15%' id = 'td" + val.ClientId + "' name = 'employee'>" + val.EmployeeName + "</td>" + "<td width='10%' name = 'amount'>" + "<span>" + val.Amount + "</span>" + " " + val.Currency + "</td> " + "<td width='8%' name = 'month' id = '" + val.MonthId + "'>" + val.Month + "</td>" + "<td width='8%' name = 'date'>" + val.Date + "</td>" + "<td width='10%' name = 'registerer'>" + val.RegistererName + "</td>" + "<td width='8%' name = 'shop'>" + val.shop + "</td>" + "<td width='5%' name = 'counter'>" + val.counter + "</td>" + "<td width='12%' name = 'Description'>" + val.Description + "</td>" + "<td width='8%' name = 'confirmer'>" + (val.ConfirmerName != null ? val.ConfirmerName : "<button id='btnSocialConfirm'>تایید</button>") + "</td>" + "<td width='8%' id='edit'><button id='btnEditSocial'>ویرایش</button></td>" + "<td width='8%' id='delete'><button id='btnDeleteSocial'>حذف</button></td>" + "</tr>" } $con.find("#SocialList").html(ItemList).parent().tableScroll({ height: 380, width: contentwidth, flush: false }); $con.find("#txtTotalAmount").html(total.sumAmount); $con.find("[id=btnSocialConfirm]").button({ icons: { primary: "ui-icon-check" }, text: false }).unbind().click(function () { ConfirmSocialSecurity($(this).parents("tr").prop("id").replace("tr", ""), pageoption.container, $(this)) }); $con.find("[id=btnEditSocial]").button({ icons: { primary: "ui-icon-pencil" }, text: false }).unbind().click(function () { var e = $(this); bindItemsForSelectCombo({ async: false, methodname: "getEmployees", servicename: "EmployeeService", id: "ddl_social_employee_add", container: pageoption.container, headertext: "انتخاب کارمند" }); $("#dialogAddSocial").find("#btn_save").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll($con.find("#dialogAddSocial"))) EditSocialSecurity(e.parents("tr").prop("id").replace("tr", ""), "dialogAddSocial") }); $("#dialogAddSocial").dialog(open).dialog({ width: 500 }); BindItemsForEditSocial($(this).parents("tr"), "dialogAddSocial") }); $con.find("[id=btnDeleteSocial]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).unbind().click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) DeleteSocial($(this).parents("tr").prop("id").replace("tr", ""), pageoption.container, this); else return }) } function buildExpenseList(jq, pageoption) { var $con = $("#" + pageoption.container); var table = {}; var lstb = []; var lsth = []; if (jq.d.sumAmount != undefined) $con.find("#sumAmount").val(jq.d.sumAmount); jq = jq.d.results; lsth.push({ title: "گروه هزینه", sort: "ac_Expense.ac_ExpenseCategory.Expense", width: "12%" }); lsth.push({ title: "مبلغ", sort: "Amount", footer: $con.find("#sumAmount").val(), width: "12%" }); lsth.push({ title: "تاریخ ثبت", sort: "Date", width: "10%" }); lsth.push({ title: "توسط", sort: "p_Person.Family", width: "12%" }); lsth.push({ title: "شعبه", sort: "inv_Shop.Name", width: "10%" }); lsth.push({ title: "صندوق", sort: "ac_Expense.ac_Counter.Code", width: "10%" }); lsth.push({ title: "توضیحات", sort: "Description", width: "14%" }); lsth.push({ title: "تائید", sort: "ac_Expense.p_Person.Family", width: "10%" }); lsth.push({ title: "ویرایش/حذف", width: "10%" }); var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; trBody[0] = { trId: val.OrderHeaderId }; trBody[1] = { name: "expenseCategory", id: val.ExpenseCategoryId, html: val.ExpenseCategory, width: "12%" }; trBody[2] = { name: "amount", html: "<span>" + val.Amount + "</span>" + " " + val.Currency, width: "12%" }; trBody[3] = { name: "date", html: val.Date, width: "10%" }; trBody[4] = { name: "registerer", html: val.RegistererName, width: "12%" }; trBody[5] = { name: "shop", html: val.shop, width: "10%" }; trBody[6] = { name: "counter", html: val.counter, width: "10%" }; trBody[7] = { name: "Description", html: val.Description, tooltip: 5, width: "14%" }; trBody[8] = { name: "confirmer", html: val.ConfirmerName != null ? val.ConfirmerName : "<button id='btnConfirm'>تایید</button>", width: "10%" }; lstb.push(trBody) } var details = { editFunction: BindItemsForEditExpense, deleteFunction: DeleteExpense, confirmFunction: ConfirmExpense }; table = { header: lsth, body: lstb, details: details, container: pageoption.container, hasFooter: true, divName: "expenseTable" }; buildTable(table) } function buildTable(e) { $con = $("#" + e.container); var t = 300; if (e.heigth != undefined) t = e.heigth; var n = "<table class='table'><thead><tr  >"; var r = "<tfoot><tr>"; $.each(e.header, function () { if (e.hasFooter) { if (this.footer != undefined) r += "<td class='digit' style='border:0px;' >" + this.footer + "</td>"; else r += "<td class='digit' style='border:0px;' >&nbsp;</td>" } if (this.sort != undefined) { var t = ""; var i = sortid.split(" "); if (i[0] == this.sort) t = i[1]; n += "<td " + (this.width != undefined ? "width='" + this.width + "'" : " ") + (this.height != undefined ? "height='" + this.height + "'" : " ") + " ><a href='javascript:void(0);' id='" + this.sort + "' rel='sort' class='sorted " + t + "' >" + this.title + "</a></td>" } else n += "<td " + (this.width != undefined ? "width='" + this.width + "'" : " ") + (this.height != undefined ? "height='" + this.height + "'" : " ") + " ><span>" + this.title + "</span></td>" }); n += "</tr></thead>"; if (e.hasFooter) { n += r; n += "</tr></tfoot>" } n += "<tbody>"; var i = 0; $.each(e.body, function () { var t = this[0].trId; var r = ""; r = this[0].trName; if (r != "") n += "<tr name='" + r + "' id='tr" + t + "'>"; else n += "<tr id='tr" + t + "'>"; $.each(this, function () { if (this.subId != undefined) { n += "<td " + (this.width != undefined ? "style='width:" + this.width + "'" : " ") + (this.tooltip != undefined ? "title='" + this.html : "") + "' name='" + this.name + "' ><span class='cursor' menuName='" + this.menuName + "' name='subTab' id='" + this.subId + "'>" + (this.tooltip == undefined ? this.html : this.html.substring(0, this.tooltip) + "...") + "</span></td>" } else if (this.trId == undefined && this.props == undefined) { if (this.id != undefined) n += "<td " + (this.width != undefined ? "style='width:" + this.width + "'" : " ") + (this.tooltip != undefined ? "title='" + this.html : "") + "' name='" + this.name + "' id='" + this.id + "'>" + (this.tooltip == undefined ? this.html : this.html.substring(0, this.tooltip) + "...") + "</td>"; else if (this.id == undefined) n += "<td " + (this.width != undefined ? "style='width:" + this.width + "'" : " ") + (this.tooltip != undefined ? "title='" + this.html : "") + "' name='" + this.name + "'>" + (this.tooltip == undefined ? this.html : this.html.substring(0, this.tooltip) + "...") + "</td>" } else if (this.props != undefined) { var e; var t = ""; var r = this.props; for (e in r) { t += " " + (e == "klass" ? "Class" : e) + "='" + r[e] + "' " } n += "<td " + t + "'>" + (r.tooltip == undefined ? this.html : this.html.substring(0, r.tooltip) + "...") + "</td>" } }); if (e.details != undefined && e.details.printFunction != undefined) { n += "<td width='4%;' cursor='noCursor'><button id='btnPrintInvoice' >print</button>" } if (e.details != undefined && e.details.editFunction != undefined) { n += "<td width='4%;' cursor='noCursor'><button id='btnEdit' >ویرایش</button>" } if (e.details != undefined && e.details.deleteFunction != undefined) n += "<td width='4%;' cursor='noCursor'><button id='btnDelete'>حذف</button></td>"; if (e.details != undefined && e.details.detailsFunction != undefined) n += "<td width='4%;'><button id='btnDetails'>جزئیات</button></td>"; else n += "</td>"; n += "</tr>"; i++ }); n += "</tbody></table>"; if (e.width != undefined) { $con.find("#" + e.divName).html(n).find("table").tableScroll({ height: t, width: e.width, flush: false }) } else { $con.find("#" + e.divName).html(n).find("table").tableScroll({ height: t, width: contentwidth, flush: false }) } $con.find("[name=subTab]").unbind().click(function () { var e = $(this); createSubTab({ name: e.attr("menuName"), tabName: e.html(), id: e.attr("id") }) }); $con.find("[id=btnPrintInvoice]").button({ icons: { primary: "ui-icon-print" }, text: false }).unbind().click(function () { var t = this; e.details.printFunction(this, e.container) }); $con.find("[id=btnEdit]").button({ icons: { primary: "ui-icon-pencil" }, text: false }).unbind().click(function () { var t = this; e.details.editFunction(this, e.container) }); $con.find("[id=btnDelete]").button({ icons: { primary: "ui-icon-closethick" }, text: false }).unbind().click(function () { if (confirm("آیا از حذف مطمئن هستید؟")) { var t = this; e.details.deleteFunction($(this).parents("tr").attr("id").replace("tr", ""), e.container) } else return }); $con.find("[id=btnDetails]").button({ icons: { primary: "ui-icon-plus" }, text: false }).unbind().click(function () { var t = this; e.details.detailsFunction(this, e.container) }); $con.find("[id=btnConfirm]").button({ icons: { primary: "ui-icon-check" }, text: false }).unbind().click(function () { var t = this; e.details.confirmFunction(this, e.container) }); if (e.details != undefined) { if (e.details.rowClick != undefined) { $con.find("tr[id*=tr]").find("td:not([cursor=noCursor])").click(function () { e.details.rowClick($(this).parent("tr"), e.container.replace("dialog", "")) }).addClass("cursor") } } var s = 0; $con.find("thead").find("td").each(function () { $con.find("tfoot").find("td").eq(s).width($(this).width()); s++ }) } function buildPrintTable(e) { $con = $("#" + e.container); var t = 300; if (e.heigth != undefined) t = e.heigth; var n = "<table  class='tableDetail'><thead><tr class='chead'>"; var r = "<tfoot><tr>"; $.each(e.header, function () { if (e.hasFooter) { if (this.footer != undefined) r += "<td>" + this.footer + "</td>"; else r += "<th></th>" } n += "<th nowrap='nowrap'><span>" + this.title + "</span></th>" }); n += "</tr></thead>"; if (e.hasFooter) { n += r; n += "</tr></tfoot>" } n += "<tbody>"; var i = 0; $.each(e.body, function () { n += "<tr >"; $.each(this, function () { n += "<td " + (this.name != undefined ? "name='" + this.name : "") + "' >" + this.html + "</td>" }); n += "</tr>" }); n += "</tbody></table>"; if (e.width != undefined) { $con.find("#" + e.divName).html(n).find("table").tableScroll({ height: t, width: e.width, flush: false }) } else { $con.find("#" + e.divName).html(n) } $.each($con.find("#" + e.divName).find("[name=barcode]"), function () { var e = $(this); e.barcode(e.html(), "code39", { showHRI: false, barWidth: 1, barHeight: 15 }) }); localize(); Popup($con.find("#" + e.divName).html()) } function BindItemsForEditSalary(e, t) { var n = $("#" + t); n.find("#ddl_m_employee_add").val(e.find("[name=employee]").prop("id").replace("td", "")); n.find("#txt_m_fromDate_add").val(e.find("[name=fromDate]").html()); n.find("#txt_m_toDate_add").val(e.find("[name=toDate]").html()); n.find("#txt_m_fixSalary_add").val(e.find("[name=fixsalary]").find("span").html()); n.find("#txt_m_commission_add").val(e.find("[name=comission]").find("span").html()); n.find("#txt_salary_description_add").val(e.find("[name=Description]").html()) } function BindItemsForEditSocial(e, t) { var n = $("#" + t); n.find("#ddl_social_employee_add").val(e.find("[name=employee]").prop("id").replace("td", "")); n.find("#txt_social_amount_add").val(e.find("[name=amount]").find("span").html()); n.find("#Month_Name_Add select").val(e.find("[name='month']").prop("id")); n.find("#txt_social_description_add").val(e.find("[name=Description]").html()) } function BindItemsForEditExpense(e, t) { $("#dialogAddExpense").dialog().dialog("destroy"); var n = $(e).parents("tr"); var r = n.find("[name='expenseCategory']").prop("id"); var i = $("#" + t); i.find("#divExpenseCategoryAdd").html(""); i.find("#btn_save").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll(i.find("#dialogAddExpense"))) EditExpense(n.prop("id").replace("tr", ""), "dialogAddExpense") }); i.find("#divExpenseCategoryAdd").html(""); bindHierarchyData({ id: "divExpenseCategoryAdd", container: t, table: "ExpenseCategory", canmodify: true, parentid: r, css: "selectsmall1 required validate" }); i.find("#txt_m_amount_add").val(n.find("[name=amount]").find("span").html()); i.find("#txt_m_description_add").val(n.find("[name=Description]").prop("title")); i.find("#dialogAddExpense").dialog({ autoOpen: true }) } function EditEmployeeSalary(e, t) { $con = $("#" + t); var n = { orderHeaderId: e, employeeId: $con.find("#ddl_m_employee_add").val(), fromDate: $con.find("#txt_m_fromDate_add").val(), toDate: $con.find("#txt_m_toDate_add").val(), fixSalary: $con.find("#txt_m_fixSalary_add").val(), commission: $con.find("#txt_m_commission_add").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), currencyId: $("#userDefault").find("#ddl_m_Currency").val(), description: $con.find("#txt_salary_description_add").val(), shopId: $("#userDefault").find("#ddl_s_Branch").val() }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/EditSalary"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function EditSocialSecurity(e, t) { $con = $("#" + t); var n = { orderHeaderId: e, employeeId: $con.find("#ddl_social_employee_add").val(), month: $con.find("#Month_Name_Add option:selected").val(), amount: $con.find("#txt_social_amount_add").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), currencyId: $("#userDefault").find("#ddl_m_Currency").val(), description: $con.find("#txt_social_description_add").val(), shopId: $("#userDefault").find("#ddl_s_Branch").val() }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/EditSocialSecurity"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (e) { if (!isAuthenticated(e)) return }, error: function (e) { alert(e.responseText) } }) } function EditExpense(e, t) { $con = $("#" + t); var n = { orderHeaderId: e, expenseCategory: getHierarchySelectedValue("divExpenseCategoryAdd", t), amount: $con.find("#txt_m_amount_add").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), currencyId: $("#userDefault").find("#ddl_m_Currency").val(), description: $con.find("#txt_m_description_add").val(), shopId: $("#userDefault").find("#ddl_s_Branch").val() }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/EditExpense"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (e) { if (!isAuthenticated(e)) return }, error: function (e) { alert(e.responseText) } }) } function ConfirmSalary(e, t, n) { var r = $("#" + t); var i = { orderHeaderId: e }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/ConfirmSalary"), contentType: "application/json; charset=utf-8", data: JSON.stringify(i), success: function (e) { if (!isAuthenticated(e)) return; if (e.d != null && e.d.isDone == true) { var t = n.parent(); t.html(e.d.name + " " + e.d.family + " " + e.d.code) } else translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function ConfirmSocialSecurity(e, t, n) { var r = $("#" + t); var i = { orderHeaderId: e }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/ConfirmSocialSecurity"), contentType: "application/json; charset=utf-8", data: JSON.stringify(i), success: function (e) { if (!isAuthenticated(e)) return; if (e.d != null && e.d.isDone == true) { var t = n.parent(); t.html(e.d.name + " " + e.d.family + " " + e.d.code) } else translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function ConfirmExpense(e, t) { var n = $("#" + t); var r = $(e); var i = { orderHeaderId: r.parents("tr").prop("id").replace("tr", "") }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/ConfirmExpense"), contentType: "application/json; charset=utf-8", data: JSON.stringify(i), success: function (e) { if (!isAuthenticated(e)) return; if (e.d != null && e.d.isDone == true) { var t = r.parent(); t.html(e.d.name + " " + e.d.family) } else translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function DeleteSalary(e, t, n) { var r = $("#" + t); var i = { orderHeaderId: e }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/DeleteSalary"), contentType: "application/json; charset=utf-8", data: JSON.stringify(i), success: function (e) { if (!isAuthenticated(e)) return; if (e.d != null && e.d.isDone == true) { $(n).parents("tr").remove() } translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function DeleteSocial(e, t, n) { var r = $("#" + t); var i = { orderHeaderId: e }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/DeleteSocial"), contentType: "application/json; charset=utf-8", data: JSON.stringify(i), success: function (e) { if (!isAuthenticated(e)) return; if (e.d != null && e.d.isDone == true) { $(n).parents("tr").remove() } translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function DeleteExpense(e, t) { var n = $("#" + t); var r = $(e); var i = { orderHeaderId: r.parents("tr").prop("id").replace("tr", "") }; $.ajax({ type: "POST", url: getPath("Services/Order.asmx/DeleteExpense"), contentType: "application/json; charset=utf-8", data: JSON.stringify(i), success: function (e) { if (!isAuthenticated(e)) return; if (e.d != null && e.d.isDone == true) { r.parents("tr").remove(); return true } translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function employeepageselectCallback(e, t, n, r) { var i = $("#" + n.container); var s = "", o = "", u = ""; if (r) { buildEmployeeSalaryList(t, n) } else { r = false; var a = i.find("#PageSize").val(); var f = ""; var l = a; var c = e == 0 ? 0 : e * l; if (!i.find("#moreFilter").is(":visible")) { var h = i.find("#ddl_m_searchBy").val(); if (h == "employee") { s = i.find("#EmployeetxtSearch").val() } if (h == "confirmer") { o = i.find("#EmployeetxtSearch").val() } if (h == "registerer") { u = i.find("#EmployeetxtSearch").val() } var p = { skip: c, take: l, currentPage: e, first: r, sort: sortid, employeeId: 0, employee: s, confirmer: o, registerer: u, counterId: $("#userDefault").find("#ddl_m_Counter").val(), fixSalaryFrom: "", fixSalaryTo: "", dateFrom: "", dateTo: "", isConfirmed: "", description: ""} } else { var p = { skip: c, take: l, currentPage: e, first: r, sort: sortid, employeeId: i.find("#ddl_m_employee").val(), employee: "", confirmer: i.find("#txt_m_confirmer").val(), registerer: i.find("#txt_m_registerer").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), fixSalaryFrom: i.find("#txt_m_fixSalaryFrom").val(), fixSalaryTo: i.find("#txt_m_fixSalaryTo").val(), dateFrom: i.find("#txt_m_fromDate").val(), dateTo: i.find("#txt_m_toDate").val(), isConfirmed: i.find("#ddl_m_status").val(), description: i.find("#txt_m_description").val()} } $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(p), type: "Post", url: getPath("Services/Order.asmx/GetEmployeeSalaryList"), success: function (e) { if (!isAuthenticated(e)) return; buildEmployeeSalaryList(e, n) }, error: function (e) { alert(e.responseText) } }); return false } Sort(GetEmployeeSalaryList, n) } function socialsecuritypageselectCallback(e, t, n, r) { var i = $("#" + n.container); var s = "", o = "", u = ""; if (r) { buildSocialSecurityList(t, n) } else { r = false; var a = i.find("#PageSize").val(); var f = ""; var l = a; var c = e == 0 ? 0 : e * l; if (!i.find("#moreFilter").is(":visible")) { var h = i.find("#ddl_m_searchBy").val(); if (h == "employee") { s = i.find("#EmployeetxtSearch").val() } if (h == "confirmer") { o = i.find("#EmployeetxtSearch").val() } if (h == "registerer") { u = i.find("#EmployeetxtSearch").val() } var p = { skip: c, take: l, currentPage: e, first: r, sort: sortid, employeeId: "", employee: s, confirmer: o, registerer: u, counterId: $("#userDefault").find("#ddl_m_Counter").val(), amountFrom: "", amountTo: "", dateFrom: "", dateTo: "", isConfirmed: "", description: "", month: ""} } else { var p = { skip: c, take: l, currentPage: e, first: r, sort: sortid, employeeId: i.find("#ddl_m_employee").val(), employee: "", confirmer: i.find("#txt_m_confirmer").val(), registerer: i.find("#txt_m_registerer").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), amountFrom: i.find("#txt_m_amountFrom").val(), amountTo: i.find("#txt_m_amountTo").val(), dateFrom: i.find("#txt_m_fromDate").val(), dateTo: i.find("#txt_m_toDate").val(), isConfirmed: i.find("#ddl_m_status").val(), description: i.find("#txt_m_description").val(), month: i.find("#Month_Name option:selected").val()} } $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(p), type: "Post", url: getPath("Services/Order.asmx/GetSocialSecurityList"), success: function (e) { if (!isAuthenticated(e)) return; buildSocialSecurityList(e, n) }, error: function (e) { alert(e.responseText) } }); return false } Sort(GetSocialSecurityList, n) } function expensepageselectCallback(e, t, n, r) { var i = $("#" + n.container); var s = "", o = ""; if (r) { buildExpenseList(t, n) } else { r = false; var u = i.find("#PageSize").val(); var a = ""; var f = u; var l = e == 0 ? 0 : e * f; if (!i.find("#moreFilter").is(":visible")) { var c = i.find("#ddl_m_searchBy").val(); if (c == "confirmer") { s = i.find("#ExpensetxtSearch").val() } if (c == "registerer") { o = i.find("#ExpensetxtSearch").val() } var h = { skip: l, take: f, currentPage: e, first: r, sort: sortid, expenseCategory: "", amountFrom: "", amountTo: "", confirmer: s, registerer: o, counterId: $("#userDefault").find("#ddl_m_Counter").val(), dateFrom: "", dateTo: "", isConfirmed: "", description: ""} } else { var h = { skip: l, take: f, currentPage: e, first: r, sort: sortid, expenseCategory: getHierarchySelectedValue("divExpenseCategoryAdd", n.container), amountFrom: i.find("#txt_m_AmountFrom").val(), amountTo: i.find("#txt_m_AmountTo").val(), dateFrom: i.find("#txt_m_fromDate").val(), dateTo: i.find("#txt_m_toDate").val(), registerer: i.find("#txt_m_registerer").val(), isConfirmed: i.find("#ddl_m_status").val(), counterId: $("#userDefault").find("#ddl_m_Counter").val(), description: i.find("#txt_m_description_add").val(), confirmer: i.find("#txt_m_confirmer").val()} } $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(h), type: "Post", url: getPath("Services/Order.asmx/GetExpenseList"), success: function (e) { if (!isAuthenticated(e)) return; buildExpenseList(e, n) }, error: function (e) { alert(e.responseText) } }); return false } Sort(GetExpenseList, n) } function loadAddApplication(e, t) { var n = $("#" + e); if (t) { n.find("#txt_dateStart").attr("id", e + "txt_dateStart"); n.find("#txt_expieryDate").attr("id", e + "txt_expieryDate"); n.find("#" + e + "txt_dateStart").datepicker({ changeMonth: true, changeYear: true, onClose: function () { validateAll($("#" + e)) }, onSelect: function (t, n) { $("#" + e + "txt_expieryDate").datepicker("option", "minDate", new JalaliDate(n["selectedYear"], n["selectedMonth"], n["selectedDay"])) } }); n.find("#" + e + "txt_expieryDate").datepicker({ changeMonth: true, changeYear: true, onClose: function () { validateAll($("#" + e)) } }); getAllRoles(e); n.find("#addApplication").button({ icons: { primary: "ui-icon-plus" }, text: true }).unbind("click").bind("click", function (t) { if (validateAll(n)) addApplication(e) }) } } function loadBuyApplication(e, t) { var n = $("#" + e); if (t) { localize(); n.find("#txt_expieryDate").datepicker({ changeMonth: true, changeYear: true }); n.find("#buyApplication").button({ icons: { primary: "ui-icon-plus" }, text: true }).unbind("click").bind("click", function (t) { if (validateAll(n)) buyApplication(e) }) } } function loadHelp(e, t) { var n = $("#" + e); if (t) { n.find(".editor").jqte() } } function getAllRoles(container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/getRoleParentAll"), contentType: "application/json; charset=utf-8", success: function (response) { if (!isAuthenticated(response)) return; var role = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var roleItem = ""; for (var j = 0; j < role.length; j++) { var val = role[0, j]; roleItem += " <h3><a href='#' >" + val.description + "</a></h3><div id='div_" + val.roleid + "'></div>" } $con.find("#divRolesAccordion").html(roleItem); $con.find("#divRolesAccordion").accordion({ heightStyle: "content", collapsible: true, active: false, activate: function (e, t) { if (t.newPanel.length > 0 && t.newPanel.html().length < 1) getallroleChild(t.newPanel.prop("id").replace("div_", ""), container) } }); $con.find("#roleList").html(roleItem).parent().tableScroll({ height: 380, width: contentwidth, flush: false }) }, error: function (e) { } }) } function getallroleChild(pid, container) { var $con = $("#" + container); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/getRoleListAll"), contentType: "application/json; charset=utf-8", data: "{parentid: '" + pid + "'}", success: function (response) { if (!isAuthenticated(response)) return; var role = typeof response.d == "string" ? eval("(" + response.d + ")") : response.d; var roleItem = ""; roleItem = "<div><table class='table line'>" + "<tbody id='roleList'>"; for (var j = 0; j < role.length; j++) { var val = role[0, j]; roleItem += "<tr>" + "<td id='" + container + "' ><input type='checkbox' " + "   /> </td> <td id='" + val.rolename + "' name='rolename'>" + val.description + "</td> </tr>" } roleItem += "</tbody></table></div>"; $con.find("#div_" + pid).html(roleItem); $con.find("#divRolesAccordion").accordion({ collapsible: true, heightStyle: "content" }) }, error: function (e) { } }) } function addApplication(e) { var t = $("#" + e); var n = []; t.find("#divRolesAccordion").find("input:checkbox").each(function () { if (this.checked == true) n.push($(this).parents("tr").find("[name=rolename]").attr("id")) }); var r = { username: t.find("#txt_appUser").val(), pass: t.find("#txt_appPass").val(), appName: t.find("#txt_appname").val(), branchlimit: t.find("#txt_shoplimit").val(), counterlimit: t.find("#txt_accountlimit").val(), employeelimit: t.find("#txt_employeelimit").val(), expierydate: t.find("#" + e + "txt_expieryDate").val(), roles: n, smscredit: t.find("#txt_smslimit").val(), smsnumber: t.find("#txt_smsNumber").val(), startdate: t.find("#" + e + "txt_dateStart").val() }; $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/AddUser"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e) } }) } function buyApplication(e) { var t = $("#" + e); var n = { userName: t.find("#txt_userName").val(), amount: t.find("#txt_amount").val(), branchLimit: t.find("#txt_branchLimit").val(), employeeLimit: t.find("#txt_employeeLimit").val(), extraBranchPrice: t.find("#txt_extraBranchPrice").val(), extraEmployeePrice: t.find("#txt_extraEmployeePrice").val(), membershipPrice: t.find("#txt_membershipPrice").val(), smsLimit: t.find("#txt_smsLimit").val(), smsRate: t.find("#txt_smsRate").val(), expieryDate: t.find("#txt_expieryDate").val(), name: t.find("#txt_name").val(), family: t.find("#txt_family").val(), email: t.find("#txt_email").val(), mobile: t.find("#txt_mobile").val(), password: t.find("#txt_password").val() }; $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/BuyApplication"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e) } }) } function loadApplicationList(e, t) { var n = $("#" + e); if (t) { getAcountList(e, { container: e, callbackmethod: getApplicationList, fname: "", page_index: 0, build: buildApplicationList, servicename: "EmployeeService", methodname: "GetApplicationList", print: true }); n.find("#btnRefreshApplist").button({ icons: { primary: "ui-icon-refresh" }, text: false }).unbind("click").bind("click", function (t) { getAcountList(e, { container: e, callbackmethod: getApplicationList, fname: "", page_index: 0, build: buildApplicationList, servicename: "EmployeeService", methodname: "GetApplicationList", print: true }) }) } } function buildApplicationList(jq, pageoption) { var $con = $("#" + pageoption.pagingContainer); jq = jq.d; var table = {}; var lstb = []; var lsth = []; var details = {}; lsth.push({ title: "appName", sort: "AppName", width: "20%" }); lsth.push({ title: "shoplimit", sort: "shoplimit", width: "20%" }); lsth.push({ title: "dateStart", sort: "StartingDate", width: "20%" }); lsth.push({ title: "status", sort: "IsActive", width: "16%" }); lsth.push({ title: "expieryDate", sort: "ExpieryDate", width: "20%" }); lsth.push({ title: "deleteBtn", width: "4%" }); var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; trBody[0] = { trId: val.ApplicationId }; trBody[1] = { name: "appname", html: val.AppName, width: "20%" }; trBody[2] = { name: "shoplimit", html: val.ShopLimit, width: "20%" }; trBody[3] = { name: "datestart", html: val.StartingDate, props: { date: val.StartingDate, width: "20%", klass: "date"} }; trBody[4] = { name: "status", html: val.IsActive, width: "16%" }; trBody[5] = { name: "expierydate", html: val.ExpieryDate, props: { date: val.ExpieryDate, width: "20%", klass: "date"} }; lstb.push(trBody) } details = { deleteFunction: RemoveApplicationElement, rowClick: ClickApplicationList }; table = { header: lsth, body: lstb, details: details, heigth: 300, container: pageoption.pagingContainer, divName: "divApplicationList" }; buildTable(table) } function ClickApplicationList(e, t) { var n = $("#" + t); var r = e.attr("id").replace("tr", ""); if (r != undefined) createSubTab({ name: "a_ApplicationList", tabName: e.find("[name=appname]").html(), id: r }); else { createSubTab({ name: "a_ApplicationList", row: e }) } onRowClick(e) } function RemoveApplicationElement(e, t) { var n = $("#" + t); var r = { appId: e.attr("id").replace("tr", "") }; $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (e) { }, error: function (e) { alert(e) } }) } function getApplicationList(e, t) { var n = $("#" + e); pageselectCallback(0, t, { container: "", fname: t.fname, pagingContainer: e, first: true, isOrder: true }) } function loadEditApplication(e, t, n) { if (n) { var r = $("#" + t); r.find("#txt_dateStart").datepicker({ changeMonth: true, changeYear: true, onClose: function () { validateAll($("#" + t)) } }); r.find("#txt_expieryDate").datepicker({ changeMonth: true, changeYear: true, onClose: function () { validateAll($("#" + t)) } }); getEditApplication(e, t); r.find("#addApplication").unbind().click(function () { editApplication(e, t) }).button({ icons: { primary: "ui-icon-disk" }, text: true }) } } function getEditApplication(e, t) { var n = $("#" + t); var r = { appId: e }; $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/GetApplicationDetails"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (e) { var t = e.d[0]; n.find("#txt_appname").val(t.AppName); n.find("#txt_shoplimit").val(t.ShopLimit); n.find("#txt_accountlimit").val(t.AccountLimit); n.find("#txt_employeelimit").val(t.EmployeeLimit); n.find("#ddl_status").val(t.IsActive); n.find("#txt_dateStart").val(t.StartingDate); n.find("#txt_expieryDate").val(t.ExpieryDate); n.find("#txt_smslimit").val(t.SmsCredit); n.find("#txt_smsNumber").val(t.SmsNumber) }, error: function (e) { alert(e) } }) } function editApplication(e, t) { var n = $("#" + t); var r = { appId: e, appName: n.find("#txt_appname").val(), shopLimit: n.find("#txt_shoplimit").val(), accountLimit: n.find("#txt_accountlimit").val(), employeeLimit: n.find("#txt_employeelimit").val(), status: n.find("#ddl_status").val(), dateStart: n.find("#txt_dateStart").val(), expieryDate: n.find("#txt_expieryDate").val(), smsLimit: n.find("#txt_smslimit").val(), smsNumber: n.find("#txt_smsNumber").val() }; $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/EditApplication"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e) } }) } function loadEditApplicationRoles(e, t, n) { if (n) { var r = $("#" + t); getrole(0, e, t) } } function loadItemMatchingBarcode(e, t, n) { var r = $("#" + t); if (n) { r.find("#hd_barcodeId").val(e); r.find("#btn_save").unbind().click(function () { addMatchingBarcode(e, t) }).button({ icons: { primary: "ui-icon-disk" }, text: true }); getMatchingBarcodes(e, t); aComplete({ methodname: "GetCompletionListByItemName", servicename: "AtuoComplete", id: "txt_matchedBarcode", container: t, minlength: 2, autofocus: false, limit: 10, boxId: "txt_matchedBarcode", data: { Status: 1 }, selectBarcode: true }) } } function addMatchingBarcode(e, t) { var n = $("#" + t); var r = { barcodId: e, matchedBarcode: n.find("#txt_matchedBarcode").val(), discountPer: n.find("#txt_discountPer").val(), countBarcode: n.find("#txt_countBarcode").val(), countMatched: n.find("#txt_countMatched").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(r), type: "Post", url: getPath("Services/Inventory.asmx/addMatchingBarcode"), success: function (n) { if (n.d.isdone) getMatchingBarcodes(e, t) }, error: function (e) { alert(e.responseText) } }) } function getMatchingBarcodes(e, t) { var n = $("#" + t); var r = { barcodeId: e }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(r), type: "Post", url: getPath("Services/Inventory.asmx/getMatchingBarcodes"), success: function (e) { if (e.d.isdone) buildMatchingBarcodes(e, t) }, error: function (e) { alert(e.responseText) } }) } function buildMatchingBarcodes(jq, container) { var $con = $("#" + container.pagingContainer); var table = {}; var lstb = []; var lsth = []; jq = jq.d.results; lsth.push({ title: "matchingBarcode", width: "55%" }); lsth.push({ title: "countProduct", width: "10%" }); lsth.push({ title: "countMached", width: "10%" }); lsth.push({ title: "discountPer", width: "15%" }); lsth.push({ title: "deleteKey", width: "10%" }); var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; if (List != null) for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; var name = val.Name != null ? val.Name : ""; var code = val.ItemCode != null ? val.ItemCode : ""; var barcode = val.Barcode != null ? val.Barcode : ""; trBody[0] = { trId: val.MatchingItemId }; trBody[1] = { name: "matchingBarcode", html: name + " " + code + " " + barcode, width: "55%" }; trBody[2] = { name: "countProduct", html: val.Quantity, width: "10%" }; trBody[3] = { name: "countMached", html: val.MatchingQuantity, width: "10%" }; trBody[4] = { name: "discountPer", html: val.DiscountPercentage == true ? val.amount : "", width: "15%" }; lstb.push(trBody) } var details = { deleteFunction: DeleteMatchingBarcode }; table = { header: lsth, body: lstb, heigth: 300, container: container, divName: "MachingBarcodeslist", details: details, hasFooter: false }; buildTable(table) } function DeleteMatchingBarcode(e, t) { var n = $("#" + t); var r = { matchingItemId: e }; $.ajax({ type: "POST", url: getPath("Services/Inventory.asmx/DeleteMatchingBarcode"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (t) { if (!isAuthenticated(t)) return; if (t.d != null && t.d.isDone == true) { n.find("#tr" + e).remove(); return true } translate(t.d.msg) }, error: function (e) { alert(e.responseText) } }) } function loadItemAccountingDetails(e, t, n) { var r = $("#" + t); if (n) { r.find("#btn_Submit").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll($("#" + t))) editItemAccountDetail(e, t) }); getItemAccountDetail(e, t); getAveragePrice(e, t) } } function getAveragePrice(e, t) { var n = $("#" + t); var r = { barcodeid: e }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(r), type: "Post", url: getPath("Services/Inventory.asmx/GetColor_Size"), success: function (e) { buildAveragePrice(e, t) }, error: function (e) { alert(e.responseText) } }) } function buildAveragePrice(jq, container) { var $con = $("#" + container.pagingContainer); var table = {}; var lstb = []; var lsth = []; jq = jq.d; lsth.push({ title: "details", width: "16%" }); lsth.push({ title: "color", width: "15%" }); lsth.push({ title: "colorName", width: "15%" }); lsth.push({ title: "priceDifference", width: "15%" }); lsth.push({ title: "averageBuyPrice", width: "15%" }); lsth.push({ title: "quantityKey", width: "15%" }); lsth.push({ title: "edit", width: "4%" }); var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; if (List != null) for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; var name = val.Name != null ? val.Name : ""; var code = val.ItemCode != null ? val.ItemCode : ""; var barcode = val.Barcode != null ? val.Barcode : ""; trBody[0] = { trId: val.ItemDetailId }; trBody[1] = { name: "detail", html: val.Size, width: "16%" }; trBody[2] = { name: "color", html: val.Color, props: { width: "15%", style: "background-color:" + val.Color + ""} }; trBody[3] = { name: "colorName", html: val.Color, width: "15%" }; trBody[4] = { name: "sellPrice", html: val.DetailPrice, width: "15%" }; trBody[5] = { name: "averageBuyPrice", html: "<input name='averagePrice' value=" + val.BuyPrice + " />", width: "15%" }; trBody[6] = { name: "quantity", html: val.Quantity, width: "15%" }; lstb.push(trBody) } var details = { editFunction: EditDetailBuyPrice }; table = { header: lsth, body: lstb, heigth: 300, container: container, divName: "AveragePriceList", details: details, hasFooter: false }; buildTable(table) } function EditDetailBuyPrice(e, t) { var n = $(e).parents("tr"); var r = n.prop("id"); var i = $("#" + t); var s = { id: r.replace("tr", ""), price: n.find("[name='averagePrice']").val() }; $.ajax({ type: "POST", url: getPath("Services/InventorySetting.asmx/EditDetailBuyPrice"), contentType: "application/json; charset=utf-8", data: JSON.stringify(s), success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isDone) { translate(e.d.msg) } }, error: function (e) { alert(e.responseText) } }) } function getItemAccountDetail(e, t) { var n = $("#" + t); var r = { barcodeId: e }; $.ajax({ type: "POST", url: getPath("Services/InventorySetting.asmx/getItemAccountDetail"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isDone) { n.find("#txt_m_Price").val(e.d.AverageBuyPrice) } }, error: function (e) { alert(e.responseText) } }) } function editItemAccountDetail(e, t) { var n = $("#" + t); var r = { barcodeId: e, averageBuyPrice: n.find("#txt_m_Price").val() }; $.ajax({ type: "POST", url: getPath("Services/InventorySetting.asmx/editItemAccountDetail"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (e) { if (!isAuthenticated(e)) return; if (e.d.isDone) { n.find("#txt_m_Price").val(e.d.AverageBuyPrice) } }, error: function (e) { alert(e.responseText) } }) } function loadSetting(e, t) { var n = $("#" + e); if (t) { GetSetting(e); n.find("#btnEditSetting").button({ icons: { primary: "ui-icon-disk"} }).unbind().click(function () { if (validateAll($("#" + e))) UpdateSetting(e) }) } } function GetSetting(e) { var t = $("#" + e); $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/GetSetting"), contentType: "application/json; charset=utf-8", success: function (n) { if (!isAuthenticated(n)) return; if (n.d.isDone) { var r = n.d.result; bindItemsForSelectCombo({ methodname: "getEmployees", servicename: "EmployeeService", id: "ddl_m_Employee", container: e, headertext: "انتخاب کارمند", selectedvalue: r.EmployeeId }); bindItemsForSelectCombo({ servicename: "Counter", methodname: "getCounterNameForUser", headertext: "انتخاب صندوق", id: "ddl_m_Counter", container: e, selectedvalue: r.CounterId }); t.find("#lbl_AppName").html(r.AppName); t.find("#lbl_StartingDate").html(r.StartingDate); t.find("#lbl_StartingDate").attr("date", r.StartingDate); t.find("#lbl_ExpieryDate").html(r.ExpieryDate); t.find("#lbl_ExpieryDate").attr("date", r.ExpieryDate); t.find("#lbl_ShopLimit").html(r.ShopLimit); t.find("#lbl_SmsCredit").html(r.SmsCredit); t.find("#txt_m_Host").val(r.Host); t.find("#txt_m_EmailPass").val(r.EmailPass); t.find("#ddl_m_Language").val(r.Language); t.find("#txt_m_PaymentPassword").val(r.PaymentPassword); t.find("#txt_m_PaymentUserName").val(r.PaymentUserName); t.find("#txt_m_Port").val(r.Port); t.find("#txt_m_Email").val(r.Email); t.find("#txt_m_SmsNumber").val(r.SmsNumber); t.find("#txt_m_SmsPass").val(r.SmsPass); t.find("#txt_Sms_SmsUser").val(r.SmsUser); t.find("#txt_m_TerminalId").val(r.TerminalId); t.find("#txt_m_OnlineHost").val(r.OnlineHost) } }, error: function (e) { alert(e.responseText) } }) } function UpdateSetting(e) { var t = $("#" + e); var n = { employeeId: t.find("#ddl_m_Employee").val(), counterId: t.find("#ddl_m_Counter").val(), host: t.find("#txt_m_Host").val(), emailPass: t.find("#txt_m_EmailPass").val(), language: t.find("#ddl_m_Language").val(), paymentPassword: t.find("#txt_m_PaymentPassword").val(), paymentUserName: t.find("#txt_m_PaymentUserName").val(), port: t.find("#txt_m_Port").val(), email: t.find("#txt_m_Email").val(), smsNumber: t.find("#txt_m_SmsNumber").val(), smsPass: t.find("#txt_m_SmsPass").val(), smsUser: t.find("#txt_Sms_SmsUser").val(), terminalId: t.find("#txt_m_TerminalId").val(), paymentUserName: t.find("#txt_m_PaymentUserName").val(), onlineHost: t.find("#txt_m_OnlineHost").val() }; $.ajax({ type: "POST", url: getPath("Services/EmployeeService.asmx/UpdateSetting"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (e) { if (!isAuthenticated(e)) return; translate(e.d.msg) }, error: function (e) { alert(e.responseText) } }) } function loadDashCharts(e, t) { var n = $("#" + e); if (t) { n.find("#sale7,#sale14,#sale30").unbind("click").click(function () { n.find("#sale7,#sale14,#sale30").removeClass("selected"); $(this).addClass("selected"); GetDashboardSaleChart(e, true, $(this).attr("data-days")) }); n.find("#top7,#top14,#top30,#top182,#top365").unbind("click").click(function () { n.find("#top7,#top14,#top30,#top182,#top365").removeClass("selected"); $(this).addClass("selected"); GetTopProductChart(e, true, $(this).attr("data-days")) }); n.find("#newSale").unbind("click").click(function () { $("[maintab='a_FullAcountReport']").trigger("click") }); n.find("#newProduct").unbind("click").click(function () { $("[maintab='InventoryAdd']").trigger("click"); $("[id='a_InventoryAdd']").trigger("click") }); GetDashboardSaleChart(e, true, 7); GetTopProductChart(e, true, 7) } } function GetDashboardSaleChart(e, t, n) { var r = $("#" + e); var i = "", s = "", o = "", u = "", a = "", f = "", l = "", c = "", h = ""; var p = "", d = "", v = ""; if (r.find("#moreFilter").is(":visible")) { var m = r.find("#ddl_d_SearchBy1").val(); if (m != "") { if (m == "Code") { s = r.find("#txtSearch1").val() } if (m == "Name") { i = r.find("#txtSearch1").val() } if (m == "EmployeeId") { o = r.find("#txtSearch1").val() } if (m == "EmployeeName") { u = r.find("#txtSearch1").val() } if (m == "Shop") { a = r.find("#txtSearch1").val() } } var m = r.find("#ddl_d_SearchBy2").val(); if (m != "") { if (m == "InvoiceId") { f = r.find("#txtSearch2").val() } if (m == "ProductId") { l = r.find("#txtSearch2").val() } if (m == "ProductName") { c = r.find("#txtSearch2").val() } if (m == "Barcode") { h = r.find("#txtSearch2").val() } } p = r.find("#txt_s_PriceFrom").val(); d = r.find("#txt_s_PriceTo").val(); v = getHierarchySelectedValue("hr_s_Category", e) } var g = ""; if (r.find("#Checkbox1" + e).prop("checked") && r.find("#Checkbox2" + e).prop("checked")) g = ""; else if (!r.find("#Checkbox1" + e).prop("checked") && r.find("#Checkbox2" + e).prop("checked")) g = false; else if (r.find("#Checkbox1" + e).prop("checked") && !r.find("#Checkbox2" + e).prop("checked")) g = true; var y = { Datetype: "DayDashboard", supplierid: "", IsClient: true, SupplierName: i, code: s, EmployeeId: o, EmployeeName: u, Shop: a, InvoiceId: f, ProductId: l, ProductName: c, Barcode: h, InvoiceDateStart: n, InvoiceDateEnd: "", InvoiceYearStart: "", InvoiceYearEnd: "", PriceFrom: p, PriceTo: d, Order: g, PreOrder: r.find("#Checkbox3" + e).length > 0 ? r.find("#Checkbox3" + e).prop("checked") : "", Broken: r.find("#Checkbox4" + e).length > 0 ? r.find("#Checkbox4" + e).prop("checked") : "", CategoryId: v, shopid: $("#userDefault").find("#ddl_s_Branch").val(), counterid: $("#userDefault").find("#ddl_m_Counter").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(y), type: "Post", url: getPath("Services/Charts.asmx/GetSaleChart"), success: function (e) { if (!isAuthenticated(e)) return; if (e.d != null) { var t = "0"; var i = "right"; var s = 0; var o = 0; var u = 0; var a = 0; var f = []; var l = []; var c = []; $.each(e.d, function () { f.push(ToPersianDate(this.date)); if (t == "Amount" || t == "0") { l.push(Math.ceil(this.amount * 10) / 10); c.push(Math.ceil(this.quantity * 10) / 10); s += Math.ceil(this.amount * 10) / 10; a += Math.ceil(this.quantity * 10) / 10 } }); if (e.d.length > 0) { r.find("#spTotalSale").html(Math.ceil(s * 10) / 10); r.find("#spAvSale").html(Math.ceil(s / n * 1 * 10) / 10); r.find("#spAvValue").html(Math.ceil(s / a * 10) / 10); $("#saleChart").highcharts({ credits: { enabled: false }, colors: ["#058DC7", "#50B432", "#ED561B", "#DDDF00", "#24CBE5", "#64E572", "#FF9655", "#FFF263", "#6AF9C4"], chart: { backgroundColor: { linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 }, stops: [[0, "rgb(255, 255, 255)"], [1, "rgb(240, 240, 255)"]] }, plotBackgroundColor: "rgba(255, 255, 255, .9)", plotShadow: true, plotBorderWidth: 1 }, title: { text: "" }, xAxis: { categories: f, labels: { rotation: -35, align: "right", style: { fontSize: "13px", fontFamily: "Verdana, sans-serif"}} }, yAxis: { title: { text: "مبلغ فروش"} }, tooltip: { valueSuffix: "تومان" }, plotOptions: { line: { dataLabels: { enabled: true }, enableMouseTracking: false} }, series: [{ name: "مبلغ ", color: "green", type: "spline", data: l, tooltip: { valueSuffix: " تومان"}}] }) } } }, error: function (e) { alert(e.responseText) } }); return false } function GetTopProductChart(e, t, n) { var r = $("#" + e); var i = { Datetype: "DayTopProduct", InvoiceDateStart: n, shopid: $("#userDefault").find("#ddl_s_Branch").val() }; $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", data: JSON.stringify(i), type: "Post", url: getPath("Services/Charts.asmx/GetTopProductChart"), success: function (e) { if (!isAuthenticated(e)) return; if (e.d != null) { var t = []; var n = []; var r = []; $.each(e.d, function () { r.push(Math.ceil(this.quantity * 10) / 10); t.push(this.Name) }); if (e.d.length > 0) { $("#popular-products-chart").highcharts({ credits: { enabled: false }, chart: { backgroundColor: { linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 }, stops: [[0, "rgb(255, 255, 255)"], [1, "rgb(240, 240, 255)"]] }, plotBackgroundColor: "rgba(255, 255, 255, .9)", plotShadow: true, plotBorderWidth: 1 }, title: { text: "" }, yAxis: { title: { text: "تعداد فروش"} }, xAxis: { categories: t, labels: { rotation: -35, align: "right", style: { fontSize: "13px", fontFamily: "Verdana, sans-serif"}} }, tooltip: { formatter: function () { return '<div lang="fa" dir="rtl"> ' + this.x + " : " + this.y + " عدد"; "</div>" } }, plotOptions: { line: { dataLabels: { enabled: true }, enableMouseTracking: false} }, series: [{ name: "تعداد ", color: "#33CC33", type: "column", data: r, align: "right", tooltip: { valueSuffix: " عدد"}}] }) } } }, error: function (e) { alert(e.responseText) } }); return false } function loadAddFaq(e, t) { $con = $("#" + e); if (t) { getFaq("", e, true); $con.find("#btn_saveFaq").button({ icons: { primary: "ui-icon-plusthick"} }).unbind().click(function () { AddFaq(e) }); BuildFaqAccordion(e) } } function AddFaq(e) { var t = $("#" + e); var n = { question: t.find("#txtQuestion").val(), faq: $("[name='txtFaq']").val(), lang: $lang.val() }; $.ajax({ type: "POST", data: JSON.stringify(n), url: getPath("Services/Menu.asmx/AddFaq"), contentType: "application/json; charset=utf-8", success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isDone) { BuildFaqAccordion(e) } translate(t.d.msg) }, error: function (e) { alert(e.responseText) } }) } function BuildFaqAccordion(e) { var t = $("#" + e); var n = { lang: $lang.val() }; $.ajax({ type: "POST", async: false, url: getPath("Services/Menu.asmx/getFaqQuestions"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (n) { if (!isAuthenticated(n)) return; var r = { header: "ui-icon-circle-arrow-e", activeHeader: "ui-icon-circle-arrow-s" }; var i = t.find("#accordion"); i.accordion().accordion("destroy").html(""); for (var s = 0; s < n.d.length; s++) { var o = n.d[s]; var u = ""; u = "<li order='" + o.order + "' id='" + o.id + "' class='ui-state-default'>" + "<span name='question' >" + o.question + "</span>" + "<button OnlineMenuId='" + o.id + "' id='btn_edit'>ویرایش</button><button OnlineMenuId='" + o.id + "' id='btn_delete'>delete</button></li>"; i.append(u) } i.find("[id=btn_edit]").button({ icons: { primary: "ui-icon-pencil" }, text: true }).unbind("click").click(function () { getFaqForEdit($(this).parents("li").attr("id"), e); return false }); i.find("[id=btn_delete]").button({ icons: { primary: "ui-icon-pencil" }, text: true }).unbind("click").click(function () { deleteFaq($(this).parents("li").attr("id"), e); return false }); i.sortable({ axis: "y", stop: function (t, n) { n.item.children("h3").triggerHandler("focusout"); SortFaqQuestions(e) } }) }, error: function (e) { alert(e.responseText) } }) } function SortFaqQuestions(e) { var t = $("#" + e); var n = []; var r = 1; t.find("#accordion").children("li").each(function () { var e = {}; e["id"] = $(this).attr("id"); e["Priority"] = r; r++; n.push(e) }); var i = { sortFaq: n }; $.ajax({ type: "POST", async: false, url: getPath("Services/Menu.asmx/sortFaqQuestions"), contentType: "application/json; charset=utf-8", data: JSON.stringify(i), success: function (e) { }, error: function (e) { alert(e.responseText) } }) } function getFaqForEdit(e, t) { var n = $("#" + t); var r = { id: e }; $.ajax({ type: "POST", async: false, url: getPath("Services/Menu.asmx/getFaqForEdit"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (e) { if (!isAuthenticated(e)) return; n.find("#txtQuestion").val(e.d.result.question); n.find("[name='txtFaq']").val(e.d.result.answer) }, error: function (e) { alert(e.responseText) } }) } function deleteFaq(e, t) { var n = $("#" + t); var r = { id: e }; $.ajax({ type: "POST", async: false, url: getPath("Services/Menu.asmx/deleteFaq"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (t) { if (!isAuthenticated(t)) return; if (t.d.isDone) { n.find("#accordion").find("#" + e).remove() } else alert(t.d.msg) }, error: function (e) { alert(e.responseText) } }) } function getFaq(e, t) { var n = $("#" + t); n.find("#divFaq").html("<textarea class='editor' name='txtFaq'></textarea></n><button id='btnSaveDefintion'>save</button>"); n.find(".editor").tinymce({ script_url: "jscripts/tiny_mce/tiny_mce.js", width: "100%", height: "500px", directionality: "rtl", theme: "advanced", verify_html: false, plugins: "pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,wordcount,advlist,autosave", theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,styleselect,formatselect,fontselect,fontsizeselect", theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor", theme_advanced_buttons3: "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen", theme_advanced_buttons4: "insertlayer,moveforward,movebackward,absolute,|,styleprops,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,pagebreak,restoredraft,codehighlighting,netadvimage", theme_advanced_toolbar_location: "top", theme_advanced_toolbar_align: "right", theme_advanced_statusbar_location: "bottom", theme_advanced_resizing: false, save_onsavecallback: function () { AddFaq(t) }, content_css: "../../Scripts/tinymce/css/content.css", convert_urls: false }); n.find("#btnSaveDefintion").button().unbind("click").bind("click", function () { AddFaq(t) }) } function loadFaq(e, t) { $con = $("#" + e); if (t) { BuildFaqContent(e) } } function BuildFaqContent(e) { var t = $("#" + e); var n = { lang: $("#ddl_m_Language").val() }; $.ajax({ type: "POST", async: false, url: getPath("Services/Menu.asmx/getFaqQuestions"), contentType: "application/json; charset=utf-8", data: JSON.stringify(n), success: function (n) { if (!isAuthenticated(n)) return; var r = { header: "ui-icon-circle-arrow-e", activeHeader: "ui-icon-circle-arrow-s" }; var i = t.find("#faqContent"); i.accordion().accordion("destroy").html(""); for (var s = 0; s < n.d.length; s++) { var o = n.d[s]; var u = ""; u = "<h3 id='" + o.id + "'>" + o.question + "</h3>" + "<div><p id='p" + o.id + "'></p></div>"; i.append(u) } i.accordion({ collapsible: true, heightStyle: "content", active: false, activate: function (t, n) { if (n.newPanel.length > 0 && n.newPanel.html().length < 16) getFaqAnswer(n.newHeader.attr("id"), e) } }) }, error: function (e) { alert(e.responseText) } }) } function getFaqAnswer(e, t) { var n = $("#" + t); var r = { id: e }; $.ajax({ type: "POST", async: false, url: getPath("Services/Menu.asmx/getFaqForEdit"), contentType: "application/json; charset=utf-8", data: JSON.stringify(r), success: function (t) { if (!isAuthenticated(t)) return; n.find("#faqContent").find("#p" + e).html(t.d.result.answer) }, error: function (e) { alert(e.responseText) } }) } function loadVisitorStatistic(e, t) { var n = $("#" + e); if (t) { getVisitorStatisticList(e, { container: e, callbackmethod: getVisitorStatisticList, fname: "", page_index: 0, build: buildVisitorStaticList, servicename: "Login", methodname: "GetVisitorStatistic", print: false }); n.find("[id=btnSearchVisitorStatistic]").button({ icons: { primary: "ui-icon-search"} }).unbind("click").click(function () { getVisitorStatisticList(e, { container: e, callbackmethod: getVisitorStatisticList, fname: "", page_index: 0, build: buildVisitorStaticList, servicename: "Login", methodname: "GetVisitorStatistic", print: false }) }) } } function getVisitorStatisticList(e, t) { var n = $("#" + e); if (t.page_index > 0) { t.first = false } var r = { sort: sortid }; t["DTO"] = r; pageselectCallback(0, t, { container: "", fname: t.fname, pagingContainer: e, first: true, isOrder: false }) } function buildVisitorStaticList(jq, container) { var $con = $("#" + container.pagingContainer); var table = {}; var lstb = []; var lsth = []; jq = jq.d.results; lsth.push({ title: "ip", width: "15%" }); lsth.push({ title: "countryName", width: "15%" }); lsth.push({ title: "cityName ", width: "15%" }); lsth.push({ title: "date", width: "20%" }); lsth.push({ title: "timeZone ", width: "15%" }); lsth.push({ title: "browser", width: "10%" }); lsth.push({ title: "appName", width: "10%" }); var List = typeof jq == "string" ? eval("(" + jq + ")") : jq; var ItemList = ""; for (var i = 0; i < List.length; i++) { var val = List[0, i]; var trBody = {}; trBody[0] = { name: "ip", html: val.ip, width: "15%" }; trBody[1] = { name: "countryName", html: val.countryName, width: "15%" }; trBody[2] = { name: "cityName", html: val.cityName, width: "15%" }; trBody[3] = { name: "date", html: val.dateTime, width: "20%" }; trBody[4] = { name: "timeZone", html: val.timeZone, width: "15%" }; trBody[5] = { name: "browser", html: val.browser, width: "10%" }; trBody[6] = { name: "appName", html: val.appName, width: "10%" }; lstb.push(trBody) } table = { header: lsth, details: {}, body: lstb, container: container.pagingContainer, divName: "visitorStatistic" }; buildTable(table) } var ajDropDown; var sortid; var pass1; var profile; var currentprofile; var sarg; var cout_tr = 1; var $container; var textin; var ajgetListCategory; var datefrom = ""; var buyfrom = ""; var selfrom = ""; var employeeid; var ajHierarchy; var menuItems; var dir; var contentwidth; var timeout = 0; $.fn.digits = function () { return this.each(function () { $(this).text($(this).text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")); if (!$.browser.msie) { $(this).val($(this).val().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")) } }) }; $(document).ready(function (e) { e("head").find("#leftStyle").prop("disabled", true); e("#userDefault").find("#txt_s_Date").datepicker().datepicker("setDate", new Date).datepicker(); var t = e("#signin-form"); userLogin("signin-form"); e("#forgotPass").unbind("click").bind("click", function (t) { e("#forgot-form").toggle(); e("#signin-form").toggle() }); e("#btnForgotPassword").button().unbind("click").bind("click", function (e) { loginPasswordForgot() }); e("#signin-form").find("#btn_Submit").button().unbind("click").bind("click", function (e) { userLogin("signin-form") }); e("#ddl_m_Language").unbind("change").bind("change", function (e) { masterLocalize(); localize() }); e("#signin-form").find("#password").bind("keypress", function (t) { var n = t.keyCode ? t.keyCode : t.which; if (n == 13 && !e("#signin-form").find("#btn_Submit").is(":focus")) { e("#signin-form").find("#btn_Submit").focus() } }); e("#divslider").unbind("click").on("click", function (t) { var n = e(this).parent(".ui-tabs-panel"); sliderClick("divBasic"); sliderClick("moreFilter") }); contentwidth = e(window).width() - 85; e("#a_help").unbind("click").bind("click", function () { getHelp() }); if (e.browser.msie) { alert("برای مشاهده بهتر از " + "\n Browser Chrome " + " یا " + " FireFox \n" + "استفاده کنید" + ".") } }); $(document).on("propertychange keyup input paste", "input.data_field", function () { var e = $(this).val().length ? 1 : 0; $(this).nextAll(".icon_clear").first().stop().fadeTo(100, e) }).on("click", ".icon_clear", function () { $(this).delay(300).fadeTo(100, 0).prevAll(".data_field").first().val("") }); $(document).on("error", function () { translate("error") }); $(document).ajaxStart(function () { $("#spinner").toggleClass("invisible").toggle(); window.clearInterval(timeout) }); $(document).ajaxStop(function () { $(".keyboardInput").each(function () { VKI_attach(this) }); timeout = setInterval(function () { resetApp() }, 18e4); $("#spinner").removeClass("ui-state-active").toggleClass("invisible").toggle(); SetHeight(); tableStyle(); localize(); replaceNull(); if (!$.browser.msie) { $(".digit").digits(); $("[name='balance']").digits() } $("[help='true']").tooltip({ position: { my: "center bottom-20", at: "center top", using: function (e, t) { $(this).css(e); $("<div>").addClass("arrow").addClass(t.vertical).addClass(t.horizontal).appendTo(this) } } }) }); window.onresize = function (e) { SetHeight() }; var resizeTimer; $(document).ready(function () { setvalid("Email"); setvalid("String"); setvalid("LongString"); setvalid("Digit"); setvalid("Date"); setvalid("Phone"); setvalid("Mobile"); setvalid("Combo"); setvalid("ComboBool"); setvalid("ComboDiv"); setvalid("fileInput"); setvalid("password"); setvalid("passwordConfirm"); $("#male").on({ click: function () { selectBoxCheck($(this)) } }); $("#female").on({ click: function () { selectBoxCheck($(this)) } }); $("#txt_phone").on({ click: function () { selectBoxCheck($(this)) } }); $("#txt_mobile").on({ click: function () { selectBoxCheck($(this)) } }) })